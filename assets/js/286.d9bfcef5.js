(window.webpackJsonp=window.webpackJsonp||[]).push([[286],{269:function(n,e,a){n.exports=a.p+"assets/img/spring-framework-ioc-source-8.921ab9da.png"},3647:function(n,e,a){"use strict";a.r(e);var s=a(7),t=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"spring进阶-spring-ioc实现原理详解之ioc初始化流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring进阶-spring-ioc实现原理详解之ioc初始化流程"}},[n._v("#")]),n._v(" Spring进阶- Spring IOC实现原理详解之IOC初始化流程")]),n._v(" "),e("p",[n._v("============================================================================")]),n._v(" "),e("blockquote",[e("p",[n._v("上文，我们看了IOC设计要点和设计结构；紧接着这篇，我们可以看下源码的实现了：Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的。@pdai")])]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#spring%E8%BF%9B%E9%98%B6--spring-ioc%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E4%B9%8Bioc%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B"}},[n._v("Spring进阶- Spring IOC实现原理详解之IOC初始化流程")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%BC%95%E5%85%A5"}},[n._v("引入")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E5%B0%86bean%E4%BB%8Exml%E9%85%8D%E7%BD%AE%E4%B8%AD%E8%A7%A3%E6%9E%90%E5%90%8E%E6%94%BE%E5%88%B0ioc%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84"}},[n._v("如何将Bean从XML配置中解析后放到IoC容器中的？")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%85%A5%E5%8F%A3"}},[n._v("初始化的入口")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E8%AE%BE%E7%BD%AE%E8%B5%84%E6%BA%90%E8%A7%A3%E6%9E%90%E5%99%A8%E5%92%8C%E7%8E%AF%E5%A2%83"}},[n._v("设置资源解析器和环境")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E8%B7%AF%E5%BE%84"}},[n._v("设置配置路径")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E4%B8%BB%E4%BD%93%E6%B5%81%E7%A8%8B"}},[n._v("初始化的主体流程")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96beanfactory%E4%B9%8Bobtainfreshbeanfactory"}},[n._v("初始化BeanFactory之obtainFreshBeanFactory")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96beanfactory%E4%B9%8Bloadbeandefinitions"}},[n._v("初始化BeanFactory之loadBeanDefinitions")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#abstractbeandefinitionreader%E8%AF%BB%E5%8F%96bean%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90"}},[n._v("AbstractBeanDefinitionReader读取Bean定义资源")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#xmlbeandefinitionreader%E5%8A%A0%E8%BD%BDbean%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90"}},[n._v("XmlBeanDefinitionReader加载Bean定义资源")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#documentloader%E5%B0%86bean%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E8%BD%AC%E6%8D%A2%E4%B8%BAdocument%E5%AF%B9%E8%B1%A1"}},[n._v("DocumentLoader将Bean定义资源转换为Document对象")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#xmlbeandefinitionreader%E8%A7%A3%E6%9E%90%E8%BD%BD%E5%85%A5%E7%9A%84bean%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6"}},[n._v("XmlBeanDefinitionReader解析载入的Bean定义资源文件")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#defaultbeandefinitiondocumentreader%E5%AF%B9bean%E5%AE%9A%E4%B9%89%E7%9A%84document%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%90"}},[n._v("DefaultBeanDefinitionDocumentReader对Bean定义的Document对象解析")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#beandefinitionparserdelegate%E8%A7%A3%E6%9E%90bean%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90beandefinition"}},[n._v("BeanDefinitionParserDelegate解析Bean定义资源文件生成BeanDefinition")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A7%A3%E6%9E%90%E8%BF%87%E5%90%8E%E7%9A%84beandefinition%E5%9C%A8ioc%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B3%A8%E5%86%8C"}},[n._v("解析过后的BeanDefinition在IoC容器中的注册")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#defaultlistablebeanfactory%E5%90%91ioc%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E8%A7%A3%E6%9E%90%E5%90%8E%E7%9A%84beandefinition"}},[n._v("DefaultListableBeanFactory向IoC容器注册解析后的BeanDefinition")])])])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[n._v("总结")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[n._v("参考文章")])])])])]),n._v(" "),e("h1",{attrs:{id:"引入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[n._v("#")]),n._v(" 引入")]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("上文，我们看了IOC设计要点和设计结构；\b紧接着这篇，我们可以看下源码的实现了：Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的（就是我们圈出来的部分）")]),n._v(" "),e("p",[e("img",{attrs:{src:a(968),alt:""}})]),n._v(" "),e("h1",{attrs:{id:"如何将bean从xml配置中解析后放到ioc容器中的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何将bean从xml配置中解析后放到ioc容器中的"}},[n._v("#")]),n._v(" 如何将Bean从XML配置中解析后放到IoC容器中的？")]),n._v(" "),e("hr"),n._v(" "),e("blockquote",[e("p",[n._v("本文的目标就是分析Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的。")])]),n._v(" "),e("h3",{attrs:{id:"初始化的入口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化的入口"}},[n._v("#")]),n._v(" 初始化的入口")]),n._v(" "),e("p",[n._v("对于xml配置的Spring应用，在main()方法中实例化ClasspathXmlApplicationContext即可创建一个IoC容器。我们可以从这个构造方法开始，探究一下IoC容器的初始化过程。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v(' // create and configure beans\nApplicationContext context = new ClassPathXmlApplicationContext("aspects.xml", "daos.xml", "services.xml");\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public ClassPathXmlApplicationContext(String... configLocations) throws BeansException {\n    this(configLocations, true, (ApplicationContext)null);\n}\n\npublic ClassPathXmlApplicationContext(String[] configLocations, boolean refresh, @Nullable ApplicationContext parent) throws BeansException {\n    // 设置Bean资源加载器\n    super(parent);\n\n    // 设置配置路径\n    this.setConfigLocations(configLocations);\n\n    // 初始化容器\n    if (refresh) {\n        this.refresh();\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("h3",{attrs:{id:"设置资源解析器和环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置资源解析器和环境"}},[n._v("#")]),n._v(" 设置资源解析器和环境")]),n._v(" "),e("p",[n._v("调用父类容器AbstractApplicationContext的构造方法("),e("code",[n._v("super(parent)")]),n._v("方法)为容器设置好Bean资源加载器")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public AbstractApplicationContext(@Nullable ApplicationContext parent) {\n    // 默认构造函数初始化容器id, name, 状态 以及 资源解析器\n    this();\n\n    // 将父容器的Environment合并到当前容器\n    this.setParent(parent);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("通过AbstractApplicationContext默认构造函数初始化容器id, name, 状态 以及 资源解析器")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public AbstractApplicationContext() {\n    this.logger = LogFactory.getLog(this.getClass());\n    this.id = ObjectUtils.identityToString(this);\n    this.displayName = ObjectUtils.identityToString(this);\n    this.beanFactoryPostProcessors = new ArrayList();\n    this.active = new AtomicBoolean();\n    this.closed = new AtomicBoolean();\n    this.startupShutdownMonitor = new Object();\n    this.applicationStartup = ApplicationStartup.DEFAULT;\n    this.applicationListeners = new LinkedHashSet();\n    this.resourcePatternResolver = this.getResourcePatternResolver();\n}\n// Spring资源加载器\nprotected ResourcePatternResolver getResourcePatternResolver() {\n    return new PathMatchingResourcePatternResolver(this);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("通过AbstractApplicationContext的"),e("code",[n._v("setParent(parent)")]),n._v("方法将父容器的Environment合并到当前容器")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public void setParent(@Nullable ApplicationContext parent) {\n    this.parent = parent;\n    if (parent != null) {\n        Environment parentEnvironment = parent.getEnvironment();\n        if (parentEnvironment instanceof ConfigurableEnvironment) {\n            this.getEnvironment().merge((ConfigurableEnvironment)parentEnvironment);\n        }\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("h3",{attrs:{id:"设置配置路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置配置路径"}},[n._v("#")]),n._v(" 设置配置路径")]),n._v(" "),e("p",[n._v("在设置容器的资源加载器之后，接下来FileSystemXmlApplicationContet执行setConfigLocations方法通过调用其父类AbstractRefreshableConfigApplicationContext的方法进行对Bean定义资源文件的定位")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public void setConfigLocations(@Nullable String... locations) {\n    if (locations != null) {\n        Assert.noNullElements(locations, "Config locations must not be null");\n        this.configLocations = new String[locations.length];\n\n        for(int i = 0; i < locations.length; ++i) {\n            // 解析配置路径\n            this.configLocations[i] = this.resolvePath(locations[i]).trim();\n        }\n    } else {\n        this.configLocations = null;\n    }\n}\nprotected String resolvePath(String path) {\n    // 从上一步Environment中解析\n    return this.getEnvironment().resolveRequiredPlaceholders(path);\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("h3",{attrs:{id:"初始化的主体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化的主体流程"}},[n._v("#")]),n._v(" 初始化的主体流程")]),n._v(" "),e("p",[n._v("Spring IoC容器对Bean定义资源的载入是从refresh()函数开始的，refresh()是一个模板方法，refresh()方法的作用是：在创建IoC容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在refresh之后使用的是新建立起来的IoC容器。refresh的作用类似于对IoC容器的重启，在新建立好的容器中对容器进行初始化，对Bean定义资源进行载入。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('    @Override\n\tpublic void  refresh() throws BeansException, IllegalStateException {\n\t\tsynchronized (this.startupShutdownMonitor) {\n\t\t\tStartupStep contextRefresh = this.applicationStartup.start("spring.context.refresh");\n\n\t\t\t// Prepare this context for refreshing.\n\t\t\t// 1、准备此上下文以进行刷新\n\t\t\tprepareRefresh();\n\n\t\t\t// Tell the subclass to refresh the internal bean factory.\n\t\t\t//2、告诉子类刷新内部 bean 工厂。 beanfactory 第一次创建\n\t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n\t\t\t//Prepare the bean factory for use in this context.\n\t\t\t//3、准备 bean 工厂以在此上下文中使用。\n\t\t\tprepareBeanFactory(beanFactory);\n\n\t\t\ttry {\n\t\t\t\t// Allows post-processing of the bean factory in context subclasses.\n\t\t\t\t// 4、允许在上下文子类中对 bean 工厂进行后处理\n\t\t\t\tpostProcessBeanFactory(beanFactory);\n\n\t\t\t\tStartupStep beanPostProcess = this.applicationStartup.start("spring.context.beans.post-process");\n\t\t\t\t// Invoke factory processors registered as beans in the context.\n\t\t\t\t// 5、调用在上下文中注册为 bean 的工厂处理器\n\t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);\n\n\t\t\t\t// Register bean processors that intercept bean creation.\n\t\t\t\t// 6、注册拦截 bean 创建的 bean 处理器\n\t\t\t\tregisterBeanPostProcessors(beanFactory);\n\t\t\t\tbeanPostProcess.end();\n\n\t\t\t\t// Initialize message source for this context.\n\t\t\t\t// 7、初始化此上下文的消息源\n\t\t\t\tinitMessageSource();\n\n\t\t\t\t// Initialize event multicaster for this context.\n\t\t\t\t// 8、为此上下文初始化事件多播器\n\t\t\t\tinitApplicationEventMulticaster();\n\n\t\t\t\t// Initialize other special beans in specific context subclasses.\n\t\t\t\t// 9、初始化特定上下文子类中的其他特殊bean\n\t\t\t\tonRefresh();\n\n\t\t\t\t// Check for listener beans and register them.\n\t\t\t\t// 10、检查侦听器 bean 并注册它们\n\t\t\t\tregisterListeners();\n\n\t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.实例化所有剩余的（非惰性初始化）单例\n\t\t\t\t// 11、实例化所有剩余的（非惰性初始化）单例\n\t\t\t\tfinishBeanFactoryInitialization(beanFactory);\n\n\t\t\t\t// Last step: publish corresponding event.\n\t\t\t\t// 12、最后一步：发布对应事件\n\t\t\t\tfinishRefresh();\n\t\t\t}\n\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tif (logger.isWarnEnabled()) {\n\t\t\t\t\tlogger.warn("Exception encountered during context initialization - " +\n\t\t\t\t\t\t\t"cancelling refresh attempt: " + ex);\n\t\t\t\t}\n\n\t\t\t\t// Destroy already created singletons to avoid dangling resources.\n\t\t\t\tdestroyBeans();\n\n\t\t\t\t// Reset \'active\' flag.\n\t\t\t\tcancelRefresh(ex);\n\n\t\t\t\t// Propagate exception to caller.\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\tfinally {\n\t\t\t\t// Reset common introspection caches in Spring\'s core, since we\n\t\t\t\t// might not ever need metadata for singleton beans anymore...\n\t\t\t\tresetCommonCaches();\n\t\t\t\tcontextRefresh.end();\n\t\t\t}\n\t\t}\n\t}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br")])]),e("p",[n._v("这里的设计上是一个非常典型的资源类加载处理型的思路，头脑中需要形成如下图的"),e("strong",[n._v("顶层思路")]),n._v("（而不是只停留在流水式的方法上面）：")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("模板方法设计模式")]),n._v("，模板方法中使用典型的"),e("strong",[n._v("钩子方法")])]),n._v(" "),e("li",[n._v("将"),e("strong",[n._v("具体的初始化加载方法")]),n._v("插入到钩子方法之间")]),n._v(" "),e("li",[n._v("将初始化的阶段封装，用来记录当前初始化到什么阶段；常见的设计是xxxPhase/xxxStage；")]),n._v(" "),e("li",[n._v("资源加载初始化有失败等处理，必然是"),e("strong",[n._v("try/catch/finally")]),n._v("...")])]),n._v(" "),e("p",[e("img",{attrs:{src:a(269),alt:""}})]),n._v(" "),e("h4",{attrs:{id:"初始化beanfactory之obtainfreshbeanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化beanfactory之obtainfreshbeanfactory"}},[n._v("#")]),n._v(" 初始化BeanFactory之obtainFreshBeanFactory")]),n._v(" "),e("p",[n._v("AbstractApplicationContext的obtainFreshBeanFactory()方法调用子类容器的refreshBeanFactory()方法，启动容器载入Bean定义资源文件的过程，代码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n    // 这里使用了委派设计模式，父类定义了抽象的refreshBeanFactory()方法，具体实现调用子类容器的refreshBeanFactory()方法\n    refreshBeanFactory();\n    return getBeanFactory();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("AbstractApplicationContext类中只抽象定义了refreshBeanFactory()方法，容器真正调用的是其子类AbstractRefreshableApplicationContext实现的refreshBeanFactory()方法; 在创建IoC容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在refresh之后使用的是新建立起来的IoC容器。方法的源码如下：")]),n._v(" "),e("p",[n._v("为什么 refreshBeanFactory() 方法 ，容器真正调用的是其子类AbstractRefreshableApplicationContext实现的refreshBeanFactory()方法？")]),n._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[n._v("因为下面这行代码"),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ApplicationContext")]),n._v(" context "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ClassPathXmlApplicationContext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"aspects.xml"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"daos.xml"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"services.xml"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ClassPathXmlApplicationContext")]),n._v(" 继承了 "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("AbstractRefreshableApplicationContext")]),n._v("  类\n而 "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("AbstractRefreshableApplicationContext")]),n._v("  又继承了 "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("AbstractXmlApplicationContext")]),n._v(" 类，\n所以abstractXmlApplicationContext 对象执行了"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("refreshBeanFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" 方法\n容器真正调用的是其子类"),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("AbstractRefreshableApplicationContext")]),n._v("实现的"),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("refreshBeanFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("方法\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('protected final void refreshBeanFactory() throws BeansException {\n    // 如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在refresh之后使用的是新建立起来的IoC容器\n    if (hasBeanFactory()) {\n        destroyBeans();\n        closeBeanFactory();\n    }\n    try {\n        // 创建DefaultListableBeanFactory，并调用loadBeanDefinitions(beanFactory)装载bean定义\n        DefaultListableBeanFactory beanFactory = createBeanFactory();\n        beanFactory.setSerializationId(getId());\n        customizeBeanFactory(beanFactory); // 对IoC容器进行定制化，如设置启动参数，开启注解的自动装配等 \n        loadBeanDefinitions(beanFactory); // 调用载入Bean定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions方法，具体的实现调用子类容器  \n        this.beanFactory = beanFactory;\n    }\n    catch (IOException ex) {\n        throw new ApplicationContextException("I/O error parsing bean definition source for " + getDisplayName(), ex);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br")])]),e("h4",{attrs:{id:"初始化beanfactory之loadbeandefinitions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化beanfactory之loadbeandefinitions"}},[n._v("#")]),n._v(" 初始化BeanFactory之loadBeanDefinitions")]),n._v(" "),e("p",[n._v("AbstractRefreshableApplicationContext中只定义了抽象的loadBeanDefinitions方法，容器真正调用的是其子类AbstractXmlApplicationContext对该方法的实现，AbstractXmlApplicationContext的主要源码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {\n    // 创建XmlBeanDefinitionReader，即创建Bean读取器，并通过回调设置到容器中去，容器使用该读取器读取Bean定义资源  \n    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);\n\n    // 配置上下文的环境，资源加载器、解析器\n    beanDefinitionReader.setEnvironment(this.getEnvironment());\n    beanDefinitionReader.setResourceLoader(this);\n    beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this)); // 为Bean读取器设置SAX xml解析器\n\n    // 允许子类自行初始化（比如校验机制），并提供真正的加载方法\n    initBeanDefinitionReader(beanDefinitionReader); // 当Bean读取器读取Bean定义的Xml资源文件时，启用Xml的校验机制  \n    loadBeanDefinitions(beanDefinitionReader);\n}\n\nprotected void loadBeanDefinitions(XmlBeanDefinitionReader reader) throws BeansException, IOException {\n    // 加载XML配置方式里的Bean定义的资源\n    Resource[] configResources = getConfigResources();\n    if (configResources != null) {\n        reader.loadBeanDefinitions(configResources);\n    }\n    // 加载构造函数里配置的Bean配置文件，即{"aspects.xml", "daos.xml", "services.xml"}\n    String[] configLocations = getConfigLocations();\n    if (configLocations != null) {\n        reader.loadBeanDefinitions(configLocations);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br")])]),e("p",[n._v("Xml Bean读取器(XmlBeanDefinitionReader)调用其父类AbstractBeanDefinitionReader的 reader.loadBeanDefinitions方法读取Bean定义资源。")]),n._v(" "),e("p",[n._v("由于我们使用ClassPathXmlApplicationContext作为例子分析，因此getConfigResources的返回值为null，因此程序执行reader.loadBeanDefinitions(configLocations)分支。")]),n._v(" "),e("h4",{attrs:{id:"abstractbeandefinitionreader读取bean定义资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#abstractbeandefinitionreader读取bean定义资源"}},[n._v("#")]),n._v(" AbstractBeanDefinitionReader读取Bean定义资源")]),n._v(" "),e("p",[n._v("AbstractBeanDefinitionReader的loadBeanDefinitions方法源码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Override\npublic int loadBeanDefinitions(String location) throws BeanDefinitionStoreException {\n    return loadBeanDefinitions(location, null);\n}\n\npublic int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {\n    ResourceLoader resourceLoader = getResourceLoader();\n    if (resourceLoader == null) {\n        throw new BeanDefinitionStoreException(\n                "Cannot load bean definitions from location [" + location + "]: no ResourceLoader available");\n    }\n\n    // 模式匹配类型的解析器，这种方式是加载多个满足匹配条件的资源\n    if (resourceLoader instanceof ResourcePatternResolver) {\n        try {\n            // 获取到要加载的资源\n            Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);\n            int count = loadBeanDefinitions(resources); // 委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能  \n            if (actualResources != null) {\n                Collections.addAll(actualResources, resources);\n            }\n            if (logger.isTraceEnabled()) {\n                logger.trace("Loaded " + count + " bean definitions from location pattern [" + location + "]");\n            }\n            return count;\n        }\n        catch (IOException ex) {\n            throw new BeanDefinitionStoreException(\n                    "Could not resolve bean definition resource pattern [" + location + "]", ex);\n        }\n    }\n    else {\n        // 只能通过绝对路径URL加载单个资源.\n        Resource resource = resourceLoader.getResource(location);\n        int count = loadBeanDefinitions(resource);\n        if (actualResources != null) {\n            actualResources.add(resource);\n        }\n        if (logger.isTraceEnabled()) {\n            logger.trace("Loaded " + count + " bean definitions from location [" + location + "]");\n        }\n        return count;\n    }\n}\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br")])]),e("p",[n._v("从对AbstractBeanDefinitionReader的loadBeanDefinitions方法源码分析可以看出该方法做了以下两件事：")]),n._v(" "),e("ul",[e("li",[n._v("首先，调用资源加载器的获取资源方法resourceLoader.getResource(location)，获取到要加载的资源。")]),n._v(" "),e("li",[n._v("其次，真正执行加载功能是其子类XmlBeanDefinitionReader的loadBeanDefinitions方法。")])]),n._v(" "),e("h4",{attrs:{id:"xmlbeandefinitionreader加载bean定义资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xmlbeandefinitionreader加载bean定义资源"}},[n._v("#")]),n._v(" XmlBeanDefinitionReader加载Bean定义资源")]),n._v(" "),e("p",[n._v("继续看子类XmlBeanDefinitionReader的loadBeanDefinitions(Resource …)方法看到代表bean文件的资源定义以后的载入过程。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n    * 本质上是加载XML配置的Bean。\n    * @param inputSource the SAX InputSource to read from\n    * @param resource the resource descriptor for the XML file\n    */\nprotected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)\n        throws BeanDefinitionStoreException {\n\n    try {\n        Document doc = doLoadDocument(inputSource, resource); // 将Bean定义资源转换成Document对象\n        int count = registerBeanDefinitions(doc, resource);\n        if (logger.isDebugEnabled()) {\n            logger.debug("Loaded " + count + " bean definitions from " + resource);\n        }\n        return count;\n    }\n    catch (BeanDefinitionStoreException ex) {\n        throw ex;\n    }\n    catch (SAXParseException ex) {\n        throw new XmlBeanDefinitionStoreException(resource.getDescription(),\n                "Line " + ex.getLineNumber() + " in XML document from " + resource + " is invalid", ex);\n    }\n    catch (SAXException ex) {\n        throw new XmlBeanDefinitionStoreException(resource.getDescription(),\n                "XML document from " + resource + " is invalid", ex);\n    }\n    catch (ParserConfigurationException ex) {\n        throw new BeanDefinitionStoreException(resource.getDescription(),\n                "Parser configuration exception parsing XML from " + resource, ex);\n    }\n    catch (IOException ex) {\n        throw new BeanDefinitionStoreException(resource.getDescription(),\n                "IOException parsing XML document from " + resource, ex);\n    }\n    catch (Throwable ex) {\n        throw new BeanDefinitionStoreException(resource.getDescription(),\n                "Unexpected exception parsing XML document from " + resource, ex);\n    }\n}\n\n// 使用配置的DocumentLoader加载XML定义文件为Document.\nprotected Document doLoadDocument(InputSource inputSource, Resource resource) throws Exception {\n    return this.documentLoader.loadDocument(inputSource, getEntityResolver(), this.errorHandler,\n            getValidationModeForResource(resource), isNamespaceAware());\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br")])]),e("p",[n._v("通过源码分析，载入Bean定义资源文件的最后一步是将Bean定义资源转换为Document对象，该过程由documentLoader实现")]),n._v(" "),e("h4",{attrs:{id:"documentloader将bean定义资源转换为document对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#documentloader将bean定义资源转换为document对象"}},[n._v("#")]),n._v(" DocumentLoader将Bean定义资源转换为Document对象")]),n._v(" "),e("p",[n._v("DocumentLoader将Bean定义资源转换成Document对象的源码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 使用标准的JAXP将载入的Bean定义资源转换成document对象\n@Override\npublic Document loadDocument(InputSource inputSource, EntityResolver entityResolver,\n        ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception {\n\n    // 创建文件解析器工厂\n    DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);\n    if (logger.isTraceEnabled()) {\n        logger.trace("Using JAXP provider [" + factory.getClass().getName() + "]");\n    }\n    // 创建文档解析器\n    DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);\n    return builder.parse(inputSource); // 解析\n}\n\nprotected DocumentBuilderFactory createDocumentBuilderFactory(int validationMode, boolean namespaceAware)\n        throws ParserConfigurationException {\n\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(namespaceAware);\n\n    // 设置解析XML的校验\n    if (validationMode != XmlValidationModeDetector.VALIDATION_NONE) {\n        factory.setValidating(true);\n        if (validationMode == XmlValidationModeDetector.VALIDATION_XSD) {\n            // Enforce namespace aware for XSD...\n            factory.setNamespaceAware(true);\n            try {\n                factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);\n            }\n            catch (IllegalArgumentException ex) {\n                ParserConfigurationException pcex = new ParserConfigurationException(\n                        "Unable to validate using XSD: Your JAXP provider [" + factory +\n                        "] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? " +\n                        "Upgrade to Apache Xerces (or Java 1.5) for full XSD support.");\n                pcex.initCause(ex);\n                throw pcex;\n            }\n        }\n    }\n\n    return factory;\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br")])]),e("p",[n._v("该解析过程调用JavaEE标准的JAXP标准进行处理。")]),n._v(" "),e("p",[n._v("至此Spring IoC容器根据定位的Bean定义资源文件，将其加载读入并转换成为Document对象过程完成。")]),n._v(" "),e("p",[n._v("接下来我们要继续分析Spring IoC容器将载入的Bean定义资源文件转换为Document对象之后，是如何将其解析为Spring IoC管理的Bean对象并将其注册到容器中的。")]),n._v(" "),e("h4",{attrs:{id:"xmlbeandefinitionreader解析载入的bean定义资源文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xmlbeandefinitionreader解析载入的bean定义资源文件"}},[n._v("#")]),n._v(" XmlBeanDefinitionReader解析载入的Bean定义资源文件")]),n._v(" "),e("p",[n._v("XmlBeanDefinitionReader类中的doLoadBeanDefinitions方法是从特定XML文件中实际载入Bean定义资源的方法，该方法在载入Bean定义资源之后将其转换为Document对象，接下来调用registerBeanDefinitions启动Spring IoC容器对Bean定义的解析过程，registerBeanDefinitions方法源码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 按照Spring的Bean语义要求将Bean定义资源解析并转换为容器内部数据结构 \npublic int registerBeanDefinitions(Document doc, Resource resource) throws BeanDefinitionStoreException {\n    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();\n    int countBefore = getRegistry().getBeanDefinitionCount();\n    // 解析过程入口，这里使用了委派模式，具体的解析实现过程有实现类DefaultBeanDefinitionDocumentReader完成  \n    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));\n    return getRegistry().getBeanDefinitionCount() - countBefore;  // 返回此次解析了多少个对象\n}\n\n// 创建BeanDefinitionDocumentReader对象，解析Document对象  \nprotected BeanDefinitionDocumentReader createBeanDefinitionDocumentReader() {\n    return BeanUtils.instantiateClass(this.documentReaderClass);\n}\n\n/**\n    * Create the {@link XmlReaderContext} to pass over to the document reader.\n    */\npublic XmlReaderContext createReaderContext(Resource resource) {\n    return new XmlReaderContext(resource, this.problemReporter, this.eventListener,\n            this.sourceExtractor, this, getNamespaceHandlerResolver());\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br")])]),e("p",[n._v("Bean定义资源的载入解析分为以下两个过程：")]),n._v(" "),e("ul",[e("li",[n._v("首先，通过调用XML解析器将Bean定义资源文件转换得到Document对象，但是这些Document对象并没有按照Spring的Bean规则进行解析。这一步是载入的过程")]),n._v(" "),e("li",[n._v("其次，在完成通用的XML解析之后，按照Spring的Bean规则对Document对象进行解析。")])]),n._v(" "),e("p",[n._v("按照Spring的Bean规则对Document对象解析的过程是在接口BeanDefinitionDocumentReader的实现类DefaultBeanDefinitionDocumentReader中实现的。")]),n._v(" "),e("h4",{attrs:{id:"defaultbeandefinitiondocumentreader对bean定义的document对象解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defaultbeandefinitiondocumentreader对bean定义的document对象解析"}},[n._v("#")]),n._v(" DefaultBeanDefinitionDocumentReader对Bean定义的Document对象解析")]),n._v(" "),e("p",[n._v("BeanDefinitionDocumentReader接口通过registerBeanDefinitions方法调用其实现类DefaultBeanDefinitionDocumentReader对Document对象进行解析，解析的代码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Override\npublic void registerBeanDefinitions(Document doc, XmlReaderContext readerContext) {\n    this.readerContext = readerContext;\n    doRegisterBeanDefinitions(doc.getDocumentElement());\n}\n\n// 注册<beans/>配置的Beans\n@SuppressWarnings("deprecation")  // for Environment.acceptsProfiles(String...)\nprotected void doRegisterBeanDefinitions(Element root) {\n    // Any nested <beans> elements will cause recursion in this method. In\n    // order to propagate and preserve <beans> default-* attributes correctly,\n    // keep track of the current (parent) delegate, which may be null. Create\n    // the new (child) delegate with a reference to the parent for fallback purposes,\n    // then ultimately reset this.delegate back to its original (parent) reference.\n    // this behavior emulates a stack of delegates without actually necessitating one.\n    BeanDefinitionParserDelegate parent = this.delegate;\n    this.delegate = createDelegate(getReaderContext(), root, parent);\n\n    if (this.delegate.isDefaultNamespace(root)) {\n        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);\n        if (StringUtils.hasText(profileSpec)) {\n            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(\n                    profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);\n            // We cannot use Profiles.of(...) since profile expressions are not supported\n            // in XML config. See SPR-12458 for details.\n            if (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug("Skipped XML bean definition file due to specified profiles [" + profileSpec +\n                            "] not matching: " + getReaderContext().getResource());\n                }\n                return;\n            }\n        }\n    }\n\n    preProcessXml(root);\n    parseBeanDefinitions(root, this.delegate); // 从Document的根元素开始进行Bean定义的Document对象  \n    postProcessXml(root);\n\n    this.delegate = parent;\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br")])]),e("h4",{attrs:{id:"beandefinitionparserdelegate解析bean定义资源文件生成beandefinition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#beandefinitionparserdelegate解析bean定义资源文件生成beandefinition"}},[n._v("#")]),n._v(" BeanDefinitionParserDelegate解析Bean定义资源文件生成BeanDefinition")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n    * Parse the elements at the root level in the document:\n    * "import", "alias", "bean".\n    * @param root the DOM root element of the document\n    */\nprotected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n    if (delegate.isDefaultNamespace(root)) {\n        NodeList nl = root.getChildNodes();\n        for (int i = 0; i < nl.getLength(); i++) {\n            Node node = nl.item(i);\n            if (node instanceof Element) {\n                Element ele = (Element) node;\n                if (delegate.isDefaultNamespace(ele)) {\n                    parseDefaultElement(ele, delegate);\n                }\n                else {\n                    delegate.parseCustomElement(ele);\n                }\n            }\n        }\n    }\n    else {\n        delegate.parseCustomElement(root);\n    }\n}\n\nprivate void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {\n      \n    // 如果元素节点是<Import>导入元素，进行导入解析\n    if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {\n        importBeanDefinitionResource(ele);\n    }\n    // 如果元素节点是<Alias>别名元素，进行别名解析 \n    else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {\n        processAliasRegistration(ele);\n    }\n    // 如果元素节点<Bean>元素, 按照Spring的Bean规则解析元素  \n    else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {\n        processBeanDefinition(ele, delegate);\n    }\n    // 如果元素节点<Beans>元素，即它是嵌套类型的\n    else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {\n        // 递归解析\n        doRegisterBeanDefinitions(ele);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br")])]),e("p",[n._v("解析Bean生成BeanDefinitionHolder的方法")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n    * Process the given bean element, parsing the bean definition\n    * and registering it with the registry.\n    */\nprotected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) {\n    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);\n    if (bdHolder != null) {\n        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);\n        try {\n            // 注册最终的装饰实例\n            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());\n        }\n        catch (BeanDefinitionStoreException ex) {\n            getReaderContext().error("Failed to register bean definition with name \'" +\n                    bdHolder.getBeanName() + "\'", ele, ex);\n        }\n        // Send registration event.\n        getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br")])]),e("p",[n._v("（这里就不展开了，无非就是解析XML各种元素，来生成BeanDefinition）")]),n._v(" "),e("h4",{attrs:{id:"解析过后的beandefinition在ioc容器中的注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析过后的beandefinition在ioc容器中的注册"}},[n._v("#")]),n._v(" 解析过后的BeanDefinition在IoC容器中的注册")]),n._v(" "),e("p",[n._v("Document对象的解析后得到封装BeanDefinition的BeanDefinitionHold对象，然后调用BeanDefinitionReaderUtils的registerBeanDefinition方法向IoC容器注册解析的Bean，BeanDefinitionReaderUtils的注册的源码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 通过BeanDefinitionRegistry将BeanDefinitionHolder注册到BeanFactory\npublic static void registerBeanDefinition(\n        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)\n        throws BeanDefinitionStoreException {\n\n    // Register bean definition under primary name.\n    String beanName = definitionHolder.getBeanName();\n    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());\n\n    // Register aliases for bean name, if any.\n    String[] aliases = definitionHolder.getAliases();\n    if (aliases != null) {\n        for (String alias : aliases) {\n            registry.registerAlias(beanName, alias);\n        }\n    }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("p",[n._v("当调用BeanDefinitionReaderUtils向IoC容器注册解析的BeanDefinition时，真正完成注册功能的是DefaultListableBeanFactory。")]),n._v(" "),e("h4",{attrs:{id:"defaultlistablebeanfactory向ioc容器注册解析后的beandefinition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defaultlistablebeanfactory向ioc容器注册解析后的beandefinition"}},[n._v("#")]),n._v(" DefaultListableBeanFactory向IoC容器注册解析后的BeanDefinition")]),n._v(" "),e("p",[n._v("IOC容器本质上就是一个beanDefinitionMap， 注册即将BeanDefinition put到map中")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/** Map of bean definition objects, keyed by bean name. */\nprivate final Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);\n\n/** Map from bean name to merged BeanDefinitionHolder. */\nprivate final Map<String, BeanDefinitionHolder> mergedBeanDefinitionHolders = new ConcurrentHashMap<>(256);\n\n\n@Override\npublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)\n        throws BeanDefinitionStoreException {\n\n    Assert.hasText(beanName, "Bean name must not be empty");\n    Assert.notNull(beanDefinition, "BeanDefinition must not be null");\n\n    if (beanDefinition instanceof AbstractBeanDefinition) {\n        try {\n            ((AbstractBeanDefinition) beanDefinition).validate();\n        }\n        catch (BeanDefinitionValidationException ex) {\n            throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,\n                    "Validation of bean definition failed", ex);\n        }\n    }\n\n    BeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);\n    // 如果已经注册\n    if (existingDefinition != null) {\n        // 检查是否可以覆盖\n        if (!isAllowBeanDefinitionOverriding()) {\n            throw new BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);\n        }\n        else if (existingDefinition.getRole() < beanDefinition.getRole()) {\n            // e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE\n            if (logger.isInfoEnabled()) {\n                logger.info("Overriding user-defined bean definition for bean \'" + beanName +\n                        "\' with a framework-generated bean definition: replacing [" +\n                        existingDefinition + "] with [" + beanDefinition + "]");\n            }\n        }\n        else if (!beanDefinition.equals(existingDefinition)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug("Overriding bean definition for bean \'" + beanName +\n                        "\' with a different definition: replacing [" + existingDefinition +\n                        "] with [" + beanDefinition + "]");\n            }\n        }\n        else {\n            if (logger.isTraceEnabled()) {\n                logger.trace("Overriding bean definition for bean \'" + beanName +\n                        "\' with an equivalent definition: replacing [" + existingDefinition +\n                        "] with [" + beanDefinition + "]");\n            }\n        }\n        // 覆盖\n        this.beanDefinitionMap.put(beanName, beanDefinition);\n    }\n    else {\n        if (hasBeanCreationStarted()) {\n            // Cannot modify startup-time collection elements anymore (for stable iteration)\n            synchronized (this.beanDefinitionMap) {\n                this.beanDefinitionMap.put(beanName, beanDefinition);\n                List<String> updatedDefinitions = new ArrayList<>(this.beanDefinitionNames.size() + 1);\n                updatedDefinitions.addAll(this.beanDefinitionNames);\n                updatedDefinitions.add(beanName);\n                this.beanDefinitionNames = updatedDefinitions;\n                removeManualSingletonName(beanName);\n            }\n        }\n        else {\n            // Still in startup registration phase\n            this.beanDefinitionMap.put(beanName, beanDefinition);\n            this.beanDefinitionNames.add(beanName);\n            removeManualSingletonName(beanName);\n        }\n        //重置所有已经注册过的BeanDefinition的缓存  \n        this.frozenBeanDefinitionNames = null;\n    }\n\n    if (existingDefinition != null || containsSingleton(beanName)) {\n        resetBeanDefinition(beanName);\n    }\n    else if (isConfigurationFrozen()) {\n        clearByTypeCache();\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br"),e("span",{staticClass:"line-number"},[n._v("82")]),e("br"),e("span",{staticClass:"line-number"},[n._v("83")]),e("br"),e("span",{staticClass:"line-number"},[n._v("84")]),e("br"),e("span",{staticClass:"line-number"},[n._v("85")]),e("br")])]),e("p",[n._v("至此，Bean定义资源文件中配置的Bean被解析过后，已经注册到IoC容器中，被容器管理起来，真正完成了IoC容器初始化所做的全部工作。现 在IoC容器中已经建立了整个Bean的配置信息，这些BeanDefinition信息已经可以使用，并且可以被检索，IoC容器的作用就是对这些注册的Bean定义信息进行处理和维护。这些的注册的Bean定义信息是IoC容器控制反转的基础，正是有了这些注册的数据，容器才可以进行依赖注入。")]),n._v(" "),e("h1",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("现在通过上面的代码，总结一下IOC容器初始化的基本步骤：")]),n._v(" "),e("p",[e("img",{attrs:{src:a(969),alt:""}})]),n._v(" "),e("ul",[e("li",[e("p",[n._v("初始化的入口在容器实现中的 refresh()调用来完成")])]),n._v(" "),e("li",[e("p",[n._v("对 bean 定义载入 IOC 容器使用的方法是 loadBeanDefinition,其中的大致过程如下：")]),n._v(" "),e("ul",[e("li",[n._v("通过 ResourceLoader 来完成资源文件位置的定位，DefaultResourceLoader 是默认的实现，同时上下文本身就给出了 ResourceLoader 的实现，可以从类路径，文件系统, URL 等方式来定为资源位置。如果是 XmlBeanFactory作为 IOC 容器，那么需要为它指定 bean 定义的资源，也就是说 bean 定义文件时通过抽象成 Resource 来被 IOC 容器处理的")]),n._v(" "),e("li",[n._v("通过 BeanDefinitionReader来完成定义信息的解析和 Bean 信息的注册, 往往使用的是XmlBeanDefinitionReader 来解析 bean 的 xml 定义文件 - 实际的处理过程是委托给 BeanDefinitionParserDelegate 来完成的，从而得到 bean 的定义信息，这些信息在 Spring 中使用 BeanDefinition 对象来表示 - 这个名字可以让我们想到loadBeanDefinition,RegisterBeanDefinition 这些相关的方法 - 他们都是为处理 BeanDefinitin 服务的")]),n._v(" "),e("li",[n._v("容器解析得到 BeanDefinition 以后，需要把它在 IOC 容器中注册，这由 IOC 实现 BeanDefinitionRegistry 接口来实现。注册过程就是在 IOC 容器内部维护的一个HashMap 来保存得到的 BeanDefinition 的过程。这个 HashMap 是 IoC 容器持有 bean 信息的场所，以后对 bean 的操作都是围绕这个HashMap 来实现的.")])])]),n._v(" "),e("li",[e("p",[n._v("然后我们就可以通过 BeanFactory 和 ApplicationContext 来享受到 Spring IOC 的服务了,在使用 IOC 容器的时候，我们注意到除了少量粘合代码，绝大多数以正确 IoC 风格编写的应用程序代码完全不用关心如何到达工厂，因为容器将把这些对象与容器管理的其他对象钩在一起。基本的策略是把工厂放到已知的地方，最好是放在对预期使用的上下文有意义的地方，以及代码将实际需要访问工厂的地方。 Spring 本身提供了对声明式载入 web 应用程序用法的应用程序上下文,并将其存储在ServletContext 中的框架实现。")])])]),n._v(" "),e("h1",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("https://blog.csdn.net/qq_36212439/article/details/82749963")]),n._v(" "),e("p",[n._v("https://juejin.cn/post/6973884466171215908")]),n._v(" "),e("p",[n._v("https://juejin.cn/post/6844903838743265294")]),n._v(" "),e("p",[n._v("https://blog.csdn.net/hjing123/article/details/104867343")]),n._v(" "),e("p",[n._v("https://www.cnblogs.com/wl20200316/p/12522993.html)")])])}),[],!1,null,null,null);e.default=t.exports},968:function(n,e,a){n.exports=a.p+"assets/img/spring-framework-ioc-source-73.da5dd721.png"},969:function(n,e,a){n.exports=a.p+"assets/img/spring-framework-ioc-source-9.89bf19ae.png"}}]);