(window.webpackJsonp=window.webpackJsonp||[]).push([[407],{3563:function(n,e,s){"use strict";s.r(e);var a=s(7),t=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"java-nio-零拷贝实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-nio-零拷贝实现"}},[n._v("#")]),n._v(" Java NIO - 零拷贝实现")]),n._v(" "),e("p",[n._v("=====================================")]),n._v(" "),e("blockquote",[e("p",[n._v("这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。@pdai")])]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#java-nio---%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0"}},[n._v("Java NIO - 零拷贝实现")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#java-nio%E9%9B%B6%E6%8B%B7%E8%B4%9D"}},[n._v("Java NIO零拷贝")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#mappedbytebuffer"}},[n._v("MappedByteBuffer")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#directbytebuffer"}},[n._v("DirectByteBuffer")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#filechannel"}},[n._v("FileChannel")])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%B6%E5%AE%83%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0"}},[n._v("其它的零拷贝实现")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D"}},[n._v("Netty零拷贝")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94"}},[n._v("RocketMQ和Kafka对比")])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[n._v("参考文章")])])])])]),n._v(" "),e("h2",{attrs:{id:"java-nio零拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-nio零拷贝"}},[n._v("#")]),n._v(" Java NIO零拷贝")]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("在 Java NIO 中的"),e("strong",[n._v("通道（Channel）"),e("strong",[n._v("就相当于操作系统的")]),n._v("内核空间")]),n._v("（kernel space）的缓冲区，而"),e("strong",[n._v("缓冲区")]),n._v("（Buffer）对应的相当于操作系统的"),e("strong",[n._v("用户空间")]),n._v("（user space）中的"),e("strong",[n._v("用户缓冲区")]),n._v("（user buffer）。")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("通道")]),n._v("（Channel）是全双工的（双向传输），它既可能是读缓冲区（read buffer），也可能是网络缓冲区（socket buffer）。")]),n._v(" "),e("li",[e("strong",[n._v("缓冲区")]),n._v("（Buffer）分为堆内存（HeapBuffer）和堆外内存（DirectBuffer），这是通过 malloc() 分配出来的用户态内存。")])]),n._v(" "),e("p",[n._v("堆外内存（DirectBuffer）在使用后需要应用程序手动回收，而堆内存（HeapBuffer）的数据在 GC 时可能会被自动回收。因此，在使用 HeapBuffer 读写数据时，为了避免缓冲区数据因为 GC 而丢失，NIO 会先把 HeapBuffer 内部的数据拷贝到一个临时的 DirectBuffer 中的本地内存（native memory），这个拷贝涉及到 "),e("code",[n._v("sun.misc.Unsafe.copyMemory()")]),n._v(" 的调用，背后的实现原理与 "),e("code",[n._v("memcpy()")]),n._v(" 类似。 最后，将临时生成的 DirectBuffer 内部的数据的内存地址传给 I/O 调用函数，这样就避免了再去访问 Java 对象处理 I/O 读写。")]),n._v(" "),e("h3",{attrs:{id:"mappedbytebuffer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mappedbytebuffer"}},[n._v("#")]),n._v(" MappedByteBuffer")]),n._v(" "),e("p",[n._v("MappedByteBuffer 是 NIO 基于**内存映射（mmap）**这种零拷贝方式的提供的一种实现，它继承自 ByteBuffer。FileChannel 定义了一个 map() 方法，它可以把一个文件从 position 位置开始的 size 大小的区域映射为内存映像文件。抽象方法 map() 方法在 FileChannel 中的定义如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract MappedByteBuffer map(MapMode mode, long position, long size)\n        throws IOException; \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("ul",[e("li",[e("strong",[n._v("mode")]),n._v("：限定内存映射区域（MappedByteBuffer）对内存映像文件的访问模式，包括只可读（READ_ONLY）、可读可写（READ_WRITE）和写时拷贝（PRIVATE）三种模式。")]),n._v(" "),e("li",[e("strong",[n._v("position")]),n._v("：文件映射的起始地址，对应内存映射区域（MappedByteBuffer）的首地址。")]),n._v(" "),e("li",[e("strong",[n._v("size")]),n._v("：文件映射的字节长度，从 position 往后的字节数，对应内存映射区域（MappedByteBuffer）的大小。")])]),n._v(" "),e("p",[n._v("MappedByteBuffer 相比 ByteBuffer 新增了 fore()、load() 和 isLoad() 三个重要的方法：")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("fore()")]),n._v("：对于处于 READ_WRITE 模式下的缓冲区，把对缓冲区内容的修改强制刷新到本地文件。")]),n._v(" "),e("li",[e("strong",[n._v("load()")]),n._v("：将缓冲区的内容载入物理内存中，并返回这个缓冲区的引用。")]),n._v(" "),e("li",[e("strong",[n._v("isLoaded()")]),n._v("：如果缓冲区的内容在物理内存中，则返回 true，否则返回 false。")])]),n._v(" "),e("p",[n._v("下面给出一个利用 MappedByteBuffer 对文件进行读写的使用示例：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('private final static String CONTENT = "Zero copy implemented by MappedByteBuffer";\nprivate final static String FILE_NAME = "/mmap.txt";\nprivate final static String CHARSET = "UTF-8"; \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("ul",[e("li",[e("strong",[n._v("写文件数据")]),n._v("：打开文件通道 fileChannel 并提供读权限、写权限和数据清空权限，通过 fileChannel 映射到一个可写的内存缓冲区 mappedByteBuffer，将目标数据写入 mappedByteBuffer，通过 "),e("code",[n._v("force()")]),n._v(" 方法把缓冲区更改的内容强制写入本地文件。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Test\npublic void writeToFileByMappedByteBuffer() {\n    Path path = Paths.get(getClass().getResource(FILE_NAME).getPath());\n    byte[] bytes = CONTENT.getBytes(Charset.forName(CHARSET));\n    try (FileChannel fileChannel = FileChannel.open(path, StandardOpenOption.READ,\n            StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)) {\n        MappedByteBuffer mappedByteBuffer = fileChannel.map(READ_WRITE, 0, bytes.length);\n        if (mappedByteBuffer != null) {\n            mappedByteBuffer.put(bytes);\n            mappedByteBuffer.force();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("ul",[e("li",[e("strong",[n._v("读文件数据")]),n._v("：打开文件通道 fileChannel 并提供只读权限，通过 fileChannel 映射到一个只可读的内存缓冲区 mappedByteBuffer，读取 mappedByteBuffer 中的字节数组即可得到文件数据。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Test\npublic void readFromFileByMappedByteBuffer() {\n    Path path = Paths.get(getClass().getResource(FILE_NAME).getPath());\n    int length = CONTENT.getBytes(Charset.forName(CHARSET)).length;\n    try (FileChannel fileChannel = FileChannel.open(path, StandardOpenOption.READ)) {\n        MappedByteBuffer mappedByteBuffer = fileChannel.map(READ_ONLY, 0, length);\n        if (mappedByteBuffer != null) {\n            byte[] bytes = new byte[length];\n            mappedByteBuffer.get(bytes);\n            String content = new String(bytes, StandardCharsets.UTF_8);\n            assertEquals(content, "Zero copy implemented by MappedByteBuffer");\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n} \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("下面介绍 "),e("code",[n._v("map()")]),n._v(" 方法的"),e("strong",[n._v("底层实现原理")]),n._v("。"),e("code",[n._v("map()")]),n._v(" 方法是 "),e("code",[n._v("java.nio.channels.FileChannel")]),n._v(" 的抽象方法，由子类 "),e("code",[n._v("sun.nio.ch.FileChannelImpl.java")]),n._v(" 实现，下面是和内存映射相关的核心代码：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n    int pagePosition = (int)(position % allocationGranularity);\n    long mapPosition = position - pagePosition;\n    long mapSize = size + pagePosition;\n    try {\n        addr = map0(imode, mapPosition, mapSize);\n    } catch (OutOfMemoryError x) {\n        System.gc();\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException y) {\n            Thread.currentThread().interrupt();\n        }\n        try {\n            addr = map0(imode, mapPosition, mapSize);\n        } catch (OutOfMemoryError y) {\n            throw new IOException("Map failed", y);\n        }\n    }\n\n    int isize = (int)size;\n    Unmapper um = new Unmapper(addr, mapSize, isize, mfd);\n    if ((!writable) || (imode == MAP_RO)) {\n        return Util.newMappedByteBufferR(isize, addr + pagePosition, mfd, um);\n    } else {\n        return Util.newMappedByteBuffer(isize, addr + pagePosition, mfd, um);\n    }\n} \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br")])]),e("p",[n._v("map() 方法通过本地方法 map0() 为文件分配一块虚拟内存，作为它的内存映射区域，然后返回这块内存映射区域的起始地址。")]),n._v(" "),e("ul",[e("li",[n._v("文件映射需要在 Java 堆中创建一个 MappedByteBuffer 的实例。如果第一次文件映射导致 OOM，则手动触发垃圾回收，休眠 100ms 后再尝试映射，如果失败则抛出异常。")]),n._v(" "),e("li",[n._v("通过 Util 的 newMappedByteBuffer （可读可写）方法或者 newMappedByteBufferR（仅读） 方法方法反射创建一个 DirectByteBuffer 实例，其中 DirectByteBuffer 是 MappedByteBuffer 的子类。")])]),n._v(" "),e("p",[e("code",[n._v("map()")]),n._v(" 方法返回的是内存映射区域的起始地址，通过（"),e("strong",[n._v("起始地址 + 偏移量")]),n._v("）就可以获取指定内存的数据。这样一定程度上替代了 "),e("code",[n._v("read()")]),n._v(" 或 "),e("code",[n._v("write()")]),n._v(" 方法，底层直接采用 "),e("code",[n._v("sun.misc.Unsafe")]),n._v("类的 "),e("code",[n._v("getByte()")]),n._v(" 和 "),e("code",[n._v("putByte()")]),n._v(" 方法对数据进行读写。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private native long map0(int prot, long position, long mapSize) throws IOException; \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("上面是本地方法（native method）map0 的定义，它通过 JNI（Java Native Interface）调用底层 C 的实现，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_map0）的实现位于 JDK 源码包下的 "),e("code",[n._v("native/sun/nio/ch/FileChannelImpl.c")]),n._v("这个源文件里面。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('JNIEXPORT jlong JNICALL\nJava_sun_nio_ch_FileChannelImpl_map0(JNIEnv *env, jobject this,\n                                     jint prot, jlong off, jlong len)\n{\n    void *mapAddress = 0;\n    jobject fdo = (*env)->GetObjectField(env, this, chan_fd);\n    jint fd = fdval(env, fdo);\n    int protections = 0;\n    int flags = 0;\n\n    if (prot == sun_nio_ch_FileChannelImpl_MAP_RO) {\n        protections = PROT_READ;\n        flags = MAP_SHARED;\n    } else if (prot == sun_nio_ch_FileChannelImpl_MAP_RW) {\n        protections = PROT_WRITE | PROT_READ;\n        flags = MAP_SHARED;\n    } else if (prot == sun_nio_ch_FileChannelImpl_MAP_PV) {\n        protections =  PROT_WRITE | PROT_READ;\n        flags = MAP_PRIVATE;\n    }\n\n    mapAddress = mmap64(\n        0,                    /* Let OS decide location */\n        len,                  /* Number of bytes to map */\n        protections,          /* File permissions */\n        flags,                /* Changes are shared */\n        fd,                   /* File descriptor of mapped file */\n        off);                 /* Offset into file */\n\n    if (mapAddress == MAP_FAILED) {\n        if (errno == ENOMEM) {\n            JNU_ThrowOutOfMemoryError(env, "Map failed");\n            return IOS_THROWN;\n        }\n        return handle(env, -1, "Map failed");\n    }\n\n    return ((jlong) (unsigned long) mapAddress);\n} \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br")])]),e("p",[n._v("可以看出 map0() 函数最终是通过 "),e("code",[n._v("mmap64()")]),n._v(" 这个函数对 Linux 底层内核发出内存映射的调用， "),e("code",[n._v("mmap64()")]),n._v(" 函数的原型如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("#include <sys/mman.h>\n\nvoid *mmap64(void *addr, size_t len, int prot, int flags, int fd, off64_t offset); \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("下面详细介绍一下 "),e("code",[n._v("mmap64()")]),n._v(" 函数各个参数的含义以及参数可选值：")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("addr")]),n._v("：文件在用户进程空间的内存映射区中的起始地址，是一个建议的参数，通常可设置为 0 或 NULL，此时由内核去决定真实的起始地址。当 + flags 为 MAP_FIXED 时，addr 就是一个必选的参数，即需要提供一个存在的地址。")]),n._v(" "),e("li",[e("code",[n._v("len")]),n._v("：文件需要进行内存映射的字节长度")]),n._v(" "),e("li",[e("code",[n._v("prot")]),n._v("：控制用户进程对内存映射区的访问权限\n"),e("ul",[e("li",[e("code",[n._v("PROT_READ")]),n._v("：读权限")]),n._v(" "),e("li",[e("code",[n._v("PROT_WRITE")]),n._v("：写权限")]),n._v(" "),e("li",[e("code",[n._v("PROT_EXEC")]),n._v("：执行权限")]),n._v(" "),e("li",[e("code",[n._v("PROT_NONE")]),n._v("：无权限")])])]),n._v(" "),e("li",[e("code",[n._v("flags")]),n._v("：控制内存映射区的修改是否被多个进程共享\n"),e("ul",[e("li",[e("code",[n._v("MAP_PRIVATE")]),n._v("：对内存映射区数据的修改不会反映到真正的文件，数据修改发生时采用写时复制机制")]),n._v(" "),e("li",[e("code",[n._v("MAP_SHARED")]),n._v("：对内存映射区的修改会同步到真正的文件，修改对共享此内存映射区的进程是可见的")]),n._v(" "),e("li",[e("code",[n._v("MAP_FIXED")]),n._v("：不建议使用，这种模式下 addr 参数指定的必须的提供一个存在的 addr 参数")])])]),n._v(" "),e("li",[e("code",[n._v("fd")]),n._v("：文件描述符。每次 map 操作会导致文件的引用计数加 1，每次 unmap 操作或者结束进程会导致引用计数减 1")]),n._v(" "),e("li",[e("code",[n._v("offset")]),n._v("：文件偏移量。进行映射的文件位置，从文件起始地址向后的位移量")])]),n._v(" "),e("p",[n._v("下面总结一下 MappedByteBuffer 的特点和不足之处：")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("MappedByteBuffer 使用是堆外的虚拟内存")]),n._v("，因此分配（map）的内存大小不受 JVM 的 -Xmx 参数限制，但是也是有大小限制的。 如果当文件超出 Integer.MAX_VALUE 字节限制时，可以通过 position 参数重新 map 文件后面的内容。")]),n._v(" "),e("li",[e("strong",[n._v("MappedByteBuffer 在处理大文件时性能的确很高，但也存内存占用、文件关闭不确定等问题")]),n._v("，被其打开的文件只有在垃圾回收的才会被关闭，而且这个时间点是不确定的。")]),n._v(" "),e("li",[n._v("MappedByteBuffer 提供了文件映射内存的 mmap() 方法，也提供了释放映射内存的 unmap() 方法。然而 unmap() 是 FileChannelImpl 中的私有方法，无法直接显示调用。因此，"),e("strong",[n._v("用户程序需要通过 Java 反射的调用 sun.misc.Cleaner 类的 clean() 方法手动释放映射占用的内存区域")]),n._v("。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public static void clean(final Object buffer) throws Exception {\n    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n        try {\n            Method getCleanerMethod = buffer.getClass().getMethod("cleaner", new Class[0]);\n            getCleanerMethod.setAccessible(true);\n            Cleaner cleaner = (Cleaner) getCleanerMethod.invoke(buffer, new Object[0]);\n            cleaner.clean();\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n    });\n} \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("h3",{attrs:{id:"directbytebuffer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#directbytebuffer"}},[n._v("#")]),n._v(" DirectByteBuffer")]),n._v(" "),e("p",[n._v("DirectByteBuffer 的对象引用位于 Java 内存模型的堆里面，JVM 可以对 DirectByteBuffer 的对象进行内存分配和回收管理，一般使用 DirectByteBuffer 的静态方法 allocateDirect() 创建 DirectByteBuffer 实例并分配内存。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public static ByteBuffer allocateDirect(int capacity) {\n    return new DirectByteBuffer(capacity);\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("DirectByteBuffer 内部的字节缓冲区位在于堆外的（用户态）直接内存，它是通过 Unsafe 的本地方法 allocateMemory() 进行内存分配，底层调用的是操作系统的 malloc() 函数。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("DirectByteBuffer(int cap) {\n    super(-1, 0, cap, cap);\n    boolean pa = VM.isDirectMemoryPageAligned();\n    int ps = Bits.pageSize();\n    long size = Math.max(1L, (long)cap + (pa ? ps : 0));\n    Bits.reserveMemory(size, cap);\n\n    long base = 0;\n    try {\n        base = unsafe.allocateMemory(size);\n    } catch (OutOfMemoryError x) {\n        Bits.unreserveMemory(size, cap);\n        throw x;\n    }\n    unsafe.setMemory(base, size, (byte) 0);\n    if (pa && (base % ps != 0)) {\n        address = base + ps - (base & (ps - 1));\n    } else {\n        address = base;\n    }\n    cleaner = Cleaner.create(this, new Deallocator(base, size, cap));\n    att = null;\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br")])]),e("p",[n._v("除此之外，初始化 DirectByteBuffer 时还会创建一个 Deallocator 线程，并通过 Cleaner 的 freeMemory() 方法来对直接内存进行回收操作，freeMemory() 底层调用的是操作系统的 free() 函数。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private static class Deallocator implements Runnable {\n    private static Unsafe unsafe = Unsafe.getUnsafe();\n\n    private long address;\n    private long size;\n    private int capacity;\n\n    private Deallocator(long address, long size, int capacity) {\n        assert (address != 0);\n        this.address = address;\n        this.size = size;\n        this.capacity = capacity;\n    }\n\n    public void run() {\n        if (address == 0) {\n            return;\n        }\n        unsafe.freeMemory(address);\n        address = 0;\n        Bits.unreserveMemory(size, capacity);\n    }\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br")])]),e("p",[n._v("由于使用 DirectByteBuffer 分配的是系统本地的内存，不在 JVM 的管控范围之内，因此直接内存的回收和堆内存的回收不同，直接内存如果使用不当，很容易造成 OutOfMemoryError。")]),n._v(" "),e("p",[n._v("说了这么多，那么 DirectByteBuffer 和零拷贝有什么关系？前面有提到在 MappedByteBuffer 进行内存映射时，它的 map() 方法会通过 Util.newMappedByteBuffer() 来创建一个缓冲区实例，初始化的代码如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('static MappedByteBuffer newMappedByteBuffer(int size, long addr, FileDescriptor fd,\n                                            Runnable unmapper) {\n    MappedByteBuffer dbb;\n    if (directByteBufferConstructor == null)\n        initDBBConstructor();\n    try {\n        dbb = (MappedByteBuffer)directByteBufferConstructor.newInstance(\n            new Object[] { new Integer(size), new Long(addr), fd, unmapper });\n    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n        throw new InternalError(e);\n    }\n    return dbb;\n}\n\nprivate static void initDBBRConstructor() {\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n        public Void run() {\n            try {\n                Class<?> cl = Class.forName("java.nio.DirectByteBufferR");\n                Constructor<?> ctor = cl.getDeclaredConstructor(\n                    new Class<?>[] { int.class, long.class, FileDescriptor.class,\n                                    Runnable.class });\n                ctor.setAccessible(true);\n                directByteBufferRConstructor = ctor;\n            } catch (ClassNotFoundException | NoSuchMethodException |\n                     IllegalArgumentException | ClassCastException x) {\n                throw new InternalError(x);\n            }\n            return null;\n        }});\n} \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br")])]),e("p",[n._v("DirectByteBuffer 是 MappedByteBuffer 的具体实现类。实际上，Util.newMappedByteBuffer() 方法通过反射机制获取 DirectByteBuffer 的构造器，然后创建一个 DirectByteBuffer 的实例，对应的是一个单独用于内存映射的构造方法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("protected DirectByteBuffer(int cap, long addr, FileDescriptor fd, Runnable unmapper) {\n    super(-1, 0, cap, cap, fd);\n    address = addr;\n    cleaner = Cleaner.create(this, unmapper);\n    att = null;\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("因此，除了允许分配操作系统的直接内存以外，DirectByteBuffer 本身也具有文件内存映射的功能，这里不做过多说明。我们需要关注的是，DirectByteBuffer 在 MappedByteBuffer 的基础上提供了内存映像文件的随机读取 get() 和写入 write() 的操作。")]),n._v(" "),e("ul",[e("li",[n._v("内存映像文件的随机读操作")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public byte get() {\n    return ((unsafe.getByte(ix(nextGetIndex()))));\n}\n\npublic byte get(int i) {\n    return ((unsafe.getByte(ix(checkIndex(i)))));\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("ul",[e("li",[n._v("内存映像文件的随机写操作")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public ByteBuffer put(byte x) {\n    unsafe.putByte(ix(nextPutIndex()), ((x)));\n    return this;\n}\n\npublic ByteBuffer put(int i, byte x) {\n    unsafe.putByte(ix(checkIndex(i)), ((x)));\n    return this;\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("内存映像文件的随机读写都是借助 ix() 方法实现定位的， ix() 方法通过内存映射空间的内存首地址（address）和给定偏移量 i 计算出指针地址，然后由 unsafe 类的 get() 和 put() 方法和对指针指向的数据进行读取或写入。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private long ix(int i) {\n    return address + ((long)i << 0);\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("h3",{attrs:{id:"filechannel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#filechannel"}},[n._v("#")]),n._v(" FileChannel")]),n._v(" "),e("p",[n._v("FileChannel 是一个用于文件读写、映射和操作的通道，同时它在并发环境下是线程安全的，基于 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 getChannel() 方法可以创建并打开一个文件通道。FileChannel 定义了 transferFrom() 和 transferTo() 两个抽象方法，它通过在通道和通道之间建立连接实现数据传输的。")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("transferTo()")]),n._v("：通过 FileChannel 把文件里面的源数据写入一个 WritableByteChannel 的目的通道。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract long transferTo(long position, long count, WritableByteChannel target)\n        throws IOException; \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("transferFrom()")]),n._v("：把一个源通道 ReadableByteChannel 中的数据读取到当前 FileChannel 的文件里面。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public abstract long transferFrom(ReadableByteChannel src, long position, long count)\n        throws IOException; \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("下面给出 FileChannel 利用 transferTo() 和 transferFrom() 方法进行数据传输的使用示例：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('private static final String CONTENT = "Zero copy implemented by FileChannel";\nprivate static final String SOURCE_FILE = "/source.txt";\nprivate static final String TARGET_FILE = "/target.txt";\nprivate static final String CHARSET = "UTF-8"; \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("首先在类加载根路径下创建 source.txt 和 target.txt 两个文件，对源文件 source.txt 文件写入初始化数据。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Before\npublic void setup() {\n    Path source = Paths.get(getClassPath(SOURCE_FILE));\n    byte[] bytes = CONTENT.getBytes(Charset.forName(CHARSET));\n    try (FileChannel fromChannel = FileChannel.open(source, StandardOpenOption.READ,\n            StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)) {\n        fromChannel.write(ByteBuffer.wrap(bytes));\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("对于 transferTo() 方法而言，目的通道 toChannel 可以是任意的单向字节写通道 WritableByteChannel；而对于 transferFrom() 方法而言，源通道 fromChannel 可以是任意的单向字节读通道 ReadableByteChannel。其中，FileChannel、SocketChannel 和 DatagramChannel 等通道实现了 WritableByteChannel 和 ReadableByteChannel 接口，都是同时支持读写的双向通道。为了方便测试，下面给出基于 FileChannel 完成 channel-to-channel 的数据传输示例。")]),n._v(" "),e("p",[n._v("通过 transferTo() 将 fromChannel 中的数据拷贝到 toChannel")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Test\npublic void transferTo() throws Exception {\n    try (FileChannel fromChannel = new RandomAccessFile(\n             getClassPath(SOURCE_FILE), "rw").getChannel();\n         FileChannel toChannel = new RandomAccessFile(\n             getClassPath(TARGET_FILE), "rw").getChannel()) {\n        long position = 0L;\n        long offset = fromChannel.size();\n        fromChannel.transferTo(position, offset, toChannel);\n    }\n} \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("通过 transferFrom() 将 fromChannel 中的数据拷贝到 toChannel")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('@Test\npublic void transferFrom() throws Exception {\n    try (FileChannel fromChannel = new RandomAccessFile(\n             getClassPath(SOURCE_FILE), "rw").getChannel();\n         FileChannel toChannel = new RandomAccessFile(\n             getClassPath(TARGET_FILE), "rw").getChannel()) {\n        long position = 0L;\n        long offset = fromChannel.size();\n        toChannel.transferFrom(fromChannel, position, offset);\n    }\n} \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("下面介绍 transferTo() 和 transferFrom() 方法的底层实现原理，这两个方法也是 java.nio.channels.FileChannel 的抽象方法，由子类 sun.nio.ch.FileChannelImpl.java 实现。transferTo() 和 transferFrom() 底层都是基于 sendfile 实现数据传输的，其中 FileChannelImpl.java 定义了 3 个常量，用于标示当前操作系统的内核是否支持 sendfile 以及 sendfile 的相关特性。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private static volatile boolean transferSupported = true;\nprivate static volatile boolean pipeSupported = true;\nprivate static volatile boolean fileSupported = true; \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("transferSupported")]),n._v("：用于标记当前的系统内核是否支持 sendfile() 调用，默认为 true。")]),n._v(" "),e("li",[e("code",[n._v("pipeSupported")]),n._v("：用于标记当前的系统内核是否支持文件描述符（fd）基于管道（pipe）的 sendfile() 调用，默认为 true。")]),n._v(" "),e("li",[e("code",[n._v("fileSupported")]),n._v("：用于标记当前的系统内核是否支持文件描述符（fd）基于文件（file）的 sendfile() 调用，默认为 true。")])]),n._v(" "),e("p",[n._v("下面以 transferTo() 的源码实现为例。FileChannelImpl 首先执行 transferToDirectly() 方法，以 sendfile 的零拷贝方式尝试数据拷贝。如果系统内核不支持 sendfile，进一步执行 transferToTrustedChannel() 方法，以 mmap 的零拷贝方式进行内存映射，这种情况下目的通道必须是 FileChannelImpl 或者 SelChImpl 类型。如果以上两步都失败了，则执行 transferToArbitraryChannel() 方法，基于传统的 I/O 方式完成读写，具体步骤是初始化一个临时的 DirectBuffer，将源通道 FileChannel 的数据读取到 DirectBuffer，再写入目的通道 WritableByteChannel 里面。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public long transferTo(long position, long count, WritableByteChannel target)\n        throws IOException {\n    // 计算文件的大小\n    long sz = size();\n    // 校验起始位置\n    if (position > sz)\n        return 0;\n    int icount = (int)Math.min(count, Integer.MAX_VALUE);\n    // 校验偏移量\n    if ((sz - position) < icount)\n        icount = (int)(sz - position);\n\n    long n;\n\n    if ((n = transferToDirectly(position, icount, target)) >= 0)\n        return n;\n\n    if ((n = transferToTrustedChannel(position, icount, target)) >= 0)\n        return n;\n\n    return transferToArbitraryChannel(position, icount, target);\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br")])]),e("p",[n._v("接下来重点分析一下 transferToDirectly() 方法的实现，也就是 transferTo() 通过 sendfile 实现零拷贝的精髓所在。可以看到，transferToDirectlyInternal() 方法先获取到目的通道 WritableByteChannel 的文件描述符 targetFD，获取同步锁然后执行 transferToDirectlyInternal() 方法。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private long transferToDirectly(long position, int icount, WritableByteChannel target)\n        throws IOException {\n    // 省略从target获取targetFD的过程\n    if (nd.transferToDirectlyNeedsPositionLock()) {\n        synchronized (positionLock) {\n            long pos = position();\n            try {\n                return transferToDirectlyInternal(position, icount,\n                        target, targetFD);\n            } finally {\n                position(pos);\n            }\n        }\n    } else {\n        return transferToDirectlyInternal(position, icount, target, targetFD);\n    }\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("p",[n._v("最终由 transferToDirectlyInternal() 调用本地方法 transferTo0() ，尝试以 sendfile 的方式进行数据传输。如果系统内核完全不支持 sendfile，比如 Windows 操作系统，则返回 UNSUPPORTED 并把 transferSupported 标识为 false。如果系统内核不支持 sendfile 的一些特性，比如说低版本的 Linux 内核不支持 DMA gather copy 操作，则返回 UNSUPPORTED_CASE 并把 pipeSupported 或者 fileSupported 标识为 false。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private long transferToDirectlyInternal(long position, int icount,\n                                        WritableByteChannel target,\n                                        FileDescriptor targetFD) throws IOException {\n    assert !nd.transferToDirectlyNeedsPositionLock() ||\n            Thread.holdsLock(positionLock);\n\n    long n = -1;\n    int ti = -1;\n    try {\n        begin();\n        ti = threads.add();\n        if (!isOpen())\n            return -1;\n        do {\n            n = transferTo0(fd, position, icount, targetFD);\n        } while ((n == IOStatus.INTERRUPTED) && isOpen());\n        if (n == IOStatus.UNSUPPORTED_CASE) {\n            if (target instanceof SinkChannelImpl)\n                pipeSupported = false;\n            if (target instanceof FileChannelImpl)\n                fileSupported = false;\n            return IOStatus.UNSUPPORTED_CASE;\n        }\n        if (n == IOStatus.UNSUPPORTED) {\n            transferSupported = false;\n            return IOStatus.UNSUPPORTED;\n        }\n        return IOStatus.normalize(n);\n    } finally {\n        threads.remove(ti);\n        end (n > -1);\n    }\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br")])]),e("p",[n._v("本地方法（native method）transferTo0() 通过 JNI（Java Native Interface）调用底层 C 的函数，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_transferTo0）同样位于 JDK 源码包下的 native/sun/nio/ch/FileChannelImpl.c 源文件里面。JNI 函数 Java_sun_nio_ch_FileChannelImpl_transferTo0() 基于条件编译对不同的系统进行预编译，下面是 JDK 基于 Linux 系统内核对 transferTo() 提供的调用封装。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("#if defined(__linux__) || defined(__solaris__)\n#include <sys/sendfile.h>\n#elif defined(_AIX)\n#include <sys/socket.h>\n#elif defined(_ALLBSD_SOURCE)\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/uio.h>\n\n#define lseek64 lseek\n#define mmap64 mmap\n#endif\n\nJNIEXPORT jlong JNICALL\nJava_sun_nio_ch_FileChannelImpl_transferTo0(JNIEnv *env, jobject this,\n                                            jobject srcFDO,\n                                            jlong position, jlong count,\n                                            jobject dstFDO)\n{\n    jint srcFD = fdval(env, srcFDO);\n    jint dstFD = fdval(env, dstFDO);\n\n#if defined(__linux__)\n    off64_t offset = (off64_t)position;\n    jlong n = sendfile64(dstFD, srcFD, &offset, (size_t)count);\n    return n;\n#elif defined(__solaris__)\n    result = sendfilev64(dstFD, &sfv, 1, &numBytes);    \n    return result;\n#elif defined(__APPLE__)\n    result = sendfile(srcFD, dstFD, position, &numBytes, NULL, 0);\n    return result;\n#endif\n} \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br")])]),e("p",[n._v("对 Linux、Solaris 以及 Apple 系统而言，transferTo0() 函数底层会执行 sendfile64 这个系统调用完成零拷贝操作，sendfile64() 函数的原型如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("#include <sys/sendfile.h>\n\nssize_t sendfile64(int out_fd, int in_fd, off_t *offset, size_t count); \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("下面简单介绍一下 sendfile64() 函数各个参数的含义：")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("out_fd")]),n._v("：待写入的文件描述符")]),n._v(" "),e("li",[e("code",[n._v("in_fd")]),n._v("：待读取的文件描述符")]),n._v(" "),e("li",[e("code",[n._v("offset")]),n._v("：指定 in_fd 对应文件流的读取位置，如果为空，则默认从起始位置开始")]),n._v(" "),e("li",[e("code",[n._v("count")]),n._v("：指定在文件描述符 in_fd 和 out_fd 之间传输的字节数")])]),n._v(" "),e("p",[n._v("在 Linux 2.6.3 之前，out_fd 必须是一个 socket，而从 Linux 2.6.3 以后，out_fd 可以是任何文件。也就是说，sendfile64() 函数不仅可以进行网络文件传输，还可以对本地文件实现零拷贝操作。")]),n._v(" "),e("h2",{attrs:{id:"其它的零拷贝实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其它的零拷贝实现"}},[n._v("#")]),n._v(" 其它的零拷贝实现")]),n._v(" "),e("hr"),n._v(" "),e("h3",{attrs:{id:"netty零拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#netty零拷贝"}},[n._v("#")]),n._v(" Netty零拷贝")]),n._v(" "),e("p",[n._v("Netty 中的零拷贝和上面提到的操作系统层面上的零拷贝不太一样, 我们所说的 Netty 零拷贝完全是基于（Java 层面）用户态的，它的更多的是偏向于数据操作优化这样的概念，具体表现在以下几个方面：")]),n._v(" "),e("p",[n._v("Netty 通过 DefaultFileRegion 类对 java.nio.channels.FileChannel 的 tranferTo() 方法进行包装，在文件传输时可以将文件缓冲区的数据直接发送到目的通道（Channel）")]),n._v(" "),e("p",[n._v("ByteBuf 可以通过 wrap 操作把字节数组、ByteBuf、ByteBuffer 包装成一个 ByteBuf 对象, 进而避免了拷贝操作 ByteBuf 支持 slice 操作, 因此可以将 ByteBuf 分解为多个共享同一个存储区域的 ByteBuf，避免了内存的拷贝 Netty 提供了 CompositeByteBuf 类，它可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免了各个 ByteBuf 之间的拷贝 其中第 1 条属于操作系统层面的零拷贝操作，后面 3 条只能算用户层面的数据操作优化。")]),n._v(" "),e("h3",{attrs:{id:"rocketmq和kafka对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq和kafka对比"}},[n._v("#")]),n._v(" RocketMQ和Kafka对比")]),n._v(" "),e("p",[n._v("RocketMQ 选择了 mmap + write 这种零拷贝方式，适用于业务级消息这种小块文件的数据持久化和传输；而 Kafka 采用的是 sendfile 这种零拷贝方式，适用于系统日志消息这种高吞吐量的大块文件的数据持久化和传输。但是值得注意的一点是，Kafka 的索引文件使用的是 mmap + write 方式，数据文件使用的是 sendfile 方式。")]),n._v(" "),e("p",[e("img",{attrs:{src:s(607),alt:""}})]),n._v(" "),e("h2",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),e("hr"),n._v(" "),e("ul",[e("li",[n._v("本文主要整理自 https://zhuanlan.zhihu.com/p/83398714")]),n._v(" "),e("li",[n._v("作者：零壹技术栈")])])])}),[],!1,null,null,null);e.default=t.exports},607:function(n,e,s){n.exports=s.p+"assets/img/java-io-copy-11.c9caa856.png"}}]);