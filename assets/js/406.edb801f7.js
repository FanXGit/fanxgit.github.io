(window.webpackJsonp=window.webpackJsonp||[]).push([[406],{3555:function(e,a,s){"use strict";s.r(a);var t=s(7),n=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"java-io-常见类使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-io-常见类使用"}},[e._v("#")]),e._v(" Java IO - 常见类使用")]),e._v(" "),a("p",[e._v("===================================")]),e._v(" "),a("blockquote",[a("p",[e._v("本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。 @pdai")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#java-io---%e5%b8%b8%e8%a7%81%e7%b1%bb%e4%bd%bf%e7%94%a8"}},[e._v("Java IO - 常见类使用")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#io%e5%b8%b8%e8%a7%81%e7%b1%bb%e7%9a%84%e4%bd%bf%e7%94%a8"}},[e._v("IO常见类的使用")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#file%e7%9b%b8%e5%85%b3"}},[e._v("File相关")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e5%ad%97%e8%8a%82%e6%b5%81%e7%9b%b8%e5%85%b3"}},[e._v("字节流相关")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e5%ae%9e%e7%8e%b0%e9%80%90%e8%a1%8c%e8%be%93%e5%87%ba%e6%96%87%e6%9c%ac%e6%96%87%e4%bb%b6%e7%9a%84%e5%86%85%e5%ae%b9"}},[e._v("实现逐行输出文本文件的内容")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e5%ba%8f%e5%88%97%e5%8c%96--serializable--transient"}},[e._v("序列化 & Serializable & transient")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#java-%e4%b8%ad%e7%9a%84%e7%bd%91%e7%bb%9c%e6%94%af%e6%8c%81"}},[e._v("Java 中的网络支持:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#inetaddress"}},[e._v("InetAddress")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#url"}},[e._v("URL")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#sockets"}},[e._v("Sockets")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#datagram"}},[e._v("Datagram")])])])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"}},[e._v("常见问题")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0"}},[e._v("参考文章")])])])])]),e._v(" "),a("h2",{attrs:{id:"io常见类的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io常见类的使用"}},[e._v("#")]),e._v(" IO常见类的使用")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Java 的 I/O 大概可以分成以下几类:")]),e._v(" "),a("ul",[a("li",[e._v("磁盘操作: File")]),e._v(" "),a("li",[e._v("字节操作: InputStream 和 OutputStream")]),e._v(" "),a("li",[e._v("字符操作: Reader 和 Writer")]),e._v(" "),a("li",[e._v("对象操作: Serializable")]),e._v(" "),a("li",[e._v("网络操作: Socket")])]),e._v(" "),a("h3",{attrs:{id:"file相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file相关"}},[e._v("#")]),e._v(" File相关")]),e._v(" "),a("p",[e._v("File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。")]),e._v(" "),a("p",[e._v("递归地列出一个目录下所有文件:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static void listAllFiles(File dir) {\n    if (dir == null || !dir.exists()) {\n        return;\n    }\n    if (dir.isFile()) {\n        System.out.println(dir.getName());\n        return;\n    }\n    for (File file : dir.listFiles()) {\n        listAllFiles(file);\n    }\n} \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("h3",{attrs:{id:"字节流相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字节流相关"}},[e._v("#")]),e._v(" 字节流相关")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static void copyFile(String src, String dist) throws IOException {\n\n    FileInputStream in = new FileInputStream(src);\n    FileOutputStream out = new FileOutputStream(dist);\n    byte[] buffer = new byte[20 * 1024];\n\n    // read() 最多读取 buffer.length 个字节\n    // 返回的是实际读取的个数\n    // 返回 -1 的时候表示读到 eof，即文件尾\n    while (in.read(buffer, 0, buffer.length) != -1) {\n        out.write(buffer);\n    }\n\n    in.close();\n    out.close();\n} \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br")])]),a("h3",{attrs:{id:"实现逐行输出文本文件的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现逐行输出文本文件的内容"}},[e._v("#")]),e._v(" 实现逐行输出文本文件的内容")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static void readFileContent(String filePath) throws IOException {\n\n    FileReader fileReader = new FileReader(filePath);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    String line;\n    while ((line = bufferedReader.readLine()) != null) {\n        System.out.println(line);\n    }\n\n    // 装饰者模式使得 BufferedReader 组合了一个 Reader 对象\n    // 在调用 BufferedReader 的 close() 方法时会去调用 Reader 的 close() 方法\n    // 因此只要一个 close() 调用即可\n    bufferedReader.close();\n} \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("h3",{attrs:{id:"序列化-serializable-transient"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序列化-serializable-transient"}},[e._v("#")]),e._v(" 序列化 & Serializable & transient")]),e._v(" "),a("p",[e._v("序列化就是将一个对象转换成字节序列，方便存储和传输。")]),e._v(" "),a("ul",[a("li",[e._v("序列化: ObjectOutputStream.writeObject()")]),e._v(" "),a("li",[e._v("反序列化: ObjectInputStream.readObject()")])]),e._v(" "),a("p",[e._v("不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。")]),e._v(" "),a("p",[a("strong",[e._v("Serializable")])]),e._v(" "),a("p",[e._v("序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public static void main(String[] args) throws IOException, ClassNotFoundException {\n    A a1 = new A(123, "abc");\n    String objectFile = "file/a1";\n    ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(objectFile));\n    objectOutputStream.writeObject(a1);\n    objectOutputStream.close();\n\n    ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(objectFile));\n    A a2 = (A) objectInputStream.readObject();\n    objectInputStream.close();\n    System.out.println(a2);\n}\n\nprivate static class A implements Serializable {\n    private int x;\n    private String y;\n\n    A(int x, String y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public String toString() {\n        return "x = " + x + "  " + "y = " + y;\n    }\n} \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br")])]),a("p",[a("strong",[e._v("transient")])]),e._v(" "),a("p",[e._v("transient 关键字可以使一些属性不会被序列化。")]),e._v(" "),a("p",[e._v("ArrayList 中存储数据的数组 elementData 是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("private transient Object[] elementData; \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"java-中的网络支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-中的网络支持"}},[e._v("#")]),e._v(" Java 中的网络支持:")]),e._v(" "),a("ul",[a("li",[e._v("InetAddress: 用于表示网络上的硬件资源，即 IP 地址；")]),e._v(" "),a("li",[e._v("URL: 统一资源定位符；")]),e._v(" "),a("li",[e._v("Sockets: 使用 TCP 协议实现网络通信；")]),e._v(" "),a("li",[e._v("Datagram: 使用 UDP 协议实现网络通信。")])]),e._v(" "),a("h4",{attrs:{id:"inetaddress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inetaddress"}},[e._v("#")]),e._v(" InetAddress")]),e._v(" "),a("p",[e._v("没有公有的构造函数，只能通过静态方法来创建实例。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("InetAddress.getByName(String host);\nInetAddress.getByAddress(byte[] address); \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h4",{attrs:{id:"url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url"}},[e._v("#")]),e._v(" URL")]),e._v(" "),a("p",[e._v("可以直接从 URL 中读取字节流数据。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public static void main(String[] args) throws IOException {\n\n    URL url = new URL("http://www.baidu.com");\n\n    /* 字节流 */\n    InputStream is = url.openStream();\n\n    /* 字符流 */\n    InputStreamReader isr = new InputStreamReader(is, "utf-8");\n\n    /* 提供缓存功能 */\n    BufferedReader br = new BufferedReader(isr);\n\n    String line;\n    while ((line = br.readLine()) != null) {\n        System.out.println(line);\n    }\n\n    br.close();\n} \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br")])]),a("h4",{attrs:{id:"sockets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sockets"}},[e._v("#")]),e._v(" Sockets")]),e._v(" "),a("ul",[a("li",[e._v("ServerSocket: 服务器端类")]),e._v(" "),a("li",[e._v("Socket: 客户端类")]),e._v(" "),a("li",[e._v("服务器和客户端通过 InputStream 和 OutputStream 进行输入输出。")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(580),alt:"image"}})]),e._v(" "),a("h4",{attrs:{id:"datagram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#datagram"}},[e._v("#")]),e._v(" Datagram")]),e._v(" "),a("ul",[a("li",[e._v("DatagramSocket: 通信类")]),e._v(" "),a("li",[e._v("DatagramPacket: 数据包类")])]),e._v(" "),a("h2",{attrs:{id:"常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[e._v("#")]),e._v(" 常见问题")]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[e._v("Java 字节读取流的read方法返回int的原因")])]),e._v(" "),a("p",[e._v("https://blog.csdn.net/congwiny/article/details/18922847")]),e._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),a("hr")])}),[],!1,null,null,null);a.default=n.exports},580:function(e,a,s){e.exports=s.p+"assets/img/ClienteServidorSockets1521731145260.0f7f7ae4.png"}}]);