(window.webpackJsonp=window.webpackJsonp||[]).push([[300],{1471:function(n,s,a){n.exports=a.p+"assets/img/alg-sort-merge-1.13d246bb.jpg"},1472:function(n,s,a){n.exports=a.p+"assets/img/alg-sort-merge-2.838aea77.jpg"},1473:function(n,s,a){n.exports=a.p+"assets/img/alg-sort-merge-3.744e796a.jpg"},3777:function(n,s,a){"use strict";a.r(s);var t=a(7),r=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"排序-归并排序-merge-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序-归并排序-merge-sort"}},[n._v("#")]),n._v(" 排序 - 归并排序(Merge Sort)")]),n._v(" "),s("p",[n._v("==============================================")]),n._v(" "),s("blockquote",[s("p",[n._v('将两个的有序数列合并成一个有序数列，我们称之为"归并"。归并排序(Merge Sort)就是利用归并思想对数列进行排序。@pdai')])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[n._v("归并排序介绍"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8A%E7%9A%84%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[n._v("从下往上的归并排序"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E7%9A%84%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[n._v("从上往下的归并排序"),s("OutboundLink")],1)])])]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[n._v("归并排序实现"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E7%9A%84%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-1",target:"_blank",rel:"noopener noreferrer"}},[n._v("从上往下的归并排序"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8A%E7%9A%84%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-1",target:"_blank",rel:"noopener noreferrer"}},[n._v("从下往上的归并排序"),s("OutboundLink")],1)])])]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[n._v("归并排序的时间复杂度和稳定性"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[n._v("归并排序时间复杂度"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[n._v("归并排序稳定性"),s("OutboundLink")],1)])])]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[n._v("代码实现"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-merge.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考文章"),s("OutboundLink")],1)])]),n._v(" "),s("h1",{attrs:{id:"归并排序介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并排序介绍"}},[n._v("#")]),n._v(" 归并排序介绍")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v('根据具体的实现，归并排序包括"从上往下"和"从下往上"2种方式。')]),n._v(" "),s("h3",{attrs:{id:"从下往上的归并排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从下往上的归并排序"}},[n._v("#")]),n._v(" 从下往上的归并排序")]),n._v(" "),s("p",[n._v("将待排序的数列分成若干个长度为1的子数列，然后将这些数列两两合并；得到若干个长度为2的有序数列，再将这些数列两两合并；得到若干个长度为4的有序数列，再将它们两两合并；直接合并成一个数列为止。这样就得到了我们想要的排序结果。(参考下面的图片)")]),n._v(" "),s("h3",{attrs:{id:"从上往下的归并排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从上往下的归并排序"}},[n._v("#")]),n._v(" 从上往下的归并排序")]),n._v(" "),s("p",[n._v('它与"从下往上"在排序上是反方向的。它基本包括3步:')]),n._v(" "),s("ul",[s("li",[s("code",[n._v("分解")]),n._v(" -- 将当前区间一分为二，即求分裂点 mid = (low + high)/2;")]),n._v(" "),s("li",[s("code",[n._v("求解")]),n._v(" -- 递归地对两个子区间a[low...mid] 和 a[mid+1...high]进行归并排序。递归的终结条件是子区间长度为1。")]),n._v(" "),s("li",[s("code",[n._v("合并")]),n._v(" -- 将已排序的两个子区间a[low...mid]和 a[mid+1...high]归并为一个有序的区间a[low...high]。")])]),n._v(" "),s("p",[s("img",{attrs:{src:a(1471),alt:""}})]),n._v(" "),s("h1",{attrs:{id:"归并排序实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并排序实现"}},[n._v("#")]),n._v(" 归并排序实现")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"从上往下的归并排序-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从上往下的归并排序-2"}},[n._v("#")]),n._v(" 从上往下的归并排序")]),n._v(" "),s("p",[n._v("从上往下的归并排序采用了递归的方式实现。它的原理非常简单，如下图:")]),n._v(" "),s("p",[s("img",{attrs:{src:a(1472),alt:""}})]),n._v(" "),s("p",[n._v('通过"从上往下的归并排序"来对数组{80,30,60,40,20,10,50,70}进行排序时:')]),n._v(" "),s("ul",[s("li",[n._v("将数组{80,30,60,40,20,10,50,70}看作由两个有序的子数组{80,30,60,40}和{20,10,50,70}组成。对两个有序子树组进行排序即可。")]),n._v(" "),s("li",[n._v("将子数组{80,30,60,40}看作由两个有序的子数组{80,30}和{60,40}组成。\n"),s("ul",[s("li",[n._v("将子数组{20,10,50,70}看作由两个有序的子数组{20,10}和{50,70}组成。")])])]),n._v(" "),s("li",[n._v("将子数组{80,30}看作由两个有序的子数组{80}和{30}组成。\n"),s("ul",[s("li",[n._v("将子数组{60,40}看作由两个有序的子数组{60}和{40}组成。")]),n._v(" "),s("li",[n._v("将子数组{20,10}看作由两个有序的子数组{20}和{10}组成。")]),n._v(" "),s("li",[n._v("将子数组{50,70}看作由两个有序的子数组{50}和{70}组成。")])])])]),n._v(" "),s("h3",{attrs:{id:"从下往上的归并排序-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从下往上的归并排序-2"}},[n._v("#")]),n._v(" 从下往上的归并排序")]),n._v(" "),s("p",[n._v('从下往上的归并排序的思想正好与"从下往上的归并排序"相反。如下图:')]),n._v(" "),s("p",[s("img",{attrs:{src:a(1473),alt:""}})]),n._v(" "),s("p",[n._v('通过"从下往上的归并排序"来对数组{80,30,60,40,20,10,50,70}进行排序时:')]),n._v(" "),s("ul",[s("li",[n._v("将数组{80,30,60,40,20,10,50,70}看作由8个有序的子数组{80},{30},{60},{40},{20},{10},{50}和{70}组成。")]),n._v(" "),s("li",[n._v("将这8个有序的子数列两两合并。得到4个有序的子树列{30,80},{40,60},{10,20}和{50,70}。")]),n._v(" "),s("li",[n._v("将这4个有序的子数列两两合并。得到2个有序的子树列{30,40,60,80}和{10,20,50,70}。")]),n._v(" "),s("li",[n._v("将这2个有序的子数列两两合并。得到1个有序的子树列{10,20,30,40,50,60,70,80}。")])]),n._v(" "),s("h1",{attrs:{id:"归并排序的时间复杂度和稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并排序的时间复杂度和稳定性"}},[n._v("#")]),n._v(" 归并排序的时间复杂度和稳定性")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"归并排序时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并排序时间复杂度"}},[n._v("#")]),n._v(" 归并排序时间复杂度")]),n._v(" "),s("p",[n._v("归并排序的时间复杂度是O(N*lgN)。")]),n._v(" "),s("p",[n._v("假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢? 归并排序的形式就是一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的可以得出它的时间复杂度是O(N*lgN)。")]),n._v(" "),s("h3",{attrs:{id:"归并排序稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并排序稳定性"}},[n._v("#")]),n._v(" 归并排序稳定性")]),n._v(" "),s("p",[n._v("归并排序是稳定的算法，它满足稳定算法的定义。")]),n._v(" "),s("p",[s("code",[n._v("算法稳定性")]),n._v(" -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！")]),n._v(" "),s("h1",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[n._v("#")]),n._v(" 代码实现")]),n._v(" "),s("hr"),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n * 归并排序: Java\n *\n * @author skywang\n * @date 2014/03/12\n */\n\npublic class MergeSort {\n\n    /*\n     * 将一个数组中的两个相邻有序区间合并成一个\n     *\n     * 参数说明: \n     *     a -- 包含两个有序区间的数组\n     *     start -- 第1个有序区间的起始地址。\n     *     mid   -- 第1个有序区间的结束地址。也是第2个有序区间的起始地址。\n     *     end   -- 第2个有序区间的结束地址。\n     */\n    public static void merge(int[] a, int start, int mid, int end) {\n        int[] tmp = new int[end-start+1];    // tmp是汇总2个有序区的临时区域\n        int i = start;            // 第1个有序区的索引\n        int j = mid + 1;        // 第2个有序区的索引\n        int k = 0;                // 临时区域的索引\n\n        while(i <= mid && j <= end) {\n            if (a[i] <= a[j])\n                tmp[k++] = a[i++];\n            else\n                tmp[k++] = a[j++];\n        }\n\n        while(i <= mid)\n            tmp[k++] = a[i++];\n\n        while(j <= end)\n            tmp[k++] = a[j++];\n\n        // 将排序后的元素，全部都整合到数组a中。\n        for (i = 0; i < k; i++)\n            a[start + i] = tmp[i];\n\n        tmp=null;\n    }\n\n    /*\n     * 归并排序(从上往下)\n     *\n     * 参数说明: \n     *     a -- 待排序的数组\n     *     start -- 数组的起始地址\n     *     endi -- 数组的结束地址\n     */\n    public static void mergeSortUp2Down(int[] a, int start, int end) {\n        if(a==null || start >= end)\n            return ;\n\n        int mid = (end + start)/2;\n        mergeSortUp2Down(a, start, mid); // 递归排序a[start...mid]\n        mergeSortUp2Down(a, mid+1, end); // 递归排序a[mid+1...end]\n\n        // a[start...mid] 和 a[mid...end]是两个有序空间，\n        // 将它们排序成一个有序空间a[start...end]\n        merge(a, start, mid, end);\n    }\n\n\n    /*\n     * 对数组a做若干次合并: 数组a的总长度为len，将它分为若干个长度为gap的子数组；\n     *             将"每2个相邻的子数组" 进行合并排序。\n     *\n     * 参数说明: \n     *     a -- 待排序的数组\n     *     len -- 数组的长度\n     *     gap -- 子数组的长度\n     */\n    public static void mergeGroups(int[] a, int len, int gap) {\n        int i;\n        int twolen = 2 * gap;    // 两个相邻的子数组的长度\n\n        // 将"每2个相邻的子数组" 进行合并排序。\n        for(i = 0; i+2*gap-1 < len; i+=(2*gap))\n            merge(a, i, i+gap-1, i+2*gap-1);\n\n        // 若 i+gap-1 < len-1，则剩余一个子数组没有配对。\n        // 将该子数组合并到已排序的数组中。\n        if ( i+gap-1 < len-1)\n            merge(a, i, i + gap - 1, len - 1);\n    }\n\n    /*\n     * 归并排序(从下往上)\n     *\n     * 参数说明: \n     *     a -- 待排序的数组\n     */\n    public static void mergeSortDown2Up(int[] a) {\n        if (a==null)\n            return ;\n\n        for(int n = 1; n < a.length; n*=2)\n            mergeGroups(a, a.length, n);\n    }\n\n    public static void main(String[] args) {\n        int i;\n        int a[] = {80,30,60,40,20,10,50,70};\n\n        System.out.printf("before sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n\n        mergeSortUp2Down(a, 0, a.length-1);        // 归并排序(从上往下)\n        //mergeSortDown2Up(a);                    // 归并排序(从下往上)\n\n        System.out.printf("after  sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br")])]),s("h1",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("提示")]),n._v(" "),s("p",[n._v("本文主要参考至 https://www.cnblogs.com/skywang12345/p/3602369.html, 在此基础上做了内容的增改。)")])])}),[],!1,null,null,null);s.default=r.exports}}]);