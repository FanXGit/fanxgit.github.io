(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{3561:function(n,s,e){"use strict";e.r(s);var a=e(7),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"java-aio-异步io详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-aio-异步io详解"}},[n._v("#")]),n._v(" Java AIO - 异步IO详解")]),n._v(" "),s("p",[n._v("=======================================")]),n._v(" "),s("blockquote",[s("p",[n._v("本文主要对异步IO和Java中对AIO的支持详解。@pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#java-aio---%e5%bc%82%e6%ad%a5io%e8%af%a6%e8%a7%a3"}},[n._v("Java AIO - 异步IO详解")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%e5%bc%82%e6%ad%a5io"}},[n._v("异步IO")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#java%e5%af%b9aio%e7%9a%84%e6%94%af%e6%8c%81"}},[n._v("JAVA对AIO的支持")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#java-aio%e6%a1%86%e6%9e%b6%e7%ae%80%e6%9e%90"}},[n._v("JAVA AIO框架简析")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%e4%bb%a3%e7%a0%81%e5%ae%9e%e4%be%8b"}},[n._v("代码实例")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%e8%a6%81%e7%82%b9%e8%ae%b2%e8%a7%a3"}},[n._v("要点讲解")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%e8%bf%98%e6%9c%89%e6%94%b9%e8%bf%9b%e5%8f%af%e8%83%bd"}},[n._v("还有改进可能")])])])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%bf%98%e6%9c%89netty"}},[n._v("为什么还有Netty")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0"}},[n._v("参考文章")])])])])]),n._v(" "),s("h2",{attrs:{id:"异步io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步io"}},[n._v("#")]),n._v(" 异步IO")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明了IO模型是由操作系统提供支持，且这三种IO模型都是同步IO，都是采用的“应用程序不询问我，我绝不会主动通知”的方式。")]),n._v(" "),s("p",[n._v("异步IO则是采用“订阅-通知”模式: 即应用程序向操作系统注册IO监听，然后继续做自己的事情。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数:")]),n._v(" "),s("p",[s("img",{attrs:{src:e(600),alt:""}})]),n._v(" "),s("p",[n._v("和同步IO一样，异步IO也是由操作系统进行支持的。微软的windows系统提供了一种异步IO技术: IOCP(I/O Completion Port，I/O完成端口)；")]),n._v(" "),s("p",[n._v("Linux下由于没有这种异步IO技术，所以使用的是epoll(上文介绍过的一种多路复用IO技术的实现)对异步IO进行模拟。")]),n._v(" "),s("h2",{attrs:{id:"java对aio的支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java对aio的支持"}},[n._v("#")]),n._v(" JAVA对AIO的支持")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"java-aio框架简析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-aio框架简析"}},[n._v("#")]),n._v(" JAVA AIO框架简析")]),n._v(" "),s("p",[s("img",{attrs:{src:e(601),alt:""}})]),n._v(" "),s("p",[n._v("这里通过这个结构分析要告诉各位读者JAVA AIO中类设计和操作系统的相关性")]),n._v(" "),s("p",[n._v("在文中我们一再说明JAVA AIO框架在windows下使用windows IOCP技术，在Linux下使用epoll多路复用IO技术模拟异步IO，这个从JAVA AIO框架的部分类设计上就可以看出来。例如框架中，在Windows下负责实现套接字通道的具体类是“sun.nio.ch.WindowsAsynchronousSocketChannelImpl”，其引用的IOCP类型文档注释如是:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/** \n* Windows implementation of AsynchronousChannelGroup encapsulating an I/O \n* completion port. \n*/ \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("如果您感兴趣，当然可以去看看全部完整代码(建议从“java.nio.channels.spi.AsynchronousChannelProvider”这个类看起)。")]),n._v(" "),s("p",[n._v("特别说明一下，请注意图中的“java.nio.channels.NetworkChannel”接口，这个接口同样被JAVA NIO框架实现了，如下图所示:")]),n._v(" "),s("p",[s("img",{attrs:{src:e(602),alt:""}})]),n._v(" "),s("h3",{attrs:{id:"代码实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实例"}},[n._v("#")]),n._v(" 代码实例")]),n._v(" "),s("p",[n._v("下面，我们通过一个代码示例，来讲解JAVA AIO框架的具体使用，先上代码，在针对代码编写和运行中的要点进行讲解:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package testASocket;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousChannelGroup;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.log4j.BasicConfigurator;\n\n/**\n * @author yinwenjie\n */\npublic class SocketServer {\n\n    static {\n        BasicConfigurator.configure();\n    }\n\n    private static final Object waitObject = new Object();\n\n    /**\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n        /*\n         * 对于使用的线程池技术，我一定要多说几句\n         * 1、Executors是线程池生成工具，通过这个工具我们可以很轻松的生成“固定大小的线程池”、“调度池”、“可伸缩线程数量的池”。具体请看API Doc\n         * 2、当然您也可以通过ThreadPoolExecutor直接生成池。\n         * 3、这个线程池是用来得到操作系统的“IO事件通知”的，不是用来进行“得到IO数据后的业务处理的”。要进行后者的操作，您可以再使用一个池(最好不要混用)\n         * 4、您也可以不使用线程池(不推荐)，如果决定不使用线程池，直接AsynchronousServerSocketChannel.open()就行了。\n         * */\n        ExecutorService threadPool = Executors.newFixedThreadPool(20);\n        AsynchronousChannelGroup group = AsynchronousChannelGroup.withThreadPool(threadPool);\n        final AsynchronousServerSocketChannel serverSocket = AsynchronousServerSocketChannel.open(group);\n\n        //设置要监听的端口“0.0.0.0”代表本机所有IP设备\n        serverSocket.bind(new InetSocketAddress("0.0.0.0", 83));\n        //为AsynchronousServerSocketChannel注册监听，注意只是为AsynchronousServerSocketChannel通道注册监听\n        //并不包括为 随后客户端和服务器 socketchannel通道注册的监听\n        serverSocket.accept(null, new ServerSocketChannelHandle(serverSocket));\n\n        //等待，以便观察现象(这个和要讲解的原理本身没有任何关系，只是为了保证守护线程不会退出)\n        synchronized(waitObject) {\n            waitObject.wait();\n        }\n    }\n}\n\n/**\n * 这个处理器类，专门用来响应 ServerSocketChannel 的事件。\n * @author yinwenjie\n */\nclass ServerSocketChannelHandle implements CompletionHandler<AsynchronousSocketChannel, Void> {\n    /**\n     * 日志\n     */\n    private static final Log LOGGER = LogFactory.getLog(ServerSocketChannelHandle.class);\n\n    private AsynchronousServerSocketChannel serverSocketChannel;\n\n    /**\n     * @param serverSocketChannel\n     */\n    public ServerSocketChannelHandle(AsynchronousServerSocketChannel serverSocketChannel) {\n        this.serverSocketChannel = serverSocketChannel;\n    }\n\n    /**\n     * 注意，我们分别观察 this、socketChannel、attachment三个对象的id。\n     * 来观察不同客户端连接到达时，这三个对象的变化，以说明ServerSocketChannelHandle的监听模式\n     */\n    @Override\n    public void completed(AsynchronousSocketChannel socketChannel, Void attachment) {\n        ServerSocketChannelHandle.LOGGER.info("completed(AsynchronousSocketChannel result, ByteBuffer attachment)");\n        //每次都要重新注册监听(一次注册，一次响应)，但是由于“文件状态标示符”是独享的，所以不需要担心有“漏掉的”事件\n        this.serverSocketChannel.accept(attachment, this);\n\n        //为这个新的socketChannel注册“read”事件，以便操作系统在收到数据并准备好后，主动通知应用程序\n        //在这里，由于我们要将这个客户端多次传输的数据累加起来一起处理，所以我们将一个stringbuffer对象作为一个“附件”依附在这个channel上\n        //\n        ByteBuffer readBuffer = ByteBuffer.allocate(50);\n        socketChannel.read(readBuffer, new StringBuffer(), new SocketChannelReadHandle(socketChannel , readBuffer));\n    }\n\n    /* (non-Javadoc)\n     * @see java.nio.channels.CompletionHandler#failed(java.lang.Throwable, java.lang.Object)\n     */\n    @Override\n    public void failed(Throwable exc, Void attachment) {\n        ServerSocketChannelHandle.LOGGER.info("failed(Throwable exc, ByteBuffer attachment)");\n    }\n}\n\n/**\n * 负责对每一个socketChannel的数据获取事件进行监听。<p>\n * \n * 重要的说明: 一个socketchannel都会有一个独立工作的SocketChannelReadHandle对象(CompletionHandler接口的实现)，\n * 其中又都将独享一个“文件状态标示”对象FileDescriptor、\n * 一个独立的由程序员定义的Buffer缓存(这里我们使用的是ByteBuffer)、\n * 所以不用担心在服务器端会出现“窜对象”这种情况，因为JAVA AIO框架已经帮您组织好了。<p>\n * \n * 但是最重要的，用于生成channel的对象: AsynchronousChannelProvider是单例模式，无论在哪组socketchannel，\n * 对是一个对象引用(但这没关系，因为您不会直接操作这个AsynchronousChannelProvider对象)。\n * @author yinwenjie\n */\nclass SocketChannelReadHandle implements CompletionHandler<Integer, StringBuffer> {\n    /**\n     * 日志\n     */\n    private static final Log LOGGER = LogFactory.getLog(SocketChannelReadHandle.class);\n\n    private AsynchronousSocketChannel socketChannel;\n\n    /**\n     * 专门用于进行这个通道数据缓存操作的ByteBuffer<br>\n     * 当然，您也可以作为CompletionHandler的attachment形式传入。<br>\n     * 这是，在这段示例代码中，attachment被我们用来记录所有传送过来的Stringbuffer了。\n     */\n    private ByteBuffer byteBuffer;\n\n    public SocketChannelReadHandle(AsynchronousSocketChannel socketChannel , ByteBuffer byteBuffer) {\n        this.socketChannel = socketChannel;\n        this.byteBuffer = byteBuffer;\n    }\n\n    /* (non-Javadoc)\n     * @see java.nio.channels.CompletionHandler#completed(java.lang.Object, java.lang.Object)\n     */\n    @Override\n    public void completed(Integer result, StringBuffer historyContext) {\n        //如果条件成立，说明客户端主动终止了TCP套接字，这时服务端终止就可以了\n        if(result == -1) {\n            try {\n                this.socketChannel.close();\n            } catch (IOException e) {\n                SocketChannelReadHandle.LOGGER.error(e);\n            }\n            return;\n        }\n\n        SocketChannelReadHandle.LOGGER.info("completed(Integer result, Void attachment) : 然后我们来取出通道中准备好的值");\n        /*\n         * 实际上，由于我们从Integer result知道了本次channel从操作系统获取数据总长度\n         * 所以实际上，我们不需要切换成“读模式”的，但是为了保证编码的规范性，还是建议进行切换。\n         * \n         * 另外，无论是JAVA AIO框架还是JAVA NIO框架，都会出现“buffer的总容量”小于“当前从操作系统获取到的总数据量”，\n         * 但区别是，JAVA AIO框架中，我们不需要专门考虑处理这样的情况，因为JAVA AIO框架已经帮我们做了处理(做成了多次通知)\n         * */\n        this.byteBuffer.flip();\n        byte[] contexts = new byte[1024];\n        this.byteBuffer.get(contexts, 0, result);\n        this.byteBuffer.clear();\n        try {\n            String nowContent = new String(contexts , 0 , result , "UTF-8");\n            historyContext.append(nowContent);\n            SocketChannelReadHandle.LOGGER.info("================目前的传输结果: " + historyContext);\n        } catch (UnsupportedEncodingException e) {\n            SocketChannelReadHandle.LOGGER.error(e);\n        }\n\n        //如果条件成立，说明还没有接收到“结束标记”\n        if(historyContext.indexOf("over") == -1) {\n            return;\n        }\n\n        //=========================================================================\n        //          和上篇文章的代码相同，我们以“over”符号作为客户端完整信息的标记\n        //=========================================================================\n        SocketChannelReadHandle.LOGGER.info("=======收到完整信息，开始处理业务=========");\n        historyContext = new StringBuffer();\n\n        //还要继续监听(一次监听一次通知)\n        this.socketChannel.read(this.byteBuffer, historyContext, this);\n    }\n\n    /* (non-Javadoc)\n     * @see java.nio.channels.CompletionHandler#failed(java.lang.Throwable, java.lang.Object)\n     */\n    @Override\n    public void failed(Throwable exc, StringBuffer historyContext) {\n        SocketChannelReadHandle.LOGGER.info("=====发现客户端异常关闭，服务器将关闭TCP通道");\n        try {\n            this.socketChannel.close();\n        } catch (IOException e) {\n            SocketChannelReadHandle.LOGGER.error(e);\n        }\n    }\n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br")])]),s("h3",{attrs:{id:"要点讲解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#要点讲解"}},[n._v("#")]),n._v(" 要点讲解")]),n._v(" "),s("p",[n._v("注意在JAVA NIO框架中，我们说到了一个重要概念“selector”(选择器)。它负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操操作；但是在JAVA AIO框架中，由于应用程序不是“轮询”方式，而是订阅-通知方式，所以不再需要“selector”(选择器)了，改由channel通道直接到操作系统注册监听。")]),n._v(" "),s("p",[n._v("JAVA AIO框架中，只实现了两种网络IO通道“AsynchronousServerSocketChannel”(服务器监听通道)、“AsynchronousSocketChannel”(socket套接字通道)。但是无论哪种通道他们都有独立的fileDescriptor(文件标识符)、attachment(附件，附件可以使任意对象，类似“通道上下文”)，并被独立的SocketChannelReadHandle类实例引用。我们通过debug操作来看看它们的引用结构:")]),n._v(" "),s("p",[n._v("在测试过程中，我们启动了两个客户端(客户端用什么语言来写都行，用阻塞或者非阻塞方式也都行，只要是支持 TCP Socket套接字的就行，然后我们观察服务器端对这两个客户端通道的处理情况:")]),n._v(" "),s("p",[s("img",{attrs:{src:e(603),alt:""}})]),n._v(" "),s("p",[n._v("可以看到，在服务器端分别为客户端1和客户端2创建的两个WindowsAsynchronousSocketChannelImpl对象为:")]),n._v(" "),s("p",[s("img",{attrs:{src:e(604),alt:""}})]),n._v(" "),s("p",[n._v("客户端1: WindowsAsynchronousSocketChannelImpl: 760 | FileDescriptor: 762")]),n._v(" "),s("p",[n._v("客户端2: WindowsAsynchronousSocketChannelImpl: 792 | FileDescriptor: 797")]),n._v(" "),s("p",[n._v("接下来，我们让两个客户端发送信息到服务器端，并观察服务器端的处理情况。客户端1发来的消息和客户端2发来的消息，在服务器端的处理情况如下图所示:")]),n._v(" "),s("p",[s("img",{attrs:{src:e(605),alt:""}})]),n._v(" "),s("p",[n._v("客户端1: WindowsAsynchronousSocketChannelImpl: 760 | FileDescriptor: 762 | SocketChannelReadHandle: 803 | HeapByteBuffer: 808")]),n._v(" "),s("p",[n._v("客户端2: WindowsAsynchronousSocketChannelImpl: 792 | FileDescriptor: 797 | SocketChannelReadHandle: 828 | HeapByteBuffer: 833")]),n._v(" "),s("p",[n._v("可以明显看到，服务器端处理每一个客户端通道所使用的SocketChannelReadHandle(处理器)对象都是独立的，并且所引用的SocketChannel对象都是独立的。")]),n._v(" "),s("p",[n._v("JAVA NIO和JAVA AIO框架，除了因为操作系统的实现不一样而去掉了Selector外，其他的重要概念都是存在的，例如上文中提到的Channel的概念，还有演示代码中使用的Buffer缓存方式。实际上JAVA NIO和JAVA AIO框架您可以看成是一套完整的“高并发IO处理”的实现。")]),n._v(" "),s("h3",{attrs:{id:"还有改进可能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#还有改进可能"}},[n._v("#")]),n._v(" 还有改进可能")]),n._v(" "),s("p",[n._v("当然，以上代码是示例代码，目标是为了让您了解JAVA AIO框架的基本使用。所以它还有很多改造的空间，例如:")]),n._v(" "),s("p",[n._v("在生产环境下，我们需要记录这个通道上“用户的登录信息”。那么这个需求可以使用JAVA AIO中的“附件”功能进行实现。")]),n._v(" "),s("p",[n._v("记住JAVA AIO 和 JAVA NIO 框架都是要使用线程池的(当然您也可以不用)，线程池的使用原则，一定是只有业务处理部分才使用，使用后马上结束线程的执行(还回线程池或者消灭它)。JAVA AIO框架中还有一个线程池，是拿给“通知处理器”使用的，这是因为JAVA AIO框架是基于“订阅-通知”模型的，“订阅”操作可以由主线程完成，但是您总不能要求在应用程序中并发的“通知”操作也在主线程上完成吧_。")]),n._v(" "),s("p",[n._v("最好的改进方式，当然就是使用Netty或者Mina咯。")]),n._v(" "),s("h2",{attrs:{id:"为什么还有netty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么还有netty"}},[n._v("#")]),n._v(" 为什么还有Netty")]),n._v(" "),s("hr"),n._v(" "),s("ul",[s("li",[s("p",[n._v("那么有的读者可能就会问，既然JAVA NIO / JAVA AIO已经实现了各主流操作系统的底层支持，那么为什么现在主流的JAVA NIO技术会是Netty和MINA呢? 答案很简单: 因为更好用，这里举几个方面的例子:")])]),n._v(" "),s("li",[s("p",[n._v("虽然JAVA NIO 和 JAVA AIO框架提供了 多路复用IO/异步IO的支持，但是并没有提供上层“信息格式”的良好封装。例如前两者并没有提供针对 Protocol Buffer、JSON这些信息格式的封装，但是Netty框架提供了这些数据格式封装(基于责任链模式的编码和解码功能)")])]),n._v(" "),s("li",[s("p",[n._v("要编写一个可靠的、易维护的、高性能的(注意它们的排序)NIO/AIO 服务器应用。除了框架本身要兼容实现各类操作系统的实现外。更重要的是它应该还要处理很多上层特有服务，例如: 客户端的权限、还有上面提到的信息格式封装、简单的数据读取。这些Netty框架都提供了响应的支持。")])]),n._v(" "),s("li",[s("p",[n._v("JAVA NIO框架存在一个poll/epoll bug: Selector doesn’t block on Selector.select(timeout)，不能block意味着CPU的使用率会变成100%(这是底层JNI的问题，上层要处理这个异常实际上也好办)。当然这个bug只有在Linux内核上才能重现。")])]),n._v(" "),s("li",[s("p",[n._v("这个问题在JDK 1.7版本中还没有被完全解决: http://bugs.java.com/bugdatabase/view_bug.do?bug_id=2147719。虽然Netty 4.0中也是基于JAVA NIO框架进行封装的(上文中已经给出了Netty中NioServerSocketChannel类的介绍)，但是Netty已经将这个bug进行了处理。")])]),n._v(" "),s("li",[s("p",[n._v("其他原因，用过Netty后，您就可以自己进行比较了。")])])]),n._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),s("hr"),n._v(" "),s("ul",[s("li",[n._v("文章主要来源于: 银文杰，笔名“说好不能打脸”，"),s("a",{attrs:{href:"https://blog.csdn.net/yinwenjie",target:"_blank",rel:"noopener noreferrer"}},[n._v("博客地址在新窗口打开"),s("OutboundLink")],1),n._v("。他的书《高性能服务系统构建与实战》。")]),n._v(" "),s("li",[n._v("https://blog.csdn.net/yinwenjie/article/details/48784375")])])])}),[],!1,null,null,null);s.default=t.exports},600:function(n,s,e){n.exports=e.p+"assets/img/java-io-aio-1.5933aaf1.png"},601:function(n,s,e){n.exports=e.p+"assets/img/java-io-aio-2.93f75512.png"},602:function(n,s,e){n.exports=e.p+"assets/img/java-io-aio-3.0c9e1372.png"},603:function(n,s,e){n.exports=e.p+"assets/img/java-io-aio-3-1.febb598c.png"},604:function(n,s,e){n.exports=e.p+"assets/img/java-io-aio-4.f711e357.png"},605:function(n,s,e){n.exports=e.p+"assets/img/java-io-aio-5.03ef803b.png"}}]);