(window.webpackJsonp=window.webpackJsonp||[]).push([[359],{1655:function(t,r,e){t.exports=e.p+"assets/img/arch-x-overview-layer2.f56300a1.jpg"},278:function(t,r,e){t.exports=e.p+"assets/img/arch-x-view-2.cdd4b7d1.png"},3819:function(t,r,e){"use strict";e.r(r);var v=e(7),a=Object(v.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"架构-理解构架的分层"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#架构-理解构架的分层"}},[t._v("#")]),t._v(" 架构 - 理解构架的分层")]),t._v(" "),r("p",[t._v("=============================")]),t._v(" "),r("blockquote",[r("p",[t._v("技术框架（technological Framework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。于开发者而言，实际工作从通常采用的是分层模型，这里独立一个章节，总结经典的"),r("strong",[t._v("七层逻辑架构")]),t._v("。@pdai")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-view-2.html#%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E8%A7%86%E8%A7%92%E5%9B%9E%E9%A1%BE",target:"_blank",rel:"noopener noreferrer"}},[t._v("架构技术视角回顾"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-view-2.html#%E5%88%86%E5%B1%82%E4%B8%8B%E7%9C%8B%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E7%82%B9",target:"_blank",rel:"noopener noreferrer"}},[t._v("分层下看架构技术点"),r("OutboundLink")],1)])]),t._v(" "),r("h1",{attrs:{id:"架构技术视角回顾"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#架构技术视角回顾"}},[t._v("#")]),t._v(" 架构技术视角回顾")]),t._v(" "),r("hr"),t._v(" "),r("blockquote",[r("p",[t._v("上个章节"),r("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-view.html#%E5%BA%94%E7%94%A8%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("架构 - 理解构架的视角"),r("OutboundLink")],1),t._v("中已经站在不同角色视角理解了架构，我们再回顾下技术架构。")])]),t._v(" "),r("p",[t._v("技术框架（technological Framework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，技术框架是可被技术开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。")]),t._v(" "),r("p",[t._v("从技术层面描述，主要是分层模型，例如持久层、数据层、逻辑层、应用层、表现层等，然后每层使用什么技术框架，例如Spring、hibernate、ioc、MVC、成熟的类库、中间件、WebService等，分别说明，要求这些技术能够将整个系统的主要实现概括。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(278),alt:""}})]),t._v(" "),r("h1",{attrs:{id:"分层下看架构技术点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分层下看架构技术点"}},[t._v("#")]),t._v(" 分层下看架构技术点")]),t._v(" "),r("hr"),t._v(" "),r("blockquote",[r("p",[t._v("于开发者而言，实际工作从通常采用的是分层模型，总结下经典的"),r("strong",[t._v("七层逻辑架构")]),t._v("。")])]),t._v(" "),r("p",[r("img",{attrs:{src:e(1655),alt:""}})]),t._v(" "),r("p",[t._v("以上采用"),r("strong",[t._v("七层逻辑架构")]),t._v("，第一层客户层，第二层前端优化层，第三层应用层，第四层服务层，第五层数据存储层，第六层大数据存储层，第七层大数据处理层。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("客户层")]),t._v("：减少Http请求数，浏览器缓存，启用压缩，Js异步，减少Cookie传输；")]),t._v(" "),r("li",[r("strong",[t._v("前端层")]),t._v("：DNS负载均衡，CDN本地加速，反向代理服务；")]),t._v(" "),r("li",[r("strong",[t._v("应用层")]),t._v("：业务拆分；负载均衡，分级管理，应用缓存，服务集群，快速失败，异步调用，服务降级，消息队列，幂等设计等。")]),t._v(" "),r("li",[r("strong",[t._v("服务层")]),t._v("：提供公用服务，比如用户服务，订单服务，支付服务等；")]),t._v(" "),r("li",[r("strong",[t._v("数据层")]),t._v("：分布式, 数据库集群，读写分离，NOSQL集群，文件系统集群；分布式缓存；冗余备份（冷，热备[同步，异步]，温备），失效转移（确认，转移，恢复）。CAP理论，一致性算法。")]),t._v(" "),r("li",[r("strong",[t._v("大数据存储层")]),t._v("：支持应用层和服务层的日志数据收集，关系数据库和NOSQL数据库的结构化和半结构化数据收集；")]),t._v(" "),r("li",[r("strong",[t._v("大数据处理层")]),t._v("：通过Mapreduce进行离线数据分析或Storm实时数据分析，并将处理后的数据存入关系型数据库。（实际使用中，离线数据和实时数据会按照业务要求进行分类处理，并存入不同的数据库中，供应用层或服务层使用）。)")])])])}),[],!1,null,null,null);r.default=a.exports}}]);