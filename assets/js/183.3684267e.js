(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{3560:function(s,n,a){"use strict";a.r(n);var e=a(7),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"java-io-bio-详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-io-bio-详解"}},[s._v("#")]),s._v(" Java IO - BIO 详解")]),s._v(" "),n("p",[s._v("=====================================")]),s._v(" "),n("blockquote",[n("p",[s._v("BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。@pdai")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#java-io---bio-%e8%af%a6%e8%a7%a3"}},[s._v("Java IO - BIO 详解")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%e5%87%a0%e4%b8%aa%e9%87%8d%e8%a6%81%e6%a6%82%e5%bf%b5"}},[s._v("几个重要概念")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%e4%bc%a0%e7%bb%9f%e7%9a%84bio%e9%80%9a%e4%bf%a1%e6%96%b9%e5%bc%8f%e7%ae%80%e4%bb%8b"}},[s._v("传统的BIO通信方式简介")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%e4%bc%a0%e7%bb%9f%e7%9a%84bio%e7%9a%84%e9%97%ae%e9%a2%98"}},[s._v("传统的BIO的问题")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%e5%a4%9a%e7%ba%bf%e7%a8%8b%e6%96%b9%e5%bc%8f---%e4%bc%aa%e5%bc%82%e6%ad%a5%e6%96%b9%e5%bc%8f"}},[s._v("多线程方式 - 伪异步方式")])])])]),s._v(" "),n("li",[n("a",{attrs:{href:"#bio%e9%80%9a%e4%bf%a1%e6%96%b9%e5%bc%8f%e6%b7%b1%e5%85%a5%e5%88%86%e6%9e%90"}},[s._v("BIO通信方式深入分析")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%e6%a8%a1%e6%8b%9f20%e4%b8%aa%e5%ae%a2%e6%88%b7%e7%ab%af%e5%b9%b6%e5%8f%91%e8%af%b7%e6%b1%82%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af%e4%bd%bf%e7%94%a8%e5%8d%95%e7%ba%bf%e7%a8%8b"}},[s._v("模拟20个客户端并发请求，服务器端使用单线程:")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%e5%a4%9a%e7%ba%bf%e7%a8%8b%e6%9d%a5%e4%bc%98%e5%8c%96%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af"}},[s._v("多线程来优化服务器端")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%e7%9c%8b%e7%9c%8b%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%ab%af%e7%9a%84%e6%89%a7%e8%a1%8c%e6%95%88%e6%9e%9c"}},[s._v("看看服务器端的执行效果")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%e9%97%ae%e9%a2%98%e6%a0%b9%e6%ba%90"}},[s._v("问题根源")])])])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0"}},[s._v("参考文章")])])])])]),s._v(" "),n("h2",{attrs:{id:"几个重要概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#几个重要概念"}},[s._v("#")]),s._v(" 几个重要概念")]),s._v(" "),n("hr"),s._v(" "),n("ul",[n("li",[n("code",[s._v("阻塞IO")]),s._v(" 和 "),n("code",[s._v("非阻塞IO")])])]),s._v(" "),n("p",[s._v("这两个概念是"),n("code",[s._v("程序级别")]),s._v("的。主要描述的是程序请求操作系统IO操作后，如果IO资源没有准备好，那么程序该如何处理的问题: 前者等待；后者继续执行(并且使用线程一直轮询，直到有IO资源准备好了)")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("同步IO")]),s._v(" 和 "),n("code",[s._v("非同步IO")])])]),s._v(" "),n("p",[s._v("这两个概念是"),n("code",[s._v("操作系统级别")]),s._v("的。主要描述的是操作系统在收到程序请求IO操作后，如果IO资源没有准备好，该如何响应程序的问题: 前者不响应，直到IO资源准备好以后；后者返回一个标记(好让程序和自己知道以后的数据往哪里通知)，当IO资源准备好以后，再用事件机制返回给程序。")]),s._v(" "),n("h2",{attrs:{id:"传统的bio通信方式简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传统的bio通信方式简介"}},[s._v("#")]),s._v(" 传统的BIO通信方式简介")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("以前大多数网络通信方式都是阻塞模式的，即:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("客户端向服务器端发出请求后，客户端会一直等待(不会再做其他事情)，直到服务器端返回结果或者网络出现问题。")])]),s._v(" "),n("li",[n("p",[s._v("服务器端同样的，当在处理某个客户端A发来的请求时，另一个客户端B发来的请求会等待，直到服务器端的这个处理线程完成上一个处理。")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(594),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"传统的bio的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传统的bio的问题"}},[s._v("#")]),s._v(" 传统的BIO的问题")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("同一时间，服务器只能接受来自于客户端A的请求信息；虽然客户端A和客户端B的请求是同时进行的，但客户端B发送的请求信息只能等到服务器接受完A的请求数据后，才能被接受。")])]),s._v(" "),n("li",[n("p",[s._v("由于服务器一次只能处理一个客户端请求，当处理完成并返回后(或者异常时)，才能进行第二次请求的处理。很显然，这样的处理方式在高并发的情况下，是不能采用的。")])])]),s._v(" "),n("h3",{attrs:{id:"多线程方式-伪异步方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程方式-伪异步方式"}},[s._v("#")]),s._v(" 多线程方式 - 伪异步方式")]),s._v(" "),n("p",[s._v("上面说的情况是服务器只有一个线程的情况，那么读者会直接提出我们可以使用多线程技术来解决这个问题:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("当服务器收到客户端X的请求后，(读取到所有请求数据后)将这个请求送入一个独立线程进行处理，然后主线程继续接受客户端Y的请求。")])]),s._v(" "),n("li",[n("p",[s._v("客户端一侧，也可以使用一个子线程和服务器端进行通信。这样客户端主线程的其他工作就不受影响了，当服务器端有响应信息的时候再由这个子线程通过 监听模式/观察模式(等其他设计模式)通知主线程。")])])]),s._v(" "),n("p",[s._v("如下图所示:")]),s._v(" "),n("p",[n("img",{attrs:{src:a(595),alt:""}})]),s._v(" "),n("p",[s._v("但是使用线程来解决这个问题实际上是有局限性的:")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("虽然在服务器端，请求的处理交给了一个独立线程进行，但是操作系统通知accept()的方式还是单个的。也就是，实际上是服务器接收到数据报文后的“业务处理过程”可以多线程，但是数据报文的接受还是需要一个一个的来(下文的示例代码和debug过程我们可以明确看到这一点)")])]),s._v(" "),n("li",[n("p",[s._v("在linux系统中，可以创建的线程是有限的。我们可以通过cat /proc/sys/kernel/threads-max 命令查看可以创建的最大线程数。当然这个值是可以更改的，但是线程越多，CPU切换所需的时间也就越长，用来处理真正业务的需求也就越少。")])]),s._v(" "),n("li",[n("p",[s._v("创建一个线程是有较大的资源消耗的。JVM创建一个线程的时候，即使这个线程不做任何的工作，JVM都会分配一个堆栈空间。这个空间的大小默认为128K，您可以通过-Xss参数进行调整。当然您还可以使用ThreadPoolExecutor线程池来缓解线程的创建问题，但是又会造成BlockingQueue积压任务的持续增加，同样消耗了大量资源。")])]),s._v(" "),n("li",[n("p",[s._v("另外，如果您的应用程序大量使用长连接的话，线程是不会关闭的。这样系统资源的消耗更容易失控。 那么，如果你真想单纯使用线程解决阻塞的问题，那么您自己都可以算出来您一个服务器节点可以一次接受多大的并发了。看来，单纯使用线程解决这个问题不是最好的办法。")])])]),s._v(" "),n("h2",{attrs:{id:"bio通信方式深入分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bio通信方式深入分析"}},[s._v("#")]),s._v(" BIO通信方式深入分析")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("BIO的问题关键不在于是否使用了多线程(包括线程池)处理这次请求，而在于accept()、read()的操作点都是被阻塞。要测试这个问题，也很简单。我们模拟了20个客户端(用20根线程模拟)，利用JAVA的同步计数器CountDownLatch，保证这20个客户都初始化完成后然后同时向服务器发送请求，然后我们来观察一下Server这边接受信息的情况。")]),s._v(" "),n("h3",{attrs:{id:"模拟20个客户端并发请求-服务器端使用单线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模拟20个客户端并发请求-服务器端使用单线程"}},[s._v("#")]),s._v(" 模拟20个客户端并发请求，服务器端使用单线程:")]),s._v(" "),n("p",[s._v("客户端代码(SocketClientDaemon)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("package testBSocket;\n\nimport java.util.concurrent.CountDownLatch;\n\npublic class SocketClientDaemon {\n    public static void main(String[] args) throws Exception {\n        Integer clientNumber = 20;\n        CountDownLatch countDownLatch = new CountDownLatch(clientNumber);\n\n        //分别开始启动这20个客户端\n        for(int index = 0 ; index < clientNumber ; index++ , countDownLatch.countDown()) {\n            SocketClientRequestThread client = new SocketClientRequestThread(countDownLatch, index);\n            new Thread(client).start();\n        }\n\n        //这个wait不涉及到具体的实验逻辑，只是为了保证守护线程在启动所有线程后，进入等待状态\n        synchronized (SocketClientDaemon.class) {\n            SocketClientDaemon.class.wait();\n        }\n    }\n} \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("客户端代码(SocketClientRequestThread模拟请求)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package testBSocket;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.util.concurrent.CountDownLatch;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.log4j.BasicConfigurator;\n\n/**\n * 一个SocketClientRequestThread线程模拟一个客户端请求。\n * @author yinwenjie\n */\npublic class SocketClientRequestThread implements Runnable {\n\n    static {\n        BasicConfigurator.configure();\n    }\n\n    /**\n     * 日志\n     */\n    private static final Log LOGGER = LogFactory.getLog(SocketClientRequestThread.class);\n\n    private CountDownLatch countDownLatch;\n\n    /**\n     * 这个线层的编号\n     * @param countDownLatch\n     */\n    private Integer clientIndex;\n\n    /**\n     * countDownLatch是java提供的同步计数器。\n     * 当计数器数值减为0时，所有受其影响而等待的线程将会被激活。这样保证模拟并发请求的真实性\n     * @param countDownLatch\n     */\n    public SocketClientRequestThread(CountDownLatch countDownLatch , Integer clientIndex) {\n        this.countDownLatch = countDownLatch;\n        this.clientIndex = clientIndex;\n    }\n\n    @Override\n    public void run() {\n        Socket socket = null;\n        OutputStream clientRequest = null;\n        InputStream clientResponse = null;\n\n        try {\n            socket = new Socket("localhost",83);\n            clientRequest = socket.getOutputStream();\n            clientResponse = socket.getInputStream();\n\n            //等待，直到SocketClientDaemon完成所有线程的启动，然后所有线程一起发送请求\n            this.countDownLatch.await();\n\n            //发送请求信息\n            clientRequest.write(("这是第" + this.clientIndex + " 个客户端的请求。").getBytes());\n            clientRequest.flush();\n\n            //在这里等待，直到服务器返回信息\n            SocketClientRequestThread.LOGGER.info("第" + this.clientIndex + "个客户端的请求发送完成，等待服务器返回信息");\n            int maxLen = 1024;\n            byte[] contextBytes = new byte[maxLen];\n            int realLen;\n            String message = "";\n            //程序执行到这里，会一直等待服务器返回信息(注意，前提是in和out都不能close，如果close了就收不到服务器的反馈了)\n            while((realLen = clientResponse.read(contextBytes, 0, maxLen)) != -1) {\n                message += new String(contextBytes , 0 , realLen);\n            }\n            SocketClientRequestThread.LOGGER.info("接收到来自服务器的信息:" + message);\n        } catch (Exception e) {\n            SocketClientRequestThread.LOGGER.error(e.getMessage(), e);\n        } finally {\n            try {\n                if(clientRequest != null) {\n                    clientRequest.close();\n                }\n                if(clientResponse != null) {\n                    clientResponse.close();\n                }\n            } catch (IOException e) {\n                SocketClientRequestThread.LOGGER.error(e.getMessage(), e);\n            }\n        }\n    }\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br")])]),n("p",[s._v("服务器端(SocketServer1)单个线程")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package testBSocket;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.log4j.BasicConfigurator;\n\npublic class SocketServer1 {\n\n    static {\n        BasicConfigurator.configure();\n    }\n\n    /**\n     * 日志\n     */\n    private static final Log LOGGER = LogFactory.getLog(SocketServer1.class);\n\n    public static void main(String[] args) throws Exception{\n        ServerSocket serverSocket = new ServerSocket(83);\n\n        try {\n            while(true) {\n                Socket socket = serverSocket.accept();\n\n                //下面我们收取信息\n                InputStream in = socket.getInputStream();\n                OutputStream out = socket.getOutputStream();\n                Integer sourcePort = socket.getPort();\n                int maxLen = 2048;\n                byte[] contextBytes = new byte[maxLen];\n                //这里也会被阻塞，直到有数据准备好\n                int realLen = in.read(contextBytes, 0, maxLen);\n                //读取信息\n                String message = new String(contextBytes , 0 , realLen);\n\n                //下面打印信息\n                SocketServer1.LOGGER.info("服务器收到来自于端口: " + sourcePort + "的信息: " + message);\n\n                //下面开始发送信息\n                out.write("回发响应信息！".getBytes());\n\n                //关闭\n                out.close();\n                in.close();\n                socket.close();\n            }\n        } catch(Exception e) {\n            SocketServer1.LOGGER.error(e.getMessage(), e);\n        } finally {\n            if(serverSocket != null) {\n                serverSocket.close();\n            }\n        }\n    }\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br")])]),n("h3",{attrs:{id:"多线程来优化服务器端"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程来优化服务器端"}},[s._v("#")]),s._v(" 多线程来优化服务器端")]),s._v(" "),n("p",[s._v("客户端代码和上文一样，最主要是更改服务器端的代码:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('package testBSocket;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.log4j.BasicConfigurator;\n\npublic class SocketServer2 {\n\n    static {\n        BasicConfigurator.configure();\n    }\n\n    private static final Log LOGGER = LogFactory.getLog(SocketServer2.class);\n\n    public static void main(String[] args) throws Exception{\n        ServerSocket serverSocket = new ServerSocket(83);\n\n        try {\n            while(true) {\n                Socket socket = serverSocket.accept();\n                //当然业务处理过程可以交给一个线程(这里可以使用线程池),并且线程的创建是很耗资源的。\n                //最终改变不了.accept()只能一个一个接受socket的情况,并且被阻塞的情况\n                SocketServerThread socketServerThread = new SocketServerThread(socket);\n                new Thread(socketServerThread).start();\n            }\n        } catch(Exception e) {\n            SocketServer2.LOGGER.error(e.getMessage(), e);\n        } finally {\n            if(serverSocket != null) {\n                serverSocket.close();\n            }\n        }\n    }\n}\n\n/**\n * 当然，接收到客户端的socket后，业务的处理过程可以交给一个线程来做。\n * 但还是改变不了socket被一个一个的做accept()的情况。\n * @author yinwenjie\n */\nclass SocketServerThread implements Runnable {\n\n    /**\n     * 日志\n     */\n    private static final Log LOGGER = LogFactory.getLog(SocketServerThread.class);\n\n    private Socket socket;\n\n    public SocketServerThread (Socket socket) {\n        this.socket = socket;\n    }\n\n    @Override\n    public void run() {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            //下面我们收取信息\n            in = socket.getInputStream();\n            out = socket.getOutputStream();\n            Integer sourcePort = socket.getPort();\n            int maxLen = 1024;\n            byte[] contextBytes = new byte[maxLen];\n            //使用线程，同样无法解决read方法的阻塞问题，\n            //也就是说read方法处同样会被阻塞，直到操作系统有数据准备好\n            int realLen = in.read(contextBytes, 0, maxLen);\n            //读取信息\n            String message = new String(contextBytes , 0 , realLen);\n\n            //下面打印信息\n            SocketServerThread.LOGGER.info("服务器收到来自于端口: " + sourcePort + "的信息: " + message);\n\n            //下面开始发送信息\n            out.write("回发响应信息！".getBytes());\n        } catch(Exception e) {\n            SocketServerThread.LOGGER.error(e.getMessage(), e);\n        } finally {\n            //试图关闭\n            try {\n                if(in != null) {\n                    in.close();\n                }\n                if(out != null) {\n                    out.close();\n                }\n                if(this.socket != null) {\n                    this.socket.close();\n                }\n            } catch (IOException e) {\n                SocketServerThread.LOGGER.error(e.getMessage(), e);\n            }\n        }\n    }\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br")])]),n("h3",{attrs:{id:"看看服务器端的执行效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#看看服务器端的执行效果"}},[s._v("#")]),s._v(" 看看服务器端的执行效果")]),s._v(" "),n("p",[s._v("我们主要看一看服务器使用多线程处理时的情况:")]),s._v(" "),n("p",[n("img",{attrs:{src:a(596),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"问题根源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题根源"}},[s._v("#")]),s._v(" 问题根源")]),s._v(" "),n("p",[s._v("那么重点的问题并不是“是否使用了多线程”，而是为什么accept()、read()方法会被阻塞。即: 异步IO模式 就是为了解决这样的并发性存在的。但是为了说清楚异步IO模式，在介绍IO模式的时候，我们就要首先了解清楚，什么是 阻塞式同步、非阻塞式同步、多路复用同步模式。")]),s._v(" "),n("p",[s._v("API文档中对于 serverSocket.accept() 方法的使用描述:")]),s._v(" "),n("blockquote",[n("p",[s._v("Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made.")])]),s._v(" "),n("p",[s._v("serverSocket.accept()会被阻塞? 这里涉及到阻塞式同步IO的工作原理:")]),s._v(" "),n("ul",[n("li",[s._v("服务器线程发起一个accept动作，询问操作系统 是否有新的socket套接字信息从端口X发送过来。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(597),alt:""}})]),s._v(" "),n("ul",[n("li",[s._v("注意，是询问操作系统。也就是说socket套接字的IO模式支持是基于操作系统的，那么自然同步IO/异步IO的支持就是需要操作系统级别的了。如下图:")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(598),alt:""}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(599),alt:""}})]),s._v(" "),n("p",[s._v("如果操作系统没有发现有套接字从指定的端口X来，那么操作系统就会等待。这样serverSocket.accept()方法就会一直等待。这就是为什么accept()方法为什么会阻塞: 它内部的实现是使用的操作系统级别的同步IO。")]),s._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),n("hr"),s._v(" "),n("ul",[n("li",[s._v("文章主要来源于: 银文杰，笔名“说好不能打脸”，"),n("a",{attrs:{href:"https://blog.csdn.net/yinwenjie",target:"_blank",rel:"noopener noreferrer"}},[s._v("博客地址在新窗口打开"),n("OutboundLink")],1),s._v("。他的书《高性能服务系统构建与实战》。")]),s._v(" "),n("li",[s._v("https://blog.csdn.net/yinwenjie/article/details/48274255")])])])}),[],!1,null,null,null);n.default=t.exports},594:function(s,n,a){s.exports=a.p+"assets/img/java-io-bio-1.ef45ec53.png"},595:function(s,n,a){s.exports=a.p+"assets/img/java-io-bio-2.c0e19bf7.png"},596:function(s,n,a){s.exports=a.p+"assets/img/java-io-bio-3.94fc5b21.png"},597:function(s,n,a){s.exports=a.p+"assets/img/java-io-bio-4.cf53ca52.png"},598:function(s,n,a){s.exports=a.p+"assets/img/java-io-bio-5.050a06ca.png"},599:function(s,n,a){s.exports=a.p+"assets/img/java-io-bio-6.d5cf0832.png"}}]);