(window.webpackJsonp=window.webpackJsonp||[]).push([[441],{1636:function(r,t,e){r.exports=e.p+"assets/img/arch-x-overview-learn2.f198dbde.png"},3817:function(r,t,e){"use strict";e.r(t);var a=e(7),n=Object(a.a)({},(function(){var r=this,t=r._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"♥架构-知识体系详解♥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#♥架构-知识体系详解♥"}},[r._v("#")]),r._v(" ♥架构 - 知识体系详解♥")]),r._v(" "),t("p",[r._v("===============================")]),r._v(" "),t("p",[r._v("提示")]),r._v(" "),t("p",[r._v("本系列将带你梳理下架构相关的知识体系。@pdai")]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-overview.html#%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%9E%B6%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[r._v("如何学习架构"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-overview.html#%E5%9F%BA%E7%A1%80%E5%88%B0%E6%96%B9%E6%B3%95%E8%AE%BA",target:"_blank",rel:"noopener noreferrer"}},[r._v("基础到方法论"),t("OutboundLink")],1)]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-overview.html#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%9E%B6%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[r._v("如何理解架构"),t("OutboundLink")],1)]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-overview.html#%E6%9E%B6%E6%9E%84%E9%AB%98%E5%B9%B6%E5%8F%91%E5%92%8C%E9%AB%98%E5%8F%AF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构高并发和高可用"),t("OutboundLink")],1)]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-overview.html#%E6%9E%B6%E6%9E%84%E7%9A%84%E5%AE%89%E5%85%A8",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构的安全"),t("OutboundLink")],1)])])])]),r._v(" "),t("h1",{attrs:{id:"如何学习架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何学习架构"}},[r._v("#")]),r._v(" 如何学习架构")]),r._v(" "),t("hr"),r._v(" "),t("ul",[t("li",[r._v("包含如何学习架构?")])]),r._v(" "),t("p",[t("img",{attrs:{src:e(1636),alt:""}})]),r._v(" "),t("h3",{attrs:{id:"基础到方法论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础到方法论"}},[r._v("#")]),r._v(" 基础到方法论")]),r._v(" "),t("blockquote",[t("p",[r._v("包括架构的概述，特点，目标，本质以及方法论等")])]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-basic.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 架构基础: 特点,本质..."),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("本节总结下架构相关的基础知识：概述，特点，目标，本质...")])])])]),r._v(" "),t("h3",{attrs:{id:"如何理解架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何理解架构"}},[r._v("#")]),r._v(" 如何理解架构")]),r._v(" "),t("blockquote",[t("p",[r._v("理解架构，包括架构的视角，架构的演进，服务化演进，架构的核心要素")])]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-view.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 理解构架的视角"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("在学习架构时，我认为首先要理清楚架构的视角，"),t("strong",[r._v("因为你所认知的架构和别人所说的架构可能是两码事")]),r._v("。对于不同职位的视角是不一样的，比如开发而言他更多的看到的是开发架构；对售前人员，他可能更多的看到的是业务架构；对于运维人员，他看到的可能是运维架构；而对于技术支持和部署人员，他更多的看到的网络和物理架构。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-view-2.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 理解构架的分层"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("技术框架（technological Framework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。于开发者而言，实际工作从通常采用的是分层模型，由于其重要性，这里独立一个章节，总结经典的"),t("strong",[r._v("七层逻辑架构")]),r._v("。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-evolution.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 理解架构的演进"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("在学习架构时，"),t("strong",[r._v("第一步不要去学习框架，而是要学习架构的演进")]),r._v("。强烈推荐李智慧老师的《大型网站技术架构》，这本书翻起来很快，对构筑你自己的体系很有帮助，本文的内容来源于它，在此基础上拓展了下。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-service.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 理解架构的服务演化"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("Kubernetes、Service Mesh 和 Serverless应该是最近比较火的了，而上文主要从"),t("strong",[r._v("逻辑架构角度")]),r._v("分析了架构演进，本文将从"),t("strong",[r._v("服务演化")]),r._v("和"),t("strong",[r._v("容器编排化")]),r._v("的角度帮你增强对架构演进的认识。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-pattern.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 理解架构的模式1"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("架构演进中有很多知识点，总体上可以归结为以下模式，"),t("strong",[r._v("这里说的模式本质是架构中技术点的抽象")]),r._v("。强烈推荐李智慧老师的《大型网站技术架构》，本文的内容也是来源于它，在此基础上拓展了下。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-pattern-2.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 理解架构的模式2"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("本文整理自"),t("a",{attrs:{href:"https://www.cnblogs.com/lovecindywang/p/9670356.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("朱晔的互联网架构实践心得 在新窗口打开"),t("OutboundLink")],1),r._v(", 他是结合了 "),t("strong",[r._v("微软给出的云架构的一些模式")]),r._v("的基础上加入他自己的理解来总结互联网架构中具体的一些模式。我在此基础上进行了些微小的调整。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-core-metrics.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 理解架构的核心要素"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("一般来说软件架构需要关注"),t("strong",[r._v("性能、可用性、伸缩性、扩展性和安全性这5个架构要素")]),r._v("。")])])])]),r._v(" "),t("h3",{attrs:{id:"架构高并发和高可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构高并发和高可用"}},[r._v("#")]),r._v(" 架构高并发和高可用")]),r._v(" "),t("blockquote",[t("p",[r._v("架构高并发和高可用技术点主要包含如下方面。")])]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-y-cache.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构之高并发：缓存"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[t("strong",[r._v("高并发实现的三板斧：缓存，限流和降级")]),r._v("。缓存在高并发系统中有者极其广阔的应用，需要重点掌握，本文重点介绍下缓存及其实现。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-y-ratelimit.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构之高并发：限流"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("每个系统都有服务的上线，所以当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。限流其实就是：当高并发或者瞬时高并发时，为了保证系统的稳定性、可用性，系统以牺牲部分请求为代价或者延迟处理请求为代价，保证系统整体服务可用。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-y-reduce.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构之高并发：降级和熔断"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("在高并发环境下，"),t("strong",[r._v("服务之间的依赖关系导致调用失败，解决的方式通常是: 限流->熔断->隔离->降级, 其目的是防止雪崩效应")]),r._v("。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-y-loadbalance.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构之高可用：负载均衡"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("负载均衡（Load Balance），意思是将负载（工作任务，访问请求）进行平衡、分摊到多个操作单元（服务器，组件）上进行执行。是解决高性能，单点故障（高可用），扩展性（水平伸缩）的终极解决方案。")])])]),r._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-y-backup.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构之高可用：容灾备份,故障转移"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("容灾技术是系统的高可用性技术的一个组成部分，容灾系统更加强调处理外界环境对系统的影响，特别是灾难性事件对整个IT节点的影响，提供节点级别的系统恢复功能。故障转移（failover），即当活动的服务或应用意外终止时，快速启用"),t("strong",[r._v("冗余")]),r._v("或备用的服务器、系统、硬件或者网络接替它们工作。故障恢复是在计划内或计划外中断解决后"),t("strong",[r._v("切换回主站点")]),r._v("的过程。")])])])]),r._v(" "),t("h3",{attrs:{id:"架构的安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构的安全"}},[r._v("#")]),r._v(" 架构的安全")]),r._v(" "),t("blockquote",[t("p",[r._v("此外还需要关注下架构的安全。")])]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/arch/arch-x-security.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("架构 - 保障架构安全"),t("OutboundLink")],1),r._v(" "),t("ul",[t("li",[r._v("本文对架构安全知识点梳理。)")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);