(window.webpackJsonp=window.webpackJsonp||[]).push([[347],{1202:function(t,e,a){t.exports=a.p+"assets/img/springboot-x-jetty-1.9c91ae10.png"},1203:function(t,e,a){t.exports=a.p+"assets/img/springboot-x-jetty-2.ec531983.png"},3721:function(t,e,a){"use strict";a.r(e);var s=a(7),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"springboot应用部署-替换tomcat为jetty容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot应用部署-替换tomcat为jetty容器"}},[t._v("#")]),t._v(" SpringBoot应用部署 - 替换tomcat为Jetty容器")]),t._v(" "),e("p",[t._v("=======================================================================")]),t._v(" "),e("blockquote",[e("p",[t._v("前文我们知道spring-boot-starter-web默认集成tomcat servlet容器(被使用广泛）；而Jetty也是servlet容器，它具有易用性，轻量级，可拓展性等，有些场景（Jetty更满足公有云的分布式环境的需求，而Tomcat更符合企业级环境）下会使用jetty容器。本文主要介绍SpringBoot使用Jetty容器。@pdai")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#springboot%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2---%E6%9B%BF%E6%8D%A2tomcat%E4%B8%BAjetty%E5%AE%B9%E5%99%A8"}},[t._v("SpringBoot应用部署 - 替换tomcat为Jetty容器")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E6%A6%82%E8%BF%B0"}},[t._v("概述")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AFjetty"}},[t._v("什么是Jetty")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#jetty%E5%92%8Ctomcat%E5%AE%B9%E5%99%A8%E5%AF%B9%E6%AF%94"}},[t._v("Jetty和Tomcat容器对比")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E6%9B%BF%E6%8D%A2tomcat%E4%B8%BAjetty%E5%AE%B9%E5%99%A8"}},[t._v("替换tomcat为jetty容器")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E7%A7%BB%E9%99%A4%E5%86%85%E5%B5%8C%E7%9A%84tomcat%E5%B9%B6%E4%BD%BF%E7%94%A8jetty"}},[t._v("移除内嵌的Tomcat并使用jetty")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E9%85%8D%E7%BD%AEjetty"}},[t._v("配置jetty")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95"}},[t._v("简单测试")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3"}},[t._v("进一步理解")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#google%E5%B0%86%E9%BB%98%E8%AE%A4%E7%9A%84%E5%BA%94%E7%94%A8%E5%BC%95%E6%93%8E%E5%88%87%E6%8D%A2%E4%B8%BAjetty"}},[t._v("Google将默认的应用引擎切换为Jetty?")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81"}},[t._v("示例源码")])])])])]),t._v(" "),e("h1",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("hr"),t._v(" "),e("blockquote",[e("p",[t._v("通过Jetty和Tomcat容器的对比，来理解什么样的场景会使用Jetty容器。")])]),t._v(" "),e("h3",{attrs:{id:"什么是jetty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是jetty"}},[t._v("#")]),t._v(" 什么是Jetty")]),t._v(" "),e("blockquote",[e("p",[t._v("来源于百度百科")])]),t._v(" "),e("p",[t._v("Jetty 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。Jetty是使用Java语言编写的，它的API以一组JAR包的形式发布。开发人员可以将Jetty容器实例化成一个对象，可以迅速为一些独立运行(stand-alone)的Java应用提供网络和web连接。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("易用性")])])]),t._v(" "),e("p",[t._v("易用性是 Jetty 设计的基本原则，易用性主要体现在以下几个方面：")]),t._v(" "),e("ol",[e("li",[t._v("通过 XML 或者 API 来对Jetty进行配置；")]),t._v(" "),e("li",[t._v("默认配置可以满足大部分的需求；")]),t._v(" "),e("li",[t._v("将 Jetty 嵌入到应用程序当中只需要非常少的代码；")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("可扩展性")])])]),t._v(" "),e("p",[t._v("在使用了 Ajax 的 Web 2.0 的应用程序中，每个连接需要保持更长的时间，这样线程和内存的消耗量会急剧的增加。这就使得我们担心整个程序会因为单个组件陷入瓶颈而影响整个程序的性能。但是有了 Jetty：")]),t._v(" "),e("ol",[e("li",[t._v("即使在有大量服务请求的情况下，系统的性能也能保持在一个可以接受的状态。")]),t._v(" "),e("li",[t._v("利用 Continuation 机制来处理大量的用户请求以及时间比较长的连接。")]),t._v(" "),e("li",[t._v("另外 Jetty 设计了非常良好的接口，因此在 Jetty 的某种实现无法满足用户的需要时，用户可以非常方便地对 Jetty 的某些实现进行修改，使得 Jetty 适用于特殊的应用程序的需求。")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("易嵌入性")])])]),t._v(" "),e("p",[t._v("Jetty 设计之初就是作为一个优秀的组件来设计的，这也就意味着 Jetty 可以非常容易的嵌入到应用程序当中而不需要程序为了使用 Jetty 做修改。从某种程度上，你也可以把 Jetty 理解为一个嵌入式的Web服务器。")]),t._v(" "),e("p",[t._v("Jetty 可以作为嵌入式服务器使用，Jetty的运行速度较快，而且是轻量级的，可以在Java中可以从test case中控制其运行。从而可以使自动化测试不再依赖外部环境，顺利实现自动化测试。")]),t._v(" "),e("h3",{attrs:{id:"jetty和tomcat容器对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jetty和tomcat容器对比"}},[t._v("#")]),t._v(" Jetty和Tomcat容器对比")]),t._v(" "),e("blockquote",[e("p",[t._v("Tomcat和Jetty都是一种Servlet引擎，他们都支持标准的servlet规范和JavaEE的规范。以下对比来源于百度百科：")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Jetty更轻量级")]),t._v("。这是相对Tomcat而言的。")])]),t._v(" "),e("p",[t._v("由于Tomcat除了遵循Java Servlet规范之外，自身还扩展了大量J2EE特性以满足企业级应用的需求，所以Tomcat是较重量级的，而且配置较Jetty亦复杂许多。但对于大量普通互联网应用而言，并不需要用到Tomcat其他高级特性，所以在这种情况下，使用Tomcat是很浪费资源的。这种劣势放在分布式环境下，更是明显。换成Jetty，对新的Servlet规范的支持较好，且每个应用服务器省下那几兆内存，对于大的分布式环境则是节省大量资源。而且，Jetty的轻量级也使其在处理高并发细粒度请求的场景下显得更快速高效。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Jetty更灵活")])])]),t._v(" "),e("p",[t._v("体现在其可插拔性和可扩展性，更易于开发者对Jetty本身进行二次开发，定制一个适合自身需求的Web Server。 相比之下，重量级的Tomcat原本便支持过多特性，要对其瘦身的成本远大于丰富Jetty的成本。用自己的理解，即增肥容易减肥难。")]),t._v(" "),e("ul",[e("li",[t._v("然而，"),e("strong",[t._v("当支持大规模企业级应用时")])])]),t._v(" "),e("p",[t._v("Jetty也许便需要扩展，在这场景下Tomcat便是更优的。")]),t._v(" "),e("p",[t._v("总结："),e("strong",[t._v("Jetty更满足公有云的分布式环境的需求，而Tomcat更符合企业级环境")]),t._v("。")]),t._v(" "),e("h1",{attrs:{id:"替换tomcat为jetty容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#替换tomcat为jetty容器"}},[t._v("#")]),t._v(" 替换tomcat为jetty容器")]),t._v(" "),e("hr"),t._v(" "),e("blockquote",[e("p",[t._v("这里以一个Helloworld项目（"),e("a",{attrs:{href:"https://pdai.tech/md/spring/springboot/springboot-x-hello-world.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot入门 - 创建第一个Hello world工程"),e("OutboundLink")],1),t._v("）为例，在此基础上移除内嵌的Tomcat并使用jetty。")])]),t._v(" "),e("h3",{attrs:{id:"移除内嵌的tomcat并使用jetty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移除内嵌的tomcat并使用jetty"}},[t._v("#")]),t._v(" 移除内嵌的Tomcat并使用jetty")]),t._v(" "),e("p",[t._v("移除内嵌的Tomcat相关的依赖spring-boot-starter-tomcat，并增加jetty的依赖spring-boot-starter-jetty")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <groupId>org.springframework.boot</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jetty</artifactId>\n</dependency>\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("h3",{attrs:{id:"配置jetty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置jetty"}},[t._v("#")]),t._v(" 配置jetty")]),t._v(" "),e("p",[t._v("jetty相关的配置可以看：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(1202),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"简单测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单测试"}},[t._v("#")]),t._v(" 简单测试")]),t._v(" "),e("p",[t._v("运行SpringBootApplication")]),t._v(" "),e("p",[t._v("结果如下")]),t._v(" "),e("p",[e("img",{attrs:{src:a(1203),alt:""}})]),t._v(" "),e("p",[t._v("运行的日志如下")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.3)\n\n2022-04-18  21:09:21.749  INFO 54806 --- [           main] .p.s.h.j.SpringBootHelloWorldApplication : Starting SpringBootHelloWorldApplication using Java 1.8.0_181 on MacBook-Pro.local with PID 54806 (/Users/pdai/pdai/www/tech-pdai-spring-demos/104-springboot-demo-helloworld-jetty/target/classes started by pdai in /Users/pdai/pdai/www/tech-pdai-spring-demos)\n2022-04-18  21:09:21.752  INFO 54806 --- [           main] .p.s.h.j.SpringBootHelloWorldApplication : No active profile set, falling back to default profiles: default\n2022-04-18  21:09:22.484  INFO 54806 --- [           main] org.eclipse.jetty.util.log               : Logging initialized @1888ms to org.eclipse.jetty.util.log.Slf4jLog\n2022-04-18  21:09:22.556  INFO 54806 --- [           main] o.s.b.w.e.j.JettyServletWebServerFactory : Server initialized with port: 8080\n2022-04-18  21:09:22.558  INFO 54806 --- [           main] org.eclipse.jetty.server.Server          : jetty-9.4.43.v20210629; built: 2021-06-30T11:07:22.254Z; git: 526006ecfa3af7f1a27ef3a288e2bef7ea9dd7e8; jvm 1.8.0_181-b13\n2022-04-18  21:09:22.577  INFO 54806 --- [           main] o.e.j.s.h.ContextHandler.application     : Initializing Spring embedded WebApplicationContext\n2022-04-18  21:09:22.577  INFO 54806 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 755 ms\n2022-04-18  21:09:22.632  INFO 54806 --- [           main] org.eclipse.jetty.server.session         : DefaultSessionIdManager workerName=node0\n2022-04-18  21:09:22.632  INFO 54806 --- [           main] org.eclipse.jetty.server.session         : No SessionScavenger set, using defaults\n2022-04-18  21:09:22.633  INFO 54806 --- [           main] org.eclipse.jetty.server.session         : node0 Scavenging every 660000ms\n2022-04-18  21:09:22.638  INFO 54806 --- [           main] o.e.jetty.server.handler.ContextHandler  : Started o.s.b.w.e.j.JettyEmbeddedWebAppContext@232024b9{application,/,[file:///private/var/folders/p9/9xtytd4j6lxc0ttbpjx63s2c0000gn/T/jetty-docbase.8080.6026164686377179293/],AVAILABLE}\n2022-04-18  21:09:22.638  INFO 54806 --- [           main] org.eclipse.jetty.server.Server          : Started @2043ms\n2022-04-18  21:09:22.887  INFO 54806 --- [           main] o.e.j.s.h.ContextHandler.application     : Initializing Spring DispatcherServlet 'dispatcherServlet'\n2022-04-18  21:09:22.887  INFO 54806 --- [           main] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\n2022-04-18  21:09:22.888  INFO 54806 --- [           main] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\n2022-04-18  21:09:22.905  INFO 54806 --- [           main] o.e.jetty.server.AbstractConnector       : Started ServerConnector@78461bc4{HTTP/1.1, (http/1.1)}{0.0.0.0:8080}\n2022-04-18  21:09:22.906  INFO 54806 --- [           main] o.s.b.web.embedded.jetty.JettyWebServer  : Jetty started on port(s) 8080 (http/1.1) with context path '/'\n2022-04-18  21:09:22.914  INFO 54806 --- [           main] .p.s.h.j.SpringBootHelloWorldApplication : Started SpringBootHelloWorldApplication in 1.648 seconds (JVM running for 2.32)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br")])]),e("h1",{attrs:{id:"进一步理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进一步理解"}},[t._v("#")]),t._v(" 进一步理解")]),t._v(" "),e("hr"),t._v(" "),e("blockquote",[e("p",[t._v("通过几个问题进一步理解。")])]),t._v(" "),e("h3",{attrs:{id:"google将默认的应用引擎切换为jetty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#google将默认的应用引擎切换为jetty"}},[t._v("#")]),t._v(" Google将默认的应用引擎切换为Jetty?")]),t._v(" "),e("blockquote",[e("p",[t._v("Google 应用系统引擎最初是以 Apache Tomcat 作为其 webserver/servlet 容器的，但最终将切换到 Jetty 上。为什么要做这样的改变？")])]),t._v(" "),e("p",[e("strong",[t._v("不是为了性能，而是轻量级")]),t._v("！")]),t._v(" "),e("p",[t._v("Google选择Jetty的关键原因是它的体积和灵活性。在云计算里，体积的因素是很重要，如果你运行几万个Jetty的实例（Google就是这样干的），每个server省1兆，那就会省10几个G的内存（或能够给其他应用提供更多的内存）。")]),t._v(" "),e("p",[t._v("Jetty 被设计成了可插拔和可扩展的特性，这样Google就可以高度的自定义它。他们在其中替换了他们自己的HTTP connector，Google认证，以及他们自己的session集群。也真是奇怪，这个特性对于云计算来说是非常出色的，但同时也让Jetty非常适合嵌入小的设备中，例如手机和机顶盒。")]),t._v(" "),e("h1",{attrs:{id:"示例源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例源码"}},[t._v("#")]),t._v(" 示例源码")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("https://github.com/realpdai/tech-pdai-spring-demos")])])}),[],!1,null,null,null);e.default=r.exports}}]);