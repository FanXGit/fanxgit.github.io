(window.webpackJsonp=window.webpackJsonp||[]).push([[278],{3545:function(e,n,s){"use strict";s.r(n);var a=s(7),t=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"juc线程池-threadpoolexecutor详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#juc线程池-threadpoolexecutor详解"}},[e._v("#")]),e._v(" JUC线程池: ThreadPoolExecutor详解")]),e._v(" "),n("p",[e._v("==============================================================")]),e._v(" "),n("blockquote",[n("p",[e._v("本文主要对ThreadPoolExecutor详解。@pdai")])]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#juc%E7%BA%BF%E7%A8%8B%E6%B1%A0-threadpoolexecutor%E8%AF%A6%E8%A7%A3"}},[e._v("JUC线程池: ThreadPoolExecutor详解")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3"}},[e._v("带着BAT大厂的面试问题去理解")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E7%BA%BF%E7%A8%8B%E6%B1%A0"}},[e._v("为什么要有线程池")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#threadpoolexecutor%E4%BE%8B%E5%AD%90"}},[e._v("ThreadPoolExecutor例子")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#threadpoolexecutor%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3"}},[e._v("ThreadPoolExecutor使用详解")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#execute%E5%8E%9F%E7%90%86"}},[e._v("Execute原理")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E6%95%B0"}},[e._v("参数")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B"}},[e._v("三种类型")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#newfixedthreadpool"}},[e._v("newFixedThreadPool")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#newsinglethreadexecutor"}},[e._v("newSingleThreadExecutor")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#newcachedthreadpool"}},[e._v("newCachedThreadPool")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%85%B3%E9%97%AD%E7%BA%BF%E7%A8%8B%E6%B1%A0"}},[e._v("关闭线程池")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%85%B3%E9%97%AD%E6%96%B9%E5%BC%8F---shutdown"}},[e._v("关闭方式 - shutdown")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%85%B3%E9%97%AD%E6%96%B9%E5%BC%8F---shutdownnow"}},[e._v("关闭方式 - shutdownNow")])])])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#threadpoolexecutor%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3"}},[e._v("ThreadPoolExecutor源码详解")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E5%B1%9E%E6%80%A7"}},[e._v("几个关键属性")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%86%85%E9%83%A8%E7%8A%B6%E6%80%81"}},[e._v("内部状态")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%89%A7%E8%A1%8C"}},[e._v("任务的执行")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#execute%E6%96%B9%E6%B3%95"}},[e._v("execute()方法")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#addworker%E6%96%B9%E6%B3%95"}},[e._v("addWorker方法")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#worker%E7%B1%BB%E7%9A%84runworker%E6%96%B9%E6%B3%95"}},[e._v("Worker类的runworker方法")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#gettask%E6%96%B9%E6%B3%95"}},[e._v("getTask方法")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%8F%90%E4%BA%A4"}},[e._v("任务的提交")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#submit%E6%96%B9%E6%B3%95"}},[e._v("submit方法")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#futuretask%E5%AF%B9%E8%B1%A1"}},[e._v("FutureTask对象")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%85%B3%E9%97%AD"}},[e._v("任务的关闭")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3"}},[e._v("更深入理解")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%8D%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8executors%E5%8E%BB%E5%88%9B%E5%BB%BA-%E6%8E%A8%E8%8D%90%E6%96%B9%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88"}},[e._v("为什么线程池不允许使用Executors去创建? 推荐方式是什么?")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E6%8E%A8%E8%8D%90%E6%96%B9%E5%BC%8F-1"}},[e._v("推荐方式 1")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E6%8E%A8%E8%8D%90%E6%96%B9%E5%BC%8F2"}},[e._v("推荐方式 2")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E6%8E%A8%E8%8D%90%E6%96%B9%E5%BC%8F3"}},[e._v("推荐方式 3")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E9%85%8D%E7%BD%AE%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E5%9B%A0%E7%B4%A0"}},[e._v("配置线程池需要考虑因素")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E7%9B%91%E6%8E%A7%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%8A%B6%E6%80%81"}},[e._v("监控线程池的状态")])])])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[e._v("参考文章")])])])])]),e._v(" "),n("h2",{attrs:{id:"带着bat大厂的面试问题去理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#带着bat大厂的面试问题去理解"}},[e._v("#")]),e._v(" 带着BAT大厂的面试问题去理解")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("提示")]),e._v(" "),n("p",[e._v("请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai")]),e._v(" "),n("ul",[n("li",[e._v("为什么要有线程池?")]),e._v(" "),n("li",[e._v("Java是实现和管理线程池有哪些方式? 请简单举例如何使用。")]),e._v(" "),n("li",[e._v("为什么很多公司不允许使用Executors去创建线程池? 那么推荐怎么使用呢?")]),e._v(" "),n("li",[e._v("ThreadPoolExecutor有哪些核心的配置参数? 请简要说明")]),e._v(" "),n("li",[e._v("ThreadPoolExecutor可以创建哪是哪三种线程池呢?")]),e._v(" "),n("li",[e._v("当队列满了并且worker的数量达到maxSize的时候，会怎么样?")]),e._v(" "),n("li",[e._v("说说ThreadPoolExecutor有哪些RejectedExecutionHandler策略? 默认是什么策略?")]),e._v(" "),n("li",[e._v("简要说下线程池的任务执行机制? execute –> addWorker –>runworker (getTask)")]),e._v(" "),n("li",[e._v("线程池中任务是如何提交的?")]),e._v(" "),n("li",[e._v("线程池中任务是如何关闭的?")]),e._v(" "),n("li",[e._v("在配置线程池的时候需要考虑哪些配置因素?")]),e._v(" "),n("li",[e._v("如何监控线程池的状态?")])]),e._v(" "),n("h2",{attrs:{id:"为什么要有线程池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有线程池"}},[e._v("#")]),e._v(" 为什么要有线程池")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("线程池能够对线程进行统一分配，调优和监控:")]),e._v(" "),n("ul",[n("li",[e._v("降低资源消耗(线程无限制地创建，然后使用完毕后销毁)")]),e._v(" "),n("li",[e._v("提高响应速度(无须创建线程)")]),e._v(" "),n("li",[e._v("提高线程的可管理性")])]),e._v(" "),n("h2",{attrs:{id:"threadpoolexecutor例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor例子"}},[e._v("#")]),e._v(" ThreadPoolExecutor例子")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("Java是如何实现和管理线程池的?")]),e._v(" "),n("p",[e._v("从JDK 5开始，把工作单元与执行机制分离开来，工作单元包括Runnable和Callable，而执行机制由Executor框架提供。")]),e._v(" "),n("ul",[n("li",[e._v("WorkerThread")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class WorkerThread implements Runnable {\n     \n    private String command;\n     \n    public WorkerThread(String s){\n        this.command=s;\n    }\n \n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName()+" Start. Command = "+command);\n        processCommand();\n        System.out.println(Thread.currentThread().getName()+" End.");\n    }\n \n    private void processCommand() {\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n \n    @Override\n    public String toString(){\n        return this.command;\n    }\n} \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br")])]),n("ul",[n("li",[e._v("SimpleThreadPool")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n \npublic class SimpleThreadPool {\n \n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(5);\n        for (int i = 0; i < 10; i++) {\n            Runnable worker = new WorkerThread("" + i);\n            executor.execute(worker);\n          }\n        executor.shutdown(); // This will make the executor accept no new threads and finish all existing threads in the queue\n        while (!executor.isTerminated()) { // Wait until all threads are finish,and also you can use "executor.awaitTermination();" to wait\n        }\n        System.out.println("Finished all threads");\n    }\n\n} \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[e._v("程序中我们创建了固定大小为五个工作线程的线程池。然后分配给线程池十个工作，因为线程池大小为五，它将启动五个工作线程先处理五个工作，其他的工作则处于等待状态，一旦有工作完成，空闲下来工作线程就会捡取等待队列里的其他工作进行执行。")]),e._v(" "),n("p",[e._v("这里是以上程序的输出。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pool-1-thread-2 Start. Command = 1\npool-1-thread-4 Start. Command = 3\npool-1-thread-1 Start. Command = 0\npool-1-thread-3 Start. Command = 2\npool-1-thread-5 Start. Command = 4\npool-1-thread-4 End.\npool-1-thread-5 End.\npool-1-thread-1 End.\npool-1-thread-3 End.\npool-1-thread-3 Start. Command = 8\npool-1-thread-2 End.\npool-1-thread-2 Start. Command = 9\npool-1-thread-1 Start. Command = 7\npool-1-thread-5 Start. Command = 6\npool-1-thread-4 Start. Command = 5\npool-1-thread-2 End.\npool-1-thread-4 End.\npool-1-thread-3 End.\npool-1-thread-5 End.\npool-1-thread-1 End.\nFinished all threads \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("p",[e._v('输出表明线程池中至始至终只有五个名为 "pool-1-thread-1" 到 "pool-1-thread-5" 的五个线程，这五个线程不随着工作的完成而消亡，会一直存在，并负责执行分配给线程池的任务，直到线程池消亡。')]),e._v(" "),n("p",[e._v("Executors 类提供了使用了 ThreadPoolExecutor 的简单的 ExecutorService 实现，但是 ThreadPoolExecutor 提供的功能远不止于此。我们可以在创建 ThreadPoolExecutor 实例时指定活动线程的数量，我们也可以限制线程池的大小并且创建我们自己的 RejectedExecutionHandler 实现来处理不能适应工作队列的工作。")]),e._v(" "),n("p",[e._v("这里是我们自定义的 RejectedExecutionHandler 接口的实现。")]),e._v(" "),n("ul",[n("li",[e._v("RejectedExecutionHandlerImpl.java")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import java.util.concurrent.RejectedExecutionHandler;\nimport java.util.concurrent.ThreadPoolExecutor;\n \npublic class RejectedExecutionHandlerImpl implements RejectedExecutionHandler {\n \n    @Override\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n        System.out.println(r.toString() + " is rejected");\n    }\n \n} \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("ThreadPoolExecutor 提供了一些方法，我们可以使用这些方法来查询 executor 的当前状态，线程池大小，活动线程数量以及任务数量。因此我是用来一个监控线程在特定的时间间隔内打印 executor 信息。")]),e._v(" "),n("ul",[n("li",[e._v("MyMonitorThread.java")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import java.util.concurrent.ThreadPoolExecutor;\n \npublic class MyMonitorThread implements Runnable\n{\n    private ThreadPoolExecutor executor;\n     \n    private int seconds;\n     \n    private boolean run=true;\n \n    public MyMonitorThread(ThreadPoolExecutor executor, int delay)\n    {\n        this.executor = executor;\n        this.seconds=delay;\n    }\n     \n    public void shutdown(){\n        this.run=false;\n    }\n \n    @Override\n    public void run()\n    {\n        while(run){\n                System.out.println(\n                    String.format("[monitor] [%d/%d] Active: %d, Completed: %d, Task: %d, isShutdown: %s, isTerminated: %s",\n                        this.executor.getPoolSize(),\n                        this.executor.getCorePoolSize(),\n                        this.executor.getActiveCount(),\n                        this.executor.getCompletedTaskCount(),\n                        this.executor.getTaskCount(),\n                        this.executor.isShutdown(),\n                        this.executor.isTerminated()));\n                try {\n                    Thread.sleep(seconds*1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n        }\n             \n    }\n} \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br")])]),n("p",[e._v("这里是使用 ThreadPoolExecutor 的线程池实现例子。")]),e._v(" "),n("ul",[n("li",[e._v("WorkerPool.java")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n \npublic class WorkerPool {\n \n    public static void main(String args[]) throws InterruptedException{\n        //RejectedExecutionHandler implementation\n        RejectedExecutionHandlerImpl rejectionHandler = new RejectedExecutionHandlerImpl();\n        //Get the ThreadFactory implementation to use\n        ThreadFactory threadFactory = Executors.defaultThreadFactory();\n        //creating the ThreadPoolExecutor\n        ThreadPoolExecutor executorPool = new ThreadPoolExecutor(2, 4, 10, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2), threadFactory, rejectionHandler);\n        //start the monitoring thread\n        MyMonitorThread monitor = new MyMonitorThread(executorPool, 3);\n        Thread monitorThread = new Thread(monitor);\n        monitorThread.start();\n        //submit work to the thread pool\n        for(int i=0; i<10; i++){\n            executorPool.execute(new WorkerThread("cmd"+i));\n        }\n         \n        Thread.sleep(30000);\n        //shut down the pool\n        executorPool.shutdown();\n        //shut down the monitor thread\n        Thread.sleep(5000);\n        monitor.shutdown();\n         \n    }\n} \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br")])]),n("p",[e._v("注意在初始化 ThreadPoolExecutor 时，我们保持初始池大小为 2，最大池大小为 4 而工作队列大小为 2。因此如果已经有四个正在执行的任务而此时分配来更多任务的话，工作队列将仅仅保留他们(新任务)中的两个，其他的将会被 RejectedExecutionHandlerImpl 处理。")]),e._v(" "),n("p",[e._v("上面程序的输出可以证实以上观点。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pool-1-thread-1 Start. Command = cmd0\npool-1-thread-4 Start. Command = cmd5\ncmd6 is rejected\npool-1-thread-3 Start. Command = cmd4\npool-1-thread-2 Start. Command = cmd1\ncmd7 is rejected\ncmd8 is rejected\ncmd9 is rejected\n[monitor] [0/2] Active: 4, Completed: 0, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [4/2] Active: 4, Completed: 0, Task: 6, isShutdown: false, isTerminated: false\npool-1-thread-4 End.\npool-1-thread-1 End.\npool-1-thread-2 End.\npool-1-thread-3 End.\npool-1-thread-1 Start. Command = cmd3\npool-1-thread-4 Start. Command = cmd2\n[monitor] [4/2] Active: 2, Completed: 4, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [4/2] Active: 2, Completed: 4, Task: 6, isShutdown: false, isTerminated: false\npool-1-thread-1 End.\npool-1-thread-4 End.\n[monitor] [4/2] Active: 0, Completed: 6, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [2/2] Active: 0, Completed: 6, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [2/2] Active: 0, Completed: 6, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [2/2] Active: 0, Completed: 6, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [2/2] Active: 0, Completed: 6, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [2/2] Active: 0, Completed: 6, Task: 6, isShutdown: false, isTerminated: false\n[monitor] [0/2] Active: 0, Completed: 6, Task: 6, isShutdown: true, isTerminated: true\n[monitor] [0/2] Active: 0, Completed: 6, Task: 6, isShutdown: true, isTerminated: true \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br")])]),n("p",[e._v("注意 executor 的活动任务、完成任务以及所有完成任务，这些数量上的变化。我们可以调用 shutdown() 方法来结束所有提交的任务并终止线程池。")]),e._v(" "),n("h2",{attrs:{id:"threadpoolexecutor使用详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor使用详解"}},[e._v("#")]),e._v(" ThreadPoolExecutor使用详解")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("其实java线程池的实现原理很简单，说白了就是一个线程集合workerSet和一个阻塞队列workQueue。当用户向线程池提交一个任务(也就是线程)时，线程池会先将任务放入workQueue中。workerSet中的线程会不断的从workQueue中获取线程然后执行。当workQueue中没有任务的时候，worker就会阻塞，直到队列中有任务了就取出来继续执行。")]),e._v(" "),n("p",[n("img",{attrs:{src:s(543),alt:""}})]),e._v(" "),n("h3",{attrs:{id:"execute原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execute原理"}},[e._v("#")]),e._v(" Execute原理")]),e._v(" "),n("p",[e._v("当一个任务提交至线程池之后:")]),e._v(" "),n("ol",[n("li",[e._v("线程池首先当前运行的线程数量是否少于corePoolSize。如果是，则创建一个新的工作线程来执行任务。如果都在执行任务，则进入2.")]),e._v(" "),n("li",[e._v("判断BlockingQueue是否已经满了，倘若还没有满，则将线程放入BlockingQueue。否则进入3.")]),e._v(" "),n("li",[e._v("如果创建一个新的工作线程将使当前运行的线程数量超过maximumPoolSize，则交给RejectedExecutionHandler来处理任务。")])]),e._v(" "),n("p",[e._v("当ThreadPoolExecutor创建新线程时，通过CAS来更新线程池的状态ctl.")]),e._v(" "),n("h3",{attrs:{id:"参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              RejectedExecutionHandler handler) \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("ul",[n("li",[n("p",[n("code",[e._v("corePoolSize")]),e._v(" 线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize, 即使有其他空闲线程能够执行新来的任务, 也会继续创建线程；如果当前线程数为corePoolSize，继续提交的任务被保存到阻塞队列中，等待被执行；如果执行了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有核心线程。")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("workQueue")]),e._v(" 用来保存等待被执行的任务的阻塞队列. 在JDK中提供了如下阻塞队列: 具体可以参考"),n("RouterLink",{attrs:{to:"/md/java/thread/java-thread-x-juc-collection-BlockingQueue.html"}},[e._v("JUC 集合: BlockQueue详解")])],1),e._v(" "),n("ul",[n("li",[n("code",[e._v("ArrayBlockingQueue")]),e._v(": 基于数组结构的有界阻塞队列，按FIFO排序任务；")]),e._v(" "),n("li",[n("code",[e._v("LinkedBlockingQueue")]),e._v(": 基于链表结构的阻塞队列，按FIFO排序任务，吞吐量通常要高于ArrayBlockingQueue；")]),e._v(" "),n("li",[n("code",[e._v("SynchronousQueue")]),e._v(": 一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue；")]),e._v(" "),n("li",[n("code",[e._v("PriorityBlockingQueue")]),e._v(": 具有优先级的无界阻塞队列；")])])])]),e._v(" "),n("p",[n("code",[e._v("LinkedBlockingQueue")]),e._v("比"),n("code",[e._v("ArrayBlockingQueue")]),e._v("在插入删除节点性能方面更优，但是二者在"),n("code",[e._v("put()")]),e._v(", "),n("code",[e._v("take()")]),e._v("任务的时均需要加锁，"),n("code",[e._v("SynchronousQueue")]),e._v("使用无锁算法，根据节点的状态判断执行，而不需要用到锁，其核心是"),n("code",[e._v("Transfer.transfer()")]),e._v(".")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("maximumPoolSize")]),e._v(" 线程池中允许的最大线程数。如果当前阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于maximumPoolSize；当阻塞队列是无界队列, 则maximumPoolSize则不起作用, 因为无法提交至核心线程池的线程会一直持续地放入workQueue.")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("keepAliveTime")]),e._v(" 线程空闲时的存活时间，即当线程没有任务执行时，该线程继续存活的时间；默认情况下，该参数只在线程数大于corePoolSize时才有用, 超过这个时间的空闲线程将被终止；")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("unit")]),e._v(" keepAliveTime的单位")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("threadFactory")]),e._v(" 创建线程的工厂，通过自定义的线程工厂可以给每个新建的线程设置一个具有识别度的线程名。默认为DefaultThreadFactory")])]),e._v(" "),n("li",[n("p",[n("code",[e._v("handler")]),e._v(" 线程池的饱和策略，当阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，必须采取一种策略处理该任务，线程池提供了4种策略:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("AbortPolicy")]),e._v(": 直接抛出异常，默认策略；")]),e._v(" "),n("li",[n("code",[e._v("CallerRunsPolicy")]),e._v(": 用调用者所在的线程来执行任务；")]),e._v(" "),n("li",[n("code",[e._v("DiscardOldestPolicy")]),e._v(": 丢弃阻塞队列中靠最前的任务，并执行当前任务；")]),e._v(" "),n("li",[n("code",[e._v("DiscardPolicy")]),e._v(": 直接丢弃任务；")])])])]),e._v(" "),n("p",[e._v("当然也可以根据应用场景实现RejectedExecutionHandler接口，自定义饱和策略，如记录日志或持久化存储不能处理的任务。")]),e._v(" "),n("h3",{attrs:{id:"三种类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三种类型"}},[e._v("#")]),e._v(" 三种类型")]),e._v(" "),n("h4",{attrs:{id:"newfixedthreadpool"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#newfixedthreadpool"}},[e._v("#")]),e._v(" newFixedThreadPool")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>());\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("线程池的线程数量达corePoolSize后，即使线程池没有可执行任务时，也不会释放线程。")]),e._v(" "),n("p",[e._v("FixedThreadPool的工作队列为无界队列LinkedBlockingQueue(队列容量为Integer.MAX_VALUE), 这会导致以下问题:")]),e._v(" "),n("ul",[n("li",[e._v("线程池里的线程数量不超过corePoolSize,这导致了maximumPoolSize和keepAliveTime将会是个无用参数")]),e._v(" "),n("li",[e._v("由于使用了无界队列, 所以FixedThreadPool永远不会拒绝, 即饱和策略失效")])]),e._v(" "),n("h4",{attrs:{id:"newsinglethreadexecutor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#newsinglethreadexecutor"}},[e._v("#")]),e._v(" newSingleThreadExecutor")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("初始化的线程池中只有一个线程，如果该线程异常结束，会重新创建一个新的线程继续执行任务，唯一的线程可以保证所提交任务的顺序执行.")]),e._v(" "),n("p",[e._v("由于使用了无界队列, 所以SingleThreadPool永远不会拒绝, 即饱和策略失效")]),e._v(" "),n("h4",{attrs:{id:"newcachedthreadpool"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#newcachedthreadpool"}},[e._v("#")]),e._v(" newCachedThreadPool")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                    60L, TimeUnit.SECONDS,\n                                    new SynchronousQueue<Runnable>());\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("线程池的线程数可达到Integer.MAX_VALUE，即2147483647，内部使用SynchronousQueue作为阻塞队列； 和newFixedThreadPool创建的线程池不同，newCachedThreadPool在没有任务执行时，当线程的空闲时间超过keepAliveTime，会自动释放线程资源，当提交新任务时，如果没有空闲线程，则创建新线程执行任务，会导致一定的系统开销； 执行过程与前两种稍微不同:")]),e._v(" "),n("ul",[n("li",[e._v("主线程调用SynchronousQueue的offer()方法放入task, 倘若此时线程池中有空闲的线程尝试读取 SynchronousQueue的task, 即调用了SynchronousQueue的poll(), 那么主线程将该task交给空闲线程. 否则执行(2)")]),e._v(" "),n("li",[e._v("当线程池为空或者没有空闲的线程, 则创建新的线程执行任务.")]),e._v(" "),n("li",[e._v("执行完任务的线程倘若在60s内仍空闲, 则会被终止. 因此长时间空闲的CachedThreadPool不会持有任何线程资源.")])]),e._v(" "),n("h3",{attrs:{id:"关闭线程池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关闭线程池"}},[e._v("#")]),e._v(" 关闭线程池")]),e._v(" "),n("p",[e._v("遍历线程池中的所有线程，然后逐个调用线程的interrupt方法来中断线程.")]),e._v(" "),n("h4",{attrs:{id:"关闭方式-shutdown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关闭方式-shutdown"}},[e._v("#")]),e._v(" 关闭方式 - shutdown")]),e._v(" "),n("p",[e._v("将线程池里的线程状态设置成SHUTDOWN状态, 然后中断所有没有正在执行任务的线程.")]),e._v(" "),n("h4",{attrs:{id:"关闭方式-shutdownnow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关闭方式-shutdownnow"}},[e._v("#")]),e._v(" 关闭方式 - shutdownNow")]),e._v(" "),n("p",[e._v("将线程池里的线程状态设置成STOP状态, 然后停止所有正在执行或暂停任务的线程. 只要调用这两个关闭方法中的任意一个, isShutDown() 返回true. 当所有任务都成功关闭了, isTerminated()返回true.")]),e._v(" "),n("h2",{attrs:{id:"threadpoolexecutor源码详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor源码详解"}},[e._v("#")]),e._v(" ThreadPoolExecutor源码详解")]),e._v(" "),n("hr"),e._v(" "),n("h3",{attrs:{id:"几个关键属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#几个关键属性"}},[e._v("#")]),e._v(" 几个关键属性")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//这个属性是用来存放 当前运行的worker数量以及线程池状态的\n//int是32位的，这里把int的高3位拿来充当线程池状态的标志位,后29位拿来充当当前运行worker的数量\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n//存放任务的阻塞队列\nprivate final BlockingQueue<Runnable> workQueue;\n//worker的集合,用set来存放\nprivate final HashSet<Worker> workers = new HashSet<Worker>();\n//历史达到的worker数最大值\nprivate int largestPoolSize;\n//当队列满了并且worker的数量达到maxSize的时候,执行具体的拒绝策略\nprivate volatile RejectedExecutionHandler handler;\n//超出coreSize的worker的生存时间\nprivate volatile long keepAliveTime;\n//常驻worker的数量\nprivate volatile int corePoolSize;\n//最大worker的数量,一般当workQueue满了才会用到这个参数\nprivate volatile int maximumPoolSize; \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("h3",{attrs:{id:"内部状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部状态"}},[e._v("#")]),e._v(" 内部状态")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n// runState is stored in the high-order bits\nprivate static final int RUNNING    = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\nprivate static final int STOP       =  1 << COUNT_BITS;\nprivate static final int TIDYING    =  2 << COUNT_BITS;\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n\n// Packing and unpacking ctl\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\nprivate static int ctlOf(int rs, int wc) { return rs | wc; } \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("其中AtomicInteger变量ctl的功能非常强大: 利用低29位表示线程池中线程数，通过高3位表示线程池的运行状态:")]),e._v(" "),n("ul",[n("li",[e._v("RUNNING: -1 << COUNT_BITS，即高3位为111，该状态的线程池会接收新任务，并处理阻塞队列中的任务；")]),e._v(" "),n("li",[e._v("SHUTDOWN: 0 << COUNT_BITS，即高3位为000，该状态的线程池不会接收新任务，但会处理阻塞队列中的任务；")]),e._v(" "),n("li",[e._v("STOP : 1 << COUNT_BITS，即高3位为001，该状态的线程不会接收新任务，也不会处理阻塞队列中的任务，而且会中断正在运行的任务；")]),e._v(" "),n("li",[e._v("TIDYING : 2 << COUNT_BITS，即高3位为010, 所有的任务都已经终止；")]),e._v(" "),n("li",[e._v("TERMINATED: 3 << COUNT_BITS，即高3位为011, terminated()方法已经执行完成")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(544),alt:""}})]),e._v(" "),n("h3",{attrs:{id:"任务的执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任务的执行"}},[e._v("#")]),e._v(" 任务的执行")]),e._v(" "),n("blockquote",[n("p",[e._v("execute –> addWorker –>runworker (getTask)")])]),e._v(" "),n("p",[e._v("线程池的工作线程通过Woker类实现，在ReentrantLock锁的保证下，把Woker实例插入到HashSet后，并启动Woker中的线程。 从Woker类的构造方法实现可以发现: 线程工厂在创建线程thread时，将Woker实例本身this作为参数传入，当执行start方法启动线程thread时，本质是执行了Worker的runWorker方法。 firstTask执行完成之后，通过getTask方法从阻塞队列中获取等待的任务，如果队列中没有任务，getTask方法会被阻塞并挂起，不会占用cpu资源；")]),e._v(" "),n("h4",{attrs:{id:"execute-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execute-方法"}},[e._v("#")]),e._v(" execute()方法")]),e._v(" "),n("p",[e._v("ThreadPoolExecutor.execute(task)实现了Executor.execute(task)")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n     * Proceed in 3 steps:\n     *\n     * 1. If fewer than corePoolSize threads are running, try to\n     * start a new thread with the given command as its first\n     * task.  The call to addWorker atomically checks runState and\n     * workerCount, and so prevents false alarms that would add\n     * threads when it shouldn't, by returning false.\n     *\n     * 2. If a task can be successfully queued, then we still need\n     * to double-check whether we should have added a thread\n     * (because existing ones died since last checking) or that\n     * the pool shut down since entry into this method. So we\n     * recheck state and if necessary roll back the enqueuing if\n     * stopped, or start a new thread if there are none.\n     *\n     * 3. If we cannot queue task, then we try to add a new\n     * thread.  If it fails, we know we are shut down or saturated\n     * and so reject the task.\n     */\n    int c = ctl.get();\n    if (workerCountOf(c) < corePoolSize) {  \n    //workerCountOf获取线程池的当前线程数；小于corePoolSize，执行addWorker创建新线程执行command任务\n       if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // double check: c, recheck\n    // 线程池处于RUNNING状态，把提交的任务成功放入阻塞队列中\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        // recheck and if necessary 回滚到入队操作前，即倘若线程池shutdown状态，就remove(command)\n        //如果线程池没有RUNNING，成功从阻塞队列中删除任务，执行reject方法处理任务\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        //线程池处于running状态，但是没有线程，则创建线程\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 往线程池中创建新的线程失败，则reject任务\n    else if (!addWorker(command, false))\n        reject(command);\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br")])]),n("ul",[n("li",[e._v("为什么需要double check线程池的状态?")])]),e._v(" "),n("p",[e._v("在多线程环境下，线程池的状态时刻在变化，而ctl.get()是非原子操作，很有可能刚获取了线程池状态后线程池状态就改变了。判断是否将command加入workque是线程池之前的状态。倘若没有double check，万一线程池处于非running状态(在多线程环境下很有可能发生)，那么command永远不会执行。")]),e._v(" "),n("h4",{attrs:{id:"addworker方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addworker方法"}},[e._v("#")]),e._v(" addWorker方法")]),e._v(" "),n("p",[e._v("从方法execute的实现可以看出: addWorker主要负责创建新的线程并执行任务 线程池创建新线程执行任务时，需要 获取全局锁:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private final ReentrantLock mainLock = new ReentrantLock(); \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private boolean addWorker(Runnable firstTask, boolean core) {\n    // CAS更新线程池数量\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n                firstTask == null &&\n                ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            // 线程池重入锁\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();  // 线程启动，执行任务(Worker.thread(firstTask).start());\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br")])]),n("h4",{attrs:{id:"worker类的runworker方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#worker类的runworker方法"}},[e._v("#")]),e._v(" Worker类的runworker方法")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" private final class Worker extends AbstractQueuedSynchronizer implements Runnable{\n     Worker(Runnable firstTask) {\n         setState(-1); // inhibit interrupts until runWorker\n         this.firstTask = firstTask;\n         this.thread = getThreadFactory().newThread(this); // 创建线程\n     }\n     /** Delegates main run loop to outer runWorker  */\n     public void run() {\n         runWorker(this);\n     }\n     // ...\n } \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("ul",[n("li",[e._v("继承了AQS类，可以方便的实现工作线程的中止操作；")]),e._v(" "),n("li",[e._v("实现了Runnable接口，可以将自身作为一个任务在工作线程中执行；")]),e._v(" "),n("li",[e._v("当前提交的任务firstTask作为参数传入Worker的构造方法；")])]),e._v(" "),n("p",[e._v("一些属性还有构造方法:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//运行的线程,前面addWorker方法中就是直接通过启动这个线程来启动这个worker\nfinal Thread thread;\n//当一个worker刚创建的时候,就先尝试执行这个任务\nRunnable firstTask;\n//记录完成任务的数量\nvolatile long completedTasks;\n\nWorker(Runnable firstTask) {\n    setState(-1); // inhibit interrupts until runWorker\n    this.firstTask = firstTask;\n    //创建一个Thread,将自己设置给他,后面这个thread启动的时候,也就是执行worker的run方法\n    this.thread = getThreadFactory().newThread(this);\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("runWorker方法是线程池的核心:")]),e._v(" "),n("ul",[n("li",[e._v("线程启动之后，通过unlock方法释放锁，设置AQS的state为0，表示运行可中断；")]),e._v(" "),n("li",[e._v("Worker执行firstTask或从workQueue中获取任务:\n"),n("ul",[n("li",[e._v("进行加锁操作，保证thread不被其他线程中断(除非线程池被中断)")]),e._v(" "),n("li",[e._v("检查线程池状态，倘若线程池处于中断状态，当前线程将中断。")]),e._v(" "),n("li",[e._v("执行beforeExecute")]),e._v(" "),n("li",[e._v("执行任务的run方法")]),e._v(" "),n("li",[e._v("执行afterExecute方法")]),e._v(" "),n("li",[e._v("解锁操作")])])])]),e._v(" "),n("blockquote",[n("p",[e._v("通过getTask方法从阻塞队列中获取等待的任务，如果队列中没有任务，getTask方法会被阻塞并挂起，不会占用cpu资源；")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("final void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    w.unlock(); // allow interrupts\n    boolean completedAbruptly = true;\n    try {\n        // 先执行firstTask，再从workerQueue中取task(getTask())\n\n        while (task != null || (task = getTask()) != null) {\n            w.lock();\n            // If pool is stopping, ensure thread is interrupted;\n            // if not, ensure thread is not interrupted.  This\n            // requires a recheck in second case to deal with\n            // shutdownNow race while clearing interrupt\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                    (Thread.interrupted() &&\n                    runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        processWorkerExit(w, completedAbruptly);\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br")])]),n("h4",{attrs:{id:"gettask方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gettask方法"}},[e._v("#")]),e._v(" getTask方法")]),e._v(" "),n("p",[e._v("下面来看一下getTask()方法，这里面涉及到keepAliveTime的使用，从这个方法我们可以看出线程池是怎么让超过corePoolSize的那部分worker销毁的。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private Runnable getTask() {\n    boolean timedOut = false; // Did the last poll() time out?\n\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            decrementWorkerCount();\n            return null;\n        }\n\n        int wc = workerCountOf(c);\n\n        // Are workers subject to culling?\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n        if ((wc > maximumPoolSize || (timed && timedOut))\n            && (wc > 1 || workQueue.isEmpty())) {\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            continue;\n        }\n\n        try {\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                workQueue.take();\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br")])]),n("p",[e._v("注意这里一段代码是keepAliveTime起作用的关键:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\nRunnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                workQueue.take(); \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("allowCoreThreadTimeOut为false，线程即使空闲也不会被销毁；倘若为ture，在keepAliveTime内仍空闲则会被销毁。")]),e._v(" "),n("p",[e._v("如果线程允许空闲等待而不被销毁timed == false，workQueue.take任务: 如果阻塞队列为空，当前线程会被挂起等待；当队列中有任务加入时，线程被唤醒，take方法返回任务，并执行；")]),e._v(" "),n("p",[e._v("如果线程不允许无休止空闲timed == true, workQueue.poll任务: 如果在keepAliveTime时间内，阻塞队列还是没有任务，则返回null；")]),e._v(" "),n("h3",{attrs:{id:"任务的提交"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任务的提交"}},[e._v("#")]),e._v(" 任务的提交")]),e._v(" "),n("p",[n("img",{attrs:{src:s(545),alt:""}})]),e._v(" "),n("ol",[n("li",[e._v("submit任务，等待线程池execute")]),e._v(" "),n("li",[e._v("执行FutureTask类的get方法时，会把主线程封装成WaitNode节点并保存在waiters链表中， 并阻塞等待运行结果；")]),e._v(" "),n("li",[e._v("FutureTask任务执行完成后，通过UNSAFE设置waiters相应的waitNode为null，并通过LockSupport类unpark方法唤醒主线程；")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class Test{\n    public static void main(String[] args) {\n\n        ExecutorService es = Executors.newCachedThreadPool();\n        Future<String> future = es.submit(new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                try {\n                    TimeUnit.SECONDS.sleep(2);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return "future result";\n            }\n        });\n        try {\n            String result = future.get();\n            System.out.println(result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n} \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("p",[e._v("在实际业务场景中，Future和Callable基本是成对出现的，Callable负责产生结果，Future负责获取结果。")]),e._v(" "),n("ol",[n("li",[e._v("Callable接口类似于Runnable，只是Runnable没有返回值。")]),e._v(" "),n("li",[e._v("Callable任务除了返回正常结果之外，如果发生异常，该异常也会被返回，即Future可以拿到异步执行任务各种结果；")]),e._v(" "),n("li",[e._v("Future.get方法会导致主线程阻塞，直到Callable任务执行完成；")])]),e._v(" "),n("h4",{attrs:{id:"submit方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#submit方法"}},[e._v("#")]),e._v(" submit方法")]),e._v(" "),n("p",[e._v("AbstractExecutorService.submit()实现了ExecutorService.submit() 可以获取执行完的返回值, 而ThreadPoolExecutor 是AbstractExecutorService.submit()的子类，所以submit方法也是ThreadPoolExecutor`的方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// submit()在ExecutorService中的定义\n<T> Future<T> submit(Callable<T> task);\n\n<T> Future<T> submit(Runnable task, T result);\n\nFuture<?> submit(Runnable task); \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// submit方法在AbstractExecutorService中的实现\npublic Future<?> submit(Runnable task) {\n    if (task == null) throw new NullPointerException();\n    // 通过submit方法提交的Callable任务会被封装成了一个FutureTask对象。\n    RunnableFuture<Void> ftask = newTaskFor(task, null);\n    execute(ftask);\n    return ftask;\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("通过submit方法提交的Callable任务会被封装成了一个FutureTask对象。通过Executor.execute方法提交FutureTask到线程池中等待被执行，最终执行的是FutureTask的run方法；")]),e._v(" "),n("h4",{attrs:{id:"futuretask对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#futuretask对象"}},[e._v("#")]),e._v(" FutureTask对象")]),e._v(" "),n("p",[n("code",[e._v("public class FutureTask<V> implements RunnableFuture<V>")]),e._v(" 可以将FutureTask提交至线程池中等待被执行(通过FutureTask的run方法来执行)")]),e._v(" "),n("ul",[n("li",[e._v("内部状态")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/* The run state of this task, initially NEW. \n    * ...\n    * Possible state transitions:\n    * NEW -> COMPLETING -> NORMAL\n    * NEW -> COMPLETING -> EXCEPTIONAL\n    * NEW -> CANCELLED\n    * NEW -> INTERRUPTING -> INTERRUPTED\n    */\nprivate volatile int state;\nprivate static final int NEW          = 0;\nprivate static final int COMPLETING   = 1;\nprivate static final int NORMAL       = 2;\nprivate static final int EXCEPTIONAL  = 3;\nprivate static final int CANCELLED    = 4;\nprivate static final int INTERRUPTING = 5;\nprivate static final int INTERRUPTED  = 6; \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("内部状态的修改通过sun.misc.Unsafe修改")]),e._v(" "),n("ul",[n("li",[e._v("get方法")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public V get() throws InterruptedException, ExecutionException {\n    int s = state;\n    if (s <= COMPLETING)\n        s = awaitDone(false, 0L);\n    return report(s);\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("内部通过awaitDone方法对主线程进行阻塞，具体实现如下:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private int awaitDone(boolean timed, long nanos)\n    throws InterruptedException {\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    WaitNode q = null;\n    boolean queued = false;\n    for (;;) {\n        if (Thread.interrupted()) {\n            removeWaiter(q);\n            throw new InterruptedException();\n        }\n\n        int s = state;\n        if (s > COMPLETING) {\n            if (q != null)\n                q.thread = null;\n            return s;\n        }\n        else if (s == COMPLETING) // cannot time out yet\n            Thread.yield();\n        else if (q == null)\n            q = new WaitNode();\n        else if (!queued)\n            queued = UNSAFE.compareAndSwapObject(this, waitersOffset,q.next = waiters, q);\n        else if (timed) {\n            nanos = deadline - System.nanoTime();\n            if (nanos <= 0L) {\n                removeWaiter(q);\n                return state;\n            }\n            LockSupport.parkNanos(this, nanos);\n        }\n        else\n            LockSupport.park(this);\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br")])]),n("ol",[n("li",[e._v("如果主线程被中断，则抛出中断异常；")]),e._v(" "),n("li",[e._v("判断FutureTask当前的state，如果大于COMPLETING，说明任务已经执行完成，则直接返回；")]),e._v(" "),n("li",[e._v("如果当前state等于COMPLETING，说明任务已经执行完，这时主线程只需通过yield方法让出cpu资源，等待state变成NORMAL；")]),e._v(" "),n("li",[e._v("通过WaitNode类封装当前线程，并通过UNSAFE添加到waiters链表；")]),e._v(" "),n("li",[e._v("最终通过LockSupport的park或parkNanos挂起线程；")])]),e._v(" "),n("p",[e._v("run方法")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void run() {\n    if (state != NEW || !UNSAFE.compareAndSwapObject(this, runnerOffset, null, Thread.currentThread()))\n        return;\n    try {\n        Callable<V> c = callable;\n        if (c != null && state == NEW) {\n            V result;\n            boolean ran;\n            try {\n                result = c.call();\n                ran = true;\n            } catch (Throwable ex) {\n                result = null;\n                ran = false;\n                setException(ex);\n            }\n            if (ran)\n                set(result);\n        }\n    } finally {\n        // runner must be non-null until state is settled to\n        // prevent concurrent calls to run()\n        runner = null;\n        // state must be re-read after nulling runner to prevent\n        // leaked interrupts\n        int s = state;\n        if (s >= INTERRUPTING)\n            handlePossibleCancellationInterrupt(s);\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br")])]),n("p",[e._v("FutureTask.run方法是在线程池中被执行的，而非主线程")]),e._v(" "),n("ol",[n("li",[e._v("通过执行Callable任务的call方法；")]),e._v(" "),n("li",[e._v("如果call执行成功，则通过set方法保存结果；")]),e._v(" "),n("li",[e._v("如果call执行有异常，则通过setException保存异常；")])]),e._v(" "),n("h3",{attrs:{id:"任务的关闭"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任务的关闭"}},[e._v("#")]),e._v(" 任务的关闭")]),e._v(" "),n("p",[e._v("shutdown方法会将线程池的状态设置为SHUTDOWN,线程池进入这个状态后,就拒绝再接受任务,然后会将剩余的任务全部执行完")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void shutdown() {\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        //检查是否可以关闭线程\n        checkShutdownAccess();\n        //设置线程池状态\n        advanceRunState(SHUTDOWN);\n        //尝试中断worker\n        interruptIdleWorkers();\n            //预留方法,留给子类实现\n        onShutdown(); // hook for ScheduledThreadPoolExecutor\n    } finally {\n        mainLock.unlock();\n    }\n    tryTerminate();\n}\n\nprivate void interruptIdleWorkers() {\n    interruptIdleWorkers(false);\n}\n\nprivate void interruptIdleWorkers(boolean onlyOne) {\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        //遍历所有的worker\n        for (Worker w : workers) {\n            Thread t = w.thread;\n            //先尝试调用w.tryLock(),如果获取到锁,就说明worker是空闲的,就可以直接中断它\n            //注意的是,worker自己本身实现了AQS同步框架,然后实现的类似锁的功能\n            //它实现的锁是不可重入的,所以如果worker在执行任务的时候,会先进行加锁,这里tryLock()就会返回false\n            if (!t.isInterrupted() && w.tryLock()) {\n                try {\n                    t.interrupt();\n                } catch (SecurityException ignore) {\n                } finally {\n                    w.unlock();\n                }\n            }\n            if (onlyOne)\n                break;\n        }\n    } finally {\n        mainLock.unlock();\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br")])]),n("p",[e._v("shutdownNow做的比较绝，它先将线程池状态设置为STOP，然后拒绝所有提交的任务。最后中断左右正在运行中的worker,然后清空任务队列。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public List<Runnable> shutdownNow() {\n    List<Runnable> tasks;\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        checkShutdownAccess();\n        //检测权限\n        advanceRunState(STOP);\n        //中断所有的worker\n        interruptWorkers();\n        //清空任务队列\n        tasks = drainQueue();\n    } finally {\n        mainLock.unlock();\n    }\n    tryTerminate();\n    return tasks;\n}\n\nprivate void interruptWorkers() {\n    final ReentrantLock mainLock = this.mainLock;\n    mainLock.lock();\n    try {\n        //遍历所有worker，然后调用中断方法\n        for (Worker w : workers)\n            w.interruptIfStarted();\n    } finally {\n        mainLock.unlock();\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br")])]),n("h2",{attrs:{id:"更深入理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更深入理解"}},[e._v("#")]),e._v(" 更深入理解")]),e._v(" "),n("hr"),e._v(" "),n("h3",{attrs:{id:"为什么线程池不允许使用executors去创建-推荐方式是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么线程池不允许使用executors去创建-推荐方式是什么"}},[e._v("#")]),e._v(" 为什么线程池不允许使用Executors去创建? 推荐方式是什么?")]),e._v(" "),n("p",[e._v("线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors各个方法的弊端：")]),e._v(" "),n("ul",[n("li",[e._v("newFixedThreadPool和newSingleThreadExecutor: 主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM。")]),e._v(" "),n("li",[e._v("newCachedThreadPool和newScheduledThreadPool: 主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至OOM。")])]),e._v(" "),n("h4",{attrs:{id:"推荐方式-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#推荐方式-1"}},[e._v("#")]),e._v(" 推荐方式 1")]),e._v(" "),n("p",[e._v("首先引入：commons-lang3包")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1,\n        new BasicThreadFactory.Builder().namingPattern("example-schedule-pool-%d").daemon(true).build()); \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("h4",{attrs:{id:"推荐方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#推荐方式"}},[e._v("#")]),e._v(" 推荐方式")]),e._v(" "),n("p",[e._v("首先引入：com.google.guava包")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat("demo-pool-%d").build();\n\n//Common Thread Pool\nExecutorService pool = new ThreadPoolExecutor(5, 200, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());\n\n// excute\npool.execute(()-> System.out.println(Thread.currentThread().getName()));\n\n //gracefully shutdown\npool.shutdown(); \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("h4",{attrs:{id:"推荐方式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#推荐方式-2"}},[e._v("#")]),e._v(" 推荐方式")]),e._v(" "),n("p",[e._v("spring配置线程池方式：自定义线程工厂bean需要实现ThreadFactory，可参考该接口的其它默认实现类，使用方式直接注入bean调用execute(Runnable task)方法即可")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' <bean id="userThreadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">\n        <property name="corePoolSize" value="10" />\n        <property name="maxPoolSize" value="100" />\n        <property name="queueCapacity" value="2000" />\n\n    <property name="threadFactory" value= threadFactory />\n        <property name="rejectedExecutionHandler">\n            <ref local="rejectedExecutionHandler" />\n        </property>\n    </bean>\n    \n    //in code\n    userThreadPool.execute(thread); \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("h3",{attrs:{id:"配置线程池需要考虑因素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置线程池需要考虑因素"}},[e._v("#")]),e._v(" 配置线程池需要考虑因素")]),e._v(" "),n("p",[e._v("从任务的优先级，任务的执行时间长短，任务的性质(CPU密集/ IO密集)，任务的依赖关系这四个角度来分析。并且近可能地使用有界的工作队列。")]),e._v(" "),n("p",[e._v("性质不同的任务可用使用不同规模的线程池分开处理:")]),e._v(" "),n("ul",[n("li",[e._v("CPU密集型: 尽可能少的线程，Ncpu+1")]),e._v(" "),n("li",[e._v("IO密集型: 尽可能多的线程, Ncpu*2，比如数据库连接池")]),e._v(" "),n("li",[e._v("混合型: CPU密集型的任务与IO密集型任务的执行时间差别较小，拆分为两个线程池；否则没有必要拆分。")])]),e._v(" "),n("h3",{attrs:{id:"监控线程池的状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监控线程池的状态"}},[e._v("#")]),e._v(" 监控线程池的状态")]),e._v(" "),n("p",[e._v("可以使用ThreadPoolExecutor以下方法:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("getTaskCount()")]),e._v(" Returns the approximate total number of tasks that have ever been scheduled for execution.")]),e._v(" "),n("li",[n("code",[e._v("getCompletedTaskCount()")]),e._v(" Returns the approximate total number of tasks that have completed execution. 返回结果少于getTaskCount()。")]),e._v(" "),n("li",[n("code",[e._v("getLargestPoolSize()")]),e._v(" Returns the largest number of threads that have ever simultaneously been in the pool. 返回结果小于等于maximumPoolSize")]),e._v(" "),n("li",[n("code",[e._v("getPoolSize()")]),e._v(" Returns the current number of threads in the pool.")]),e._v(" "),n("li",[n("code",[e._v("getActiveCount()")]),e._v(" Returns the approximate number of threads that are actively executing tasks.")])]),e._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[e._v("《Java并发编程艺术》")]),e._v(" "),n("li",[e._v("https://www.jianshu.com/p/87bff5cc8d8c")]),e._v(" "),n("li",[e._v("https://blog.csdn.net/programmer_at/article/details/79799267")]),e._v(" "),n("li",[e._v("https://blog.csdn.net/u013332124/article/details/79587436")]),e._v(" "),n("li",[e._v("https://www.journaldev.com/1069/threadpoolexecutor-java-thread-pool-example-executorservice")])])])}),[],!1,null,null,null);n.default=t.exports},543:function(e,n,s){e.exports=s.p+"assets/img/thread_java-thread-x-executors-1.ce931917.png"},544:function(e,n,s){e.exports=s.p+"assets/img/thread_java-thread-x-executors-2.ff04d984.png"},545:function(e,n,s){e.exports=s.p+"assets/img/thread_java-thread-x-executors-3.6536fdb2.png"}}]);