(window.webpackJsonp=window.webpackJsonp||[]).push([[193],{1474:function(n,s,a){n.exports=a.p+"assets/img/alg-graph-dfs-1.ef12dfe1.jpg"},1475:function(n,s,a){n.exports=a.p+"assets/img/alg-graph-dfs-2.79ba4fb5.jpg"},1476:function(n,s,a){n.exports=a.p+"assets/img/alg-graph-dfs-3.838017d3.jpg"},1477:function(n,s,a){n.exports=a.p+"assets/img/alg-graph-dfs-4.97360458.jpg"},1478:function(n,s,a){n.exports=a.p+"assets/img/alg-graph-bfs-1.e2611c81.jpg"},1479:function(n,s,a){n.exports=a.p+"assets/img/alg-graph-bfs-2.83581ddb.jpg"},3778:function(n,s,a){"use strict";a.r(s);var e=a(7),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"图-遍历-bfs-dfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图-遍历-bfs-dfs"}},[n._v("#")]),n._v(" 图 - 遍历(BFS & DFS)")]),n._v(" "),s("p",[n._v("====================================")]),n._v(" "),s("blockquote",[s("p",[n._v('图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似; 广度优先搜索算法(Breadth First Search)，又称为"宽度优先搜索"或"横向优先搜索"。 @pdai')])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2",target:"_blank",rel:"noopener noreferrer"}},[n._v("深度优先搜索"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[n._v("深度优先搜索介绍"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E5%9B%BE%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"}},[n._v("深度优先搜索图解"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2",target:"_blank",rel:"noopener noreferrer"}},[n._v("有向图的深度优先搜索"),s("OutboundLink")],1)])])]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2",target:"_blank",rel:"noopener noreferrer"}},[n._v("广度优先搜索"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[n._v("广度优先搜索介绍"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E5%9B%BE%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"}},[n._v("广度优先搜索图解"),s("OutboundLink")],1)])])]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E7%9B%B8%E5%85%B3%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[n._v("相关实现"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%90%91%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[n._v("邻接矩阵实现无向图"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%97%A0%E5%90%91%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[n._v("邻接表实现的无向图"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%9C%89%E5%90%91%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[n._v("邻接矩阵实现的有向图"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E9%82%BB%E6%8E%A5%E8%A1%A8%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%9C%89%E5%90%91%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[n._v("邻接表实现的有向图"),s("OutboundLink")],1)])])]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph-bfs-dfs.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考文章"),s("OutboundLink")],1)])]),n._v(" "),s("h1",{attrs:{id:"深度优先搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索"}},[n._v("#")]),n._v(" 深度优先搜索")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"深度优先搜索介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索介绍"}},[n._v("#")]),n._v(" 深度优先搜索介绍")]),n._v(" "),s("p",[n._v("它的思想: 假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。")]),n._v(" "),s("p",[n._v("显然，深度优先搜索是一个递归的过程。")]),n._v(" "),s("h3",{attrs:{id:"深度优先搜索图解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索图解"}},[n._v("#")]),n._v(" 深度优先搜索图解")]),n._v(" "),s("h4",{attrs:{id:"无向图的深度优先搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无向图的深度优先搜索"}},[n._v("#")]),n._v(" 无向图的深度优先搜索")]),n._v(" "),s("p",[n._v('下面以"无向图"为例，来对深度优先搜索进行演示。')]),n._v(" "),s("p",[s("img",{attrs:{src:a(1474),alt:""}})]),n._v(" "),s("p",[n._v("对上面的图G1进行深度优先遍历，从顶点A开始。")]),n._v(" "),s("p",[s("img",{attrs:{src:a(1475),alt:""}})]),n._v(" "),s("p",[s("code",[n._v("第1步")]),n._v(": 访问A。")]),n._v(" "),s("p",[s("code",[n._v("第2步")]),n._v(': 访问(A的邻接点)C。 在第1步访问A之后，接下来应该访问的是A的邻接点，即"C,D,F"中的一个。但在本文的实现中，顶点ABCDEFG是按照顺序存储，C在"D和F"的前面，因此，先访问C。')]),n._v(" "),s("p",[s("code",[n._v("第3步")]),n._v(': 访问(C的邻接点)B。 在第2步访问C之后，接下来应该访问C的邻接点，即"B和D"中一个(A已经被访问过，就不算在内)。而由于B在D之前，先访问B。')]),n._v(" "),s("p",[s("code",[n._v("第4步")]),n._v(": 访问(C的邻接点)D。 在第3步访问了C的邻接点B之后，B没有未被访问的邻接点；因此，返回到访问C的另一个邻接点D。")]),n._v(" "),s("p",[s("code",[n._v("第5步")]),n._v(': 访问(A的邻接点)F。 前面已经访问了A，并且访问完了"A的邻接点B的所有邻接点(包括递归的邻接点在内)"；因此，此时返回到访问A的另一个邻接点F。')]),n._v(" "),s("p",[s("code",[n._v("第6步")]),n._v(": 访问(F的邻接点)G。")]),n._v(" "),s("p",[s("code",[n._v("第7步")]),n._v(": 访问(G的邻接点)E。")]),n._v(" "),s("p",[n._v("因此访问顺序是: A -> C -> B -> D -> F -> G -> E")]),n._v(" "),s("h3",{attrs:{id:"有向图的深度优先搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有向图的深度优先搜索"}},[n._v("#")]),n._v(" 有向图的深度优先搜索")]),n._v(" "),s("p",[n._v('下面以"有向图"为例，来对深度优先搜索进行演示。')]),n._v(" "),s("p",[s("img",{attrs:{src:a(1476),alt:""}})]),n._v(" "),s("p",[n._v("对上面的图G2进行深度优先遍历，从顶点A开始。")]),n._v(" "),s("p",[s("img",{attrs:{src:a(1477),alt:""}})]),n._v(" "),s("p",[s("code",[n._v("第1步")]),n._v(": 访问A。")]),n._v(" "),s("p",[s("code",[n._v("第2步")]),n._v(": 访问B。 在访问了A之后，接下来应该访问的是A的出边的另一个顶点，即顶点B。")]),n._v(" "),s("p",[s("code",[n._v("第3步")]),n._v(": 访问C。 在访问了B之后，接下来应该访问的是B的出边的另一个顶点，即顶点C,E,F。在本文实现的图中，顶点ABCDEFG按照顺序存储，因此先访问C。")]),n._v(" "),s("p",[s("code",[n._v("第4步")]),n._v(": 访问E。 接下来访问C的出边的另一个顶点，即顶点E。")]),n._v(" "),s("p",[s("code",[n._v("第5步")]),n._v(": 访问D。 接下来访问E的出边的另一个顶点，即顶点B,D。顶点B已经被访问过，因此访问顶点D。")]),n._v(" "),s("p",[s("code",[n._v("第6步")]),n._v(': 访问F。 接下应该回溯"访问A的出边的另一个顶点F"。')]),n._v(" "),s("p",[s("code",[n._v("第7步")]),n._v(": 访问G。")]),n._v(" "),s("p",[n._v("因此访问顺序是: A -> B -> C -> E -> D -> F -> G")]),n._v(" "),s("h1",{attrs:{id:"广度优先搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索"}},[n._v("#")]),n._v(" 广度优先搜索")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"广度优先搜索介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索介绍"}},[n._v("#")]),n._v(" 广度优先搜索介绍")]),n._v(" "),s("p",[n._v('广度优先搜索算法(Breadth First Search)，又称为"宽度优先搜索"或"横向优先搜索"，简称BFS。')]),n._v(" "),s("p",[n._v("它的思想是: 从图中某顶点v出发，在访问了v之后依次访问v的各个未曾访问过的邻接点，然后分别从这些邻接点出发依次访问它们的邻接点，并使得“先被访问的顶点的邻接点先于后被访问的顶点的邻接点被访问，直至图中所有已被访问的顶点的邻接点都被访问到。如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问过的顶点作为新的起始点，重复上述过程，直至图中所有顶点都被访问到为止。")]),n._v(" "),s("p",[n._v("换句话说，广度优先搜索遍历图的过程是以v为起点，由近至远，依次访问和v有路径相通且路径长度为1,2...的顶点。")]),n._v(" "),s("h3",{attrs:{id:"广度优先搜索图解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索图解"}},[n._v("#")]),n._v(" 广度优先搜索图解")]),n._v(" "),s("h4",{attrs:{id:"无向图的广度优先搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无向图的广度优先搜索"}},[n._v("#")]),n._v(" 无向图的广度优先搜索")]),n._v(" "),s("p",[n._v('下面以"无向图"为例，来对广度优先搜索进行演示。还是以上面的图G1为例进行说明。')]),n._v(" "),s("p",[s("img",{attrs:{src:a(1478),alt:""}})]),n._v(" "),s("p",[s("code",[n._v("第1步")]),n._v(": 访问A。")]),n._v(" "),s("p",[s("code",[n._v("第2步")]),n._v(': 依次访问C,D,F。 在访问了A之后，接下来访问A的邻接点。前面已经说过，在本文实现中，顶点ABCDEFG按照顺序存储的，C在"D和F"的前面，因此，先访问C。再访问完C之后，再依次访问D,F。')]),n._v(" "),s("p",[s("code",[n._v("第3步")]),n._v(": 依次访问B,G。 在第2步访问完C,D,F之后，再依次访问它们的邻接点。首先访问C的邻接点B，再访问F的邻接点G。")]),n._v(" "),s("p",[s("code",[n._v("第4步")]),n._v(": 访问E。 在第3步访问完B,G之后，再依次访问它们的邻接点。只有G有邻接点E，因此访问G的邻接点E。")]),n._v(" "),s("p",[n._v("因此访问顺序是: A -> C -> D -> F -> B -> G -> E")]),n._v(" "),s("h4",{attrs:{id:"有向图的广度优先搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有向图的广度优先搜索"}},[n._v("#")]),n._v(" 有向图的广度优先搜索")]),n._v(" "),s("p",[n._v('下面以"有向图"为例，来对广度优先搜索进行演示。还是以上面的图G2为例进行说明。')]),n._v(" "),s("p",[s("img",{attrs:{src:a(1479),alt:""}})]),n._v(" "),s("p",[s("code",[n._v("第1步")]),n._v(": 访问A。")]),n._v(" "),s("p",[s("code",[n._v("第2步")]),n._v(": 访问B。")]),n._v(" "),s("p",[s("code",[n._v("第3步")]),n._v(": 依次访问C,E,F。 在访问了B之后，接下来访问B的出边的另一个顶点，即C,E,F。前面已经说过，在本文实现中，顶点ABCDEFG按照顺序存储的，因此会先访问C，再依次访问E,F。")]),n._v(" "),s("p",[s("code",[n._v("第4步")]),n._v(": 依次访问D,G。 在访问完C,E,F之后，再依次访问它们的出边的另一个顶点。还是按照C,E,F的顺序访问，C的已经全部访问过了，那么就只剩下E,F；先访问E的邻接点D，再访问F的邻接点G。")]),n._v(" "),s("p",[n._v("因此访问顺序是: A -> B -> C -> E -> F -> D -> G")]),n._v(" "),s("h1",{attrs:{id:"相关实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关实现"}},[n._v("#")]),n._v(" 相关实现")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"邻接矩阵实现无向图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵实现无向图"}},[n._v("#")]),n._v(" 邻接矩阵实现无向图")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("import java.io.IOException;\nimport java.util.Scanner;\n\npublic class MatrixUDG {\n\n    private char[] mVexs;       // 顶点集合\n    private int[][] mMatrix;    // 邻接矩阵\n\n    /* \n     * 创建图(自己输入数据)\n     */\n    public MatrixUDG() {\n\n        // 输入\"顶点数\"和\"边数\"\n        System.out.printf(\"input vertex number: \");\n        int vlen = readInt();\n        System.out.printf(\"input edge number: \");\n        int elen = readInt();\n        if ( vlen < 1 || elen < 1 || (elen > (vlen*(vlen - 1)))) {\n            System.out.printf(\"input error: invalid parameters!\\n\");\n            return ;\n        }\n        \n        // 初始化\"顶点\"\n        mVexs = new char[vlen];\n        for (int i = 0; i < mVexs.length; i++) {\n            System.out.printf(\"vertex(%d): \", i);\n            mVexs[i] = readChar();\n        }\n\n        // 初始化\"边\"\n        mMatrix = new int[vlen][vlen];\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            System.out.printf(\"edge(%d):\", i);\n            char c1 = readChar();\n            char c2 = readChar();\n            int p1 = getPosition(c1);\n            int p2 = getPosition(c2);\n\n            if (p1==-1 || p2==-1) {\n                System.out.printf(\"input error: invalid edge!\\n\");\n                return ;\n            }\n\n            mMatrix[p1][p2] = 1;\n            mMatrix[p2][p1] = 1;\n        }\n    }\n\n    /*\n     * 创建图(用已提供的矩阵)\n     *\n     * 参数说明：\n     *     vexs  -- 顶点数组\n     *     edges -- 边数组\n     */\n    public MatrixUDG(char[] vexs, char[][] edges) {\n        \n        // 初始化\"顶点数\"和\"边数\"\n        int vlen = vexs.length;\n        int elen = edges.length;\n\n        // 初始化\"顶点\"\n        mVexs = new char[vlen];\n        for (int i = 0; i < mVexs.length; i++)\n            mVexs[i] = vexs[i];\n\n        // 初始化\"边\"\n        mMatrix = new int[vlen][vlen];\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            int p1 = getPosition(edges[i][0]);\n            int p2 = getPosition(edges[i][1]);\n\n            mMatrix[p1][p2] = 1;\n            mMatrix[p2][p1] = 1;\n        }\n    }\n\n    /*\n     * 返回ch位置\n     */\n    private int getPosition(char ch) {\n        for(int i=0; i<mVexs.length; i++)\n            if(mVexs[i]==ch)\n                return i;\n        return -1;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private char readChar() {\n        char ch='0';\n\n        do {\n            try {\n                ch = (char)System.in.read();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } while(!((ch>='a'&&ch<='z') || (ch>='A'&&ch<='Z')));\n\n        return ch;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private int readInt() {\n        Scanner scanner = new Scanner(System.in);\n        return scanner.nextInt();\n    }\n\n    /*\n     * 返回顶点v的第一个邻接顶点的索引，失败则返回-1\n     */\n    private int firstVertex(int v) {\n\n        if (v<0 || v>(mVexs.length-1))\n            return -1;\n\n        for (int i = 0; i < mVexs.length; i++)\n            if (mMatrix[v][i] == 1)\n                return i;\n\n        return -1;\n    }\n\n    /*\n     * 返回顶点v相对于w的下一个邻接顶点的索引，失败则返回-1\n     */\n    private int nextVertex(int v, int w) {\n\n        if (v<0 || v>(mVexs.length-1) || w<0 || w>(mVexs.length-1))\n            return -1;\n\n        for (int i = w + 1; i < mVexs.length; i++)\n            if (mMatrix[v][i] == 1)\n                return i;\n\n        return -1;\n    }\n\n    /*\n     * 深度优先搜索遍历图的递归实现\n     */\n    private void DFS(int i, boolean[] visited) {\n\n        visited[i] = true;\n        System.out.printf(\"%c \", mVexs[i]);\n        // 遍历该顶点的所有邻接顶点。若是没有访问过，那么继续往下走\n        for (int w = firstVertex(i); w >= 0; w = nextVertex(i, w)) {\n            if (!visited[w])\n                DFS(w, visited);\n        }\n    }\n\n    /*\n     * 深度优先搜索遍历图\n     */\n    public void DFS() {\n        boolean[] visited = new boolean[mVexs.length];       // 顶点访问标记\n\n        // 初始化所有顶点都没有被访问\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf(\"DFS: \");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i])\n                DFS(i, visited);\n        }\n        System.out.printf(\"\\n\");\n    }\n\n    /*\n     * 广度优先搜索（类似于树的层次遍历）\n     */\n    public void BFS() {\n        int head = 0;\n        int rear = 0;\n        int[] queue = new int[mVexs.length];            // 辅组队列\n        boolean[] visited = new boolean[mVexs.length];  // 顶点访问标记\n\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf(\"BFS: \");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i]) {\n                visited[i] = true;\n                System.out.printf(\"%c \", mVexs[i]);\n                queue[rear++] = i;  // 入队列\n            }\n\n            while (head != rear) {\n                int j = queue[head++];  // 出队列\n                for (int k = firstVertex(j); k >= 0; k = nextVertex(j, k)) { //k是为访问的邻接顶点\n                    if (!visited[k]) {\n                        visited[k] = true;\n                        System.out.printf(\"%c \", mVexs[k]);\n                        queue[rear++] = k;\n                    }\n                }\n            }\n        }\n        System.out.printf(\"\\n\");\n    }\n\n    /*\n     * 打印矩阵队列图\n     */\n    public void print() {\n        System.out.printf(\"Martix Graph:\\n\");\n        for (int i = 0; i < mVexs.length; i++) {\n            for (int j = 0; j < mVexs.length; j++)\n                System.out.printf(\"%d \", mMatrix[i][j]);\n            System.out.printf(\"\\n\");\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] vexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n        char[][] edges = new char[][]{\n            {'A', 'C'}, \n            {'A', 'D'}, \n            {'A', 'F'}, \n            {'B', 'C'}, \n            {'C', 'D'}, \n            {'E', 'G'}, \n            {'F', 'G'}};\n        MatrixUDG pG;\n\n        // 自定义\"图\"(输入矩阵队列)\n        //pG = new MatrixUDG();\n        // 采用已有的\"图\"\n        pG = new MatrixUDG(vexs, edges);\n\n        pG.print();   // 打印图\n        pG.DFS();     // 深度优先遍历\n        pG.BFS();     // 广度优先遍历\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("245")]),s("br")])]),s("h3",{attrs:{id:"邻接表实现的无向图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邻接表实现的无向图"}},[n._v("#")]),n._v(" 邻接表实现的无向图")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('import java.io.IOException;\nimport java.util.Scanner;\n\npublic class ListUDG {\n    // 邻接表中表对应的链表的顶点\n    private class ENode {\n        int ivex;       // 该边所指向的顶点的位置\n        ENode nextEdge; // 指向下一条弧的指针\n    }\n\n    // 邻接表中表的顶点\n    private class VNode {\n        char data;          // 顶点信息\n        ENode firstEdge;    // 指向第一条依附该顶点的弧\n    };\n\n    private VNode[] mVexs;  // 顶点数组\n\n\n    /* \n     * 创建图(自己输入数据)\n     */\n    public ListUDG() {\n\n        // 输入"顶点数"和"边数"\n        System.out.printf("input vertex number: ");\n        int vlen = readInt();\n        System.out.printf("input edge number: ");\n        int elen = readInt();\n        if ( vlen < 1 || elen < 1 || (elen > (vlen*(vlen - 1)))) {\n            System.out.printf("input error: invalid parameters!\\n");\n            return ;\n        }\n        \n        // 初始化"顶点"\n        mVexs = new VNode[vlen];\n        for (int i = 0; i < mVexs.length; i++) {\n            System.out.printf("vertex(%d): ", i);\n            mVexs[i] = new VNode();\n            mVexs[i].data = readChar();\n            mVexs[i].firstEdge = null;\n        }\n\n        // 初始化"边"\n        //mMatrix = new int[vlen][vlen];\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            System.out.printf("edge(%d):", i);\n            char c1 = readChar();\n            char c2 = readChar();\n            int p1 = getPosition(c1);\n            int p2 = getPosition(c2);\n            // 初始化node1\n            ENode node1 = new ENode();\n            node1.ivex = p2;\n            // 将node1链接到"p1所在链表的末尾"\n            if(mVexs[p1].firstEdge == null)\n              mVexs[p1].firstEdge = node1;\n            else\n                linkLast(mVexs[p1].firstEdge, node1);\n            // 初始化node2\n            ENode node2 = new ENode();\n            node2.ivex = p1;\n            // 将node2链接到"p2所在链表的末尾"\n            if(mVexs[p2].firstEdge == null)\n              mVexs[p2].firstEdge = node2;\n            else\n                linkLast(mVexs[p2].firstEdge, node2);\n        }\n    }\n\n    /*\n     * 创建图(用已提供的矩阵)\n     *\n     * 参数说明：\n     *     vexs  -- 顶点数组\n     *     edges -- 边数组\n     */\n    public ListUDG(char[] vexs, char[][] edges) {\n        \n        // 初始化"顶点数"和"边数"\n        int vlen = vexs.length;\n        int elen = edges.length;\n\n        // 初始化"顶点"\n        mVexs = new VNode[vlen];\n        for (int i = 0; i < mVexs.length; i++) {\n            mVexs[i] = new VNode();\n            mVexs[i].data = vexs[i];\n            mVexs[i].firstEdge = null;\n        }\n\n        // 初始化"边"\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            char c1 = edges[i][0];\n            char c2 = edges[i][1];\n            // 读取边的起始顶点和结束顶点\n            int p1 = getPosition(edges[i][0]);\n            int p2 = getPosition(edges[i][1]);\n\n            // 初始化node1\n            ENode node1 = new ENode();\n            node1.ivex = p2;\n            // 将node1链接到"p1所在链表的末尾"\n            if(mVexs[p1].firstEdge == null)\n              mVexs[p1].firstEdge = node1;\n            else\n                linkLast(mVexs[p1].firstEdge, node1);\n            // 初始化node2\n            ENode node2 = new ENode();\n            node2.ivex = p1;\n            // 将node2链接到"p2所在链表的末尾"\n            if(mVexs[p2].firstEdge == null)\n              mVexs[p2].firstEdge = node2;\n            else\n                linkLast(mVexs[p2].firstEdge, node2);\n        }\n    }\n\n    /*\n     * 将node节点链接到list的最后\n     */\n    private void linkLast(ENode list, ENode node) {\n        ENode p = list;\n\n        while(p.nextEdge!=null)\n            p = p.nextEdge;\n        p.nextEdge = node;\n    }\n\n    /*\n     * 返回ch位置\n     */\n    private int getPosition(char ch) {\n        for(int i=0; i<mVexs.length; i++)\n            if(mVexs[i].data==ch)\n                return i;\n        return -1;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private char readChar() {\n        char ch=\'0\';\n\n        do {\n            try {\n                ch = (char)System.in.read();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } while(!((ch>=\'a\'&&ch<=\'z\') || (ch>=\'A\'&&ch<=\'Z\')));\n\n        return ch;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private int readInt() {\n        Scanner scanner = new Scanner(System.in);\n        return scanner.nextInt();\n    }\n\n    /*\n     * 深度优先搜索遍历图的递归实现\n     */\n    private void DFS(int i, boolean[] visited) {\n        ENode node;\n\n        visited[i] = true;\n        System.out.printf("%c ", mVexs[i].data);\n        node = mVexs[i].firstEdge;\n        while (node != null) {\n            if (!visited[node.ivex])\n                DFS(node.ivex, visited);\n            node = node.nextEdge;\n        }\n    }\n\n    /*\n     * 深度优先搜索遍历图\n     */\n    public void DFS() {\n        boolean[] visited = new boolean[mVexs.length];       // 顶点访问标记\n\n        // 初始化所有顶点都没有被访问\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf("DFS: ");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i])\n                DFS(i, visited);\n        }\n        System.out.printf("\\n");\n    }\n\n    /*\n     * 广度优先搜索（类似于树的层次遍历）\n     */\n    public void BFS() {\n        int head = 0;\n        int rear = 0;\n        int[] queue = new int[mVexs.length];            // 辅组队列\n        boolean[] visited = new boolean[mVexs.length];  // 顶点访问标记\n\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf("BFS: ");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i]) {\n                visited[i] = true;\n                System.out.printf("%c ", mVexs[i].data);\n                queue[rear++] = i;  // 入队列\n            }\n\n            while (head != rear) {\n                int j = queue[head++];  // 出队列\n                ENode node = mVexs[j].firstEdge;\n                while (node != null) {\n                    int k = node.ivex;\n                    if (!visited[k])\n                    {\n                        visited[k] = true;\n                        System.out.printf("%c ", mVexs[k].data);\n                        queue[rear++] = k;\n                    }\n                    node = node.nextEdge;\n                }\n            }\n        }\n        System.out.printf("\\n");\n    }\n\n    /*\n     * 打印矩阵队列图\n     */\n    public void print() {\n        System.out.printf("List Graph:\\n");\n        for (int i = 0; i < mVexs.length; i++) {\n            System.out.printf("%d(%c): ", i, mVexs[i].data);\n            ENode node = mVexs[i].firstEdge;\n            while (node != null) {\n                System.out.printf("%d(%c) ", node.ivex, mVexs[node.ivex].data);\n                node = node.nextEdge;\n            }\n            System.out.printf("\\n");\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] vexs = {\'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\'};\n        char[][] edges = new char[][]{\n            {\'A\', \'C\'}, \n            {\'A\', \'D\'}, \n            {\'A\', \'F\'}, \n            {\'B\', \'C\'}, \n            {\'C\', \'D\'}, \n            {\'E\', \'G\'}, \n            {\'F\', \'G\'}};\n        ListUDG pG;\n\n        // 自定义"图"(输入矩阵队列)\n        //pG = new ListUDG();\n        // 采用已有的"图"\n        pG = new ListUDG(vexs, edges);\n\n        pG.print();   // 打印图\n        pG.DFS();     // 深度优先遍历\n        pG.BFS();     // 广度优先遍历\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("245")]),s("br"),s("span",{staticClass:"line-number"},[n._v("246")]),s("br"),s("span",{staticClass:"line-number"},[n._v("247")]),s("br"),s("span",{staticClass:"line-number"},[n._v("248")]),s("br"),s("span",{staticClass:"line-number"},[n._v("249")]),s("br"),s("span",{staticClass:"line-number"},[n._v("250")]),s("br"),s("span",{staticClass:"line-number"},[n._v("251")]),s("br"),s("span",{staticClass:"line-number"},[n._v("252")]),s("br"),s("span",{staticClass:"line-number"},[n._v("253")]),s("br"),s("span",{staticClass:"line-number"},[n._v("254")]),s("br"),s("span",{staticClass:"line-number"},[n._v("255")]),s("br"),s("span",{staticClass:"line-number"},[n._v("256")]),s("br"),s("span",{staticClass:"line-number"},[n._v("257")]),s("br"),s("span",{staticClass:"line-number"},[n._v("258")]),s("br"),s("span",{staticClass:"line-number"},[n._v("259")]),s("br"),s("span",{staticClass:"line-number"},[n._v("260")]),s("br"),s("span",{staticClass:"line-number"},[n._v("261")]),s("br"),s("span",{staticClass:"line-number"},[n._v("262")]),s("br"),s("span",{staticClass:"line-number"},[n._v("263")]),s("br"),s("span",{staticClass:"line-number"},[n._v("264")]),s("br"),s("span",{staticClass:"line-number"},[n._v("265")]),s("br"),s("span",{staticClass:"line-number"},[n._v("266")]),s("br"),s("span",{staticClass:"line-number"},[n._v("267")]),s("br"),s("span",{staticClass:"line-number"},[n._v("268")]),s("br"),s("span",{staticClass:"line-number"},[n._v("269")]),s("br"),s("span",{staticClass:"line-number"},[n._v("270")]),s("br"),s("span",{staticClass:"line-number"},[n._v("271")]),s("br"),s("span",{staticClass:"line-number"},[n._v("272")]),s("br"),s("span",{staticClass:"line-number"},[n._v("273")]),s("br"),s("span",{staticClass:"line-number"},[n._v("274")]),s("br"),s("span",{staticClass:"line-number"},[n._v("275")]),s("br"),s("span",{staticClass:"line-number"},[n._v("276")]),s("br")])]),s("h3",{attrs:{id:"邻接矩阵实现的有向图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵实现的有向图"}},[n._v("#")]),n._v(" 邻接矩阵实现的有向图")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("import java.io.IOException;\nimport java.util.Scanner;\n\npublic class MatrixDG {\n\n    private char[] mVexs;       // 顶点集合\n    private int[][] mMatrix;    // 邻接矩阵\n\n    /* \n     * 创建图(自己输入数据)\n     */\n    public MatrixDG() {\n\n        // 输入\"顶点数\"和\"边数\"\n        System.out.printf(\"input vertex number: \");\n        int vlen = readInt();\n        System.out.printf(\"input edge number: \");\n        int elen = readInt();\n        if ( vlen < 1 || elen < 1 || (elen > (vlen*(vlen - 1)))) {\n            System.out.printf(\"input error: invalid parameters!\\n\");\n            return ;\n        }\n        \n        // 初始化\"顶点\"\n        mVexs = new char[vlen];\n        for (int i = 0; i < mVexs.length; i++) {\n            System.out.printf(\"vertex(%d): \", i);\n            mVexs[i] = readChar();\n        }\n\n        // 初始化\"边\"\n        mMatrix = new int[vlen][vlen];\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            System.out.printf(\"edge(%d):\", i);\n            char c1 = readChar();\n            char c2 = readChar();\n            int p1 = getPosition(c1);\n            int p2 = getPosition(c2);\n\n            if (p1==-1 || p2==-1) {\n                System.out.printf(\"input error: invalid edge!\\n\");\n                return ;\n            }\n\n            mMatrix[p1][p2] = 1;\n        }\n    }\n\n    /*\n     * 创建图(用已提供的矩阵)\n     *\n     * 参数说明：\n     *     vexs  -- 顶点数组\n     *     edges -- 边数组\n     */\n    public MatrixDG(char[] vexs, char[][] edges) {\n        \n        // 初始化\"顶点数\"和\"边数\"\n        int vlen = vexs.length;\n        int elen = edges.length;\n\n        // 初始化\"顶点\"\n        mVexs = new char[vlen];\n        for (int i = 0; i < mVexs.length; i++)\n            mVexs[i] = vexs[i];\n\n        // 初始化\"边\"\n        mMatrix = new int[vlen][vlen];\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            int p1 = getPosition(edges[i][0]);\n            int p2 = getPosition(edges[i][1]);\n\n            mMatrix[p1][p2] = 1;\n        }\n    }\n\n    /*\n     * 返回ch位置\n     */\n    private int getPosition(char ch) {\n        for(int i=0; i<mVexs.length; i++)\n            if(mVexs[i]==ch)\n                return i;\n        return -1;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private char readChar() {\n        char ch='0';\n\n        do {\n            try {\n                ch = (char)System.in.read();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } while(!((ch>='a'&&ch<='z') || (ch>='A'&&ch<='Z')));\n\n        return ch;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private int readInt() {\n        Scanner scanner = new Scanner(System.in);\n        return scanner.nextInt();\n    }\n\n    /*\n     * 返回顶点v的第一个邻接顶点的索引，失败则返回-1\n     */\n    private int firstVertex(int v) {\n\n        if (v<0 || v>(mVexs.length-1))\n            return -1;\n\n        for (int i = 0; i < mVexs.length; i++)\n            if (mMatrix[v][i] == 1)\n                return i;\n\n        return -1;\n    }\n\n    /*\n     * 返回顶点v相对于w的下一个邻接顶点的索引，失败则返回-1\n     */\n    private int nextVertex(int v, int w) {\n\n        if (v<0 || v>(mVexs.length-1) || w<0 || w>(mVexs.length-1))\n            return -1;\n\n        for (int i = w + 1; i < mVexs.length; i++)\n            if (mMatrix[v][i] == 1)\n                return i;\n\n        return -1;\n    }\n\n    /*\n     * 深度优先搜索遍历图的递归实现\n     */\n    private void DFS(int i, boolean[] visited) {\n\n        visited[i] = true;\n        System.out.printf(\"%c \", mVexs[i]);\n        // 遍历该顶点的所有邻接顶点。若是没有访问过，那么继续往下走\n        for (int w = firstVertex(i); w >= 0; w = nextVertex(i, w)) {\n            if (!visited[w])\n                DFS(w, visited);\n        }\n    }\n\n    /*\n     * 深度优先搜索遍历图\n     */\n    public void DFS() {\n        boolean[] visited = new boolean[mVexs.length];       // 顶点访问标记\n\n        // 初始化所有顶点都没有被访问\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf(\"DFS: \");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i])\n                DFS(i, visited);\n        }\n        System.out.printf(\"\\n\");\n    }\n\n    /*\n     * 广度优先搜索（类似于树的层次遍历）\n     */\n    public void BFS() {\n        int head = 0;\n        int rear = 0;\n        int[] queue = new int[mVexs.length];            // 辅组队列\n        boolean[] visited = new boolean[mVexs.length];  // 顶点访问标记\n\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf(\"BFS: \");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i]) {\n                visited[i] = true;\n                System.out.printf(\"%c \", mVexs[i]);\n                queue[rear++] = i;  // 入队列\n            }\n\n            while (head != rear) {\n                int j = queue[head++];  // 出队列\n                for (int k = firstVertex(j); k >= 0; k = nextVertex(j, k)) { //k是为访问的邻接顶点\n                    if (!visited[k]) {\n                        visited[k] = true;\n                        System.out.printf(\"%c \", mVexs[k]);\n                        queue[rear++] = k;\n                    }\n                }\n            }\n        }\n        System.out.printf(\"\\n\");\n    }\n\n    /*\n     * 打印矩阵队列图\n     */\n    public void print() {\n        System.out.printf(\"Martix Graph:\\n\");\n        for (int i = 0; i < mVexs.length; i++) {\n            for (int j = 0; j < mVexs.length; j++)\n                System.out.printf(\"%d \", mMatrix[i][j]);\n            System.out.printf(\"\\n\");\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] vexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n        char[][] edges = new char[][]{\n            {'A', 'B'}, \n            {'B', 'C'}, \n            {'B', 'E'}, \n            {'B', 'F'}, \n            {'C', 'E'}, \n            {'D', 'C'}, \n            {'E', 'B'}, \n            {'E', 'D'}, \n            {'F', 'G'}}; \n        MatrixDG pG;\n\n        // 自定义\"图\"(输入矩阵队列)\n        //pG = new MatrixDG();\n        // 采用已有的\"图\"\n        pG = new MatrixDG(vexs, edges);\n\n        pG.print();   // 打印图\n        pG.DFS();     // 深度优先遍历\n        pG.BFS();     // 广度优先遍历\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("245")]),s("br")])]),s("h3",{attrs:{id:"邻接表实现的有向图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邻接表实现的有向图"}},[n._v("#")]),n._v(" 邻接表实现的有向图")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("import java.io.IOException;\nimport java.util.Scanner;\n\npublic class ListDG {\n    // 邻接表中表对应的链表的顶点\n    private class ENode {\n        int ivex;       // 该边所指向的顶点的位置\n        ENode nextEdge; // 指向下一条弧的指针\n    }\n\n    // 邻接表中表的顶点\n    private class VNode {\n        char data;          // 顶点信息\n        ENode firstEdge;    // 指向第一条依附该顶点的弧\n    };\n\n    private VNode[] mVexs;  // 顶点数组\n\n\n    /* \n     * 创建图(自己输入数据)\n     */\n    public ListDG() {\n\n        // 输入\"顶点数\"和\"边数\"\n        System.out.printf(\"input vertex number: \");\n        int vlen = readInt();\n        System.out.printf(\"input edge number: \");\n        int elen = readInt();\n        if ( vlen < 1 || elen < 1 || (elen > (vlen*(vlen - 1)))) {\n            System.out.printf(\"input error: invalid parameters!\\n\");\n            return ;\n        }\n        \n        // 初始化\"顶点\"\n        mVexs = new VNode[vlen];\n        for (int i = 0; i < mVexs.length; i++) {\n            System.out.printf(\"vertex(%d): \", i);\n            mVexs[i] = new VNode();\n            mVexs[i].data = readChar();\n            mVexs[i].firstEdge = null;\n        }\n\n        // 初始化\"边\"\n        //mMatrix = new int[vlen][vlen];\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            System.out.printf(\"edge(%d):\", i);\n            char c1 = readChar();\n            char c2 = readChar();\n            int p1 = getPosition(c1);\n            int p2 = getPosition(c2);\n            // 初始化node1\n            ENode node1 = new ENode();\n            node1.ivex = p2;\n            // 将node1链接到\"p1所在链表的末尾\"\n            if(mVexs[p1].firstEdge == null)\n              mVexs[p1].firstEdge = node1;\n            else\n                linkLast(mVexs[p1].firstEdge, node1);\n        }\n    }\n\n    /*\n     * 创建图(用已提供的矩阵)\n     *\n     * 参数说明：\n     *     vexs  -- 顶点数组\n     *     edges -- 边数组\n     */\n    public ListDG(char[] vexs, char[][] edges) {\n        \n        // 初始化\"顶点数\"和\"边数\"\n        int vlen = vexs.length;\n        int elen = edges.length;\n\n        // 初始化\"顶点\"\n        mVexs = new VNode[vlen];\n        for (int i = 0; i < mVexs.length; i++) {\n            mVexs[i] = new VNode();\n            mVexs[i].data = vexs[i];\n            mVexs[i].firstEdge = null;\n        }\n\n        // 初始化\"边\"\n        for (int i = 0; i < elen; i++) {\n            // 读取边的起始顶点和结束顶点\n            char c1 = edges[i][0];\n            char c2 = edges[i][1];\n            // 读取边的起始顶点和结束顶点\n            int p1 = getPosition(edges[i][0]);\n            int p2 = getPosition(edges[i][1]);\n\n            // 初始化node1\n            ENode node1 = new ENode();\n            node1.ivex = p2;\n            // 将node1链接到\"p1所在链表的末尾\"\n            if(mVexs[p1].firstEdge == null)\n              mVexs[p1].firstEdge = node1;\n            else\n                linkLast(mVexs[p1].firstEdge, node1);\n        }\n    }\n\n    /*\n     * 将node节点链接到list的最后\n     */\n    private void linkLast(ENode list, ENode node) {\n        ENode p = list;\n\n        while(p.nextEdge!=null)\n            p = p.nextEdge;\n        p.nextEdge = node;\n    }\n\n    /*\n     * 返回ch位置\n     */\n    private int getPosition(char ch) {\n        for(int i=0; i<mVexs.length; i++)\n            if(mVexs[i].data==ch)\n                return i;\n        return -1;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private char readChar() {\n        char ch='0';\n\n        do {\n            try {\n                ch = (char)System.in.read();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } while(!((ch>='a'&&ch<='z') || (ch>='A'&&ch<='Z')));\n\n        return ch;\n    }\n\n    /*\n     * 读取一个输入字符\n     */\n    private int readInt() {\n        Scanner scanner = new Scanner(System.in);\n        return scanner.nextInt();\n    }\n\n    /*\n     * 深度优先搜索遍历图的递归实现\n     */\n    private void DFS(int i, boolean[] visited) {\n        ENode node;\n\n        visited[i] = true;\n        System.out.printf(\"%c \", mVexs[i].data);\n        node = mVexs[i].firstEdge;\n        while (node != null) {\n            if (!visited[node.ivex])\n                DFS(node.ivex, visited);\n            node = node.nextEdge;\n        }\n    }\n\n    /*\n     * 深度优先搜索遍历图\n     */\n    public void DFS() {\n        boolean[] visited = new boolean[mVexs.length];       // 顶点访问标记\n\n        // 初始化所有顶点都没有被访问\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf(\"DFS: \");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i])\n                DFS(i, visited);\n        }\n        System.out.printf(\"\\n\");\n    }\n\n    /*\n     * 广度优先搜索（类似于树的层次遍历）\n     */\n    public void BFS() {\n        int head = 0;\n        int rear = 0;\n        int[] queue = new int[mVexs.length];            // 辅组队列\n        boolean[] visited = new boolean[mVexs.length];  // 顶点访问标记\n\n        for (int i = 0; i < mVexs.length; i++)\n            visited[i] = false;\n\n        System.out.printf(\"BFS: \");\n        for (int i = 0; i < mVexs.length; i++) {\n            if (!visited[i]) {\n                visited[i] = true;\n                System.out.printf(\"%c \", mVexs[i].data);\n                queue[rear++] = i;  // 入队列\n            }\n\n            while (head != rear) {\n                int j = queue[head++];  // 出队列\n                ENode node = mVexs[j].firstEdge;\n                while (node != null) {\n                    int k = node.ivex;\n                    if (!visited[k])\n                    {\n                        visited[k] = true;\n                        System.out.printf(\"%c \", mVexs[k].data);\n                        queue[rear++] = k;\n                    }\n                    node = node.nextEdge;\n                }\n            }\n        }\n        System.out.printf(\"\\n\");\n    }\n\n    /*\n     * 打印矩阵队列图\n     */\n    public void print() {\n        System.out.printf(\"List Graph:\\n\");\n        for (int i = 0; i < mVexs.length; i++) {\n            System.out.printf(\"%d(%c): \", i, mVexs[i].data);\n            ENode node = mVexs[i].firstEdge;\n            while (node != null) {\n                System.out.printf(\"%d(%c) \", node.ivex, mVexs[node.ivex].data);\n                node = node.nextEdge;\n            }\n            System.out.printf(\"\\n\");\n        }\n    }\n\n    public static void main(String[] args) {\n        char[] vexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n        char[][] edges = new char[][]{\n            {'A', 'B'}, \n            {'B', 'C'}, \n            {'B', 'E'}, \n            {'B', 'F'}, \n            {'C', 'E'}, \n            {'D', 'C'}, \n            {'E', 'B'}, \n            {'E', 'D'}, \n            {'F', 'G'}}; \n        ListDG pG;\n\n        // 自定义\"图\"(输入矩阵队列)\n        //pG = new ListDG();\n        // 采用已有的\"图\"\n        pG = new ListDG(vexs, edges);\n\n        pG.print();   // 打印图\n        pG.DFS();     // 深度优先遍历\n        pG.BFS();     // 广度优先遍历\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("245")]),s("br"),s("span",{staticClass:"line-number"},[n._v("246")]),s("br"),s("span",{staticClass:"line-number"},[n._v("247")]),s("br"),s("span",{staticClass:"line-number"},[n._v("248")]),s("br"),s("span",{staticClass:"line-number"},[n._v("249")]),s("br"),s("span",{staticClass:"line-number"},[n._v("250")]),s("br"),s("span",{staticClass:"line-number"},[n._v("251")]),s("br"),s("span",{staticClass:"line-number"},[n._v("252")]),s("br"),s("span",{staticClass:"line-number"},[n._v("253")]),s("br"),s("span",{staticClass:"line-number"},[n._v("254")]),s("br"),s("span",{staticClass:"line-number"},[n._v("255")]),s("br"),s("span",{staticClass:"line-number"},[n._v("256")]),s("br"),s("span",{staticClass:"line-number"},[n._v("257")]),s("br"),s("span",{staticClass:"line-number"},[n._v("258")]),s("br"),s("span",{staticClass:"line-number"},[n._v("259")]),s("br"),s("span",{staticClass:"line-number"},[n._v("260")]),s("br"),s("span",{staticClass:"line-number"},[n._v("261")]),s("br"),s("span",{staticClass:"line-number"},[n._v("262")]),s("br")])]),s("h1",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("本文主要参考至 https://www.cnblogs.com/skywang12345/p/3711483.html, 在此基础上做了内容的增改。)")])])}),[],!1,null,null,null);s.default=t.exports}}]);