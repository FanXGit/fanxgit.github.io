(window.webpackJsonp=window.webpackJsonp||[]).push([[421],{272:function(s,a,n){s.exports=n.p+"assets/img/spring-springframework-aop-51.cb491546.png"},3645:function(s,a,n){"use strict";n.r(a);var e=n(7),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"spring进阶-spring-aop实现原理详解之aop代理的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring进阶-spring-aop实现原理详解之aop代理的创建"}},[s._v("#")]),s._v(" Spring进阶 - Spring AOP实现原理详解之AOP代理的创建")]),s._v(" "),a("blockquote",[a("p",[s._v("上文我们介绍了Spring AOP原理解析的切面实现过程(将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor)。本文在此基础上继续介绍，代理（cglib代理和JDK代理）的创建过程。@pdai")])]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#spring%E8%BF%9B%E9%98%B6---spring-aop%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E4%B9%8Baop%E4%BB%A3%E7%90%86%E7%9A%84%E5%88%9B%E5%BB%BA"}},[s._v("Spring进阶 - Spring AOP实现原理详解之AOP代理的创建")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%BC%95%E5%85%A5"}},[s._v("引入")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BB%A3%E7%90%86%E7%9A%84%E5%88%9B%E5%BB%BA"}},[s._v("代理的创建")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E7%9A%84advisor"}},[s._v("获取所有的Advisor")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%90%86%E7%9A%84%E5%85%A5%E5%8F%A3%E6%96%B9%E6%B3%95"}},[s._v("创建代理的入口方法")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BE%9D%E6%8D%AE%E6%9D%A1%E4%BB%B6%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%90%86jdk%E6%88%96cglib"}},[s._v("依据条件创建代理(jdk或cglib)")])])])])])])]),s._v(" "),a("h2",{attrs:{id:"引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[s._v("#")]),s._v(" 引入")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("前文主要Spring AOP原理解析的切面实现过程(加载配置，将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor)。")])]),s._v(" "),a("p",[s._v("同时我们也总结了Spring AOP初始化的过程，具体如下：")]),s._v(" "),a("ol",[a("li",[s._v("由"),a("strong",[s._v("IOC Bean加载")]),s._v("方法栈中找到parseCustomElement方法，找到parse "),a("code",[s._v("aop:aspectj-autoproxy")]),s._v("的handler(org.springframework.aop.config.AopNamespaceHandler)")]),s._v(" "),a("li",[a("strong",[s._v("AopNamespaceHandler")]),s._v("注册了"),a("code",[s._v("<aop:aspectj-autoproxy/>")]),s._v("的解析类是AspectJAutoProxyBeanDefinitionParser")]),s._v(" "),a("li",[a("strong",[s._v("AspectJAutoProxyBeanDefinitionParser")]),s._v("的parse 方法 通过AspectJAwareAdvisorAutoProxyCreator类去创建")]),s._v(" "),a("li",[a("strong",[s._v("AspectJAwareAdvisorAutoProxyCreator")]),s._v("实现了两类接口，BeanFactoryAware和BeanPostProcessor；根据Bean生命周期方法找到两个核心方法：postProcessBeforeInstantiation和postProcessAfterInitialization\n"),a("ol",[a("li",[a("strong",[s._v("postProcessBeforeInstantiation")]),s._v("：主要是处理使用了@Aspect注解的切面类，然后将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor")]),s._v(" "),a("li",[a("strong",[s._v("postProcessAfterInitialization")]),s._v("：主要负责将Advisor注入到合适的位置，创建代理（cglib或jdk)，为后面给代理进行增强实现做准备。")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("本文接着介绍postProcessAfterInitialization的方法，即Spring AOP的代理（cglib或jdk)的创建过程。")])]),s._v(" "),a("h2",{attrs:{id:"代理的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理的创建"}},[s._v("#")]),s._v(" 代理的创建")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("创建代理的方法是postProcessAfterInitialization：如果bean被子类标识为代理，则使用配置的拦截器创建一个代理")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n  * Create a proxy with the configured interceptors if the bean is\n  * identified as one to proxy by the subclass.\n  * @see #getAdvicesAndAdvisorsForBean\n  */\n@Override\npublic Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {\n  if (bean != null) {\n    Object cacheKey = getCacheKey(bean.getClass(), beanName);\n    // 如果不是提前暴露的代理\n    if (this.earlyProxyReferences.remove(cacheKey) != bean) {\n      return wrapIfNecessary(bean, beanName, cacheKey);\n    }\n  }\n  return bean;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("wrapIfNecessary方法主要用于判断是否需要创建代理，如果Bean能够获取到advisor才需要创建代理")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n  * Wrap the given bean if necessary, i.e. if it is eligible for being proxied.\n  * @param bean the raw bean instance\n  * @param beanName the name of the bean\n  * @param cacheKey the cache key for metadata access\n  * @return a proxy wrapping the bean, or the raw bean instance as-is\n  */\nprotected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {\n   // 如果bean是通过TargetSource接口获取\n   if (beanName != null && this.targetSourcedBeans.contains(beanName)) {\n      return bean;\n   }\n   // 如果bean是切面类\n   if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {\n      return bean;\n   }\n   // 如果是aop基础类？是否跳过？\n   if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {\n      this.advisedBeans.put(cacheKey, Boolean.FALSE);\n      return bean;\n   }\n\n  // 重点：获取所有advisor，如果没有获取到，那说明不要进行增强，也就不需要代理了。\n  Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);\n  if (specificInterceptors != DO_NOT_PROXY) {\n    this.advisedBeans.put(cacheKey, Boolean.TRUE);\n    // 重点：创建代理\n    Object proxy = createProxy(\n        bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));\n    this.proxyTypes.put(cacheKey, proxy.getClass());\n    return proxy;\n  }\n\n  this.advisedBeans.put(cacheKey, Boolean.FALSE);\n  return bean;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h3",{attrs:{id:"获取所有的advisor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取所有的advisor"}},[s._v("#")]),s._v(" 获取所有的Advisor")]),s._v(" "),a("p",[s._v("我们看下获取所有advisor的方法getAdvicesAndAdvisorsForBean")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@Override\n@Nullable\nprotected Object[] getAdvicesAndAdvisorsForBean(\n    Class<?> beanClass, String beanName, @Nullable TargetSource targetSource) {\n\n  List<Advisor> advisors = findEligibleAdvisors(beanClass, beanName);\n  if (advisors.isEmpty()) {\n    return DO_NOT_PROXY;\n  }\n  return advisors.toArray();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("通过findEligibleAdvisors方法获取advisor， 如果获取不到返回DO_NOT_PROXY（不需要创建代理），findEligibleAdvisors方法如下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n  * Find all eligible Advisors for auto-proxying this class.\n  * @param beanClass the clazz to find advisors for\n  * @param beanName the name of the currently proxied bean\n  * @return the empty List, not {@code null},\n  * if there are no pointcuts or interceptors\n  * @see #findCandidateAdvisors\n  * @see #sortAdvisors\n  * @see #extendAdvisors\n  */\nprotected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {\n  // 和上文一样，获取所有切面类的切面方法生成Advisor\n  List<Advisor> candidateAdvisors = findCandidateAdvisors();\n  // 找到这些Advisor中能够应用于beanClass的Advisor\n  List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);\n  // 如果需要，交给子类拓展\n  extendAdvisors(eligibleAdvisors);\n  // 对Advisor排序\n  if (!eligibleAdvisors.isEmpty()) {\n    eligibleAdvisors = sortAdvisors(eligibleAdvisors);\n  }\n  return eligibleAdvisors;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("获取所有切面类的切面方法生成Advisor")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/**\n  * Find all candidate Advisors to use in auto-proxying.\n  * @return the List of candidate Advisors\n  */\nprotected List<Advisor> findCandidateAdvisors() {\n  Assert.state(this.advisorRetrievalHelper != null, "No BeanFactoryAdvisorRetrievalHelper available");\n  return this.advisorRetrievalHelper.findAdvisorBeans();\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("找到这些Advisor中能够应用于beanClass的Advisor")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n  * Determine the sublist of the {@code candidateAdvisors} list\n  * that is applicable to the given class.\n  * @param candidateAdvisors the Advisors to evaluate\n  * @param clazz the target class\n  * @return sublist of Advisors that can apply to an object of the given class\n  * (may be the incoming List as-is)\n  */\npublic static List<Advisor> findAdvisorsThatCanApply(List<Advisor> candidateAdvisors, Class<?> clazz) {\n  if (candidateAdvisors.isEmpty()) {\n    return candidateAdvisors;\n  }\n  List<Advisor> eligibleAdvisors = new ArrayList<>();\n  for (Advisor candidate : candidateAdvisors) {\n    // 通过Introduction实现的advice\n    if (candidate instanceof IntroductionAdvisor && canApply(candidate, clazz)) {\n      eligibleAdvisors.add(candidate);\n    }\n  }\n  boolean hasIntroductions = !eligibleAdvisors.isEmpty();\n  for (Advisor candidate : candidateAdvisors) {\n    if (candidate instanceof IntroductionAdvisor) {\n      // already processed\n      continue;\n    }\n    // 是否能够应用于clazz的Advice\n    if (canApply(candidate, clazz, hasIntroductions)) {\n      eligibleAdvisors.add(candidate);\n    }\n  }\n  return eligibleAdvisors;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h3",{attrs:{id:"创建代理的入口方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建代理的入口方法"}},[s._v("#")]),s._v(" 创建代理的入口方法")]),s._v(" "),a("p",[s._v("获取所有advisor后，如果有advisor，则说明需要增强，即需要创建代理，创建代理的方法如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n  * Create an AOP proxy for the given bean.\n  * @param beanClass the class of the bean\n  * @param beanName the name of the bean\n  * @param specificInterceptors the set of interceptors that is\n  * specific to this bean (may be empty, but not null)\n  * @param targetSource the TargetSource for the proxy,\n  * already pre-configured to access the bean\n  * @return the AOP proxy for the bean\n  * @see #buildAdvisors\n  */\nprotected Object createProxy(Class<?> beanClass, @Nullable String beanName,\n    @Nullable Object[] specificInterceptors, TargetSource targetSource) {\n\n  if (this.beanFactory instanceof ConfigurableListableBeanFactory) {\n    AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass);\n  }\n\n  ProxyFactory proxyFactory = new ProxyFactory();\n  proxyFactory.copyFrom(this);\n\n  if (proxyFactory.isProxyTargetClass()) {\n    // Explicit handling of JDK proxy targets (for introduction advice scenarios)\n    if (Proxy.isProxyClass(beanClass)) {\n      // Must allow for introductions; can't just set interfaces to the proxy's interfaces only.\n      for (Class<?> ifc : beanClass.getInterfaces()) {\n        proxyFactory.addInterface(ifc);\n      }\n    }\n  }\n  else {\n    // No proxyTargetClass flag enforced, let's apply our default checks...\n    if (shouldProxyTargetClass(beanClass, beanName)) {\n      proxyFactory.setProxyTargetClass(true);\n    }\n    else {\n      evaluateProxyInterfaces(beanClass, proxyFactory);\n    }\n  }\n\n  Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);\n  proxyFactory.addAdvisors(advisors);\n  proxyFactory.setTargetSource(targetSource);\n  customizeProxyFactory(proxyFactory);\n\n  proxyFactory.setFrozen(this.freezeProxy);\n  if (advisorsPreFiltered()) {\n    proxyFactory.setPreFiltered(true);\n  }\n\n  // Use original ClassLoader if bean class not locally loaded in overriding class loader\n  ClassLoader classLoader = getProxyClassLoader();\n  if (classLoader instanceof SmartClassLoader && classLoader != beanClass.getClassLoader()) {\n    classLoader = ((SmartClassLoader) classLoader).getOriginalClassLoader();\n  }\n  return proxyFactory.getProxy(classLoader);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br")])]),a("p",[s._v("proxyFactory.getProxy(classLoader)")]),s._v(" "),a("p",[a("img",{attrs:{src:n(272),alt:""}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n  * Create a new proxy according to the settings in this factory.\n  * <p>Can be called repeatedly. Effect will vary if we've added\n  * or removed interfaces. Can add and remove interceptors.\n  * <p>Uses the given class loader (if necessary for proxy creation).\n  * @param classLoader the class loader to create the proxy with\n  * (or {@code null} for the low-level proxy facility's default)\n  * @return the proxy object\n  */\npublic Object getProxy(@Nullable ClassLoader classLoader) {\n  return createAopProxy().getProxy(classLoader);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"依据条件创建代理-jdk或cglib"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依据条件创建代理-jdk或cglib"}},[s._v("#")]),s._v(" 依据条件创建代理(jdk或cglib)")]),s._v(" "),a("p",[s._v("DefaultAopProxyFactory.createAopProxy")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@Override\npublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n  if (!NativeDetector.inNativeImage() &&\n      (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config))) {\n    Class<?> targetClass = config.getTargetClass();\n    if (targetClass == null) {\n      throw new AopConfigException("TargetSource cannot determine target class: " +\n          "Either an interface or a target is required for proxy creation.");\n    }\n    if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {\n      return new JdkDynamicAopProxy(config);\n    }\n    return new ObjenesisCglibAopProxy(config);\n  }\n  else {\n    return new JdkDynamicAopProxy(config);\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("几个要点")]),s._v(" "),a("ul",[a("li",[s._v("config.isOptimize() 是通过optimize设置，表示配置是自定义的，默认是false；")]),s._v(" "),a("li",[s._v("config.isProxyTargetClass()是通过"),a("code",[s._v('<aop:config proxy-target-class="true" />')]),s._v(" 来配置的，表示优先使用cglib代理，默认是false；")]),s._v(" "),a("li",[s._v("hasNoUserSuppliedProxyInterfaces(config) 表示是否目标类实现了接口")])]),s._v(" "),a("p",[s._v("由此我们可以知道：")]),s._v(" "),a("p",[s._v("Spring默认在目标类实现接口时是通过JDK代理实现的，只有非接口的是通过Cglib代理实现的。当设置proxy-target-class为true时在目标类不是接口或者代理类时优先使用cglib代理实现。)")])])}),[],!1,null,null,null);a.default=r.exports}}]);