(window.webpackJsonp=window.webpackJsonp||[]).push([[390],{3391:function(e,n,a){e.exports=a.p+"assets/img/tomcat-x-executor-1.f5bc69f3.jpg"},3392:function(e,n,a){e.exports=a.p+"assets/img/tomcat-x-executor-2.3eedf9ff.jpg"},4205:function(e,n,a){"use strict";a.r(n);var t=a(7),s=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"tomcat-线程池的设计与实现-standardthreadexecutor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-线程池的设计与实现-standardthreadexecutor"}},[e._v("#")]),e._v(" Tomcat - 线程池的设计与实现：StandardThreadExecutor")]),e._v(" "),n("p",[e._v("=======================================================================================")]),e._v(" "),n("blockquote",[n("p",[e._v("上文中我们研究了下Service的设计和实现，StandardService中包含Executor的调用；这个比较好理解，Tomcat需要并发处理用户的请求，自然而言就想到线程池，那么Tomcat中线程池（Executor）具体是如何实现的？本文带你继续深度解析。@pdai")])]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#tomcat---%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0standardthreadexecutor"}},[e._v("Tomcat - 线程池的设计与实现：StandardThreadExecutor")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E7%90%86%E8%A7%A3%E6%80%9D%E8%B7%AF"}},[e._v("理解思路")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%87%86%E5%A4%87%E7%9F%A5%E8%AF%86"}},[e._v("准备知识")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#executor%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1"}},[e._v("Executor接口设计")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#standardthreadexecutor%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[e._v("StandardThreadExecutor的实现")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E7%90%86%E8%A7%A3%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0"}},[e._v("理解相关配置参数")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#lifecycle%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95"}},[e._v("Lifecycle模板方法")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E6%A0%B8%E5%BF%83executor%E6%96%B9%E6%B3%95"}},[e._v("核心executor方法")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E7%BA%BF%E7%A8%8B%E6%B1%A0"}},[e._v("动态调整线程池")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E8%A1%A5%E5%85%85taskqueue"}},[e._v("补充TaskQueue")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8threadpoolexecutor"}},[e._v("为什么不是直接使用ThreadPoolExecutor")])])])])])])]),e._v(" "),n("h1",{attrs:{id:"理解思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解思路"}},[e._v("#")]),e._v(" 理解思路")]),e._v(" "),n("hr"),e._v(" "),n("blockquote",[n("p",[e._v("我们如下几个方面开始引入线程池的，这里主要从上文Service引入，保持上下文之间的衔接，会很好的构筑你的知识体系。@pdai")])]),e._v(" "),n("ul",[n("li",[e._v("上文中我们了解到，Executor是包含在Service中的，Service中关于Executor的配置和相关代码如下：")])]),e._v(" "),n("p",[e._v("server.xml中service里包含Executor的配置")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<Service name="Catalina">\n\x3c!-- 1. 属性说明\n\tname:Service的名称\n--\x3e\n\n    \x3c!--2. 一个或多个excecutors --\x3e // 看这里\n    \x3c!--\n    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"\n        maxThreads="150" minSpareThreads="4"/>\n    --\x3e\n</Service>    \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("Service中executors相关方法")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n  * Adds a named executor to the service\n  * @param ex Executor\n  */\n@Override\npublic void addExecutor(Executor ex) {\n    synchronized (executors) {\n        if (!executors.contains(ex)) {\n            executors.add(ex);\n            if (getState().isAvailable()) {\n                try {\n                    ex.start(); // 启动\n                } catch (LifecycleException x) {\n                    log.error(sm.getString("standardService.executor.start"), x);\n                }\n            }\n        }\n    }\n}\n\n/**\n  * Retrieves all executors\n  * @return Executor[]\n  */\n@Override\npublic Executor[] findExecutors() {\n    synchronized (executors) {\n        Executor[] arr = new Executor[executors.size()];\n        executors.toArray(arr);\n        return arr;\n    }\n}\n\n\n/**\n  * Retrieves executor by name, null if not found\n  * @param executorName String\n  * @return Executor\n  */\n@Override\npublic Executor getExecutor(String executorName) {\n    synchronized (executors) {\n        for (Executor executor: executors) {\n            if (executorName.equals(executor.getName()))\n                return executor;\n        }\n    }\n    return null;\n}\n\n/**\n  * Removes an executor from the service\n  * @param ex Executor\n  */\n@Override\npublic void removeExecutor(Executor ex) {\n    synchronized (executors) {\n        if ( executors.remove(ex) && getState().isAvailable() ) {\n            try {\n                ex.stop(); // 停止\n            } catch (LifecycleException e) {\n                log.error(sm.getString("standardService.executor.stop"), e);\n            }\n        }\n    }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br")])]),n("ul",[n("li",[e._v("和Server、Service实现一样，StandardThreadExecutor也是继承LifecycleMBeanBase；然后实现Executor的接口。")])]),e._v(" "),n("p",[n("img",{attrs:{src:a(3391),alt:""}})]),e._v(" "),n("ul",[n("li",[e._v("Tomcat关于Executor相关的配置文档")])]),e._v(" "),n("p",[e._v("http://tomcat.apache.org/tomcat-9.0-doc/config/executor.html")]),e._v(" "),n("h1",{attrs:{id:"准备知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备知识"}},[e._v("#")]),e._v(" 准备知识")]),e._v(" "),n("hr"),e._v(" "),n("blockquote",[n("p",[e._v("在理解Tomcat的线程池时，需要有一定的基础，这里推荐学习下JDK关于线程池的设计和实现。")])]),e._v(" "),n("blockquote",[n("p",[e._v("并发基础")])]),e._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"https://pdai.tech/md/java/thread/java-thread-x-theorty.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java 并发 - 理论基础"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("多线程的出现是要解决什么问题的?")]),e._v(" "),n("li",[e._v("线程不安全是指什么? 举例说明")]),e._v(" "),n("li",[e._v("并发出现线程不安全的本质什么? 可见性，原子性和有序性。")]),e._v(" "),n("li",[e._v("Java是怎么解决并发问题的? 3个关键字，JMM和8个Happens-Before")]),e._v(" "),n("li",[e._v("线程安全是不是非真即假? 不是")]),e._v(" "),n("li",[e._v("线程安全有哪些实现思路?")]),e._v(" "),n("li",[e._v("如何理解并发和并行的区别?")])])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://pdai.tech/md/java/thread/java-thread-x-thread-basic.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java 并发 - 线程基础"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?")]),e._v(" "),n("li",[e._v("通常线程有哪几种使用方式?")]),e._v(" "),n("li",[e._v("基础线程机制有哪些?")]),e._v(" "),n("li",[e._v("线程的中断方式有哪些?")]),e._v(" "),n("li",[e._v("线程的互斥同步方式有哪些? 如何比较和选择?")]),e._v(" "),n("li",[e._v("线程之间有哪些协作方式?")])])])]),e._v(" "),n("blockquote",[n("p",[e._v("JUC BlockingQueue 和 ThreadPoolExecutor")])]),e._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"https://pdai.tech/md/java/thread/java-thread-x-juc-collection-BlockingQueue.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JUC集合: BlockingQueue详解"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("什么是BlockingDeque?")]),e._v(" "),n("li",[e._v("BlockingQueue大家族有哪些? ArrayBlockingQueue, DelayQueue, LinkedBlockingQueue, SynchronousQueue...")]),e._v(" "),n("li",[e._v("BlockingQueue适合用在什么样的场景?")]),e._v(" "),n("li",[e._v("BlockingQueue常用的方法?")]),e._v(" "),n("li",[e._v("BlockingQueue插入方法有哪些? 这些方法("),n("code",[e._v("add(o)")]),e._v(","),n("code",[e._v("offer(o)")]),e._v(","),n("code",[e._v("put(o)")]),e._v(","),n("code",[e._v("offer(o, timeout, timeunit)")]),e._v(")的区别是什么?")]),e._v(" "),n("li",[e._v("BlockingDeque 与BlockingQueue有何关系，请对比下它们的方法?")]),e._v(" "),n("li",[e._v("BlockingDeque适合用在什么样的场景?")]),e._v(" "),n("li",[e._v("BlockingDeque大家族有哪些?")]),e._v(" "),n("li",[e._v("BlockingDeque 与BlockingQueue实现例子?")])])]),e._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ThreadPoolExecutor.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JUC线程池: ThreadPoolExecutor详解"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("为什么要有线程池?")]),e._v(" "),n("li",[e._v("Java是实现和管理线程池有哪些方式? 请简单举例如何使用。")]),e._v(" "),n("li",[e._v("为什么很多公司不允许使用Executors去创建线程池? 那么推荐怎么使用呢?")]),e._v(" "),n("li",[e._v("ThreadPoolExecutor有哪些核心的配置参数? 请简要说明")]),e._v(" "),n("li",[e._v("ThreadPoolExecutor可以创建哪是哪三种线程池呢?")]),e._v(" "),n("li",[e._v("当队列满了并且worker的数量达到maxSize的时候，会怎么样?")]),e._v(" "),n("li",[e._v("说说ThreadPoolExecutor有哪些RejectedExecutionHandler策略? 默认是什么策略?")]),e._v(" "),n("li",[e._v("简要说下线程池的任务执行机制? execute –> addWorker –>runworker (getTask)")]),e._v(" "),n("li",[e._v("线程池中任务是如何提交的?")]),e._v(" "),n("li",[e._v("线程池中任务是如何关闭的?")]),e._v(" "),n("li",[e._v("在配置线程池的时候需要考虑哪些配置因素?")]),e._v(" "),n("li",[e._v("如何监控线程池的状态?")])])])]),e._v(" "),n("h1",{attrs:{id:"executor接口设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#executor接口设计"}},[e._v("#")]),e._v(" Executor接口设计")]),e._v(" "),n("hr"),e._v(" "),n("blockquote",[n("p",[e._v("Executor的设计很简单，在理解的时候需要理解两点：")])]),e._v(" "),n("ul",[n("li",[e._v("1.Tomcat希望将Executor也纳入Lifecycle"),n("strong",[e._v("生命周期管理")]),e._v("，所以让它实现了Lifecycle接口")]),e._v(" "),n("li",[e._v("2."),n("strong",[e._v("引入超时机制")]),e._v("：也就是说当work queue满时，会等待指定的时间，如果超时将抛出RejectedExecutionException，所以这里增加了一个"),n("code",[e._v("void execute(Runnable command, long timeout, TimeUnit unit)")]),e._v("方法; 其实本质上，它构造了JUC中ThreadPoolExecutor，通过它调用ThreadPoolExecutor的"),n("code",[e._v("void execute(Runnable command, long timeout, TimeUnit unit)")]),e._v("方法。")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface Executor extends java.util.concurrent.Executor, Lifecycle {\n\n    public String getName();\n\n    /**\n     * Executes the given command at some time in the future.  The command\n     * may execute in a new thread, in a pooled thread, or in the calling\n     * thread, at the discretion of the <code>Executor</code> implementation.\n     * If no threads are available, it will be added to the work queue.\n     * If the work queue is full, the system will wait for the specified\n     * time until it throws a RejectedExecutionException\n     *\n     * @param command the runnable task\n     * @param timeout the length of time to wait for the task to complete\n     * @param unit    the units in which timeout is expressed\n     *\n     * @throws java.util.concurrent.RejectedExecutionException if this task\n     * cannot be accepted for execution - the queue is full\n     * @throws NullPointerException if command or unit is null\n     */\n    void execute(Runnable command, long timeout, TimeUnit unit);\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("找到Executor的实现类")]),e._v(" "),n("p",[n("img",{attrs:{src:a(3392),alt:""}})]),e._v(" "),n("h1",{attrs:{id:"standardthreadexecutor的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#standardthreadexecutor的实现"}},[e._v("#")]),e._v(" StandardThreadExecutor的实现")]),e._v(" "),n("hr"),e._v(" "),n("blockquote",[n("p",[e._v("接下来我们看下具体的实现类StandardThreadExecutor。")])]),e._v(" "),n("h3",{attrs:{id:"理解相关配置参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解相关配置参数"}},[e._v("#")]),e._v(" 理解相关配置参数")]),e._v(" "),n("p",[n("a",{attrs:{href:"http://tomcat.apache.org/tomcat-9.0-doc/config/executor.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Executor官方配置说明文档 在新窗口打开"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("公共属性")])]),e._v(" "),n("p",[e._v("Executor的所有实现都 支持以下属性：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("属性")]),e._v(" "),n("th",[e._v("描述")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("className")]),e._v(" "),n("td",[e._v("实现的类。实现必须实现 org.apache.catalina.Executor接口。此接口确保可以通过其name属性引用对象并实现Lifecycle，以便可以使用容器启动和停止对象。className的默认值是org.apache.catalina.core.StandardThreadExecutor")])]),e._v(" "),n("tr",[n("td",[e._v("name")]),e._v(" "),n("td",[e._v("用于在server.xml中的其他位置引用此池的名称。该名称是必需的，必须是唯一的。")])])])]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("StandardThreadExecutor属性")])])]),e._v(" "),n("p",[e._v("默认实现支持以下属性：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("属性")]),e._v(" "),n("th",[e._v("描述")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("threadPriority")]),e._v(" "),n("td",[e._v("（int）执行程序中线程的线程优先级，默认为 5（Thread.NORM_PRIORITY常量的值）")])]),e._v(" "),n("tr",[n("td",[e._v("daemon")]),e._v(" "),n("td",[e._v("（boolean）线程是否应该是守护程序线程，默认为 true")])]),e._v(" "),n("tr",[n("td",[e._v("namePrefix")]),e._v(" "),n("td",[e._v("（字符串）执行程序创建的每个线程的名称前缀。单个线程的线程名称将是namePrefix+threadNumber")])]),e._v(" "),n("tr",[n("td",[e._v("maxThreads")]),e._v(" "),n("td",[e._v("（int）此池中活动线程的最大数量，默认为 200")])]),e._v(" "),n("tr",[n("td",[e._v("minSpareThreads")]),e._v(" "),n("td",[e._v("（int）最小线程数（空闲和活动）始终保持活动状态，默认为 25")])]),e._v(" "),n("tr",[n("td",[e._v("maxIdleTime")]),e._v(" "),n("td",[e._v("（int）空闲线程关闭之前的毫秒数，除非活动线程数小于或等于minSpareThreads。默认值为60000（1分钟）")])]),e._v(" "),n("tr",[n("td",[e._v("maxQueueSize")]),e._v(" "),n("td",[e._v("（int）在我们拒绝之前可以排队等待执行的可运行任务的最大数量。默认值是Integer.MAX_VALUE")])]),e._v(" "),n("tr",[n("td",[e._v("prestartminSpareThreads")]),e._v(" "),n("td",[e._v("（boolean）是否应该在启动Executor时启动minSpareThreads，默认值为 false")])]),e._v(" "),n("tr",[n("td",[e._v("threadRenewalDelay")]),e._v(" "),n("td",[e._v("（long）如果配置了ThreadLocalLeakPreventionListener，它将通知此执行程序有关已停止的上下文。上下文停止后，池中的线程将被更新。为避免同时更新所有线程，此选项在任意2个线程的续订之间设置延迟。该值以ms为单位，默认值为1000ms。如果值为负，则不会续订线程。")])])])]),e._v(" "),n("h3",{attrs:{id:"lifecycle模板方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lifecycle模板方法"}},[e._v("#")]),e._v(" Lifecycle模板方法")]),e._v(" "),n("p",[e._v("先看核心变量：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 任务队列\nprivate TaskQueue taskqueue = null;\n\n// 包装了一个ThreadPoolExecutor\nprotected ThreadPoolExecutor executor = null;\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("ul",[n("li",[n("strong",[e._v("initInternal")]),e._v("和"),n("strong",[e._v("destroyInternal")]),e._v("默认父类实现")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Override\nprotected void initInternal() throws LifecycleException {\n    super.initInternal();\n}\n@Override\nprotected void destroyInternal() throws LifecycleException {\n    super.destroyInternal();\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("ul",[n("li",[n("strong",[e._v("startInternal方法")])])]),e._v(" "),n("p",[e._v("这个方法中，我们不难看出，就是初始化taskqueue，同时构造ThreadPoolExecutor的实例，后面Tomcat的StandardThreadExecutor的实现本质上通过ThreadPoolExecutor实现的。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n  * Start the component and implement the requirements\n  * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.\n  *\n  * @exception LifecycleException if this component detects a fatal error\n  *  that prevents this component from being used\n  */\n@Override\nprotected void startInternal() throws LifecycleException {\n\n    taskqueue = new TaskQueue(maxQueueSize);\n    TaskThreadFactory tf = new TaskThreadFactory(namePrefix,daemon,getThreadPriority());\n    executor = new ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), maxIdleTime, TimeUnit.MILLISECONDS,taskqueue, tf);\n    executor.setThreadRenewalDelay(threadRenewalDelay);\n    if (prestartminSpareThreads) {\n        executor.prestartAllCoreThreads();\n    }\n    taskqueue.setParent(executor);\n\n    setState(LifecycleState.STARTING);\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("ul",[n("li",[n("strong",[e._v("stopInternal方法")])])]),e._v(" "),n("p",[e._v("代码很简单，关闭线程池后置null, 方便GC回收。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n  * Stop the component and implement the requirements\n  * of {@link org.apache.catalina.util.LifecycleBase#stopInternal()}.\n  *\n  * @exception LifecycleException if this component detects a fatal error\n  *  that needs to be reported\n  */\n@Override\nprotected void stopInternal() throws LifecycleException {\n\n    setState(LifecycleState.STOPPING);\n    if (executor != null) {\n        executor.shutdownNow();\n    }\n    executor = null;\n    taskqueue = null;\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("h3",{attrs:{id:"核心executor方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#核心executor方法"}},[e._v("#")]),e._v(" 核心executor方法")]),e._v(" "),n("p",[e._v("本质上就是调用ThreadPoolExecutor的实例的相关方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Override\npublic void execute(Runnable command, long timeout, TimeUnit unit) {\n    if (executor != null) {\n        executor.execute(command,timeout,unit);\n    } else {\n        throw new IllegalStateException(sm.getString("standardThreadExecutor.notStarted"));\n    }\n}\n\n\n@Override\npublic void execute(Runnable command) {\n    if (executor != null) {\n        try {\n            executor.execute(command);\n        } catch (RejectedExecutionException rx) {\n            //there could have been contention around the queue\n            if (!((TaskQueue) executor.getQueue()).force(command)) {\n                throw new RejectedExecutionException(sm.getString("standardThreadExecutor.queueFull"));\n            }\n        }\n    } else {\n        throw new IllegalStateException(sm.getString("standardThreadExecutor.notStarted"));\n    }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br")])]),n("h3",{attrs:{id:"动态调整线程池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态调整线程池"}},[e._v("#")]),e._v(" 动态调整线程池")]),e._v(" "),n("p",[e._v("我们还注意到StandardThreadExecutor还实现了ResizeableExecutor，从名称上我们就可知道它是希望实现对线程池的动态调整，所以呢，它封装了一个ResizeableExecutor的接口，看下接口。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface ResizableExecutor extends Executor {\n\n    /**\n     * Returns the current number of threads in the pool.\n     *\n     * @return the number of threads\n     */\n    public int getPoolSize();\n\n    public int getMaxThreads();\n\n    /**\n     * Returns the approximate number of threads that are actively executing\n     * tasks.\n     *\n     * @return the number of threads\n     */\n    public int getActiveCount();\n\n    public boolean resizePool(int corePoolSize, int maximumPoolSize);\n\n    public boolean resizeQueue(int capacity);\n\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br")])]),n("p",[e._v("前三个方法比较简单，我们看下后两个方法是如何实现的, 其实也很简单。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Override\npublic boolean resizePool(int corePoolSize, int maximumPoolSize) {\n    if (executor == null)\n        return false;\n\n    executor.setCorePoolSize(corePoolSize);\n    executor.setMaximumPoolSize(maximumPoolSize);\n    return true;\n}\n\n// 默认没有实现\n@Override\npublic boolean resizeQueue(int capacity) {\n    return false;\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("h3",{attrs:{id:"补充taskqueue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#补充taskqueue"}},[e._v("#")]),e._v(" 补充TaskQueue")]),e._v(" "),n("p",[e._v("我们知道工作队列是有TaskQueue保障的，它集成自LinkedBlockingQueue（一个阻塞的链表队列），来看下源代码吧。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * As task queue specifically designed to run with a thread pool executor. The\n * task queue is optimised to properly utilize threads within a thread pool\n * executor. If you use a normal queue, the executor will spawn threads when\n * there are idle threads and you wont be able to force items onto the queue\n * itself.\n */\npublic class TaskQueue extends LinkedBlockingQueue<Runnable> {\n\n    private static final long serialVersionUID = 1L;\n    protected static final StringManager sm = StringManager\n            .getManager("org.apache.tomcat.util.threads.res");\n    private static final int DEFAULT_FORCED_REMAINING_CAPACITY = -1;\n\n    private transient volatile ThreadPoolExecutor parent = null;\n\n    // No need to be volatile. This is written and read in a single thread\n    // (when stopping a context and firing the listeners)\n    private int forcedRemainingCapacity = -1;\n\n    public TaskQueue() {\n        super();\n    }\n\n    public TaskQueue(int capacity) {\n        super(capacity);\n    }\n\n    public TaskQueue(Collection<? extends Runnable> c) {\n        super(c);\n    }\n\n    public void setParent(ThreadPoolExecutor tp) {\n        parent = tp;\n    }\n\n    public boolean force(Runnable o) {\n        if (parent == null || parent.isShutdown()) throw new RejectedExecutionException(sm.getString("taskQueue.notRunning"));\n        return super.offer(o); //forces the item onto the queue, to be used if the task is rejected\n    }\n\n    public boolean force(Runnable o, long timeout, TimeUnit unit) throws InterruptedException {\n        if (parent == null || parent.isShutdown()) throw new RejectedExecutionException(sm.getString("taskQueue.notRunning"));\n        return super.offer(o,timeout,unit); //forces the item onto the queue, to be used if the task is rejected\n    }\n\n    @Override\n    public boolean offer(Runnable o) {\n      //we can\'t do any checks\n        if (parent==null) return super.offer(o);\n        //we are maxed out on threads, simply queue the object\n        if (parent.getPoolSize() == parent.getMaximumPoolSize()) return super.offer(o);\n        //we have idle threads, just add it to the queue\n        if (parent.getSubmittedCount()<=(parent.getPoolSize())) return super.offer(o);\n        //if we have less threads than maximum force creation of a new thread\n        if (parent.getPoolSize()<parent.getMaximumPoolSize()) return false;\n        //if we reached here, we need to add it to the queue\n        return super.offer(o);\n    }\n\n\n    @Override\n    public Runnable poll(long timeout, TimeUnit unit)\n            throws InterruptedException {\n        Runnable runnable = super.poll(timeout, unit);\n        if (runnable == null && parent != null) {\n            // the poll timed out, it gives an opportunity to stop the current\n            // thread if needed to avoid memory leaks.\n            parent.stopCurrentThreadIfNeeded();\n        }\n        return runnable;\n    }\n\n    @Override\n    public Runnable take() throws InterruptedException {\n        if (parent != null && parent.currentThreadShouldBeStopped()) {\n            return poll(parent.getKeepAliveTime(TimeUnit.MILLISECONDS),\n                    TimeUnit.MILLISECONDS);\n            // yes, this may return null (in case of timeout) which normally\n            // does not occur with take()\n            // but the ThreadPoolExecutor implementation allows this\n        }\n        return super.take();\n    }\n\n    @Override\n    public int remainingCapacity() {\n        if (forcedRemainingCapacity > DEFAULT_FORCED_REMAINING_CAPACITY) {\n            // ThreadPoolExecutor.setCorePoolSize checks that\n            // remainingCapacity==0 to allow to interrupt idle threads\n            // I don\'t see why, but this hack allows to conform to this\n            // "requirement"\n            return forcedRemainingCapacity;\n        }\n        return super.remainingCapacity();\n    }\n\n    public void setForcedRemainingCapacity(int forcedRemainingCapacity) {\n        this.forcedRemainingCapacity = forcedRemainingCapacity;\n    }\n\n    void resetForcedRemainingCapacity() {\n        this.forcedRemainingCapacity = DEFAULT_FORCED_REMAINING_CAPACITY;\n    }\n\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br"),n("span",{staticClass:"line-number"},[e._v("69")]),n("br"),n("span",{staticClass:"line-number"},[e._v("70")]),n("br"),n("span",{staticClass:"line-number"},[e._v("71")]),n("br"),n("span",{staticClass:"line-number"},[e._v("72")]),n("br"),n("span",{staticClass:"line-number"},[e._v("73")]),n("br"),n("span",{staticClass:"line-number"},[e._v("74")]),n("br"),n("span",{staticClass:"line-number"},[e._v("75")]),n("br"),n("span",{staticClass:"line-number"},[e._v("76")]),n("br"),n("span",{staticClass:"line-number"},[e._v("77")]),n("br"),n("span",{staticClass:"line-number"},[e._v("78")]),n("br"),n("span",{staticClass:"line-number"},[e._v("79")]),n("br"),n("span",{staticClass:"line-number"},[e._v("80")]),n("br"),n("span",{staticClass:"line-number"},[e._v("81")]),n("br"),n("span",{staticClass:"line-number"},[e._v("82")]),n("br"),n("span",{staticClass:"line-number"},[e._v("83")]),n("br"),n("span",{staticClass:"line-number"},[e._v("84")]),n("br"),n("span",{staticClass:"line-number"},[e._v("85")]),n("br"),n("span",{staticClass:"line-number"},[e._v("86")]),n("br"),n("span",{staticClass:"line-number"},[e._v("87")]),n("br"),n("span",{staticClass:"line-number"},[e._v("88")]),n("br"),n("span",{staticClass:"line-number"},[e._v("89")]),n("br"),n("span",{staticClass:"line-number"},[e._v("90")]),n("br"),n("span",{staticClass:"line-number"},[e._v("91")]),n("br"),n("span",{staticClass:"line-number"},[e._v("92")]),n("br"),n("span",{staticClass:"line-number"},[e._v("93")]),n("br"),n("span",{staticClass:"line-number"},[e._v("94")]),n("br"),n("span",{staticClass:"line-number"},[e._v("95")]),n("br"),n("span",{staticClass:"line-number"},[e._v("96")]),n("br"),n("span",{staticClass:"line-number"},[e._v("97")]),n("br"),n("span",{staticClass:"line-number"},[e._v("98")]),n("br"),n("span",{staticClass:"line-number"},[e._v("99")]),n("br"),n("span",{staticClass:"line-number"},[e._v("100")]),n("br"),n("span",{staticClass:"line-number"},[e._v("101")]),n("br"),n("span",{staticClass:"line-number"},[e._v("102")]),n("br"),n("span",{staticClass:"line-number"},[e._v("103")]),n("br"),n("span",{staticClass:"line-number"},[e._v("104")]),n("br"),n("span",{staticClass:"line-number"},[e._v("105")]),n("br"),n("span",{staticClass:"line-number"},[e._v("106")]),n("br")])]),n("p",[e._v("TaskQueue这个任务队列是专门为线程池而设计的。优化任务队列以适当地利用线程池执行器内的线程。")]),e._v(" "),n("p",[e._v("如果你使用一个普通的队列，当有空闲线程executor将产生线程并且你不能强制将任务添加到队列。")]),e._v(" "),n("h3",{attrs:{id:"为什么不是直接使用threadpoolexecutor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是直接使用threadpoolexecutor"}},[e._v("#")]),e._v(" 为什么不是直接使用ThreadPoolExecutor")]),e._v(" "),n("p",[e._v("这里你是否考虑过一个问题，为什么Tomcat会自己构造一个StandardThreadExecutor而不是直接使用ThreadPoolExecutor？")]),e._v(" "),n("p",[e._v("从上面的代码，你会发现这里只是使用executor只是使用了execute的两个主要方法，它希望让调用层屏蔽掉ThreadPoolExecutor的其它方法：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("它体现的原则："),n("strong",[e._v("最少知识原则")]),e._v(": 只和你的密友谈话。也就是说客户对象所需要交互的对象应当尽可能少")])]),e._v(" "),n("li",[n("p",[e._v("它体现的设计模式："),n("a",{attrs:{href:"https://pdai.tech/md/dev-spec/pattern/8_facade.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("结构型 - 外观(Facade)"),n("OutboundLink")],1)]),e._v(" "),n("ul",[n("li",[e._v("外观模式(Facade pattern)，它提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用)")])])])])])}),[],!1,null,null,null);n.default=s.exports}}]);