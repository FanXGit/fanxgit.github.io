(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{3515:function(s,n,a){"use strict";a.r(n);var e=a(7),r=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"java常用机制-spi机制详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java常用机制-spi机制详解"}},[s._v("#")]),s._v(" Java常用机制 - SPI机制详解")]),s._v(" "),n("blockquote",[n("p",[s._v("SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。@pdai")])]),s._v(" "),n("h2",{attrs:{id:"什么是spi机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是spi机制"}},[s._v("#")]),s._v(" 什么是SPI机制")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 "),n("strong",[s._v("解耦")]),s._v("。")]),s._v(" "),n("p",[s._v("SPI整体机制图如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(393),alt:""}})]),s._v(" "),n("p",[s._v("当服务的提供者提供了一种接口的实现之后，需要在classpath下的"),n("code",[s._v("META-INF/services/")]),s._v("目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的"),n("code",[s._v("META-INF/services/")]),s._v("中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是："),n("code",[s._v("java.util.ServiceLoader")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"spi机制的简单示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制的简单示例"}},[s._v("#")]),s._v(" SPI机制的简单示例")]),s._v(" "),n("hr"),s._v(" "),n("blockquote",[n("p",[s._v("网上找了个例子："),n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/28909673",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里在新窗口打开"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("我们现在需要使用一个内容搜索接口，搜索的实现可能是基于文件系统的搜索，也可能是基于数据库的搜索。")]),s._v(" "),n("ul",[n("li",[s._v("先定义好接口")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public interface Search {\n    public List<String> searchDoc(String keyword);   \n} \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("文件搜索实现")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class FileSearch implements Search{\n    @Override\n    public List<String> searchDoc(String keyword) {\n        System.out.println("文件搜索 "+keyword);\n        return null;\n    }\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("数据库搜索实现")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class DatabaseSearch implements Search{\n    @Override\n    public List<String> searchDoc(String keyword) {\n        System.out.println("数据搜索 "+keyword);\n        return null;\n    }\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("resources 接下来可以在resources下新建META-INF/services/目录，然后新建接口全限定名的文件："),n("code",[s._v("com.cainiao.ys.spi.learn.Search")]),s._v("，里面加上我们需要用到的实现类")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("com.cainiao.ys.spi.learn.FileSearch \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("测试方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class TestCase {\n    public static void main(String[] args) {\n        ServiceLoader<Search> s = ServiceLoader.load(Search.class);\n        Iterator<Search> iterator = s.iterator();\n        while (iterator.hasNext()) {\n           Search search =  iterator.next();\n           search.searchDoc("hello world");\n        }\n    }\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("可以看到输出结果：文件搜索 hello world")]),s._v(" "),n("p",[s._v("如果在"),n("code",[s._v("com.cainiao.ys.spi.learn.Search")]),s._v("文件里写上两个实现类，那最后的输出结果就是两行了。")]),s._v(" "),n("p",[s._v("这就是因为"),n("code",[s._v("ServiceLoader.load(Search.class)")]),s._v("在加载某接口时，会去"),n("code",[s._v("META-INF/services")]),s._v("下找接口的全限定名文件，再根据里面的内容加载相应的实现类。")]),s._v(" "),n("p",[s._v("这就是spi的思想，接口的实现由provider实现，provider只用在提交的jar包里的"),n("code",[s._v("META-INF/services")]),s._v("下根据平台定义的接口新建文件，并添加进相应的实现类内容就好。")]),s._v(" "),n("h2",{attrs:{id:"spi机制的广泛应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制的广泛应用"}},[s._v("#")]),s._v(" SPI机制的广泛应用")]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"spi机制-jdbc-drivermanager"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制-jdbc-drivermanager"}},[s._v("#")]),s._v(" SPI机制 - JDBC DriverManager")]),s._v(" "),n("blockquote",[n("p",[s._v('在JDBC4.0之前，我们开发有连接数据库的时候，通常会用Class.forName("com.mysql.jdbc.Driver")这句先加载数据库相关的驱动，然后再进行获取连接等的操作。'),n("strong",[s._v('而JDBC4.0之后不需要用Class.forName("com.mysql.jdbc.Driver")来加载驱动，直接获取连接就可以了，现在这种方式就是使用了Java的SPI扩展机制来实现')]),s._v("。")])]),s._v(" "),n("h4",{attrs:{id:"jdbc接口定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdbc接口定义"}},[s._v("#")]),s._v(" JDBC接口定义")]),s._v(" "),n("p",[s._v("首先在java中定义了接口"),n("code",[s._v("java.sql.Driver")]),s._v("，并没有具体的实现，具体的实现都是由不同厂商来提供的。")]),s._v(" "),n("h4",{attrs:{id:"mysql实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mysql实现"}},[s._v("#")]),s._v(" mysql实现")]),s._v(" "),n("p",[s._v("在mysql的jar包"),n("code",[s._v("mysql-connector-java-6.0.6.jar")]),s._v("中，可以找到"),n("code",[s._v("META-INF/services")]),s._v("目录，该目录下会有一个名字为"),n("code",[s._v("java.sql.Driver")]),s._v("的文件，文件内容是"),n("code",[s._v("com.mysql.cj.jdbc.Driver")]),s._v("，这里面的内容就是针对Java中定义的接口的实现。")]),s._v(" "),n("h4",{attrs:{id:"postgresql实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postgresql实现"}},[s._v("#")]),s._v(" postgresql实现")]),s._v(" "),n("p",[s._v("同样在postgresql的jar包"),n("code",[s._v("postgresql-42.0.0.jar")]),s._v("中，也可以找到同样的配置文件，文件内容是"),n("code",[s._v("org.postgresql.Driver")]),s._v("，这是postgresql对Java的"),n("code",[s._v("java.sql.Driver")]),s._v("的实现。")]),s._v(" "),n("h4",{attrs:{id:"使用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[s._v("#")]),s._v(" 使用方法")]),s._v(" "),n("p",[s._v("上面说了，现在使用SPI扩展来加载具体的驱动，我们在Java中写连接数据库的代码的时候，不需要再使用"),n("code",[s._v('Class.forName("com.mysql.jdbc.Driver")')]),s._v("来加载驱动了，而是直接使用如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String url = "jdbc:xxxx://xxxx:xxxx/xxxx";\nConnection conn = DriverManager.getConnection(url,username,password);\n..... \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("这里并没有涉及到spi的使用，接着看下面的解析。")]),s._v(" "),n("h4",{attrs:{id:"源码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#源码实现"}},[s._v("#")]),s._v(" 源码实现")]),s._v(" "),n("p",[s._v("上面的使用方法，就是我们普通的连接数据库的代码，并没有涉及到SPI的东西，但是有一点我们可以确定的是，我们没有写有关具体驱动的硬编码"),n("code",[s._v('Class.forName("com.mysql.jdbc.Driver")')]),s._v("！")]),s._v(" "),n("p",[s._v("上面的代码可以直接获取数据库连接进行操作，但是跟SPI有啥关系呢？上面代码没有了加载驱动的代码，我们怎么去确定使用哪个数据库连接的驱动呢？这里就涉及到使用Java的SPI扩展机制来查找相关驱动的东西了，关于驱动的查找其实都在"),n("code",[s._v("DriverManager")]),s._v("中，"),n("code",[s._v("DriverManager")]),s._v("是Java中的实现，用来获取数据库连接，在"),n("code",[s._v("DriverManager")]),s._v("中有一个静态代码块如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('static {\n    loadInitialDrivers();\n    println("JDBC DriverManager initialized");\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("可以看到是加载实例化驱动的，接着看loadInitialDrivers方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private static void loadInitialDrivers() {\n    String drivers;\n    try {\n        drivers = AccessController.doPrivileged(new PrivilegedAction<String>() {\n            public String run() {\n                return System.getProperty("jdbc.drivers");\n            }\n        });\n    } catch (Exception ex) {\n        drivers = null;\n    }\n\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n        public Void run() {\n\t\t\t//使用SPI的ServiceLoader来加载接口的实现\n            ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class);\n            Iterator<Driver> driversIterator = loadedDrivers.iterator();\n            try{\n                while(driversIterator.hasNext()) {\n                    driversIterator.next();\n                }\n            } catch(Throwable t) {\n            // Do nothing\n            }\n            return null;\n        }\n    });\n\n    println("DriverManager.initialize: jdbc.drivers = " + drivers);\n\n    if (drivers == null || drivers.equals("")) {\n        return;\n    }\n    String[] driversList = drivers.split(":");\n    println("number of Drivers:" + driversList.length);\n    for (String aDriver : driversList) {\n        try {\n            println("DriverManager.Initialize: loading " + aDriver);\n            Class.forName(aDriver, true,\n                    ClassLoader.getSystemClassLoader());\n        } catch (Exception ex) {\n            println("DriverManager.Initialize: load failed: " + ex);\n        }\n    }\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])]),n("p",[s._v("上面的代码主要步骤是：")]),s._v(" "),n("ul",[n("li",[s._v("从系统变量中获取有关驱动的定义。")]),s._v(" "),n("li",[s._v("使用SPI来获取驱动的实现。")]),s._v(" "),n("li",[s._v("遍历使用SPI获取到的具体实现，实例化各个实现类。")]),s._v(" "),n("li",[s._v("根据第一步获取到的驱动列表来实例化具体实现类。")])]),s._v(" "),n("p",[s._v("我们主要关注2,3步，这两步是SPI的用法，首先看第二步，使用SPI来获取驱动的实现，对应的代码是：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class); \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这里没有去"),n("code",[s._v("META-INF/services")]),s._v("目录下查找配置文件，也没有加载具体实现类，做的事情就是封装了我们的接口类型和类加载器，并初始化了一个迭代器。")]),s._v(" "),n("p",[s._v("接着看第三步，遍历使用SPI获取到的具体实现，实例化各个实现类，对应的代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//获取迭代器\nIterator<Driver> driversIterator = loadedDrivers.iterator();\n//遍历所有的驱动实现\nwhile(driversIterator.hasNext()) {\n    driversIterator.next();\n} \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("在遍历的时候，首先调用"),n("code",[s._v("driversIterator.hasNext()")]),s._v("方法，这里会搜索classpath下以及jar包中所有的"),n("code",[s._v("META-INF/services")]),s._v("目录下的"),n("code",[s._v("java.sql.Driver")]),s._v("文件，并找到文件中的实现类的名字，此时并没有实例化具体的实现类（ServiceLoader具体的源码实现在下面）。")]),s._v(" "),n("p",[s._v("然后是调用"),n("code",[s._v("driversIterator.next();")]),s._v("方法，此时就会根据驱动名字具体实例化各个实现类了。现在驱动就被找到并实例化了。")]),s._v(" "),n("p",[s._v("可以看下截图，我在测试项目中添加了两个jar包，"),n("code",[s._v("mysql-connector-java-6.0.6.jar")]),s._v("和"),n("code",[s._v("postgresql-42.0.0.0.jar")]),s._v("，跟踪到DriverManager中之后：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(394),alt:""}})]),s._v(" "),n("p",[s._v("可以看到此时迭代器中有两个驱动，mysql和postgresql的都被加载了。")]),s._v(" "),n("h3",{attrs:{id:"spi机制-common-logging"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制-common-logging"}},[s._v("#")]),s._v(" SPI机制 - Common-Logging")]),s._v(" "),n("blockquote",[n("p",[s._v("common-logging（也称Jakarta Commons Logging，缩写 JCL）是常用的日志库门面，具体"),n("a",{attrs:{href:"https://pdai.tech/md/develop/package/dev-package-x-log.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("日志库相关可以看这篇"),n("OutboundLink")],1),s._v("。我们看下它是怎么解耦的。")])]),s._v(" "),n("p",[s._v("首先，日志实例是通过LogFactory的getLog(String)方法创建的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public static getLog(Class clazz) throws LogConfigurationException {\n    return getFactory().getInstance(clazz);\n} \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("LogFatory是一个抽象类，它负责加载具体的日志实现，分析其Factory getFactory()方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public static org.apache.commons.logging.LogFactory getFactory() throws LogConfigurationException {\n    // Identify the class loader we will be using\n    ClassLoader contextClassLoader = getContextClassLoaderInternal();\n\n    if (contextClassLoader == null) {\n        // This is an odd enough situation to report about. This\n        // output will be a nuisance on JDK1.1, as the system\n        // classloader is null in that environment.\n        if (isDiagnosticsEnabled()) {\n            logDiagnostic("Context classloader is null.");\n        }\n    }\n\n    // Return any previously registered factory for this class loader\n    org.apache.commons.logging.LogFactory factory = getCachedFactory(contextClassLoader);\n    if (factory != null) {\n        return factory;\n    }\n\n    if (isDiagnosticsEnabled()) {\n        logDiagnostic(\n                "[LOOKUP] LogFactory implementation requested for the first time for context classloader " +\n                        objectId(contextClassLoader));\n        logHierarchy("[LOOKUP] ", contextClassLoader);\n    }\n\n    // Load properties file.\n    //\n    // If the properties file exists, then its contents are used as\n    // "attributes" on the LogFactory implementation class. One particular\n    // property may also control which LogFactory concrete subclass is\n    // used, but only if other discovery mechanisms fail..\n    //\n    // As the properties file (if it exists) will be used one way or\n    // another in the end we may as well look for it first.\n    // classpath根目录下寻找commons-logging.properties\n    Properties props = getConfigurationFile(contextClassLoader, FACTORY_PROPERTIES);\n\n    // Determine whether we will be using the thread context class loader to\n    // load logging classes or not by checking the loaded properties file (if any).\n    // classpath根目录下commons-logging.properties是否配置use_tccl\n    ClassLoader baseClassLoader = contextClassLoader;\n    if (props != null) {\n        String useTCCLStr = props.getProperty(TCCL_KEY);\n        if (useTCCLStr != null) {\n            // The Boolean.valueOf(useTCCLStr).booleanValue() formulation\n            // is required for Java 1.2 compatibility.\n            if (Boolean.valueOf(useTCCLStr).booleanValue() == false) {\n                // Don\'t use current context classloader when locating any\n                // LogFactory or Log classes, just use the class that loaded\n                // this abstract class. When this class is deployed in a shared\n                // classpath of a container, it means webapps cannot deploy their\n                // own logging implementations. It also means that it is up to the\n                // implementation whether to load library-specific config files\n                // from the TCCL or not.\n                baseClassLoader = thisClassLoader;\n            }\n        }\n    }\n\n    // 这里真正开始决定使用哪个factory\n    // 首先，尝试查找vm系统属性org.apache.commons.logging.LogFactory，其是否指定factory\n    // Determine which concrete LogFactory subclass to use.\n    // First, try a global system property\n    if (isDiagnosticsEnabled()) {\n        logDiagnostic("[LOOKUP] Looking for system property [" + FACTORY_PROPERTY +\n                "] to define the LogFactory subclass to use...");\n    }\n\n    try {\n        String factoryClass = getSystemProperty(FACTORY_PROPERTY, null);\n        if (factoryClass != null) {\n            if (isDiagnosticsEnabled()) {\n                logDiagnostic("[LOOKUP] Creating an instance of LogFactory class \'" + factoryClass +\n                        "\' as specified by system property " + FACTORY_PROPERTY);\n            }\n            factory = newFactory(factoryClass, baseClassLoader, contextClassLoader);\n        } else {\n            if (isDiagnosticsEnabled()) {\n                logDiagnostic("[LOOKUP] No system property [" + FACTORY_PROPERTY + "] defined.");\n            }\n        }\n    } catch (SecurityException e) {\n        if (isDiagnosticsEnabled()) {\n            logDiagnostic("[LOOKUP] A security exception occurred while trying to create an" +\n                    " instance of the custom factory class" + ": [" + trim(e.getMessage()) +\n                    "]. Trying alternative implementations...");\n        }\n        // ignore\n    } catch (RuntimeException e) {\n        // This is not consistent with the behaviour when a bad LogFactory class is\n        // specified in a services file.\n        //\n        // One possible exception that can occur here is a ClassCastException when\n        // the specified class wasn\'t castable to this LogFactory type.\n        if (isDiagnosticsEnabled()) {\n            logDiagnostic("[LOOKUP] An exception occurred while trying to create an" +\n                    " instance of the custom factory class" + ": [" +\n                    trim(e.getMessage()) +\n                    "] as specified by a system property.");\n        }\n        throw e;\n    }\n\n    // 第二，尝试使用java spi服务发现机制，载META-INF/services下寻找org.apache.commons.logging.LogFactory实现\n    // Second, try to find a service by using the JDK1.3 class\n    // discovery mechanism, which involves putting a file with the name\n    // of an interface class in the META-INF/services directory, where the\n    // contents of the file is a single line specifying a concrete class\n    // that implements the desired interface.\n\n    if (factory == null) {\n        if (isDiagnosticsEnabled()) {\n            logDiagnostic("[LOOKUP] Looking for a resource file of name [" + SERVICE_ID +\n                    "] to define the LogFactory subclass to use...");\n        }\n        try {\n            // META-INF/services/org.apache.commons.logging.LogFactory, SERVICE_ID\n            final InputStream is = getResourceAsStream(contextClassLoader, SERVICE_ID);\n\n            if (is != null) {\n                // This code is needed by EBCDIC and other strange systems.\n                // It\'s a fix for bugs reported in xerces\n                BufferedReader rd;\n                try {\n                    rd = new BufferedReader(new InputStreamReader(is, "UTF-8"));\n                } catch (java.io.UnsupportedEncodingException e) {\n                    rd = new BufferedReader(new InputStreamReader(is));\n                }\n\n                String factoryClassName = rd.readLine();\n                rd.close();\n\n                if (factoryClassName != null && !"".equals(factoryClassName)) {\n                    if (isDiagnosticsEnabled()) {\n                        logDiagnostic("[LOOKUP]  Creating an instance of LogFactory class " +\n                                factoryClassName +\n                                " as specified by file \'" + SERVICE_ID +\n                                "\' which was present in the path of the context classloader.");\n                    }\n                    factory = newFactory(factoryClassName, baseClassLoader, contextClassLoader);\n                }\n            } else {\n                // is == null\n                if (isDiagnosticsEnabled()) {\n                    logDiagnostic("[LOOKUP] No resource file with name \'" + SERVICE_ID + "\' found.");\n                }\n            }\n        } catch (Exception ex) {\n            // note: if the specified LogFactory class wasn\'t compatible with LogFactory\n            // for some reason, a ClassCastException will be caught here, and attempts will\n            // continue to find a compatible class.\n            if (isDiagnosticsEnabled()) {\n                logDiagnostic(\n                        "[LOOKUP] A security exception occurred while trying to create an" +\n                                " instance of the custom factory class" +\n                                ": [" + trim(ex.getMessage()) +\n                                "]. Trying alternative implementations...");\n            }\n            // ignore\n        }\n    }\n\n    // 第三，尝试从classpath根目录下的commons-logging.properties中查找org.apache.commons.logging.LogFactory属性指定的factory\n    // Third try looking into the properties file read earlier (if found)\n\n    if (factory == null) {\n        if (props != null) {\n            if (isDiagnosticsEnabled()) {\n                logDiagnostic(\n                        "[LOOKUP] Looking in properties file for entry with key \'" + FACTORY_PROPERTY +\n                                "\' to define the LogFactory subclass to use...");\n            }\n            String factoryClass = props.getProperty(FACTORY_PROPERTY);\n            if (factoryClass != null) {\n                if (isDiagnosticsEnabled()) {\n                    logDiagnostic(\n                            "[LOOKUP] Properties file specifies LogFactory subclass \'" + factoryClass + "\'");\n                }\n                factory = newFactory(factoryClass, baseClassLoader, contextClassLoader);\n\n                // TODO: think about whether we need to handle exceptions from newFactory\n            } else {\n                if (isDiagnosticsEnabled()) {\n                    logDiagnostic("[LOOKUP] Properties file has no entry specifying LogFactory subclass.");\n                }\n            }\n        } else {\n            if (isDiagnosticsEnabled()) {\n                logDiagnostic("[LOOKUP] No properties file available to determine" + " LogFactory subclass from..");\n            }\n        }\n    }\n\n    // 最后，使用后备factory实现，org.apache.commons.logging.impl.LogFactoryImpl\n    // Fourth, try the fallback implementation class\n\n    if (factory == null) {\n        if (isDiagnosticsEnabled()) {\n            logDiagnostic(\n                    "[LOOKUP] Loading the default LogFactory implementation \'" + FACTORY_DEFAULT +\n                            "\' via the same classloader that loaded this LogFactory" +\n                            " class (ie not looking in the context classloader).");\n        }\n\n        // Note: unlike the above code which can try to load custom LogFactory\n        // implementations via the TCCL, we don\'t try to load the default LogFactory\n        // implementation via the context classloader because:\n        // * that can cause problems (see comments in newFactory method)\n        // * no-one should be customising the code of the default class\n        // Yes, we do give up the ability for the child to ship a newer\n        // version of the LogFactoryImpl class and have it used dynamically\n        // by an old LogFactory class in the parent, but that isn\'t\n        // necessarily a good idea anyway.\n        factory = newFactory(FACTORY_DEFAULT, thisClassLoader, contextClassLoader);\n    }\n\n    if (factory != null) {\n        /**\n            * Always cache using context class loader.\n            */\n        cacheFactory(contextClassLoader, factory);\n\n        if (props != null) {\n            Enumeration names = props.propertyNames();\n            while (names.hasMoreElements()) {\n                String name = (String) names.nextElement();\n                String value = props.getProperty(name);\n                factory.setAttribute(name, value);\n            }\n        }\n    }\n\n    return factory;\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br"),n("span",{staticClass:"line-number"},[s._v("129")]),n("br"),n("span",{staticClass:"line-number"},[s._v("130")]),n("br"),n("span",{staticClass:"line-number"},[s._v("131")]),n("br"),n("span",{staticClass:"line-number"},[s._v("132")]),n("br"),n("span",{staticClass:"line-number"},[s._v("133")]),n("br"),n("span",{staticClass:"line-number"},[s._v("134")]),n("br"),n("span",{staticClass:"line-number"},[s._v("135")]),n("br"),n("span",{staticClass:"line-number"},[s._v("136")]),n("br"),n("span",{staticClass:"line-number"},[s._v("137")]),n("br"),n("span",{staticClass:"line-number"},[s._v("138")]),n("br"),n("span",{staticClass:"line-number"},[s._v("139")]),n("br"),n("span",{staticClass:"line-number"},[s._v("140")]),n("br"),n("span",{staticClass:"line-number"},[s._v("141")]),n("br"),n("span",{staticClass:"line-number"},[s._v("142")]),n("br"),n("span",{staticClass:"line-number"},[s._v("143")]),n("br"),n("span",{staticClass:"line-number"},[s._v("144")]),n("br"),n("span",{staticClass:"line-number"},[s._v("145")]),n("br"),n("span",{staticClass:"line-number"},[s._v("146")]),n("br"),n("span",{staticClass:"line-number"},[s._v("147")]),n("br"),n("span",{staticClass:"line-number"},[s._v("148")]),n("br"),n("span",{staticClass:"line-number"},[s._v("149")]),n("br"),n("span",{staticClass:"line-number"},[s._v("150")]),n("br"),n("span",{staticClass:"line-number"},[s._v("151")]),n("br"),n("span",{staticClass:"line-number"},[s._v("152")]),n("br"),n("span",{staticClass:"line-number"},[s._v("153")]),n("br"),n("span",{staticClass:"line-number"},[s._v("154")]),n("br"),n("span",{staticClass:"line-number"},[s._v("155")]),n("br"),n("span",{staticClass:"line-number"},[s._v("156")]),n("br"),n("span",{staticClass:"line-number"},[s._v("157")]),n("br"),n("span",{staticClass:"line-number"},[s._v("158")]),n("br"),n("span",{staticClass:"line-number"},[s._v("159")]),n("br"),n("span",{staticClass:"line-number"},[s._v("160")]),n("br"),n("span",{staticClass:"line-number"},[s._v("161")]),n("br"),n("span",{staticClass:"line-number"},[s._v("162")]),n("br"),n("span",{staticClass:"line-number"},[s._v("163")]),n("br"),n("span",{staticClass:"line-number"},[s._v("164")]),n("br"),n("span",{staticClass:"line-number"},[s._v("165")]),n("br"),n("span",{staticClass:"line-number"},[s._v("166")]),n("br"),n("span",{staticClass:"line-number"},[s._v("167")]),n("br"),n("span",{staticClass:"line-number"},[s._v("168")]),n("br"),n("span",{staticClass:"line-number"},[s._v("169")]),n("br"),n("span",{staticClass:"line-number"},[s._v("170")]),n("br"),n("span",{staticClass:"line-number"},[s._v("171")]),n("br"),n("span",{staticClass:"line-number"},[s._v("172")]),n("br"),n("span",{staticClass:"line-number"},[s._v("173")]),n("br"),n("span",{staticClass:"line-number"},[s._v("174")]),n("br"),n("span",{staticClass:"line-number"},[s._v("175")]),n("br"),n("span",{staticClass:"line-number"},[s._v("176")]),n("br"),n("span",{staticClass:"line-number"},[s._v("177")]),n("br"),n("span",{staticClass:"line-number"},[s._v("178")]),n("br"),n("span",{staticClass:"line-number"},[s._v("179")]),n("br"),n("span",{staticClass:"line-number"},[s._v("180")]),n("br"),n("span",{staticClass:"line-number"},[s._v("181")]),n("br"),n("span",{staticClass:"line-number"},[s._v("182")]),n("br"),n("span",{staticClass:"line-number"},[s._v("183")]),n("br"),n("span",{staticClass:"line-number"},[s._v("184")]),n("br"),n("span",{staticClass:"line-number"},[s._v("185")]),n("br"),n("span",{staticClass:"line-number"},[s._v("186")]),n("br"),n("span",{staticClass:"line-number"},[s._v("187")]),n("br"),n("span",{staticClass:"line-number"},[s._v("188")]),n("br"),n("span",{staticClass:"line-number"},[s._v("189")]),n("br"),n("span",{staticClass:"line-number"},[s._v("190")]),n("br"),n("span",{staticClass:"line-number"},[s._v("191")]),n("br"),n("span",{staticClass:"line-number"},[s._v("192")]),n("br"),n("span",{staticClass:"line-number"},[s._v("193")]),n("br"),n("span",{staticClass:"line-number"},[s._v("194")]),n("br"),n("span",{staticClass:"line-number"},[s._v("195")]),n("br"),n("span",{staticClass:"line-number"},[s._v("196")]),n("br"),n("span",{staticClass:"line-number"},[s._v("197")]),n("br"),n("span",{staticClass:"line-number"},[s._v("198")]),n("br"),n("span",{staticClass:"line-number"},[s._v("199")]),n("br"),n("span",{staticClass:"line-number"},[s._v("200")]),n("br"),n("span",{staticClass:"line-number"},[s._v("201")]),n("br"),n("span",{staticClass:"line-number"},[s._v("202")]),n("br"),n("span",{staticClass:"line-number"},[s._v("203")]),n("br"),n("span",{staticClass:"line-number"},[s._v("204")]),n("br"),n("span",{staticClass:"line-number"},[s._v("205")]),n("br"),n("span",{staticClass:"line-number"},[s._v("206")]),n("br"),n("span",{staticClass:"line-number"},[s._v("207")]),n("br"),n("span",{staticClass:"line-number"},[s._v("208")]),n("br"),n("span",{staticClass:"line-number"},[s._v("209")]),n("br"),n("span",{staticClass:"line-number"},[s._v("210")]),n("br"),n("span",{staticClass:"line-number"},[s._v("211")]),n("br"),n("span",{staticClass:"line-number"},[s._v("212")]),n("br"),n("span",{staticClass:"line-number"},[s._v("213")]),n("br"),n("span",{staticClass:"line-number"},[s._v("214")]),n("br"),n("span",{staticClass:"line-number"},[s._v("215")]),n("br"),n("span",{staticClass:"line-number"},[s._v("216")]),n("br"),n("span",{staticClass:"line-number"},[s._v("217")]),n("br"),n("span",{staticClass:"line-number"},[s._v("218")]),n("br"),n("span",{staticClass:"line-number"},[s._v("219")]),n("br"),n("span",{staticClass:"line-number"},[s._v("220")]),n("br"),n("span",{staticClass:"line-number"},[s._v("221")]),n("br"),n("span",{staticClass:"line-number"},[s._v("222")]),n("br"),n("span",{staticClass:"line-number"},[s._v("223")]),n("br"),n("span",{staticClass:"line-number"},[s._v("224")]),n("br"),n("span",{staticClass:"line-number"},[s._v("225")]),n("br"),n("span",{staticClass:"line-number"},[s._v("226")]),n("br"),n("span",{staticClass:"line-number"},[s._v("227")]),n("br"),n("span",{staticClass:"line-number"},[s._v("228")]),n("br"),n("span",{staticClass:"line-number"},[s._v("229")]),n("br"),n("span",{staticClass:"line-number"},[s._v("230")]),n("br"),n("span",{staticClass:"line-number"},[s._v("231")]),n("br"),n("span",{staticClass:"line-number"},[s._v("232")]),n("br"),n("span",{staticClass:"line-number"},[s._v("233")]),n("br"),n("span",{staticClass:"line-number"},[s._v("234")]),n("br"),n("span",{staticClass:"line-number"},[s._v("235")]),n("br")])]),n("p",[s._v("可以看出，抽象类LogFactory加载具体实现的步骤如下：")]),s._v(" "),n("ul",[n("li",[s._v("从vm系统属性org.apache.commons.logging.LogFactory")]),s._v(" "),n("li",[s._v("使用SPI服务发现机制，发现org.apache.commons.logging.LogFactory的实现")]),s._v(" "),n("li",[s._v("查找classpath根目录commons-logging.properties的org.apache.commons.logging.LogFactory属性是否指定factory实现")]),s._v(" "),n("li",[s._v("使用默认factory实现，org.apache.commons.logging.impl.LogFactoryImpl")])]),s._v(" "),n("blockquote",[n("p",[s._v("LogFactory的getLog()方法返回类型是org.apache.commons.logging.Log接口，提供了从trace到fatal方法。可以确定，如果日志实现提供者只要实现该接口，并且使用继承自org.apache.commons.logging.LogFactory的子类创建Log，必然可以构建一个松耦合的日志系统。")])]),s._v(" "),n("h3",{attrs:{id:"spi机制-插件体系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制-插件体系"}},[s._v("#")]),s._v(" SPI机制 - 插件体系")]),s._v(" "),n("blockquote",[n("p",[s._v("其实最具spi思想的应该属于插件开发，我们项目中也用到的这种思想，后面再说，这里具体说一下eclipse的插件思想。")])]),s._v(" "),n("p",[s._v("Eclipse使用OSGi作为插件系统的基础，动态添加新插件和停止现有插件，以动态的方式管理组件生命周期。")]),s._v(" "),n("p",[s._v("一般来说，插件的文件结构必须在指定目录下包含以下三个文件：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("META-INF/MANIFEST.MF")]),s._v(": 项目基本配置信息，版本、名称、启动器等")]),s._v(" "),n("li",[n("code",[s._v("build.properties")]),s._v(": 项目的编译配置信息，包括，源代码路径、输出路径")]),s._v(" "),n("li",[n("code",[s._v("plugin.xml")]),s._v("：插件的操作配置信息，包含弹出菜单及点击菜单后对应的操作执行类等")])]),s._v(" "),n("p",[s._v("当eclipse启动时，会遍历plugins文件夹中的目录，扫描每个插件的清单文件"),n("code",[s._v("MANIFEST.MF")]),s._v("，并建立一个内部模型来记录它所找到的每个插件的信息，就实现了动态添加新的插件。")]),s._v(" "),n("p",[s._v("这也意味着是eclipse制定了一系列的规则，像是文件结构、类型、参数等。插件开发者遵循这些规则去开发自己的插件，eclipse并不需要知道插件具体是怎样开发的，只需要在启动的时候根据配置文件解析、加载到系统里就好了，是spi思想的一种体现。")]),s._v(" "),n("h3",{attrs:{id:"spi机制-spring中spi机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制-spring中spi机制"}},[s._v("#")]),s._v(" SPI机制 - Spring中SPI机制")]),s._v(" "),n("p",[s._v("在springboot的自动装配过程中，最终会加载"),n("code",[s._v("META-INF/spring.factories")]),s._v("文件，而加载的过程是由"),n("code",[s._v("SpringFactoriesLoader")]),s._v("加载的。从CLASSPATH下的每个Jar包中搜寻所有"),n("code",[s._v("META-INF/spring.factories")]),s._v("配置文件，然后将解析properties文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去ClassPath路径下查找，会扫描所有路径下的Jar包，只不过这个文件只会在Classpath下的jar包中。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";\n// spring.factories文件的格式为：key=value1,value2,value3\n// 从所有的jar包中找到META-INF/spring.factories文件\n// 然后从文件中解析出key=factoryClass类名称的所有value值\npublic static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n    String factoryClassName = factoryClass.getName();\n    // 取得资源文件的URL\n    Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n    List<String> result = new ArrayList<String>();\n    // 遍历所有的URL\n    while (urls.hasMoreElements()) {\n        URL url = urls.nextElement();\n        // 根据资源文件URL解析properties文件，得到对应的一组@Configuration类\n        Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));\n        String factoryClassNames = properties.getProperty(factoryClassName);\n        // 组装数据，并返回\n        result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));\n    }\n    return result;\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h2",{attrs:{id:"spi机制深入理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制深入理解"}},[s._v("#")]),s._v(" SPI机制深入理解")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("提示")]),s._v(" "),n("p",[s._v("接下来，我们深入理解下SPI相关内容")]),s._v(" "),n("h3",{attrs:{id:"spi机制通常怎么使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制通常怎么使用"}},[s._v("#")]),s._v(" SPI机制通常怎么使用")]),s._v(" "),n("p",[s._v("看完上面的几个例子解析，应该都能知道大概的流程了：")]),s._v(" "),n("ul",[n("li",[s._v("有关组织或者公司定义标准。")]),s._v(" "),n("li",[s._v("具体厂商或者框架开发者实现。")]),s._v(" "),n("li",[s._v("程序猿使用。")])]),s._v(" "),n("h4",{attrs:{id:"定义标准"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义标准"}},[s._v("#")]),s._v(" 定义标准")]),s._v(" "),n("p",[s._v("定义标准，就是定义接口。比如接口"),n("code",[s._v("java.sql.Driver")])]),s._v(" "),n("h4",{attrs:{id:"具体厂商或者框架开发者实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体厂商或者框架开发者实现"}},[s._v("#")]),s._v(" 具体厂商或者框架开发者实现")]),s._v(" "),n("p",[s._v("厂商或者框架开发者开发具体的实现：")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("META-INF/services")]),s._v("目录下定义一个名字为接口全限定名的文件，比如"),n("code",[s._v("java.sql.Driver")]),s._v("文件，文件内容是具体的实现名字，比如"),n("code",[s._v("me.cxis.sql.MyDriver")]),s._v("。")]),s._v(" "),n("p",[s._v("写具体的实现"),n("code",[s._v("me.cxis.sql.MyDriver")]),s._v("，都是对接口Driver的实现。")]),s._v(" "),n("h4",{attrs:{id:"程序猿使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#程序猿使用"}},[s._v("#")]),s._v(" 程序猿使用")]),s._v(" "),n("p",[s._v("我们会引用具体厂商的jar包来实现我们的功能：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class);\n//获取迭代器\nIterator<Driver> driversIterator = loadedDrivers.iterator();\n//遍历\nwhile(driversIterator.hasNext()) {\n    driversIterator.next();\n    //可以做具体的业务逻辑\n} \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h4",{attrs:{id:"使用规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用规范"}},[s._v("#")]),s._v(" 使用规范")]),s._v(" "),n("p",[s._v("最后总结一下jdk spi需要遵循的规范")]),s._v(" "),n("p",[n("img",{attrs:{src:a(395),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"spi和api的区别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi和api的区别是什么"}},[s._v("#")]),s._v(" SPI和API的区别是什么")]),s._v(" "),n("blockquote",[n("p",[s._v("这里实际包含两个问题，第一个SPI和API的区别？第二个什么时候用API，什么时候用SPI？")])]),s._v(" "),n("blockquote",[n("p",[s._v("SPI - “接口”位于“调用方”所在的“包”中")])]),s._v(" "),n("ul",[n("li",[s._v("概念上更依赖调用方。")]),s._v(" "),n("li",[s._v("组织上位于调用方所在的包中。")]),s._v(" "),n("li",[s._v("实现位于独立的包中。")]),s._v(" "),n("li",[s._v("常见的例子是：插件模式的插件。")])]),s._v(" "),n("blockquote",[n("p",[s._v("API - “接口”位于“实现方”所在的“包”中")])]),s._v(" "),n("ul",[n("li",[s._v("概念上更接近实现方。")]),s._v(" "),n("li",[s._v("组织上位于实现方所在的包中。")]),s._v(" "),n("li",[s._v("实现和接口在一个包中。")])]),s._v(" "),n("p",[s._v("参考：")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://stackoverflow.com/questions/2954372/difference-between-spi-and-api?answertab=votes#tab-top",target:"_blank",rel:"noopener noreferrer"}},[s._v("difference-between-spi-and-api在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/happyframework/archive/2013/09/17/3325560.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("设计原则：小议 SPI 和 API在新窗口打开"),n("OutboundLink")],1)])]),s._v(" "),n("p",[n("img",{attrs:{src:a(396),alt:""}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(397),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"spi机制实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制实现原理"}},[s._v("#")]),s._v(" SPI机制实现原理")]),s._v(" "),n("p",[s._v("不妨看下JDK中"),n("code",[s._v("ServiceLoader<S>")]),s._v("方法的具体实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//ServiceLoader实现了Iterable接口，可以遍历所有的服务实现者\npublic final class ServiceLoader<S>\n    implements Iterable<S>\n{\n\n    //查找配置文件的目录\n    private static final String PREFIX = "META-INF/services/";\n\n    //表示要被加载的服务的类或接口\n    private final Class<S> service;\n\n    //这个ClassLoader用来定位，加载，实例化服务提供者\n    private final ClassLoader loader;\n\n    // 访问控制上下文\n    private final AccessControlContext acc;\n\n    // 缓存已经被实例化的服务提供者，按照实例化的顺序存储\n    private LinkedHashMap<String,S> providers = new LinkedHashMap<>();\n\n    // 迭代器\n    private LazyIterator lookupIterator;\n\n    //重新加载，就相当于重新创建ServiceLoader了，用于新的服务提供者安装到正在运行的Java虚拟机中的情况。\n    public void reload() {\n        //清空缓存中所有已实例化的服务提供者\n        providers.clear();\n        //新建一个迭代器，该迭代器会从头查找和实例化服务提供者\n        lookupIterator = new LazyIterator(service, loader);\n    }\n\n    //私有构造器\n    //使用指定的类加载器和服务创建服务加载器\n    //如果没有指定类加载器，使用系统类加载器，就是应用类加载器。\n    private ServiceLoader(Class<S> svc, ClassLoader cl) {\n        service = Objects.requireNonNull(svc, "Service interface cannot be null");\n        loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n        acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;\n        reload();\n    }\n\n    //解析失败处理的方法\n    private static void fail(Class<?> service, String msg, Throwable cause)\n        throws ServiceConfigurationError\n    {\n        throw new ServiceConfigurationError(service.getName() + ": " + msg,\n                                            cause);\n    }\n\n    private static void fail(Class<?> service, String msg)\n        throws ServiceConfigurationError\n    {\n        throw new ServiceConfigurationError(service.getName() + ": " + msg);\n    }\n\n    private static void fail(Class<?> service, URL u, int line, String msg)\n        throws ServiceConfigurationError\n    {\n        fail(service, u + ":" + line + ": " + msg);\n    }\n\n    //解析服务提供者配置文件中的一行\n    //首先去掉注释校验，然后保存\n    //返回下一行行号\n    //重复的配置项和已经被实例化的配置项不会被保存\n    private int parseLine(Class<?> service, URL u, BufferedReader r, int lc,\n                          List<String> names)\n        throws IOException, ServiceConfigurationError\n    {\n        //读取一行\n        String ln = r.readLine();\n        if (ln == null) {\n            return -1;\n        }\n        //#号代表注释行\n        int ci = ln.indexOf(\'#\');\n        if (ci >= 0) ln = ln.substring(0, ci);\n        ln = ln.trim();\n        int n = ln.length();\n        if (n != 0) {\n            if ((ln.indexOf(\' \') >= 0) || (ln.indexOf(\'\\t\') >= 0))\n                fail(service, u, lc, "Illegal configuration-file syntax");\n            int cp = ln.codePointAt(0);\n            if (!Character.isJavaIdentifierStart(cp))\n                fail(service, u, lc, "Illegal provider-class name: " + ln);\n            for (int i = Character.charCount(cp); i < n; i += Character.charCount(cp)) {\n                cp = ln.codePointAt(i);\n                if (!Character.isJavaIdentifierPart(cp) && (cp != \'.\'))\n                    fail(service, u, lc, "Illegal provider-class name: " + ln);\n            }\n            if (!providers.containsKey(ln) && !names.contains(ln))\n                names.add(ln);\n        }\n        return lc + 1;\n    }\n\n    //解析配置文件，解析指定的url配置文件\n    //使用parseLine方法进行解析，未被实例化的服务提供者会被保存到缓存中去\n    private Iterator<String> parse(Class<?> service, URL u)\n        throws ServiceConfigurationError\n    {\n        InputStream in = null;\n        BufferedReader r = null;\n        ArrayList<String> names = new ArrayList<>();\n        try {\n            in = u.openStream();\n            r = new BufferedReader(new InputStreamReader(in, "utf-8"));\n            int lc = 1;\n            while ((lc = parseLine(service, u, r, lc, names)) >= 0);\n        }\n        return names.iterator();\n    }\n\n    //服务提供者查找的迭代器\n    private class LazyIterator\n        implements Iterator<S>\n    {\n\n        Class<S> service;//服务提供者接口\n        ClassLoader loader;//类加载器\n        Enumeration<URL> configs = null;//保存实现类的url\n        Iterator<String> pending = null;//保存实现类的全名\n        String nextName = null;//迭代器中下一个实现类的全名\n\n        private LazyIterator(Class<S> service, ClassLoader loader) {\n            this.service = service;\n            this.loader = loader;\n        }\n\n        private boolean hasNextService() {\n            if (nextName != null) {\n                return true;\n            }\n            if (configs == null) {\n                try {\n                    String fullName = PREFIX + service.getName();\n                    if (loader == null)\n                        configs = ClassLoader.getSystemResources(fullName);\n                    else\n                        configs = loader.getResources(fullName);\n                }\n            }\n            while ((pending == null) || !pending.hasNext()) {\n                if (!configs.hasMoreElements()) {\n                    return false;\n                }\n                pending = parse(service, configs.nextElement());\n            }\n            nextName = pending.next();\n            return true;\n        }\n\n        private S nextService() {\n            if (!hasNextService())\n                throw new NoSuchElementException();\n            String cn = nextName;\n            nextName = null;\n            Class<?> c = null;\n            try {\n                c = Class.forName(cn, false, loader);\n            }\n            if (!service.isAssignableFrom(c)) {\n                fail(service, "Provider " + cn  + " not a subtype");\n            }\n            try {\n                S p = service.cast(c.newInstance());\n                providers.put(cn, p);\n                return p;\n            }\n        }\n\n        public boolean hasNext() {\n            if (acc == null) {\n                return hasNextService();\n            } else {\n                PrivilegedAction<Boolean> action = new PrivilegedAction<Boolean>() {\n                    public Boolean run() { return hasNextService(); }\n                };\n                return AccessController.doPrivileged(action, acc);\n            }\n        }\n\n        public S next() {\n            if (acc == null) {\n                return nextService();\n            } else {\n                PrivilegedAction<S> action = new PrivilegedAction<S>() {\n                    public S run() { return nextService(); }\n                };\n                return AccessController.doPrivileged(action, acc);\n            }\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n\n    }\n\n    //获取迭代器\n    //返回遍历服务提供者的迭代器\n    //以懒加载的方式加载可用的服务提供者\n    //懒加载的实现是：解析配置文件和实例化服务提供者的工作由迭代器本身完成\n    public Iterator<S> iterator() {\n        return new Iterator<S>() {\n            //按照实例化顺序返回已经缓存的服务提供者实例\n            Iterator<Map.Entry<String,S>> knownProviders\n                = providers.entrySet().iterator();\n\n            public boolean hasNext() {\n                if (knownProviders.hasNext())\n                    return true;\n                return lookupIterator.hasNext();\n            }\n\n            public S next() {\n                if (knownProviders.hasNext())\n                    return knownProviders.next().getValue();\n                return lookupIterator.next();\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n\n        };\n    }\n\n    //为指定的服务使用指定的类加载器来创建一个ServiceLoader\n    public static <S> ServiceLoader<S> load(Class<S> service,\n                                            ClassLoader loader)\n    {\n        return new ServiceLoader<>(service, loader);\n    }\n\n    //使用线程上下文的类加载器来创建ServiceLoader\n    public static <S> ServiceLoader<S> load(Class<S> service) {\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        return ServiceLoader.load(service, cl);\n    }\n\n    //使用扩展类加载器为指定的服务创建ServiceLoader\n    //只能找到并加载已经安装到当前Java虚拟机中的服务提供者，应用程序类路径中的服务提供者将被忽略\n    public static <S> ServiceLoader<S> loadInstalled(Class<S> service) {\n        ClassLoader cl = ClassLoader.getSystemClassLoader();\n        ClassLoader prev = null;\n        while (cl != null) {\n            prev = cl;\n            cl = cl.getParent();\n        }\n        return ServiceLoader.load(service, prev);\n    }\n\n    public String toString() {\n        return "java.util.ServiceLoader[" + service.getName() + "]";\n    }\n\n} \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br"),n("span",{staticClass:"line-number"},[s._v("129")]),n("br"),n("span",{staticClass:"line-number"},[s._v("130")]),n("br"),n("span",{staticClass:"line-number"},[s._v("131")]),n("br"),n("span",{staticClass:"line-number"},[s._v("132")]),n("br"),n("span",{staticClass:"line-number"},[s._v("133")]),n("br"),n("span",{staticClass:"line-number"},[s._v("134")]),n("br"),n("span",{staticClass:"line-number"},[s._v("135")]),n("br"),n("span",{staticClass:"line-number"},[s._v("136")]),n("br"),n("span",{staticClass:"line-number"},[s._v("137")]),n("br"),n("span",{staticClass:"line-number"},[s._v("138")]),n("br"),n("span",{staticClass:"line-number"},[s._v("139")]),n("br"),n("span",{staticClass:"line-number"},[s._v("140")]),n("br"),n("span",{staticClass:"line-number"},[s._v("141")]),n("br"),n("span",{staticClass:"line-number"},[s._v("142")]),n("br"),n("span",{staticClass:"line-number"},[s._v("143")]),n("br"),n("span",{staticClass:"line-number"},[s._v("144")]),n("br"),n("span",{staticClass:"line-number"},[s._v("145")]),n("br"),n("span",{staticClass:"line-number"},[s._v("146")]),n("br"),n("span",{staticClass:"line-number"},[s._v("147")]),n("br"),n("span",{staticClass:"line-number"},[s._v("148")]),n("br"),n("span",{staticClass:"line-number"},[s._v("149")]),n("br"),n("span",{staticClass:"line-number"},[s._v("150")]),n("br"),n("span",{staticClass:"line-number"},[s._v("151")]),n("br"),n("span",{staticClass:"line-number"},[s._v("152")]),n("br"),n("span",{staticClass:"line-number"},[s._v("153")]),n("br"),n("span",{staticClass:"line-number"},[s._v("154")]),n("br"),n("span",{staticClass:"line-number"},[s._v("155")]),n("br"),n("span",{staticClass:"line-number"},[s._v("156")]),n("br"),n("span",{staticClass:"line-number"},[s._v("157")]),n("br"),n("span",{staticClass:"line-number"},[s._v("158")]),n("br"),n("span",{staticClass:"line-number"},[s._v("159")]),n("br"),n("span",{staticClass:"line-number"},[s._v("160")]),n("br"),n("span",{staticClass:"line-number"},[s._v("161")]),n("br"),n("span",{staticClass:"line-number"},[s._v("162")]),n("br"),n("span",{staticClass:"line-number"},[s._v("163")]),n("br"),n("span",{staticClass:"line-number"},[s._v("164")]),n("br"),n("span",{staticClass:"line-number"},[s._v("165")]),n("br"),n("span",{staticClass:"line-number"},[s._v("166")]),n("br"),n("span",{staticClass:"line-number"},[s._v("167")]),n("br"),n("span",{staticClass:"line-number"},[s._v("168")]),n("br"),n("span",{staticClass:"line-number"},[s._v("169")]),n("br"),n("span",{staticClass:"line-number"},[s._v("170")]),n("br"),n("span",{staticClass:"line-number"},[s._v("171")]),n("br"),n("span",{staticClass:"line-number"},[s._v("172")]),n("br"),n("span",{staticClass:"line-number"},[s._v("173")]),n("br"),n("span",{staticClass:"line-number"},[s._v("174")]),n("br"),n("span",{staticClass:"line-number"},[s._v("175")]),n("br"),n("span",{staticClass:"line-number"},[s._v("176")]),n("br"),n("span",{staticClass:"line-number"},[s._v("177")]),n("br"),n("span",{staticClass:"line-number"},[s._v("178")]),n("br"),n("span",{staticClass:"line-number"},[s._v("179")]),n("br"),n("span",{staticClass:"line-number"},[s._v("180")]),n("br"),n("span",{staticClass:"line-number"},[s._v("181")]),n("br"),n("span",{staticClass:"line-number"},[s._v("182")]),n("br"),n("span",{staticClass:"line-number"},[s._v("183")]),n("br"),n("span",{staticClass:"line-number"},[s._v("184")]),n("br"),n("span",{staticClass:"line-number"},[s._v("185")]),n("br"),n("span",{staticClass:"line-number"},[s._v("186")]),n("br"),n("span",{staticClass:"line-number"},[s._v("187")]),n("br"),n("span",{staticClass:"line-number"},[s._v("188")]),n("br"),n("span",{staticClass:"line-number"},[s._v("189")]),n("br"),n("span",{staticClass:"line-number"},[s._v("190")]),n("br"),n("span",{staticClass:"line-number"},[s._v("191")]),n("br"),n("span",{staticClass:"line-number"},[s._v("192")]),n("br"),n("span",{staticClass:"line-number"},[s._v("193")]),n("br"),n("span",{staticClass:"line-number"},[s._v("194")]),n("br"),n("span",{staticClass:"line-number"},[s._v("195")]),n("br"),n("span",{staticClass:"line-number"},[s._v("196")]),n("br"),n("span",{staticClass:"line-number"},[s._v("197")]),n("br"),n("span",{staticClass:"line-number"},[s._v("198")]),n("br"),n("span",{staticClass:"line-number"},[s._v("199")]),n("br"),n("span",{staticClass:"line-number"},[s._v("200")]),n("br"),n("span",{staticClass:"line-number"},[s._v("201")]),n("br"),n("span",{staticClass:"line-number"},[s._v("202")]),n("br"),n("span",{staticClass:"line-number"},[s._v("203")]),n("br"),n("span",{staticClass:"line-number"},[s._v("204")]),n("br"),n("span",{staticClass:"line-number"},[s._v("205")]),n("br"),n("span",{staticClass:"line-number"},[s._v("206")]),n("br"),n("span",{staticClass:"line-number"},[s._v("207")]),n("br"),n("span",{staticClass:"line-number"},[s._v("208")]),n("br"),n("span",{staticClass:"line-number"},[s._v("209")]),n("br"),n("span",{staticClass:"line-number"},[s._v("210")]),n("br"),n("span",{staticClass:"line-number"},[s._v("211")]),n("br"),n("span",{staticClass:"line-number"},[s._v("212")]),n("br"),n("span",{staticClass:"line-number"},[s._v("213")]),n("br"),n("span",{staticClass:"line-number"},[s._v("214")]),n("br"),n("span",{staticClass:"line-number"},[s._v("215")]),n("br"),n("span",{staticClass:"line-number"},[s._v("216")]),n("br"),n("span",{staticClass:"line-number"},[s._v("217")]),n("br"),n("span",{staticClass:"line-number"},[s._v("218")]),n("br"),n("span",{staticClass:"line-number"},[s._v("219")]),n("br"),n("span",{staticClass:"line-number"},[s._v("220")]),n("br"),n("span",{staticClass:"line-number"},[s._v("221")]),n("br"),n("span",{staticClass:"line-number"},[s._v("222")]),n("br"),n("span",{staticClass:"line-number"},[s._v("223")]),n("br"),n("span",{staticClass:"line-number"},[s._v("224")]),n("br"),n("span",{staticClass:"line-number"},[s._v("225")]),n("br"),n("span",{staticClass:"line-number"},[s._v("226")]),n("br"),n("span",{staticClass:"line-number"},[s._v("227")]),n("br"),n("span",{staticClass:"line-number"},[s._v("228")]),n("br"),n("span",{staticClass:"line-number"},[s._v("229")]),n("br"),n("span",{staticClass:"line-number"},[s._v("230")]),n("br"),n("span",{staticClass:"line-number"},[s._v("231")]),n("br"),n("span",{staticClass:"line-number"},[s._v("232")]),n("br"),n("span",{staticClass:"line-number"},[s._v("233")]),n("br"),n("span",{staticClass:"line-number"},[s._v("234")]),n("br"),n("span",{staticClass:"line-number"},[s._v("235")]),n("br"),n("span",{staticClass:"line-number"},[s._v("236")]),n("br"),n("span",{staticClass:"line-number"},[s._v("237")]),n("br"),n("span",{staticClass:"line-number"},[s._v("238")]),n("br"),n("span",{staticClass:"line-number"},[s._v("239")]),n("br"),n("span",{staticClass:"line-number"},[s._v("240")]),n("br"),n("span",{staticClass:"line-number"},[s._v("241")]),n("br"),n("span",{staticClass:"line-number"},[s._v("242")]),n("br"),n("span",{staticClass:"line-number"},[s._v("243")]),n("br"),n("span",{staticClass:"line-number"},[s._v("244")]),n("br"),n("span",{staticClass:"line-number"},[s._v("245")]),n("br"),n("span",{staticClass:"line-number"},[s._v("246")]),n("br"),n("span",{staticClass:"line-number"},[s._v("247")]),n("br"),n("span",{staticClass:"line-number"},[s._v("248")]),n("br"),n("span",{staticClass:"line-number"},[s._v("249")]),n("br"),n("span",{staticClass:"line-number"},[s._v("250")]),n("br"),n("span",{staticClass:"line-number"},[s._v("251")]),n("br"),n("span",{staticClass:"line-number"},[s._v("252")]),n("br"),n("span",{staticClass:"line-number"},[s._v("253")]),n("br"),n("span",{staticClass:"line-number"},[s._v("254")]),n("br"),n("span",{staticClass:"line-number"},[s._v("255")]),n("br"),n("span",{staticClass:"line-number"},[s._v("256")]),n("br"),n("span",{staticClass:"line-number"},[s._v("257")]),n("br"),n("span",{staticClass:"line-number"},[s._v("258")]),n("br")])]),n("p",[n("strong",[s._v("首先")]),s._v("，ServiceLoader实现了"),n("code",[s._v("Iterable")]),s._v("接口，所以它有迭代器的属性，这里主要都是实现了迭代器的"),n("code",[s._v("hasNext")]),s._v("和"),n("code",[s._v("next")]),s._v("方法。这里主要都是调用的"),n("code",[s._v("lookupIterator")]),s._v("的相应"),n("code",[s._v("hasNext")]),s._v("和"),n("code",[s._v("next")]),s._v("方法，"),n("code",[s._v("lookupIterator")]),s._v("是懒加载迭代器。")]),s._v(" "),n("p",[n("strong",[s._v("其次")]),s._v("，"),n("code",[s._v("LazyIterator")]),s._v("中的"),n("code",[s._v("hasNext")]),s._v("方法，静态变量PREFIX就是"),n("code",[s._v("”META-INF/services/”")]),s._v("目录，这也就是为什么需要在"),n("code",[s._v("classpath")]),s._v("下的"),n("code",[s._v("META-INF/services/")]),s._v("目录里创建一个以服务接口命名的文件。")]),s._v(" "),n("p",[n("strong",[s._v("最后")]),s._v("，通过反射方法"),n("code",[s._v("Class.forName()")]),s._v("加载类对象，并用"),n("code",[s._v("newInstance")]),s._v("方法将类实例化，并把实例化后的类缓存到"),n("code",[s._v("providers")]),s._v("对象中，("),n("code",[s._v("LinkedHashMap<String,S>")]),s._v("类型）然后返回实例对象。")]),s._v(" "),n("p",[s._v("所以我们可以看到"),n("code",[s._v("ServiceLoader")]),s._v("不是实例化以后，就去读取配置文件中的具体实现，并进行实例化。而是等到使用迭代器去遍历的时候，才会加载对应的配置文件去解析，调用"),n("code",[s._v("hasNext")]),s._v("方法的时候会去加载配置文件进行解析，调用"),n("code",[s._v("next")]),s._v("方法的时候进行实例化并缓存。")]),s._v(" "),n("p",[s._v("所有的配置文件只会加载一次，服务提供者也只会被实例化一次，重新加载配置文件可使用"),n("code",[s._v("reload")]),s._v("方法。")]),s._v(" "),n("h3",{attrs:{id:"spi机制的缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spi机制的缺陷"}},[s._v("#")]),s._v(" SPI机制的缺陷")]),s._v(" "),n("p",[s._v("通过上面的解析，可以发现，我们使用SPI机制的缺陷：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。")])]),s._v(" "),n("li",[n("p",[s._v("获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。")])]),s._v(" "),n("li",[n("p",[s._v("多个并发多线程使用 ServiceLoader 类的实例是不安全的。")])])]),s._v(" "),n("h1",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),n("hr"),s._v(" "),n("ul",[n("li",[s._v("https://cxis.me/2017/04/17/Java%E4%B8%ADSPI%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/")]),s._v(" "),n("li",[s._v("https://stackoverflow.com/questions/2954372/difference-between-spi-and-api?answertab=votes#tab-top")]),s._v(" "),n("li",[s._v("https://zhuanlan.zhihu.com/p/28909673")]),s._v(" "),n("li",[s._v("http://blog.itpub.net/69912579/viewspace-2656555/")]),s._v(" "),n("li",[s._v("https://www.cnblogs.com/happyframework/archive/2013/09/17/3325560.html")]),s._v(" "),n("li",[s._v("https://blog.csdn.net/sakurainluojia/article/details/53534949")]),s._v(" "),n("li",[s._v("https://www.jianshu.com/p/0d196ad23915")])])])}),[],!1,null,null,null);n.default=r.exports},393:function(s,n,a){s.exports=a.p+"assets/img/java-advanced-spi-8.93564620.jpg"},394:function(s,n,a){s.exports=a.p+"assets/img/java-advanced-spi-1.feb5e825.png"},395:function(s,n,a){s.exports=a.p+"assets/img/java-advanced-spi-2.50b66f96.jpg"},396:function(s,n,a){s.exports=a.p+"assets/img/java-advanced-spi-7.1a8704b5.png"},397:function(s,n,a){s.exports=a.p+"assets/img/java-advanced-spi-6.12bcf6d5.png"}}]);