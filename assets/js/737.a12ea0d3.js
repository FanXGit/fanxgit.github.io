(window.webpackJsonp=window.webpackJsonp||[]).push([[737],{4219:function(e,a,t){"use strict";t.r(a);var n=t(7),s=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"mybatis详解-插件之分页机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解-插件之分页机制"}},[e._v("#")]),e._v(" MyBatis详解 - 插件之分页机制")]),e._v(" "),a("p",[e._v("===========================================")]),e._v(" "),a("blockquote",[a("p",[e._v("Mybatis的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页。@pdai")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6"}},[e._v("MyBatis详解 - 插件之分页机制")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%87%86%E5%A4%87"}},[e._v("准备")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8statementhandler%E6%8B%A6%E6%88%AA"}},[e._v("为什么在StatementHandler拦截")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#metaobject%E7%AE%80%E4%BB%8B"}},[e._v("MetaObject简介")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E6%8B%A6%E6%88%AA%E5%99%A8%E7%AD%BE%E5%90%8D"}},[e._v("拦截器签名")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#intercept%E5%AE%9E%E7%8E%B0"}},[e._v("intercept实现")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#sql%E9%87%8D%E5%86%99"}},[e._v("sql重写")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%86%E9%A1%B5%E5%8F%82%E6%95%B0%E9%87%8D%E5%86%99"}},[e._v("分页参数重写")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#plugin%E5%AE%9E%E7%8E%B0"}},[e._v("plugin实现")])])])])]),e._v(" "),a("h1",{attrs:{id:"准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[e._v("#")]),e._v(" 准备")]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"为什么在statementhandler拦截"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么在statementhandler拦截"}},[e._v("#")]),e._v(" 为什么在StatementHandler拦截")]),e._v(" "),a("p",[e._v("在前面章节介绍了一次sqlsession的完整执行过程，从中可以知道sql的解析是在StatementHandler里完成的，所以为了重写sql需要拦截StatementHandler。")]),e._v(" "),a("h3",{attrs:{id:"metaobject简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metaobject简介"}},[e._v("#")]),e._v(" MetaObject简介")]),e._v(" "),a("p",[e._v("在实现里大量使用了MetaObject这个对象，因此有必要先介绍下它。MetaObject是Mybatis提供的一个的工具类，通过它包装一个对象后可以获取或设置该对象的原本不可访问的属性（比如那些私有属性）。它有个三个重要方法经常用到：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("MetaObject forObject(Object object,ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory) 用于包装对象；")])]),e._v(" "),a("li",[a("p",[e._v("Object getValue(String name) 用于获取属性的值（支持OGNL的方法）；")])]),e._v(" "),a("li",[a("p",[e._v("void setValue(String name, Object value) 用于设置属性的值（支持OGNL的方法）；")])])]),e._v(" "),a("h1",{attrs:{id:"拦截器签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截器签名"}},[e._v("#")]),e._v(" 拦截器签名")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Intercepts({@Signature(type =StatementHandler.class, method = "prepare", args ={Connection.class})})  \npublic class PageInterceptor implements Interceptor {  \n    ...  \n} \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("从签名里可以看出，要拦截的目标类型是StatementHandler（注意：type只能配置成接口类型），拦截的方法是名称为prepare参数为Connection类型的方法。")]),e._v(" "),a("h1",{attrs:{id:"intercept实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intercept实现"}},[e._v("#")]),e._v(" intercept实现")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public Object intercept(Invocation invocation) throws Throwable {  \n     StatementHandler statementHandler = (StatementHandler) invocation.getTarget();  \n     MetaObject metaStatementHandler = MetaObject.forObject(statementHandler,  \n     DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY);  \n     // 分离代理对象链(由于目标类可能被多个拦截器拦截，从而形成多次代理，通过下面的两次循环  \n     // 可以分离出最原始的的目标类)  \n     while (metaStatementHandler.hasGetter("h")) {  \n         Object object = metaStatementHandler.getValue("h");  \n         metaStatementHandler = MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY,   \n         DEFAULT_OBJECT_WRAPPER_FACTORY);  \n     }  \n     // 分离最后一个代理对象的目标类  \n     while (metaStatementHandler.hasGetter("target")) {  \n         Object object = metaStatementHandler.getValue("target");  \n         metaStatementHandler = MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY,   \n         DEFAULT_OBJECT_WRAPPER_FACTORY);  \n     }  \n     Configuration configuration = (Configuration) metaStatementHandler.  \n     getValue("delegate.configuration");  \n     dialect = configuration.getVariables().getProperty("dialect");  \n     if (null == dialect || "".equals(dialect)) {  \n         logger.warn("Property dialect is not setted,use default \'mysql\' ");  \n         dialect = defaultDialect;  \n     }  \n     pageSqlId = configuration.getVariables().getProperty("pageSqlId");  \n     if (null == pageSqlId || "".equals(pageSqlId)) {  \n         logger.warn("Property pageSqlId is not setted,use default \'.*Page$\' ");  \n         pageSqlId = defaultPageSqlId;  \n     }  \n     MappedStatement mappedStatement = (MappedStatement)   \n     metaStatementHandler.getValue("delegate.mappedStatement");  \n     // 只重写需要分页的sql语句。通过MappedStatement的ID匹配，默认重写以Page结尾的  \n     //  MappedStatement的sql  \n     if (mappedStatement.getId().matches(pageSqlId)) {  \n         BoundSql boundSql = (BoundSql) metaStatementHandler.getValue("delegate.boundSql");  \n         Object parameterObject = boundSql.getParameterObject();  \n         if (parameterObject == null) {  \n             throw new NullPointerException("parameterObject is null!");  \n         } else {  \n             // 分页参数作为参数对象parameterObject的一个属性  \n             PageParameter page = (PageParameter) metaStatementHandler  \n                     .getValue("delegate.boundSql.parameterObject.page");  \n             String sql = boundSql.getSql();  \n             // 重写sql  \n             String pageSql = buildPageSql(sql, page);  \n             metaStatementHandler.setValue("delegate.boundSql.sql", pageSql);  \n             // 采用物理分页后，就不需要mybatis的内存分页了，所以重置下面的两个参数  \n             metaStatementHandler.setValue("delegate.rowBounds.offset",   \n             RowBounds.NO_ROW_OFFSET);  \n             metaStatementHandler.setValue("delegate.rowBounds.limit", RowBounds.NO_ROW_LIMIT);  \n             Connection connection = (Connection) invocation.getArgs()[0];  \n             // 重设分页参数里的总页数等  \n             setPageParameter(sql, connection, mappedStatement, boundSql, page);  \n         }  \n     }  \n     // 将执行权交给下一个拦截器  \n     return invocation.proceed();  \n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br"),a("span",{staticClass:"line-number"},[e._v("45")]),a("br"),a("span",{staticClass:"line-number"},[e._v("46")]),a("br"),a("span",{staticClass:"line-number"},[e._v("47")]),a("br"),a("span",{staticClass:"line-number"},[e._v("48")]),a("br"),a("span",{staticClass:"line-number"},[e._v("49")]),a("br"),a("span",{staticClass:"line-number"},[e._v("50")]),a("br"),a("span",{staticClass:"line-number"},[e._v("51")]),a("br"),a("span",{staticClass:"line-number"},[e._v("52")]),a("br"),a("span",{staticClass:"line-number"},[e._v("53")]),a("br"),a("span",{staticClass:"line-number"},[e._v("54")]),a("br"),a("span",{staticClass:"line-number"},[e._v("55")]),a("br"),a("span",{staticClass:"line-number"},[e._v("56")]),a("br"),a("span",{staticClass:"line-number"},[e._v("57")]),a("br"),a("span",{staticClass:"line-number"},[e._v("58")]),a("br")])]),a("p",[e._v("StatementHandler的默认实现类是RoutingStatementHandler，因此拦截的实际对象是它。RoutingStatementHandler的主要功能是分发，它根据配置Statement类型创建真正执行数据库操作的StatementHandler，并将其保存到delegate属性里。由于delegate是一个私有属性并且没有提供访问它的方法，因此需要借助MetaObject的帮忙。通过MetaObject的封装后我们可以轻易的获得想要的属性。")]),e._v(" "),a("p",[e._v("在上面的方法里有个两个循环，通过他们可以分离出原始的RoutingStatementHandler（而不是代理对象）。")]),e._v(" "),a("p",[e._v("前面提到，签名里配置的要拦截的目标类型是StatementHandler拦截的方法是名称为prepare参数为Connection类型的方法，而这个方法是每次数据库访问都要执行的。因为我是通过重写sql的方式实现分页，为了不影响其他sql（update或不需要分页的query），我采用了通过ID匹配的方式过滤。默认的过滤方式只对id以Page结尾的进行拦截（注意区分大小写），如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<select id="queryUserByPage" parameterType="UserDto" resultType="UserDto">  \n    <![CDATA[ \n    select * from t_user t where t.username = #{username} \n    ]]>  \n</select>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("当然，也可以自定义拦截模式，在mybatis的配置文件里加入以下配置项：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<properties>  \n    <property name="dialect" value="mysql" />  \n    <property name="pageSqlId" value=".*Page$" />  \n</properties>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("其中，属性dialect指示数据库类型，目前只支持mysql和oracle两种数据库。其中，属性pageSqlId指示拦截的规则，以正则方式匹配。")]),e._v(" "),a("h1",{attrs:{id:"sql重写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql重写"}},[e._v("#")]),e._v(" sql重写")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("sql重写其实在原始的sql语句上加入分页的参数，目前支持mysql和oracle两种数据库的分页。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('private String buildPageSql(String sql, PageParameter page) {  \n    if (page != null) {  \n        StringBuilder pageSql = new StringBuilder();  \n        if ("mysql".equals(dialect)) {  \n            pageSql = buildPageSqlForMysql(sql, page);  \n        } else if ("oracle".equals(dialect)) {  \n            pageSql = buildPageSqlForOracle(sql, page);  \n        } else {  \n            return sql;  \n        }  \n        return pageSql.toString();  \n    } else {  \n        return sql;  \n    }  \n}  \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("p",[a("strong",[e._v("mysql的分页实现")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public StringBuilder buildPageSqlForMysql(String sql, PageParameter page) {  \n    StringBuilder pageSql = new StringBuilder(100);  \n    String beginrow = String.valueOf((page.getCurrentPage() - 1) * page.getPageSize());  \n    pageSql.append(sql);  \n    pageSql.append(" limit " + beginrow + "," + page.getPageSize());  \n    return pageSql;  \n}  \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[a("strong",[e._v("oracle的分页实现")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public StringBuilder buildPageSqlForOracle(String sql, PageParameter page) {  \n    StringBuilder pageSql = new StringBuilder(100);  \n    String beginrow = String.valueOf((page.getCurrentPage() - 1) * page.getPageSize());  \n    String endrow = String.valueOf(page.getCurrentPage() * page.getPageSize());  \n    pageSql.append("select * from ( select temp.*, rownum row_id from ( ");  \n    pageSql.append(sql);  \n    pageSql.append(" ) temp where rownum <= ").append(endrow);  \n    pageSql.append(") where row_id > ").append(beginrow);  \n    return pageSql;  \n}  \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("h1",{attrs:{id:"分页参数重写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页参数重写"}},[e._v("#")]),e._v(" 分页参数重写")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("有时候会有这种需求，就是不但要查出指定页的结果，还需要知道总的记录数和页数。我通过重写分页参数的方式提供了一种解决方案：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('/** \n * 从数据库里查询总的记录数并计算总页数，回写进分页参数<code>PageParameter</code>,这样调用  \n * 者就可用通过 分页参数<code>PageParameter</code>获得相关信息。 \n *  \n * @param sql \n * @param connection \n * @param mappedStatement \n * @param boundSql \n * @param page \n */  \nprivate void setPageParameter(String sql, Connection connection, MappedStatement mappedStatement,  \n        BoundSql boundSql, PageParameter page) {  \n    // 记录总记录数  \n    String countSql = "select count(0) from (" + sql + ") as total";  \n    PreparedStatement countStmt = null;  \n    ResultSet rs = null;  \n    try {  \n        countStmt = connection.prepareStatement(countSql);  \n        BoundSql countBS = new BoundSql(mappedStatement.getConfiguration(), countSql,  \n                boundSql.getParameterMappings(), boundSql.getParameterObject());  \n        setParameters(countStmt, mappedStatement, countBS, boundSql.getParameterObject());  \n        rs = countStmt.executeQuery();  \n        int totalCount = 0;  \n        if (rs.next()) {  \n            totalCount = rs.getInt(1);  \n        }  \n        page.setTotalCount(totalCount);  \n        int totalPage = totalCount / page.getPageSize() + ((totalCount % page.getPageSize() == 0) ? 0 : 1);  \n        page.setTotalPage(totalPage);  \n    } catch (SQLException e) {  \n        logger.error("Ignore this exception", e);  \n    } finally {  \n        try {  \n            rs.close();  \n        } catch (SQLException e) {  \n            logger.error("Ignore this exception", e);  \n        }  \n        try {  \n            countStmt.close();  \n        } catch (SQLException e) {  \n            logger.error("Ignore this exception", e);  \n        }  \n    }  \n}  \n  \n/** \n * 对SQL参数(?)设值 \n *  \n * @param ps \n * @param mappedStatement \n * @param boundSql \n * @param parameterObject \n * @throws SQLException \n */  \nprivate void setParameters(PreparedStatement ps, MappedStatement mappedStatement, BoundSql boundSql,  \n        Object parameterObject) throws SQLException {  \n    ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);  \n    parameterHandler.setParameters(ps);  \n} \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br"),a("span",{staticClass:"line-number"},[e._v("38")]),a("br"),a("span",{staticClass:"line-number"},[e._v("39")]),a("br"),a("span",{staticClass:"line-number"},[e._v("40")]),a("br"),a("span",{staticClass:"line-number"},[e._v("41")]),a("br"),a("span",{staticClass:"line-number"},[e._v("42")]),a("br"),a("span",{staticClass:"line-number"},[e._v("43")]),a("br"),a("span",{staticClass:"line-number"},[e._v("44")]),a("br"),a("span",{staticClass:"line-number"},[e._v("45")]),a("br"),a("span",{staticClass:"line-number"},[e._v("46")]),a("br"),a("span",{staticClass:"line-number"},[e._v("47")]),a("br"),a("span",{staticClass:"line-number"},[e._v("48")]),a("br"),a("span",{staticClass:"line-number"},[e._v("49")]),a("br"),a("span",{staticClass:"line-number"},[e._v("50")]),a("br"),a("span",{staticClass:"line-number"},[e._v("51")]),a("br"),a("span",{staticClass:"line-number"},[e._v("52")]),a("br"),a("span",{staticClass:"line-number"},[e._v("53")]),a("br"),a("span",{staticClass:"line-number"},[e._v("54")]),a("br"),a("span",{staticClass:"line-number"},[e._v("55")]),a("br"),a("span",{staticClass:"line-number"},[e._v("56")]),a("br"),a("span",{staticClass:"line-number"},[e._v("57")]),a("br"),a("span",{staticClass:"line-number"},[e._v("58")]),a("br"),a("span",{staticClass:"line-number"},[e._v("59")]),a("br")])]),a("h1",{attrs:{id:"plugin实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugin实现"}},[e._v("#")]),e._v(" plugin实现")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public Object plugin(Object target) {  \n    // 当目标类是StatementHandler类型时，才包装目标类，否者直接返回目标本身,减少目标被代理的  \n    // 次数  \n    if (target instanceof StatementHandler) {  \n        return Plugin.wrap(target, this);  \n    } else {  \n        return target;  \n    }  \n}\n```)")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])])])}),[],!1,null,null,null);a.default=s.exports}}]);