(window.webpackJsonp=window.webpackJsonp||[]).push([[579],{3809:function(a,e,t){"use strict";t.r(e);var r=t(7),n=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"负载均衡算法-汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡算法-汇总"}},[a._v("#")]),a._v(" 负载均衡算法 - 汇总")]),a._v(" "),e("p",[a._v("===========================")]),a._v(" "),e("blockquote",[e("p",[a._v("本文主要介绍常用的负载均衡算法和Nginx中支持的负载均衡算法。@pdai")])]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[a._v("常见的负载均衡算法"),e("OutboundLink")],1),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E8%BD%AE%E8%AF%A2%E6%B3%95-round-robin",target:"_blank",rel:"noopener noreferrer"}},[a._v("轮询法(Round Robin)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E6%B3%95-weight-round-robin",target:"_blank",rel:"noopener noreferrer"}},[a._v("加权轮询法(Weight Round Robin)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E9%9A%8F%E6%9C%BA%E6%B3%95-random",target:"_blank",rel:"noopener noreferrer"}},[a._v("随机法(Random)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E5%8A%A0%E6%9D%83%E9%9A%8F%E6%9C%BA%E6%B3%95-weight-random",target:"_blank",rel:"noopener noreferrer"}},[a._v("加权随机法(Weight Random)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E6%BA%90%E5%9C%B0%E5%9D%80%E5%93%88%E5%B8%8C%E6%B3%95-hash",target:"_blank",rel:"noopener noreferrer"}},[a._v("源地址哈希法(Hash)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E6%9C%80%E5%B0%8F%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%B3%95-least-connections",target:"_blank",rel:"noopener noreferrer"}},[a._v("最小连接数法(Least Connections)"),e("OutboundLink")],1)])])]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#nginx%E7%9A%845%E7%A7%8D%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[a._v("Nginx的5种负载均衡算法"),e("OutboundLink")],1),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E8%BD%AE%E8%AF%A2%E6%B3%95-round-robin-%E9%BB%98%E8%AE%A4",target:"_blank",rel:"noopener noreferrer"}},[a._v("轮询法(Round Robin)(默认)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E6%B3%95-weight-round-robin-weight",target:"_blank",rel:"noopener noreferrer"}},[a._v("加权轮询法(Weight Round Robin)- weight"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E6%BA%90%E5%9C%B0%E5%9D%80%E5%93%88%E5%B8%8C%E6%B3%95-hash-ip-hash",target:"_blank",rel:"noopener noreferrer"}},[a._v("源地址哈希法(Hash)- ip_hash"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#fair-%E7%AC%AC%E4%B8%89%E6%96%B9",target:"_blank",rel:"noopener noreferrer"}},[a._v("fair(第三方)"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#url-hash-%E7%AC%AC%E4%B8%89%E6%96%B9",target:"_blank",rel:"noopener noreferrer"}},[a._v("url_hash(第三方)"),e("OutboundLink")],1)])])]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-load-balance.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考文章"),e("OutboundLink")],1)])]),a._v(" "),e("h1",{attrs:{id:"常见的负载均衡算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的负载均衡算法"}},[a._v("#")]),a._v(" 常见的负载均衡算法")]),a._v(" "),e("hr"),a._v(" "),e("p",[a._v("常见的负载均衡算法包含:")]),a._v(" "),e("ul",[e("li",[a._v("轮询法(Round Robin)")]),a._v(" "),e("li",[a._v("加权轮询法(Weight Round Robin)")]),a._v(" "),e("li",[a._v("平滑加权轮询法(Smooth Weight Round Robin)")]),a._v(" "),e("li",[a._v("随机法(Random)")]),a._v(" "),e("li",[a._v("加权随机法(Weight Random)")]),a._v(" "),e("li",[a._v("源地址哈希法(Hash)")]),a._v(" "),e("li",[a._v("最小连接数法(Least Connections)")])]),a._v(" "),e("h3",{attrs:{id:"轮询法-round-robin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#轮询法-round-robin"}},[a._v("#")]),a._v(" 轮询法(Round Robin)")]),a._v(" "),e("p",[a._v("将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。")]),a._v(" "),e("h3",{attrs:{id:"加权轮询法-weight-round-robin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加权轮询法-weight-round-robin"}},[a._v("#")]),a._v(" 加权轮询法(Weight Round Robin)")]),a._v(" "),e("p",[a._v("不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。")]),a._v(" "),e("h3",{attrs:{id:"随机法-random"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#随机法-random"}},[a._v("#")]),a._v(" 随机法(Random)")]),a._v(" "),e("p",[a._v("通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。")]),a._v(" "),e("h3",{attrs:{id:"加权随机法-weight-random"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加权随机法-weight-random"}},[a._v("#")]),a._v(" 加权随机法(Weight Random)")]),a._v(" "),e("p",[a._v("与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。")]),a._v(" "),e("h3",{attrs:{id:"源地址哈希法-hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源地址哈希法-hash"}},[a._v("#")]),a._v(" 源地址哈希法(Hash)")]),a._v(" "),e("p",[a._v("源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。")]),a._v(" "),e("h3",{attrs:{id:"最小连接数法-least-connections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最小连接数法-least-connections"}},[a._v("#")]),a._v(" 最小连接数法(Least Connections)")]),a._v(" "),e("p",[a._v("最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。")]),a._v(" "),e("h1",{attrs:{id:"nginx的5种负载均衡算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx的5种负载均衡算法"}},[a._v("#")]),a._v(" Nginx的5种负载均衡算法")]),a._v(" "),e("hr"),a._v(" "),e("h3",{attrs:{id:"轮询法-round-robin-默认"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#轮询法-round-robin-默认"}},[a._v("#")]),a._v(" 轮询法(Round Robin)(默认)")]),a._v(" "),e("p",[a._v("每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。")]),a._v(" "),e("h3",{attrs:{id:"加权轮询法-weight-round-robin-weight"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加权轮询法-weight-round-robin-weight"}},[a._v("#")]),a._v(" 加权轮询法(Weight Round Robin)- weight")]),a._v(" "),e("p",[a._v("指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。")]),a._v(" "),e("p",[a._v("例如:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("upstream bakend {  \n  server 192.168.0.14 weight=10;  \n  server 192.168.0.15 weight=10;  \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"源地址哈希法-hash-ip-hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源地址哈希法-hash-ip-hash"}},[a._v("#")]),a._v(" 源地址哈希法(Hash)- ip_hash")]),a._v(" "),e("p",[a._v("每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。")]),a._v(" "),e("p",[a._v("例如:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("upstream bakend {  \n  ip_hash;  \n  server 192.168.0.14:88;  \n  server 192.168.0.15:80;  \n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h3",{attrs:{id:"fair-第三方"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fair-第三方"}},[a._v("#")]),a._v(" fair(第三方)")]),a._v(" "),e("p",[a._v("按后端服务器的响应时间来分配请求，响应时间短的优先分配。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("upstream backend {  \n  server server1;  \n  server server2;  \n  fair;  \n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h3",{attrs:{id:"url-hash-第三方"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url-hash-第三方"}},[a._v("#")]),a._v(" url_hash(第三方)")]),a._v(" "),e("p",[a._v("按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。")]),a._v(" "),e("p",[a._v("例: 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("upstream backend {  \n  server squid1:3128;  \n  server squid2:3128;  \n  hash $request_uri;  \n  hash_method crc32;  \n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("tips:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("upstream bakend{#定义负载均衡设备的Ip及设备状态  \n  ip_hash;  \n  server 127.0.0.1:9090 down;  \n  server 127.0.0.1:8080 weight=2;  \n  server 127.0.0.1:6060;  \n  server 127.0.0.1:7070 backup;  \n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br")])]),e("p",[a._v("在需要使用负载均衡的server中增加")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("proxy_pass http://bakend/;\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("每个设备的状态设置为:")]),a._v(" "),e("ul",[e("li",[a._v("down 表示单前的server暂时不参与负载")]),a._v(" "),e("li",[a._v("weight 默认为1.weight越大，负载的权重就越大。")]),a._v(" "),e("li",[a._v("max_fails : 允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误")]),a._v(" "),e("li",[a._v("fail_timeout:max_fails次失败后，暂停的时间。")]),a._v(" "),e("li",[a._v("backup: 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。")])]),a._v(" "),e("p",[a._v("nginx支持同时设置多组的负载均衡，用来给不用的server来使用。")]),a._v(" "),e("ul",[e("li",[a._v("client_body_in_file_only: 设置为On，可以讲client post过来的数据记录到文件中用来做debug。")]),a._v(" "),e("li",[a._v("client_body_temp_path: 设置记录文件的目录，可以设置最多3层目录。")]),a._v(" "),e("li",[a._v("location: 对URL进行匹配，可以进行重定向或者进行新的代理，负载均衡。")])]),a._v(" "),e("h1",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),e("hr"),a._v(" "),e("ul",[e("li",[a._v("https://blog.csdn.net/youanyyou/article/details/78990133")]),a._v(" "),e("li",[a._v("https://blog.csdn.net/claram/article/details/90265243)")])])])}),[],!1,null,null,null);e.default=n.exports}}]);