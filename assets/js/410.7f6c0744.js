(window.webpackJsonp=window.webpackJsonp||[]).push([[410],{3571:function(s,a,n){"use strict";n.r(a);var t=n(7),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"java-8-stampedlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-8-stampedlock"}},[s._v("#")]),s._v(" Java 8 - StampedLock")]),s._v(" "),a("p",[s._v("=============================================")]),s._v(" "),a("blockquote",[a("p",[s._v("本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。@pdai")])]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#java-8---stampedlock"}},[s._v("Java 8 - StampedLock")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#synchronized"}},[s._v("synchronized")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#lock"}},[s._v("Lock")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#stampedlock"}},[s._v("StampedLock")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94"}},[s._v("StampedLock与ReadWriteLock性能对比")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[s._v("总结")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8F%82%E8%80%83"}},[s._v("参考")])])])])]),s._v(" "),a("h2",{attrs:{id:"synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[s._v("#")]),s._v(" synchronized")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("在java5之前，实现同步主要是使用synchronized。它是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。")]),s._v(" "),a("p",[s._v("有四种不同的同步块:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("实例方法\n静态方法\n实例方法中的同步块\n静态方法中的同步块 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("大家对此应该不陌生，所以不多讲了，以下是代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("synchronized(this)\n// do operation\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("小结: 在多线程并发编程中Synchronized一直是元老级角色，很多人都会称呼它为重量级锁，但是随着Java SE1.6对Synchronized进行了各种优化之后，性能上也有所提升。")]),s._v(" "),a("h2",{attrs:{id:"lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[s._v("#")]),s._v(" Lock")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("rwlock.writeLock().lock();\ntry {\n\t// do operation\n} finally {\n\trwlock.writeLock().unlock();\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("它是Java 5在java.util.concurrent.locks新增的一个API。")]),s._v(" "),a("p",[s._v("Lock是一个接口，核心方法是lock()，unlock()，tryLock()，实现类有ReentrantLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock；")]),s._v(" "),a("p",[s._v("ReentrantReadWriteLock, ReentrantLock 和synchronized锁都有相同的内存语义。")]),s._v(" "),a("p",[s._v("与synchronized不同的是，Lock完全用Java写成，在java这个层面是无关JVM实现的。Lock提供更灵活的锁机制，很多synchronized 没有提供的许多特性，比如锁投票，定时锁等候和中断锁等候，但因为lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中")]),s._v(" "),a("p",[s._v("下面是Lock的一个代码示例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Point {\n   private double x, y;\n   private final StampedLock sl = new StampedLock();\n   void move(double deltaX, double deltaY) { // an exclusively locked method\n     long stamp = sl.writeLock();\n     try {\n       x += deltaX;\n       y += deltaY;\n     } finally {\n       sl.unlockWrite(stamp);\n     }\n   }\n  \t//下面看看乐观读锁案例\n   double distanceFromOrigin() { // A read-only method\n     long stamp = sl.tryOptimisticRead(); //获得一个乐观读锁\n     double currentX = x, currentY = y; //将两个字段读入本地局部变量\n     if (!sl.validate(stamp)) { //检查发出乐观读锁后同时是否有其他写锁发生? \n        stamp = sl.readLock(); //如果没有，我们再次获得一个读悲观锁\n        try {\n          currentX = x; // 将两个字段读入本地局部变量\n          currentY = y; // 将两个字段读入本地局部变量\n        } finally {\n           sl.unlockRead(stamp);\n        }\n     }\n     return Math.sqrt(currentX * currentX + currentY * currentY);\n   }\n\t//下面是悲观读锁案例\n   void moveIfAtOrigin(double newX, double newY) { // upgrade\n     // Could instead start with optimistic, not read mode\n     long stamp = sl.readLock();\n     try {\n       while (x == 0.0 && y == 0.0) { //循环，检查当前状态是否符合\n         long ws = sl.tryConvertToWriteLock(stamp); //将读锁转为写锁\n         if (ws != 0L) { //这是确认转为写锁是否成功\n           stamp = ws; //如果成功 替换票据\n           x = newX; //进行状态改变\n           y = newY; //进行状态改变\n           break;\n         }\n         else { //如果不能成功转换为写锁\n           sl.unlockRead(stamp); //我们显式释放读锁\n           stamp = sl.writeLock(); //显式直接进行写锁 然后再通过循环再试\n         }\n       }\n     } finally {\n       sl.unlock(stamp); //释放读锁或写锁\n     }\n   }\n } \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("p",[s._v("小结: 比synchronized更灵活、更具可伸缩性的锁定机制，但不管怎么说还是synchronized代码要更容易书写些")]),s._v(" "),a("h2",{attrs:{id:"stampedlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock"}},[s._v("#")]),s._v(" StampedLock")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("它是java8在java.util.concurrent.locks新增的一个API。")]),s._v(" "),a("p",[s._v("ReentrantReadWriteLock 在沒有任何读写锁时，才可以取得写入锁，这可用于实现了悲观读取(Pessimistic Reading)，即如果执行中进行读取时，经常可能有另一执行要写入的需求，为了保持同步，ReentrantReadWriteLock 的读取锁定就可派上用场。")]),s._v(" "),a("p",[s._v("然而，如果读取执行情况很多，写入很少的情况下，使用 ReentrantReadWriteLock 可能会使写入线程遭遇饥饿(Starvation)问题，也就是写入线程迟迟无法竞争到锁定而一直处于等待状态。")]),s._v(" "),a("p",[s._v("StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。")]),s._v(" "),a("p",[s._v("所谓的乐观读模式，也就是若读的操作很多，写的操作很少的情况下，你可以乐观地认为，写入与读取同时发生几率很少，因此不悲观地使用完全的读取锁定，程序可以查看读取资料之后，是否遭到写入执行的变更，再采取后续的措施(重新读取变更信息，或者抛出异常) ，这一个小小改进，可大幅度提高程序的吞吐量！！")]),s._v(" "),a("p",[s._v("下面是java doc提供的StampedLock一个例子")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Point {\n   private double x, y;\n   private final StampedLock sl = new StampedLock();\n   void move(double deltaX, double deltaY) { // an exclusively locked method\n     long stamp = sl.writeLock();\n     try {\n       x += deltaX;\n       y += deltaY;\n     } finally {\n       sl.unlockWrite(stamp);\n     }\n   }\n  //下面看看乐观读锁案例\n   double distanceFromOrigin() { // A read-only method\n     long stamp = sl.tryOptimisticRead(); //获得一个乐观读锁\n     double currentX = x, currentY = y; //将两个字段读入本地局部变量\n     if (!sl.validate(stamp)) { //检查发出乐观读锁后同时是否有其他写锁发生? \n        stamp = sl.readLock(); //如果没有，我们再次获得一个读悲观锁\n        try {\n          currentX = x; // 将两个字段读入本地局部变量\n          currentY = y; // 将两个字段读入本地局部变量\n        } finally {\n           sl.unlockRead(stamp);\n        }\n     }\n     return Math.sqrt(currentX * currentX + currentY * currentY);\n   }\n\t//下面是悲观读锁案例\n   void moveIfAtOrigin(double newX, double newY) { // upgrade\n     // Could instead start with optimistic, not read mode\n     long stamp = sl.readLock();\n     try {\n       while (x == 0.0 && y == 0.0) { //循环，检查当前状态是否符合\n         long ws = sl.tryConvertToWriteLock(stamp); //将读锁转为写锁\n         if (ws != 0L) { //这是确认转为写锁是否成功\n           stamp = ws; //如果成功 替换票据\n           x = newX; //进行状态改变\n           y = newY; //进行状态改变\n           break;\n         }\n         else { //如果不能成功转换为写锁\n           sl.unlockRead(stamp); //我们显式释放读锁\n           stamp = sl.writeLock(); //显式直接进行写锁 然后再通过循环再试\n         }\n       }\n     } finally {\n       sl.unlock(stamp); //释放读锁或写锁\n     }\n   }\n } \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("p",[s._v("小结:")]),s._v(" "),a("p",[s._v("StampedLock要比ReentrantReadWriteLock更加廉价，也就是消耗比较小。")]),s._v(" "),a("h2",{attrs:{id:"stampedlock与readwritelock性能对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stampedlock与readwritelock性能对比"}},[s._v("#")]),s._v(" StampedLock与ReadWriteLock性能对比")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("是和ReadWritLock相比，在一个线程情况下，是读速度其4倍左右，写是1倍。")]),s._v(" "),a("p",[s._v("下图是六个线程情况下，读性能是其几十倍，写性能也是近10倍左右:")]),s._v(" "),a("p",[a("img",{attrs:{src:n(616),alt:""}})]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定；")]),s._v(" "),a("li",[s._v("ReentrantLock、ReentrantReadWriteLock,、StampedLock都是对象层面的锁定，要保证锁定一定会被释放，就必须将unLock()放到finally{}中；")]),s._v(" "),a("li",[s._v("StampedLock 对吞吐量有巨大的改进，特别是在读线程越来越多的场景下；")]),s._v(" "),a("li",[s._v("StampedLock有一个复杂的API，对于加锁操作，很容易误用其他方法;")]),s._v(" "),a("li",[s._v("当只有少量竞争者的时候，synchronized是一个很好的通用的锁实现;")]),s._v(" "),a("li",[s._v("当线程增长能够预估，ReentrantLock是一个很好的通用的锁实现;")])]),s._v(" "),a("p",[s._v("StampedLock 可以说是Lock的一个很好的补充，吞吐量以及性能上的提升足以打动很多人了，但并不是说要替代之前Lock的东西，毕竟他还是有些应用场景的，起码API比StampedLock容易入手。")]),s._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[a("p",[s._v("https://wizardforcel.gitbooks.io/java8-tutorials/content/Java%208%20%E5%B9%B6%E5%8F%91%E6%95%99%E7%A8%8B%20Threads%20%E5%92%8C%20Executors.html")])]),s._v(" "),a("li",[a("p",[s._v("https://wizardforcel.gitbooks.io/java8-new-features/content/10.html")])])])])}),[],!1,null,null,null);a.default=e.exports},616:function(s,a,n){s.exports=n.p+"assets/img/java-stampedlock-1.0bdf6051.png"}}]);