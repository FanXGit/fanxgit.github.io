(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{3454:function(r,a,e){r.exports=e.p+"assets/img/sharding-x-arch-1.369a570f.png"},3455:function(r,a,e){r.exports=e.p+"assets/img/sharding-x-arch-6.72b10aa2.png"},3456:function(r,a,e){r.exports=e.p+"assets/img/sharding-x-arch-2.d891517d.png"},3457:function(r,a,e){r.exports=e.p+"assets/img/sharding-x-arch-3.b5505782.png"},3458:function(r,a,e){r.exports=e.p+"assets/img/sharding-x-arch-4.c316541d.png"},3459:function(r,a,e){r.exports=e.p+"assets/img/sharding-x-arch-5.bfb57cff.png"},3460:function(r,a,e){r.exports=e.p+"assets/img/sharding-x-arch-7.a440df18.png"},4226:function(r,a,e){"use strict";e.r(a);var t=e(7),h=Object(t.a)({},(function(){var r=this,a=r._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"shardingsphere详解-整体架构设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere详解-整体架构设计"}},[r._v("#")]),r._v(" ShardingSphere详解 - 整体架构设计")]),r._v(" "),a("p",[r._v("=======================================================")]),r._v(" "),a("blockquote",[a("p",[r._v("Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据库高可用、数据加密、影子库压测等功能，以及对 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目; 在 Apache ShardingSphere 中，很多功能实现类的加载方式是通过 SPI（Service Provider Interface） 注入的方式完成的。 SPI 是一种为了被第三方实现或扩展的 API，它可以用于实现框架扩展或组件替换。@pdai")])]),r._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#shardingsphere%E8%AF%A6%E8%A7%A3---%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1"}},[r._v("ShardingSphere详解 - 整体架构设计")]),r._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#shardingsphere%E4%BA%A7%E5%93%81%E5%AE%9A%E4%BD%8D"}},[r._v("ShardingSphere产品定位")])]),r._v(" "),a("li",[a("a",{attrs:{href:"#shardingsphere%E7%BB%84%E6%88%90%E7%AE%80%E4%BB%8B"}},[r._v("ShardingSphere组成简介")]),r._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#shardingsphere-jdbc"}},[r._v("ShardingSphere-JDBC")])]),r._v(" "),a("li",[a("a",{attrs:{href:"#shardingsphere-proxy"}},[r._v("ShardingSphere-Proxy")])]),r._v(" "),a("li",[a("a",{attrs:{href:"#shardingsphere-sidecartodo"}},[r._v("ShardingSphere-Sidecar（TODO）")])]),r._v(" "),a("li",[a("a",{attrs:{href:"#%E6%B7%B7%E5%90%88%E6%9E%B6%E6%9E%84"}},[r._v("混合架构")])])])]),r._v(" "),a("li",[a("a",{attrs:{href:"#shardingsphere%E5%8F%AF%E6%8F%92%E6%8B%94%E6%9E%B6%E6%9E%84"}},[r._v("ShardingSphere可插拔架构")]),r._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%AE%9E%E7%8E%B0"}},[r._v("实现")]),r._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#l1-%E5%86%85%E6%A0%B8%E5%B1%82"}},[r._v("L1 内核层")])]),r._v(" "),a("li",[a("a",{attrs:{href:"#l2-%E5%8A%9F%E8%83%BD%E5%B1%82"}},[r._v("L2 功能层")])]),r._v(" "),a("li",[a("a",{attrs:{href:"#l3-%E7%94%9F%E6%80%81%E5%B1%82"}},[r._v("L3 生态层")])])])])])])])])]),r._v(" "),a("h1",{attrs:{id:"shardingsphere产品定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere产品定位"}},[r._v("#")]),r._v(" ShardingSphere产品定位")]),r._v(" "),a("hr"),r._v(" "),a("blockquote",[a("p",[r._v("Apache ShardingSphere 产品定位为 Database Plus，旨在构建多模数据库上层的标准和生态。 它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。ShardingSphere 站在数据库的上层视角，关注他们之间的协作多于数据库自身。")])]),r._v(" "),a("ul",[a("li",[a("p",[a("strong",[r._v("连接、增量和可插拔是 Apache ShardingSphere 的核心概念")]),r._v("。")])]),r._v(" "),a("li",[a("p",[a("strong",[r._v("连接")]),r._v("：通过对数据库协议、SQL 方言以及数据库存储的灵活适配，快速的连接应用与多模式的异构数据库；")])]),r._v(" "),a("li",[a("p",[a("strong",[r._v("增量")]),r._v("：获取数据库的访问流量，并提供流量重定向（数据分片、读写分离、影子库）、流量变形（数据加密、数据脱敏）、流量鉴权（安全、审计、权限）、流量治理（熔断、限流）以及流量分析（服务质量分析、可观察性）等透明化增量功能；")])]),r._v(" "),a("li",[a("p",[a("strong",[r._v("可插拔")]),r._v("：项目采用微内核 + 三层可插拔模型，使内核、功能组件以及生态对接完全能够灵活的方式进行插拔式扩展，开发者能够像使用积木一样定制属于自己的独特系统。")])])]),r._v(" "),a("p",[a("img",{attrs:{src:e(3454),alt:""}})]),r._v(" "),a("ul",[a("li",[a("strong",[r._v("线路规划")])])]),r._v(" "),a("p",[a("img",{attrs:{src:e(3455),alt:""}})]),r._v(" "),a("h1",{attrs:{id:"shardingsphere组成简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere组成简介"}},[r._v("#")]),r._v(" ShardingSphere组成简介")]),r._v(" "),a("hr"),r._v(" "),a("blockquote",[a("p",[r._v("Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。")])]),r._v(" "),a("p",[r._v("关系型数据库当今依然占有巨大市场份额，是企业核心系统的基石，未来也难于撼动，我们更加注重在原有基础上提供增量，而非颠覆。")]),r._v(" "),a("table",[a("thead",[a("tr",[a("th",[r._v("ShardingSphere-JDBC")]),r._v(" "),a("th",[r._v("ShardingSphere-Proxy")]),r._v(" "),a("th",[r._v("ShardingSphere-Sidecar")])])]),r._v(" "),a("tbody",[a("tr",[a("td",[r._v("数据库")]),r._v(" "),a("td",[r._v("任意")]),r._v(" "),a("td",[r._v("MySQL/PostgreSQL")])]),r._v(" "),a("tr",[a("td",[r._v("连接消耗数")]),r._v(" "),a("td",[r._v("高")]),r._v(" "),a("td",[r._v("低")])]),r._v(" "),a("tr",[a("td",[r._v("异构语言")]),r._v(" "),a("td",[r._v("仅 Java")]),r._v(" "),a("td",[r._v("任意")])]),r._v(" "),a("tr",[a("td",[r._v("性能 损耗低")]),r._v(" "),a("td",[r._v("损耗略高")]),r._v(" "),a("td",[r._v("损耗低")])]),r._v(" "),a("tr",[a("td",[r._v("无中心化")]),r._v(" "),a("td",[r._v("是")]),r._v(" "),a("td",[r._v("否")])]),r._v(" "),a("tr",[a("td",[r._v("静态入口")]),r._v(" "),a("td",[r._v("无")]),r._v(" "),a("td",[r._v("有")])])])]),r._v(" "),a("h3",{attrs:{id:"shardingsphere-jdbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere-jdbc"}},[r._v("#")]),r._v(" ShardingSphere-JDBC")]),r._v(" "),a("blockquote",[a("p",[a("strong",[r._v("定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务")]),r._v("。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。")])]),r._v(" "),a("ul",[a("li",[r._v("适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC；")]),r._v(" "),a("li",[r._v("支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等；")]),r._v(" "),a("li",[r._v("支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。")])]),r._v(" "),a("p",[a("img",{attrs:{src:e(3456),alt:""}})]),r._v(" "),a("h3",{attrs:{id:"shardingsphere-proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere-proxy"}},[r._v("#")]),r._v(" ShardingSphere-Proxy")]),r._v(" "),a("blockquote",[a("p",[a("strong",[r._v("定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持")]),r._v("。 目前提供 MySQL 和 PostgreSQL（兼容 openGauss 等基于 PostgreSQL 的数据库）版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。")])]),r._v(" "),a("ul",[a("li",[r._v("向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；")]),r._v(" "),a("li",[r._v("适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。")])]),r._v(" "),a("p",[a("img",{attrs:{src:e(3457),alt:""}})]),r._v(" "),a("h3",{attrs:{id:"shardingsphere-sidecar-todo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere-sidecar-todo"}},[r._v("#")]),r._v(" ShardingSphere-Sidecar（TODO）")]),r._v(" "),a("blockquote",[a("p",[a("strong",[r._v("定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问")]),r._v("。 通过无中心、零侵入的方案提供与数据库交互的啮合层，即 Database Mesh，又可称数据库网格。")])]),r._v(" "),a("p",[r._v("Database Mesh 的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互进行有效地梳理。 使用 Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。")]),r._v(" "),a("p",[a("img",{attrs:{src:e(3458),alt:""}})]),r._v(" "),a("h3",{attrs:{id:"混合架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合架构"}},[r._v("#")]),r._v(" 混合架构")]),r._v(" "),a("blockquote",[a("p",[r._v("Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。")])]),r._v(" "),a("ul",[a("li",[r._v("ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适用于 Java 开发的高性能的轻量级 OLTP 应用；")]),r._v(" "),a("li",[r._v("ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。")])]),r._v(" "),a("p",[a("img",{attrs:{src:e(3459),alt:""}})]),r._v(" "),a("h1",{attrs:{id:"shardingsphere可插拔架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere可插拔架构"}},[r._v("#")]),r._v(" ShardingSphere可插拔架构")]),r._v(" "),a("hr"),r._v(" "),a("blockquote",[a("p",[r._v("让开发者能够像使用积木一样定制属于自己的独特系统，是 Apache ShardingSphere 可插拔架构的设计目标。")])]),r._v(" "),a("p",[r._v("在 Apache ShardingSphere 中，很多功能实现类的加载方式是通过 SPI（Service Provider Interface） 注入的方式完成的。 SPI 是一种为了被第三方实现或扩展的 API，它可以用于实现框架扩展或组件替换。")]),r._v(" "),a("p",[r._v("SPI相关的文章请参考："),a("a",{attrs:{href:"https://pdai.tech/md/java/advanced/java-advanced-spi.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("Java常用机制 - SPI机制"),a("OutboundLink")],1)]),r._v(" "),a("p",[a("strong",[r._v("挑战")])]),r._v(" "),a("p",[r._v("可插拔架构对程序架构设计的要求非常高，需要将各个模块相互独立，互不感知，并且通过一个可插拔内核，以叠加的方式将各种功能组合使用。 设计一套将功能开发完全隔离的架构体系，既可以最大限度的将开源社区的活力激发出来，也能够保障项目的质量。")]),r._v(" "),a("p",[r._v("Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据库高可用、数据加密、影子库压测等功能，以及对 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目。 Apache ShardingSphere 目前已提供数十个 SPI 作为系统的扩展点，而且仍在不断增加中。")]),r._v(" "),a("p",[a("img",{attrs:{src:e(3460),alt:""}})]),r._v(" "),a("h3",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[r._v("#")]),r._v(" 实现")]),r._v(" "),a("blockquote",[a("p",[r._v("Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核层、L2 功能层、L3 生态层。")])]),r._v(" "),a("h4",{attrs:{id:"l1-内核层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#l1-内核层"}},[r._v("#")]),r._v(" L1 内核层")]),r._v(" "),a("p",[r._v("是数据库基本能力的抽象，其所有组件均必须存在，但具体实现方式可通过可插拔的方式更换。 主要包括查询优化器、分布式事务引擎、分布式执行引擎、权限引擎和调度引擎等。")]),r._v(" "),a("h4",{attrs:{id:"l2-功能层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#l2-功能层"}},[r._v("#")]),r._v(" L2 功能层")]),r._v(" "),a("p",[r._v("用于提供增量能力，其所有组件均是可选的，可以包含零至多个组件。组件之间完全隔离，互无感知，多组件可通过叠加的方式相互配合使用。 主要包括数据分片、读写分离、数据库高可用、数据加密、影子库等。用户自定义功能可完全面向 Apache ShardingSphere 定义的顶层接口进行定制化扩展，而无需改动内核代码。")]),r._v(" "),a("h4",{attrs:{id:"l3-生态层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#l3-生态层"}},[r._v("#")]),r._v(" L3 生态层")]),r._v(" "),a("p",[r._v("用于对接和融入现有数据库生态，包括数据库协议、SQL 解析器和存储适配器，分别对应于 Apache ShardingSphere 以数据库协议提供服务的方式、SQL 方言操作数据的方式以及对接存储节点的数据库类型。)")])])}),[],!1,null,null,null);a.default=h.exports}}]);