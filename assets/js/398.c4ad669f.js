(window.webpackJsonp=window.webpackJsonp||[]).push([[398],{3527:function(a,s,e){"use strict";e.r(s);var n=e(7),t=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-并发-线程基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-并发-线程基础"}},[a._v("#")]),a._v(" Java 并发 - 线程基础")]),a._v(" "),s("p",[a._v("=================================")]),a._v(" "),s("blockquote",[s("p",[a._v("本文主要概要性的介绍线程的基础，为后面的章节深入介绍Java并发的知识提供基础。@pdai")])]),a._v(" "),s("h2",{attrs:{id:"带着bat大厂的面试问题去理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带着bat大厂的面试问题去理解"}},[a._v("#")]),a._v(" 带着BAT大厂的面试问题去理解")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("提示")]),a._v(" "),s("p",[a._v("请带着这些问题继续后文，会很大程度上帮助你更好的理解线程基础。@pdai")]),a._v(" "),s("ul",[s("li",[a._v("线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?")]),a._v(" "),s("li",[a._v("通常线程有哪几种使用方式?")]),a._v(" "),s("li",[a._v("基础线程机制有哪些?")]),a._v(" "),s("li",[a._v("线程的中断方式有哪些?")]),a._v(" "),s("li",[a._v("线程的互斥同步方式有哪些? 如何比较和选择?")]),a._v(" "),s("li",[a._v("线程之间有哪些协作方式?")])]),a._v(" "),s("h2",{attrs:{id:"线程状态转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程状态转换"}},[a._v("#")]),a._v(" 线程状态转换")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("img",{attrs:{src:e(447),alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"新建-new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建-new"}},[a._v("#")]),a._v(" 新建(New)")]),a._v(" "),s("p",[a._v("创建后尚未启动。")]),a._v(" "),s("h3",{attrs:{id:"可运行-runnable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可运行-runnable"}},[a._v("#")]),a._v(" 可运行(Runnable)")]),a._v(" "),s("p",[a._v("可能正在运行，也可能正在等待 CPU 时间片。")]),a._v(" "),s("p",[a._v("包含了操作系统线程状态中的 Running 和 Ready。")]),a._v(" "),s("h3",{attrs:{id:"阻塞-blocking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞-blocking"}},[a._v("#")]),a._v(" 阻塞(Blocking)")]),a._v(" "),s("p",[a._v("等待获取一个排它锁，如果其线程释放了锁就会结束此状态。")]),a._v(" "),s("h3",{attrs:{id:"无限期等待-waiting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无限期等待-waiting"}},[a._v("#")]),a._v(" 无限期等待(Waiting)")]),a._v(" "),s("p",[a._v("等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("进入方法")]),a._v(" "),s("th",[a._v("退出方法")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("没有设置 Timeout 参数的 Object.wait() 方法")]),a._v(" "),s("td",[a._v("Object.notify() / Object.notifyAll()")])]),a._v(" "),s("tr",[s("td",[a._v("没有设置 Timeout 参数的 Thread.join() 方法")]),a._v(" "),s("td",[a._v("被调用的线程执行完毕")])]),a._v(" "),s("tr",[s("td",[a._v("LockSupport.park() 方法")]),a._v(" "),s("td",[a._v("-")])])])]),a._v(" "),s("h3",{attrs:{id:"限期等待-timed-waiting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#限期等待-timed-waiting"}},[a._v("#")]),a._v(" 限期等待(Timed Waiting)")]),a._v(" "),s("p",[a._v("无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。")]),a._v(" "),s("p",[a._v("调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。")]),a._v(" "),s("p",[a._v("调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。")]),a._v(" "),s("p",[a._v("睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。")]),a._v(" "),s("p",[a._v("阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("进入方法")]),a._v(" "),s("th",[a._v("退出方法")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("Thread.sleep() 方法")]),a._v(" "),s("td",[a._v("时间结束")])]),a._v(" "),s("tr",[s("td",[a._v("设置了 Timeout 参数的 Object.wait() 方法")]),a._v(" "),s("td",[a._v("时间结束 / Object.notify() / Object.notifyAll()")])]),a._v(" "),s("tr",[s("td",[a._v("设置了 Timeout 参数的 Thread.join() 方法")]),a._v(" "),s("td",[a._v("时间结束 / 被调用的线程执行完毕")])]),a._v(" "),s("tr",[s("td",[a._v("LockSupport.parkNanos() 方法")]),a._v(" "),s("td",[a._v("-")])]),a._v(" "),s("tr",[s("td",[a._v("LockSupport.parkUntil() 方法")]),a._v(" "),s("td",[a._v("-")])])])]),a._v(" "),s("h3",{attrs:{id:"死亡-terminated"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死亡-terminated"}},[a._v("#")]),a._v(" 死亡(Terminated)")]),a._v(" "),s("p",[a._v("可以是线程结束任务之后自己结束，或者产生了异常而结束。")]),a._v(" "),s("h2",{attrs:{id:"线程使用方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程使用方式"}},[a._v("#")]),a._v(" 线程使用方式")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("有三种使用线程的方法:")]),a._v(" "),s("ul",[s("li",[a._v("实现 Runnable 接口；")]),a._v(" "),s("li",[a._v("实现 Callable 接口；")]),a._v(" "),s("li",[a._v("继承 Thread 类。")])]),a._v(" "),s("p",[a._v("实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以说任务是通过线程驱动从而执行的。")]),a._v(" "),s("h3",{attrs:{id:"实现-runnable-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-runnable-接口"}},[a._v("#")]),a._v(" 实现 Runnable 接口")]),a._v(" "),s("p",[a._v("需要实现 run() 方法。")]),a._v(" "),s("p",[a._v("通过 Thread 调用 start() 方法来启动线程。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public class MyRunnable implements Runnable {\n    public void run() {\n        // ...\n    }\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    MyRunnable instance = new MyRunnable();\n    Thread thread = new Thread(instance);\n    thread.start();\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"实现-callable-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-callable-接口"}},[a._v("#")]),a._v(" 实现 Callable 接口")]),a._v(" "),s("p",[a._v("与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public class MyCallable implements Callable<Integer> {\n    public Integer call() {\n        return 123;\n    }\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) throws ExecutionException, InterruptedException {\n    MyCallable mc = new MyCallable();\n    FutureTask<Integer> ft = new FutureTask<>(mc);\n    Thread thread = new Thread(ft);\n    thread.start();\n    System.out.println(ft.get());\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"继承-thread-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承-thread-类"}},[a._v("#")]),a._v(" 继承 Thread 类")]),a._v(" "),s("p",[a._v("同样也是需要实现 run() 方法，因为 Thread 类也实现了 Runable 接口。")]),a._v(" "),s("p",[a._v("当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public class MyThread extends Thread {\n    public void run() {\n        // ...\n    }\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    MyThread mt = new MyThread();\n    mt.start();\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"实现接口-vs-继承-thread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现接口-vs-继承-thread"}},[a._v("#")]),a._v(" 实现接口 VS 继承 Thread")]),a._v(" "),s("p",[a._v("实现接口会更好一些，因为:")]),a._v(" "),s("ul",[s("li",[a._v("Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；")]),a._v(" "),s("li",[a._v("类可能只要求可执行就行，继承整个 Thread 类开销过大。")])]),a._v(" "),s("h2",{attrs:{id:"基础线程机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础线程机制"}},[a._v("#")]),a._v(" 基础线程机制")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"executor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[a._v("#")]),a._v(" Executor")]),a._v(" "),s("p",[a._v("Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。")]),a._v(" "),s("p",[a._v("主要有三种 Executor:")]),a._v(" "),s("ul",[s("li",[a._v("CachedThreadPool: 一个任务创建一个线程；")]),a._v(" "),s("li",[a._v("FixedThreadPool: 所有任务只能使用固定大小的线程；")]),a._v(" "),s("li",[a._v("SingleThreadExecutor: 相当于大小为 1 的 FixedThreadPool。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    for (int i = 0; i < 5; i++) {\n        executorService.execute(new MyRunnable());\n    }\n    executorService.shutdown();\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"daemon"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#daemon"}},[a._v("#")]),a._v(" Daemon")]),a._v(" "),s("p",[a._v("守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。")]),a._v(" "),s("p",[a._v("当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。")]),a._v(" "),s("p",[a._v("main() 属于非守护线程。")]),a._v(" "),s("p",[a._v("使用 setDaemon() 方法将一个线程设置为守护线程。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    Thread thread = new Thread(new MyRunnable());\n    thread.setDaemon(true);\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"sleep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sleep"}},[a._v("#")]),a._v(" sleep()")]),a._v(" "),s("p",[a._v("Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。")]),a._v(" "),s("p",[a._v("sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void run() {\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"yield"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[a._v("#")]),a._v(" yield()")]),a._v(" "),s("p",[a._v("对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void run() {\n    Thread.yield();\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"线程中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程中断"}},[a._v("#")]),a._v(" 线程中断")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。")]),a._v(" "),s("h3",{attrs:{id:"interruptedexception"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interruptedexception"}},[a._v("#")]),a._v(" InterruptedException")]),a._v(" "),s("p",[a._v("通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。")]),a._v(" "),s("p",[a._v("对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class InterruptExample {\n\n    private static class MyThread1 extends Thread {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(2000);\n                System.out.println("Thread run");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public static void main(String[] args) throws InterruptedException {\n    Thread thread1 = new MyThread1();\n    thread1.start();\n    thread1.interrupt();\n    System.out.println("Main run");\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Main run\njava.lang.InterruptedException: sleep interrupted\n    at java.lang.Thread.sleep(Native Method)\n    at InterruptExample.lambda$main$0(InterruptExample.java:5)\n    at InterruptExample$$Lambda$1/713338599.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745) \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h3",{attrs:{id:"interrupted"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interrupted"}},[a._v("#")]),a._v(" interrupted()")]),a._v(" "),s("p",[a._v("如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。")]),a._v(" "),s("p",[a._v("但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class InterruptExample {\n\n    private static class MyThread2 extends Thread {\n        @Override\n        public void run() {\n            while (!interrupted()) {\n                // ..\n            }\n            System.out.println("Thread end");\n        }\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) throws InterruptedException {\n    Thread thread2 = new MyThread2();\n    thread2.start();\n    thread2.interrupt();\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Thread end \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"executor-的中断操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executor-的中断操作"}},[a._v("#")]),a._v(" Executor 的中断操作")]),a._v(" "),s("p",[a._v("调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。")]),a._v(" "),s("p",[a._v("以下使用 Lambda 创建线程，相当于创建了一个匿名内部线程。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> {\n        try {\n            Thread.sleep(2000);\n            System.out.println("Thread run");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    });\n    executorService.shutdownNow();\n    System.out.println("Main run");\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Main run\njava.lang.InterruptedException: sleep interrupted\n    at java.lang.Thread.sleep(Native Method)\n    at ExecutorInterruptExample.lambda$main$0(ExecutorInterruptExample.java:9)\n    at ExecutorInterruptExample$$Lambda$1/1160460865.run(Unknown Source)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745) \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("如果只想中断 Executor 中的一个线程，可以通过使用 submit() 方法来提交一个线程，它会返回一个 Future<?> 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Future<?> future = executorService.submit(() -> {\n    // ..\n});\nfuture.cancel(true); \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h2",{attrs:{id:"线程互斥同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程互斥同步"}},[a._v("#")]),a._v(" 线程互斥同步")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。")]),a._v(" "),s("h3",{attrs:{id:"synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[a._v("#")]),a._v(" synchronized")]),a._v(" "),s("p",[s("strong",[a._v("1. 同步一个代码块")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void func() {\n    synchronized (this) {\n        // ...\n    }\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。")]),a._v(" "),s("p",[a._v("对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class SynchronizedExample {\n\n    public void func1() {\n        synchronized (this) {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + " ");\n            }\n        }\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    SynchronizedExample e1 = new SynchronizedExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> e1.func1());\n    executorService.execute(() -> e1.func1());\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    SynchronizedExample e1 = new SynchronizedExample();\n    SynchronizedExample e2 = new SynchronizedExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> e1.func1());\n    executorService.execute(() -> e2.func1());\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("2. 同步一个方法")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public synchronized void func () {\n    // ...\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("它和同步代码块一样，作用于同一个对象。")]),a._v(" "),s("p",[s("strong",[a._v("3. 同步一个类")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public void func() {\n    synchronized (SynchronizedExample.class) {\n        // ...\n    }\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class SynchronizedExample {\n\n    public void func2() {\n        synchronized (SynchronizedExample.class) {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + " ");\n            }\n        }\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    SynchronizedExample e1 = new SynchronizedExample();\n    SynchronizedExample e2 = new SynchronizedExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> e1.func2());\n    executorService.execute(() -> e2.func2());\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("4. 同步一个静态方法")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public synchronized static void fun() {\n    // ...\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("作用于整个类。")]),a._v(" "),s("h3",{attrs:{id:"reentrantlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock"}},[a._v("#")]),a._v(" ReentrantLock")]),a._v(" "),s("p",[a._v("ReentrantLock 是 java.util.concurrent(J.U.C)包中的锁。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class LockExample {\n\n    private Lock lock = new ReentrantLock();\n\n    public void func() {\n        lock.lock();\n        try {\n            for (int i = 0; i < 10; i++) {\n                System.out.print(i + " ");\n            }\n        } finally {\n            lock.unlock(); // 确保释放锁，从而避免发生死锁。\n        }\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    LockExample lockExample = new LockExample();\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    executorService.execute(() -> lockExample.func());\n    executorService.execute(() -> lockExample.func());\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[a._v("#")]),a._v(" 比较")]),a._v(" "),s("p",[s("strong",[a._v("1. 锁的实现")])]),a._v(" "),s("p",[a._v("synchronized 是通过 JVM 内置的监视器锁（也称为管程）来实现的,，当编译器编译 synchronized 块或方法时，它会在 Java 字节码中插入 "),s("em",[a._v("monitorenter")]),a._v(" 和 "),s("em",[a._v("monitorexit")]),a._v(" 指令。")]),a._v(" "),s("p",[a._v("ReentrantLock是通过 Java 类库提供的同步器（Sync）接口的实现类 AbstractQueuedSynchronizer（AQS）来实现的。AQS 是一个基于 FIFO 队列的同步器框架，通过内置的等待队列来管理线程的阻塞和唤醒。ReentrantLock 内部维护了一个同步器实例，当线程请求锁时，它会调用同步器的相关方法尝试获取锁。")]),a._v(" "),s("p",[s("strong",[a._v("2. 性能")])]),a._v(" "),s("p",[a._v("新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。")]),a._v(" "),s("p",[s("strong",[a._v("3. 等待可中断")])]),a._v(" "),s("p",[a._v("当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。")]),a._v(" "),s("p",[a._v("ReentrantLock 可中断，而 synchronized 不行。")]),a._v(" "),s("p",[s("strong",[a._v("4. 公平锁")])]),a._v(" "),s("p",[a._v("公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。")]),a._v(" "),s("p",[a._v("synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。")]),a._v(" "),s("p",[s("strong",[a._v("5. 锁绑定多个条件")])]),a._v(" "),s("p",[a._v("一个 ReentrantLock 可以同时绑定多个 Condition 对象。")]),a._v(" "),s("h3",{attrs:{id:"使用选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用选择"}},[a._v("#")]),a._v(" 使用选择")]),a._v(" "),s("p",[a._v("除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。")]),a._v(" "),s("h2",{attrs:{id:"线程之间的协作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程之间的协作"}},[a._v("#")]),a._v(" 线程之间的协作")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。")]),a._v(" "),s("h3",{attrs:{id:"join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[a._v("#")]),a._v(" join()")]),a._v(" "),s("p",[a._v("在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。")]),a._v(" "),s("p",[a._v("对于以下代码，虽然 b 线程先启动，但是因为在 b 线程中调用了 a 线程的 join() 方法，b 线程会等待 a 线程结束才继续执行，因此最后能够保证 a 线程的输出先于 b 线程的输出。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class JoinExample {\n\n    private class A extends Thread {\n        @Override\n        public void run() {\n            System.out.println("A");\n        }\n    }\n\n    private class B extends Thread {\n\n        private A a;\n\n        B(A a) {\n            this.a = a;\n        }\n\n        @Override\n        public void run() {\n            try {\n                a.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("B");\n        }\n    }\n\n    public void test() {\n        A a = new A();\n        B b = new B(a);\n        b.start();\n        a.start();\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    JoinExample example = new JoinExample();\n    example.test();\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("A\nB \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h3",{attrs:{id:"wait-notify-notifyall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait-notify-notifyall"}},[a._v("#")]),a._v(" wait() notify() notifyAll()")]),a._v(" "),s("p",[a._v("调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。")]),a._v(" "),s("p",[a._v("它们都属于 Object 的一部分，而不属于 Thread。")]),a._v(" "),s("p",[a._v("只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateExeception。")]),a._v(" "),s("p",[a._v("使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class WaitNotifyExample {\n    public synchronized void before() {\n        System.out.println("before");\n        notifyAll();\n    }\n\n    public synchronized void after() {\n        try {\n            wait();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println("after");\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    WaitNotifyExample example = new WaitNotifyExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("before\nafter \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("strong",[a._v("wait() 和 sleep() 的区别")])]),a._v(" "),s("ul",[s("li",[a._v("wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；")]),a._v(" "),s("li",[a._v("wait() 会释放锁，sleep() 不会。")])]),a._v(" "),s("h3",{attrs:{id:"await-signal-signalall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#await-signal-signalall"}},[a._v("#")]),a._v(" await() signal() signalAll()")]),a._v(" "),s("p",[a._v("java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。")]),a._v(" "),s("p",[a._v("使用 Lock 来获取一个 Condition 对象。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class AwaitSignalExample {\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void before() {\n        lock.lock();\n        try {\n            System.out.println("before");\n            condition.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void after() {\n        lock.lock();\n        try {\n            condition.await();\n            System.out.println("after");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n} \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static void main(String[] args) {\n    ExecutorService executorService = Executors.newCachedThreadPool();\n    AwaitSignalExample example = new AwaitSignalExample();\n    executorService.execute(() -> example.after());\n    executorService.execute(() -> example.before());\n} \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("before\nafter \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports},447:function(a,s,e){a.exports=e.p+"assets/img/ace830df-9919-48ca-91b5-60b193f593d2.b1894a88.png"}}]);