(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{2724:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-1.0b307efe.png"},2725:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-2.c41498e4.png"},2726:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-3.a2710ded.png"},2727:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-4.2928eba5.png"},2728:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-5.5bce5702.png"},2729:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-6.fc3e364f.png"},2730:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-7.087173f5.png"},2731:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-8.8ed2c88e.png"},2732:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-9.9bcbbf98.png"},2733:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-10.7316dcb9.png"},2734:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-11.2d859b43.png"},2735:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-12.4c4defcb.png"},2736:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-13.6782e526.png"},2737:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-14.a5f7fe4b.png"},2738:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-15.3365dabb.png"},2739:function(s,t,n){s.exports=n.p+"assets/img/dev-ut-idea-16.6ac15e09.png"},3971:function(s,t,n){"use strict";n.r(t);var a=n(7),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"单元测试-idea下单元测试详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单元测试-idea下单元测试详解"}},[s._v("#")]),s._v(" 单元测试 - IDEA下单元测试详解")]),s._v(" "),t("p",[s._v("=========================================")]),s._v(" "),t("blockquote",[t("p",[s._v("工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。@pdai")])]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html#%E5%9C%BA%E6%99%AF%E5%87%86%E5%A4%87",target:"_blank",rel:"noopener noreferrer"}},[s._v("场景准备"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html#%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[s._v("插件使用"),t("OutboundLink")],1),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html#%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("自动生成单元测试"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html#%E5%B9%B6%E8%A1%8C%E6%B5%8B%E8%AF%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("并行测试"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html#%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87",target:"_blank",rel:"noopener noreferrer"}},[s._v("代码覆盖率"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html#profile",target:"_blank",rel:"noopener noreferrer"}},[s._v("Profile"),t("OutboundLink")],1)])])])]),s._v(" "),t("h1",{attrs:{id:"场景准备"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景准备"}},[s._v("#")]),s._v(" 场景准备")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("准备一个待测试的类, 其中还包含着错误。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("package tech.pdai.junit4.module;\n\npublic class Calculator {\n\n    public int result = 0;\n\n    /**\n     * add.\n     *\n     * @param operand1 first param\n     * @param operand2 second param\n     * @return sum\n     */\n    public int add(int operand1, int operand2) {\n        result = operand1 + operand2;\n        return result;\n    }\n\n    public int subtract(int operand1, int operand2) {\n        result = operand1 - operand2;\n        return result;\n    }\n\n    public int multiple(int operand1, int operand2) {\n        result = operand1 * operand2;\n        for (; ; ) {                    //死循环\n        }\n    }\n\n    public int divide(int operand1, int operand2) {\n        result = operand1 / 0;\n        return result;\n    }\n\n    public int getResult() {\n        return this.result;\n    }\n\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br")])]),t("h1",{attrs:{id:"插件使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插件使用"}},[s._v("#")]),s._v(" 插件使用")]),s._v(" "),t("hr"),s._v(" "),t("h3",{attrs:{id:"自动生成单元测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动生成单元测试"}},[s._v("#")]),s._v(" 自动生成单元测试")]),s._v(" "),t("p",[s._v("第一个插件，首推的是JunitGeneratorV2.0")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2724),alt:""}})]),s._v(" "),t("p",[s._v("设置默认采用Junit4")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2725),alt:""}})]),s._v(" "),t("p",[s._v("如有必要可以设置生成的模板")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2726),alt:""}})]),s._v(" "),t("p",[s._v("测试下")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2727),alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:n(2728),alt:""}})]),s._v(" "),t("p",[s._v("生成单元测试")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2729),alt:""}})]),s._v(" "),t("p",[s._v("补充完整代码")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('package tech.pdai.junit4.module;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class CalculatorTest {\n\n    private static Calculator cal=new Calculator();\n\n    @Before\n    public void setUp() throws Exception {\n        System.out.println("before");\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        System.out.println("after");\n    }\n\n    @Test\n    public void add() {\n        cal.add(2,2);\n        assertEquals(4,cal.getResult());\n    }\n\n    @Test\n    public void subtract() {\n        cal.subtract(4,2);\n        assertEquals(2,cal.getResult());\n    }\n\n    @Ignore\n    public void multiply() {\n        fail("Not yet implemented");\n    }\n\n    @Test(timeout = 2000)\n    public void divide() {\n        for(;;);\n    }\n\n    @Test(expected = ArithmeticException.class)\n    public void testDivideByZero(){\n        cal.divide(4,0);\n    }\n\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br")])]),t("p",[s._v("执行结果")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2730),alt:""}})]),s._v(" "),t("h3",{attrs:{id:"并行测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行测试"}},[s._v("#")]),s._v(" 并行测试")]),s._v(" "),t("p",[s._v("在大量的单元测试时，如何提升测试的效率呢？肯定是并行，所以你可以用如下的插件")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2731),alt:""}})]),s._v(" "),t("p",[s._v("看下相关测试触发按钮和输出：")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2732),alt:""}})]),s._v(" "),t("h3",{attrs:{id:"代码覆盖率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码覆盖率"}},[s._v("#")]),s._v(" 代码覆盖率")]),s._v(" "),t("p",[s._v("如何快速看本地代码测试覆盖率呢？")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2733),alt:""}})]),s._v(" "),t("p",[s._v("代码覆盖率")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2734),alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:n(2735),alt:""}})]),s._v(" "),t("h3",{attrs:{id:"profile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile"}},[s._v("#")]),s._v(" Profile")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("CPU Profile")])])]),s._v(" "),t("p",[s._v("Flame Graph")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2736),alt:""}})]),s._v(" "),t("p",[s._v("Call Tree")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2737),alt:""}})]),s._v(" "),t("p",[s._v("Method List")]),s._v(" "),t("p",[t("img",{attrs:{src:n(2738),alt:""}})]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("Allocation Profile")])])]),s._v(" "),t("p",[t("img",{attrs:{src:n(2739),alt:""}}),s._v(")")])])}),[],!1,null,null,null);t.default=e.exports}}]);