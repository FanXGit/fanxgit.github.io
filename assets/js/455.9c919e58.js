(window.webpackJsonp=window.webpackJsonp||[]).push([[455],{2971:function(a,t,s){a.exports=s.p+"assets/img/arch-cap-2.4bae3b05.png"},4021:function(a,t,s){"use strict";s.r(t);var e=s(7),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"分布式理论-base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式理论-base"}},[a._v("#")]),a._v(" 分布式理论 - BASE")]),a._v(" "),t("p",[a._v("=============================")]),a._v(" "),t("blockquote",[t("p",[a._v("BASE是“Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。@pdai")])]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA---base"}},[a._v("分布式理论 - BASE")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AFbase"}},[a._v("什么是BASE")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#cap-%E4%B8%8E-base-%E5%85%B3%E7%B3%BB"}},[a._v("CAP 与 BASE 关系")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#cap-%E4%B8%8E-acid-%E5%85%B3%E7%B3%BB"}},[a._v("CAP 与 ACID 关系")])])])])]),a._v(" "),t("h1",{attrs:{id:"什么是base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是base"}},[a._v("#")]),a._v(" 什么是BASE")]),a._v(" "),t("hr"),a._v(" "),t("blockquote",[t("p",[a._v("eBay 的架构师 Dan Pritchett 源于对大规模分布式系统的实践总结，在 ACM 上发表文章提出 BASE 理论，BASE 理论是对 CAP 理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP 的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。")])]),a._v(" "),t("ol",[t("li",[t("p",[t("strong",[a._v("Basically Available")]),a._v("（基本可用）分布式系统在出现不可预知故障的时候，允许损失部分可用性")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("Soft state")]),a._v("（软状态）软状态也称为弱状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("Eventually consistent")]),a._v("（最终一致性）最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性")])])]),a._v(" "),t("h1",{attrs:{id:"cap-与-base-关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cap-与-base-关系"}},[a._v("#")]),a._v(" CAP 与 BASE 关系")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性（Strong consistency），更具体地说，是对 CAP 中 AP 方案的一个补充。其基本思路就是：通过业务，牺牲强一致性而获得可用性，并允许数据在一段时间内是不一致的，但是最终达到一致性状态。")]),a._v(" "),t("p",[t("img",{attrs:{src:s(2971),alt:""}})]),a._v(" "),t("h1",{attrs:{id:"cap-与-acid-关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cap-与-acid-关系"}},[a._v("#")]),a._v(" CAP 与 ACID 关系")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("ACID 是传统数据库常用的设计理念，追求强一致性模型。BASE 支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。")]),a._v(" "),t("p",[a._v("ACID 和 BASE 代表了两种截然相反的设计哲学，在分布式系统设计的场景中，系统组件对一致性要求是不同的，因此 ACID 和 BASE 又会结合使用。)")])])}),[],!1,null,null,null);t.default=r.exports}}]);