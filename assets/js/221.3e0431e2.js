(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{1439:function(s,n,a){s.exports=a.p+"assets/img/alg-graph-store-1.475af030.png"},1440:function(s,n,a){s.exports=a.p+"assets/img/alg-graph-store-2.d87746e7.png"},1441:function(s,n,a){s.exports=a.p+"assets/img/alg-graph-store-3.4a31136a.jpg"},1442:function(s,n,a){s.exports=a.p+"assets/img/alg-graph-store-4.300fde69.jpg"},1443:function(s,n,a){s.exports=a.p+"assets/img/alg-graph-store-5.4055ce11.jpg"},3766:function(s,n,a){"use strict";a.r(n);var e=a(7),r=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"图-基础和overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图-基础和overview"}},[s._v("#")]),s._v(" 图 - 基础和Overview")]),s._v(" "),n("p",[s._v("===================================")]),s._v(" "),n("blockquote",[n("p",[s._v("图(Graph)是由顶点和连接顶点的边构成的离散结构。在计算机科学中，图是最灵活的数据结构之一，很多问题都可以使用图模型进行建模求解。例如: 生态环境中不同物种的相互竞争、人与人之间的社交与关系网络、化学上用图区分结构不同但分子式相同的同分异构体、分析计算机网络的拓扑结构确定两台计算机是否可以通信、找到两个城市之间的最短路径等等。@pdai")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E5%9B%BE%E7%9A%84%E5%9F%BA%E7%A1%80",target:"_blank",rel:"noopener noreferrer"}},[s._v("图的基础"),n("OutboundLink")],1),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E5%AE%9A%E4%B9%89",target:"_blank",rel:"noopener noreferrer"}},[s._v("定义"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD",target:"_blank",rel:"noopener noreferrer"}},[s._v("相关术语"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[s._v("类型"),n("OutboundLink")],1)])])]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[s._v("图的存储结构"),n("OutboundLink")],1),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E8%A1%A8%E7%A4%BA%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("邻接矩阵表示法"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E9%82%BB%E6%8E%A5%E8%A1%A8%E8%A1%A8%E7%A4%BA%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[s._v("邻接表表示法"),n("OutboundLink")],1)])])]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E5%9B%BE%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[s._v("图相关题目"),n("OutboundLink")],1),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E4%BA%8C%E5%88%86%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[s._v("二分图"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[s._v("拓扑排序"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-graph.html#%E5%B9%B6%E6%9F%A5%E9%9B%86",target:"_blank",rel:"noopener noreferrer"}},[s._v("并查集"),n("OutboundLink")],1)])])])]),s._v(" "),n("h1",{attrs:{id:"图的基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图的基础"}},[s._v("#")]),s._v(" 图的基础")]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),n("p",[s._v("图(Graph)是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为: G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。")]),s._v(" "),n("p",[s._v("和线性表，树的差异:")]),s._v(" "),n("ul",[n("li",[s._v("线性表中我们把数据元素叫元素，树中将数据元素叫结点，在图中数据元素，我们则称之为顶点(Vertex)。")]),s._v(" "),n("li",[s._v("线性表可以没有元素，称为空表；树中可以没有节点，称为空树；但是，在图中不允许没有顶点(有穷非空性)。")]),s._v(" "),n("li",[s._v("线性表中的各元素是线性关系，树中的各元素是层次关系，而图中各顶点的关系是用边来表示(边集可以为空)。")])]),s._v(" "),n("h3",{attrs:{id:"相关术语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关术语"}},[s._v("#")]),s._v(" 相关术语")]),s._v(" "),n("ul",[n("li",[s._v("顶点的度")])]),s._v(" "),n("p",[s._v("顶点Vi的度(Degree)是指在图中与Vi相关联的边的条数。对于有向图来说，有入度(In-degree)和出度(Out-degree)之分，有向图顶点的度等于该顶点的入度和出度之和。")]),s._v(" "),n("ul",[n("li",[s._v("邻接")])]),s._v(" "),n("p",[s._v("若无向图中的两个顶点V1和V2存在一条边(V1,V2)，则称顶点V1和V2邻接(Adjacent)；")]),s._v(" "),n("p",[s._v("若有向图中存在一条边<V3,V2>，则称顶点V3与顶点V2邻接，且是V3邻接到V2或V2邻接直V3；")]),s._v(" "),n("ul",[n("li",[s._v("路径")])]),s._v(" "),n("p",[s._v("在无向图中，若从顶点Vi出发有一组边可到达顶点Vj，则称顶点Vi到顶点Vj的顶点序列为从顶点Vi到顶点Vj的路径(Path)。")]),s._v(" "),n("ul",[n("li",[s._v("连通")])]),s._v(" "),n("p",[s._v("若从Vi到Vj有路径可通，则称顶点Vi和顶点Vj是连通(Connected)的。")]),s._v(" "),n("ul",[n("li",[s._v("权(Weight)")])]),s._v(" "),n("p",[s._v("有些图的边或弧具有与它相关的数字，这种与图的边或弧相关的数叫做权(Weight)。")]),s._v(" "),n("h3",{attrs:{id:"类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[s._v("#")]),s._v(" 类型")]),s._v(" "),n("h4",{attrs:{id:"无向图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#无向图"}},[s._v("#")]),s._v(" 无向图")]),s._v(" "),n("p",[s._v("如果图中任意两个顶点之间的边都是无向边(简而言之就是没有方向的边)，则称该图为无向图(Undirected graphs)。")]),s._v(" "),n("p",[s._v("无向图中的边使用小括号“()”表示; 比如 (V1,V2);")]),s._v(" "),n("h4",{attrs:{id:"有向图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有向图"}},[s._v("#")]),s._v(" 有向图")]),s._v(" "),n("p",[s._v("如果图中任意两个顶点之间的边都是有向边(简而言之就是有方向的边)，则称该图为有向图(Directed graphs)。")]),s._v(" "),n("p",[s._v("有向图中的边使用尖括号“<>”表示; 比如/<V1,V2>")]),s._v(" "),n("h4",{attrs:{id:"完全图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完全图"}},[s._v("#")]),s._v(" 完全图")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("无向完全图")]),s._v(": 在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。(含有n个顶点的无向完全图有(n×(n-1))/2条边)")])]),s._v(" "),n("li",[n("p",[s._v("`有向完全图: 在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。(含有n个顶点的有向完全图有n×(n-1)条边)")])])]),s._v(" "),n("h1",{attrs:{id:"图的存储结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图的存储结构"}},[s._v("#")]),s._v(" 图的存储结构")]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"邻接矩阵表示法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵表示法"}},[s._v("#")]),s._v(" 邻接矩阵表示法")]),s._v(" "),n("p",[s._v("图的邻接矩阵(Adjacency Matrix)存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。")]),s._v(" "),n("ul",[n("li",[s._v("无向图:")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1439),alt:""}})]),s._v(" "),n("p",[s._v("我们可以设置两个数组，顶点数组为vertex[4]={v0,v1,v2,v3}，边数组arc[4][4]为上图右边这样的一个矩阵。对于矩阵的主对角线的值，即arc[0][0]、arc[1][1]、arc[2][2]、arc[3][3]，全为0是因为不存在顶点的边。")]),s._v(" "),n("ul",[n("li",[s._v("有向图:")])]),s._v(" "),n("p",[s._v("我们再来看一个有向图样例，如下图所示的左边。顶点数组为vertex[4]={v0,v1,v2,v3}，弧数组arc[4][4]为下图右边这样的一个矩阵。主对角线上数值依然为0。但因为是有向图，所以此矩阵并不对称，比如由v1到v0有弧，得到arc[1][0]=1，而v到v没有弧，因此arc[0][1]=0。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(1440),alt:""}})]),s._v(" "),n("blockquote",[n("p",[s._v("不足: 由于存在n个顶点的图需要n*n个数组元素进行存储，当图为稀疏图时，使用邻接矩阵存储方法将会出现大量0元素，这会造成极大的空间浪费。这时，可以考虑使用邻接表表示法来存储图中的数据")])]),s._v(" "),n("h3",{attrs:{id:"邻接表表示法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#邻接表表示法"}},[s._v("#")]),s._v(" 邻接表表示法")]),s._v(" "),n("p",[s._v("首先，回忆我们在线性表时谈到，顺序存储结构就存在预先分配内存可能造成存储空间浪费的问题，于是引出了链式存储的结构。同样的，我们也可以考虑对边或弧使用链式存储的方式来避免空间浪费的问题。")]),s._v(" "),n("p",[s._v("邻接表由表头节点和表节点两部分组成，图中每个顶点均对应一个存储在数组中的表头节点。如果这个表头节点所对应的顶点存在邻接节点，则把邻接节点依次存放于表头节点所指向的单向链表中。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("无向图")])])]),s._v(" "),n("p",[s._v("下图所示的就是一个无向图的邻接表结构。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(1441),alt:""}})]),s._v(" "),n("p",[s._v("从上图中我们知道，顶点表的各个结点由data和firstedge两个域表示，data是数据域，存储顶点的信息，firstedge是指针域，指向边表的第一个结点，即此顶点的第一个邻接点。边表结点由adjvex和next两个域组成。adjvex是邻接点域，存储某顶点的邻接点在顶点表中的下标，next则存储指向边表中下一个结点的指针。例如: v1顶点与v0、v2互为邻接点，则在v1的边表中，adjvex分别为v0的0和v2的2。")]),s._v(" "),n("p",[s._v("PS: 对于无向图来说，使用邻接表进行存储也会出现数据冗余的现象。例如上图中，顶点V0所指向的链表中存在一个指向顶点V3的同事，顶点V3所指向的链表中也会存在一个指向V0的顶点。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("有向图")])])]),s._v(" "),n("p",[s._v("若是有向图，邻接表结构是类似的，但要注意的是有向图由于有方向的。因此，有向图的邻接表分为出边表和入边表(又称逆邻接表)，出边表的表节点存放的是从表头节点出发的有向边所指的尾节点；入边表的表节点存放的则是指向表头节点的某个顶点，如下图所示。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(1442),alt:""}})]),s._v(" "),n("ul",[n("li",[n("code",[s._v("带权图")])])]),s._v(" "),n("p",[s._v("对于带权值的网图，可以在边表结点定义中再增加一个weight的数据域，存储权值信息即可，如下图所示。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(1443),alt:""}})]),s._v(" "),n("h1",{attrs:{id:"图相关题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图相关题目"}},[s._v("#")]),s._v(" 图相关题目")]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"二分图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二分图"}},[s._v("#")]),s._v(" 二分图")]),s._v(" "),n("p",[s._v("如果可以用两种颜色对图中的节点进行着色，并且保证相邻的节点颜色不同，那么这个图就是二分图。")]),s._v(" "),n("p",[n("strong",[s._v("判断是否为二分图")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/is-graph-bipartite/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("785. Is Graph Bipartite? (Medium) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Input: [[1,3], [0,2], [1,3], [0,2]]\nOutput: true\nExplanation:\nThe graph looks like this:\n0----1\n|    |\n|    |\n3----2\nWe can divide the vertices into two groups: {0, 2} and {1, 3}.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Example 2:\nInput: [[1,2,3], [0,2], [0,1,3], [0,2]]\nOutput: false\nExplanation:\nThe graph looks like this:\n0----1\n| \\  |\n|  \\ |\n3----2\nWe cannot find a way to divide the set of nodes into two independent subsets.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public boolean isBipartite(int[][] graph) {\n    int[] colors = new int[graph.length];\n    Arrays.fill(colors, -1);\n    for (int i = 0; i < graph.length; i++) {  // 处理图不是连通的情况\n        if (colors[i] == -1 && !isBipartite(i, 0, colors, graph)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean isBipartite(int curNode, int curColor, int[] colors, int[][] graph) {\n    if (colors[curNode] != -1) {\n        return colors[curNode] == curColor;\n    }\n    colors[curNode] = curColor;\n    for (int nextNode : graph[curNode]) {\n        if (!isBipartite(nextNode, 1 - curColor, colors, graph)) {\n            return false;\n        }\n    }\n    return true;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h3",{attrs:{id:"拓扑排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[s._v("#")]),s._v(" 拓扑排序")]),s._v(" "),n("p",[s._v("常用于在具有先序关系的任务规划中。")]),s._v(" "),n("p",[n("strong",[s._v("课程安排的合法性")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/course-schedule/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("207. Course Schedule (Medium) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("2, [[1,0]]\nreturn true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("2, [[1,0],[0,1]]\nreturn false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("题目描述: 一个课程可能会先修课程，判断给定的先修课程规定是否合法。")]),s._v(" "),n("p",[s._v("本题不需要使用拓扑排序，只需要检测有向图是否存在环即可。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public boolean canFinish(int numCourses, int[][] prerequisites) {\n    List<Integer>[] graphic = new List[numCourses];\n    for (int i = 0; i < numCourses; i++) {\n        graphic[i] = new ArrayList<>();\n    }\n    for (int[] pre : prerequisites) {\n        graphic[pre[0]].add(pre[1]);\n    }\n    boolean[] globalMarked = new boolean[numCourses];\n    boolean[] localMarked = new boolean[numCourses];\n    for (int i = 0; i < numCourses; i++) {\n        if (hasCycle(globalMarked, localMarked, graphic, i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean hasCycle(boolean[] globalMarked, boolean[] localMarked,\n                         List<Integer>[] graphic, int curNode) {\n\n    if (localMarked[curNode]) {\n        return true;\n    }\n    if (globalMarked[curNode]) {\n        return false;\n    }\n    globalMarked[curNode] = true;\n    localMarked[curNode] = true;\n    for (int nextNode : graphic[curNode]) {\n        if (hasCycle(globalMarked, localMarked, graphic, nextNode)) {\n            return true;\n        }\n    }\n    localMarked[curNode] = false;\n    return false;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br")])]),n("p",[n("strong",[s._v("课程安排的顺序")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/course-schedule-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("210. Course Schedule II (Medium) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("4, [[1,0],[2,0],[3,1],[3,2]]\nThere are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("使用 DFS 来实现拓扑排序，使用一个栈存储后序遍历结果，这个栈的逆序结果就是拓扑排序结果。")]),s._v(" "),n("p",[s._v("证明: 对于任何先序关系: v->w，后序遍历结果可以保证 w 先进入栈中，因此栈的逆序结果中 v 会在 w 之前。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int[] findOrder(int numCourses, int[][] prerequisites) {\n    List<Integer>[] graphic = new List[numCourses];\n    for (int i = 0; i < numCourses; i++) {\n        graphic[i] = new ArrayList<>();\n    }\n    for (int[] pre : prerequisites) {\n        graphic[pre[0]].add(pre[1]);\n    }\n    Stack<Integer> postOrder = new Stack<>();\n    boolean[] globalMarked = new boolean[numCourses];\n    boolean[] localMarked = new boolean[numCourses];\n    for (int i = 0; i < numCourses; i++) {\n        if (hasCycle(globalMarked, localMarked, graphic, i, postOrder)) {\n            return new int[0];\n        }\n    }\n    int[] orders = new int[numCourses];\n    for (int i = numCourses - 1; i >= 0; i--) {\n        orders[i] = postOrder.pop();\n    }\n    return orders;\n}\n\nprivate boolean hasCycle(boolean[] globalMarked, boolean[] localMarked, List<Integer>[] graphic,\n                         int curNode, Stack<Integer> postOrder) {\n\n    if (localMarked[curNode]) {\n        return true;\n    }\n    if (globalMarked[curNode]) {\n        return false;\n    }\n    globalMarked[curNode] = true;\n    localMarked[curNode] = true;\n    for (int nextNode : graphic[curNode]) {\n        if (hasCycle(globalMarked, localMarked, graphic, nextNode, postOrder)) {\n            return true;\n        }\n    }\n    localMarked[curNode] = false;\n    postOrder.push(curNode);\n    return false;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])]),n("h3",{attrs:{id:"并查集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并查集"}},[s._v("#")]),s._v(" 并查集")]),s._v(" "),n("p",[s._v("并查集可以动态地连通两个点，并且可以非常快速地判断两个点是否连通。")]),s._v(" "),n("p",[n("strong",[s._v("冗余连接")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/redundant-connection/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("684. Redundant Connection (Medium) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Input: [[1,2], [1,3], [2,3]]\nOutput: [2,3]\nExplanation: The given undirected graph will be like this:\n  1\n / \\\n2 - 3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("题目描述: 有一系列的边连成的图，找出一条边，移除它之后该图能够成为一棵树。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int[] findRedundantConnection(int[][] edges) {\n    int N = edges.length;\n    UF uf = new UF(N);\n    for (int[] e : edges) {\n        int u = e[0], v = e[1];\n        if (uf.connect(u, v)) {\n            return e;\n        }\n        uf.union(u, v);\n    }\n    return new int[]{-1, -1};\n}\n\nprivate class UF {\n\n    private int[] id;\n\n    UF(int N) {\n        id = new int[N + 1];\n        for (int i = 0; i < id.length; i++) {\n            id[i] = i;\n        }\n    }\n\n    void union(int u, int v) {\n        int uID = find(u);\n        int vID = find(v);\n        if (uID == vID) {\n            return;\n        }\n        for (int i = 0; i < id.length; i++) {\n            if (id[i] == uID) {\n                id[i] = vID;\n            }\n        }\n    }\n\n    int find(int p) {\n        return id[p];\n    }\n\n    boolean connect(int u, int v) {\n        return find(u) == find(v);\n    }\n}\n```)")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);