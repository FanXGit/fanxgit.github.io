(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{3430:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-trans-1.590b4a06.png"},3431:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-trans-2.90d47032.png"},3432:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-trans-3.d91de8d5.png"},3433:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-trans-4.fdb80528.png"},3434:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-trans-5.40f22c27.png"},4221:function(n,s,a){"use strict";a.r(s);var t=a(7),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis详解-事务管理机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解-事务管理机制"}},[n._v("#")]),n._v(" MyBatis详解 - 事务管理机制")]),n._v(" "),s("p",[n._v("=========================================")]),n._v(" "),s("blockquote",[s("p",[n._v("本文主要介绍MyBatis事务管理相关的使用和机制。@pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6"}},[n._v("MyBatis详解 - 事务管理机制")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E6%A6%82%E8%BF%B0"}},[n._v("概述")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AE%98%E7%BD%91%E5%85%B3%E4%BA%8E%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE%E7%9A%84%E5%86%85%E5%AE%B9"}},[n._v("官网关于事务配置的内容")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%85%8D%E7%BD%AE%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8"}},[n._v("事务的配置、创建和使用")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%85%8D%E7%BD%AE"}},[n._v("事务的配置")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1%E5%B7%A5%E5%8E%82%E7%9A%84%E5%88%9B%E5%BB%BA"}},[n._v("事务工厂的创建")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1%E5%B7%A5%E5%8E%82transactionfactory"}},[n._v("事务工厂TransactionFactory")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1transaction%E7%9A%84%E5%88%9B%E5%BB%BA"}},[n._v("事务Transaction的创建")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#jdbctransaction"}},[n._v("JdbcTransaction")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#managedtransaction"}},[n._v("ManagedTransaction")])])])])])])]),n._v(" "),s("h1",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[n._v("#")]),n._v(" 概述")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("对数据库的事务而言，应该具有以下几点：创建（create）、提交（commit）、回滚（rollback）、关闭（close）。对应地，MyBatis将事务抽象成了Transaction接口：")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3430),alt:""}})]),n._v(" "),s("p",[n._v("MyBatis的事务管理分为两种形式：")]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("使用JDBC的事务管理机制")]),n._v("：即利用java.sql.Connection对象完成对事务的提交（commit()）、回滚（rollback()）、关闭（close()）等。")]),n._v(" "),s("li",[s("strong",[n._v("使用MANAGED的事务管理机制")]),n._v("：这种机制MyBatis自身不会去实现事务管理，而是让程序的容器如（JBOSS，Weblogic）来实现对事务的管理。")])]),n._v(" "),s("p",[n._v("这两者的类图如下所示：")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3431),alt:""}})]),n._v(" "),s("h1",{attrs:{id:"官网关于事务配置的内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#官网关于事务配置的内容"}},[n._v("#")]),n._v(" 官网关于事务配置的内容")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("在 MyBatis 中有两种类型的事务管理器（也就是 "),s("code",[n._v('type="[JDBC|MANAGED]"')]),n._v("）：")]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("JDBC")]),n._v(" – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。")]),n._v(" "),s("li",[s("strong",[n._v("MANAGED")]),n._v(" – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('<transactionManager type="MANAGED">\n  <property name="closeConnection" value="false"/>\n</transactionManager>\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("blockquote",[s("p",[n._v("如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。")])]),n._v(" "),s("p",[n._v("这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public interface TransactionFactory {\n  default void setProperties(Properties props) { // 从 3.5.2 开始，该方法为默认方法\n    // 空实现\n  }\n  Transaction newTransaction(Connection conn);\n  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public interface Transaction {\n  Connection getConnection() throws SQLException;\n  void commit() throws SQLException;\n  void rollback() throws SQLException;\n  void close() throws SQLException;\n  Integer getTimeout() throws SQLException;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。")]),n._v(" "),s("h1",{attrs:{id:"事务的配置、创建和使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务的配置、创建和使用"}},[n._v("#")]),n._v(" 事务的配置、创建和使用")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"事务的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务的配置"}},[n._v("#")]),n._v(" 事务的配置")]),n._v(" "),s("p",[n._v("我们在使用MyBatis时，一般会在MyBatisXML配置文件中定义类似如下的信息：")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3432),alt:""}})]),n._v(" "),s("p",[s("code",[n._v("<environment>")]),n._v("节点定义了连接某个数据库的信息，其子节点"),s("code",[n._v("<transactionManager>")]),n._v(" 的type 会决定我们用什么类型的事务管理机制。")]),n._v(" "),s("h3",{attrs:{id:"事务工厂的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务工厂的创建"}},[n._v("#")]),n._v(" 事务工厂的创建")]),n._v(" "),s("p",[n._v("MyBatis事务的创建是交给TransactionFactory 事务工厂来创建的，如果我们将"),s("code",[n._v("<transactionManager>")]),n._v('的type 配置为"JDBC",那么，在MyBatis初始化解析 '),s("code",[n._v("<environment>")]),n._v('节点时，会根据type="JDBC"创建一个JdbcTransactionFactory工厂，其源码如下：')]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/** \n * 解析<transactionManager>节点，创建对应的TransactionFactory \n * @param context \n * @return \n * @throws Exception \n */  \nprivate TransactionFactory transactionManagerElement(XNode context) throws Exception {  \n    if (context != null) {  \n        String type = context.getStringAttribute("type");  \n        Properties props = context.getChildrenAsProperties();  \n        /* \n         * 在Configuration初始化的时候，会通过以下语句，给JDBC和MANAGED对应的工厂类 \n         * typeAliasRegistry.registerAlias("JDBC", JdbcTransactionFactory.class); \n         * typeAliasRegistry.registerAlias("MANAGED", ManagedTransactionFactory.class); \n         * 下述的resolveClass(type).newInstance()会创建对应的工厂实例 \n         */  \n        TransactionFactory factory = (TransactionFactory) resolveClass(type).newInstance();  \n        factory.setProperties(props);  \n        return factory;  \n    }  \n    throw new BuilderException("Environment declaration requires a TransactionFactory.");  \n}  \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("p",[n._v('如上述代码所示，如果type = "JDBC",则MyBatis会创建一个JdbcTransactionFactory.class 实例；如果type="MANAGED"，则MyBatis会创建一个MangedTransactionFactory.class实例。')]),n._v(" "),s("p",[n._v("MyBatis对"),s("code",[n._v("<transactionManager>")]),n._v("节点的解析会生成TransactionFactory实例；而对"),s("code",[n._v("<dataSource>")]),n._v("解析会生成datasouce实例，作为"),s("code",[n._v("<environment>")]),n._v("节点，会根据TransactionFactory和DataSource实例创建一个Environment对象，代码如下所示：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('private void environmentsElement(XNode context) throws Exception {  \n    if (context != null) {  \n        if (environment == null) {  \n            environment = context.getStringAttribute("default");  \n        }  \n        for (XNode child : context.getChildren()) {  \n            String id = child.getStringAttribute("id");  \n            //是和默认的环境相同时，解析之  \n            if (isSpecifiedEnvironment(id)) {  \n                //1.解析<transactionManager>节点，决定创建什么类型的TransactionFactory  \n                TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));  \n                //2. 创建dataSource  \n                DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));  \n                DataSource dataSource = dsFactory.getDataSource();  \n                //3. 使用了Environment内置的构造器Builder，传递id 事务工厂TransactionFactory和数据源DataSource  \n                Environment.Builder environmentBuilder = new Environment.Builder(id)  \n                .transactionFactory(txFactory)  \n                .dataSource(dataSource);  \n                configuration.setEnvironment(environmentBuilder.build());  \n            }  \n        }  \n    }  \n}  \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("p",[n._v("Environment表示着一个数据库的连接，生成后的Environment对象会被设置到Configuration实例中，以供后续的使用。")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3433),alt:""}})]),n._v(" "),s("p",[n._v("上述一直在讲事务工厂TransactionFactory来创建的Transaction，现在让我们看一下MyBatis中的TransactionFactory的定义吧。")]),n._v(" "),s("h3",{attrs:{id:"事务工厂transactionfactory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务工厂transactionfactory"}},[n._v("#")]),n._v(" 事务工厂TransactionFactory")]),n._v(" "),s("p",[n._v("事务工厂Transaction定义了创建Transaction的两个方法：一个是通过指定的Connection对象创建Transaction，另外是通过数据源DataSource来创建Transaction。与JDBC 和MANAGED两种Transaction相对应，TransactionFactory有两个对应的实现的子类：")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3434),alt:""}})]),n._v(" "),s("h3",{attrs:{id:"事务transaction的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务transaction的创建"}},[n._v("#")]),n._v(" 事务Transaction的创建")]),n._v(" "),s("p",[n._v("通过事务工厂TransactionFactory很容易获取到Transaction对象实例。我们以JdbcTransaction为例，看一下JdbcTransactionFactory是怎样生成JdbcTransaction的，代码如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class JdbcTransactionFactory implements TransactionFactory {  \n \n    public void setProperties(Properties props) {  \n    }  \n \n    /** \n     * 根据给定的数据库连接Connection创建Transaction \n     * @param conn Existing database connection \n     * @return \n     */  \n    public Transaction newTransaction(Connection conn) {  \n        return new JdbcTransaction(conn);  \n    }  \n \n    /** \n     * 根据DataSource、隔离级别和是否自动提交创建Transacion \n     * \n     * @param ds \n     * @param level Desired isolation level \n     * @param autoCommit Desired autocommit \n     * @return \n     */  \n    public Transaction newTransaction(DataSource ds, TransactionIsolationLevel level, boolean autoCommit) {  \n        return new JdbcTransaction(ds, level, autoCommit);  \n    }  \n}  \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("p",[n._v("如上说是，JdbcTransactionFactory会创建JDBC类型的Transaction，即JdbcTransaction。类似地，ManagedTransactionFactory也会创建ManagedTransaction。下面我们会分别深入JdbcTranaction 和ManagedTransaction，看它们到底是怎样实现事务管理的。")]),n._v(" "),s("h3",{attrs:{id:"jdbctransaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdbctransaction"}},[n._v("#")]),n._v(" JdbcTransaction")]),n._v(" "),s("p",[n._v("JdbcTransaction直接使用JDBC的提交和回滚事务管理机制。它依赖与从dataSource中取得的连接connection 来管理transaction 的作用域，connection对象的获取被延迟到调用getConnection()方法。如果autocommit设置为on，开启状态的话，它会忽略commit和rollback。")]),n._v(" "),s("p",[n._v("直观地讲，就是JdbcTransaction是使用的java.sql.Connection 上的commit和rollback功能，JdbcTransaction只是相当于对java.sql.Connection事务处理进行了一次包装（wrapper），Transaction的事务管理都是通过java.sql.Connection实现的。JdbcTransaction的代码实现如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class JdbcTransaction implements Transaction {  \n \n    private static final Log log = LogFactory.getLog(JdbcTransaction.class);  \n \n    //数据库连接  \n    protected Connection connection;  \n    //数据源  \n    protected DataSource dataSource;  \n    //隔离级别  \n    protected TransactionIsolationLevel level;  \n    //是否为自动提交  \n    protected boolean autoCommmit;  \n \n    public JdbcTransaction(DataSource ds, TransactionIsolationLevel desiredLevel, boolean desiredAutoCommit) {  \n        dataSource = ds;  \n        level = desiredLevel;  \n        autoCommmit = desiredAutoCommit;  \n    }  \n \n    public JdbcTransaction(Connection connection) {  \n        this.connection = connection;  \n    }  \n \n    public Connection getConnection() throws SQLException {  \n        if (connection == null) {  \n            openConnection();  \n        }  \n        return connection;  \n    }  \n \n    /** \n     * commit()功能 使用connection的commit() \n     * @throws SQLException \n     */  \n    public void commit() throws SQLException {  \n        if (connection != null && !connection.getAutoCommit()) {  \n            if (log.isDebugEnabled()) {  \n                log.debug("Committing JDBC Connection [" + connection + "]");  \n            }  \n            connection.commit();  \n        }  \n    }  \n \n    /** \n     * rollback()功能 使用connection的rollback() \n     * @throws SQLException \n     */  \n    public void rollback() throws SQLException {  \n        if (connection != null && !connection.getAutoCommit()) {  \n            if (log.isDebugEnabled()) {  \n                log.debug("Rolling back JDBC Connection [" + connection + "]");  \n            }  \n            connection.rollback();  \n        }  \n    }  \n \n    /** \n     * close()功能 使用connection的close() \n     * @throws SQLException \n     */  \n    public void close() throws SQLException {  \n        if (connection != null) {  \n            resetAutoCommit();  \n            if (log.isDebugEnabled()) {  \n                log.debug("Closing JDBC Connection [" + connection + "]");  \n            }  \n            connection.close();  \n        }  \n    }  \n \n    protected void setDesiredAutoCommit(boolean desiredAutoCommit) {  \n        try {  \n            if (connection.getAutoCommit() != desiredAutoCommit) {  \n                if (log.isDebugEnabled()) {  \n                    log.debug("Setting autocommit to " + desiredAutoCommit + " on JDBC Connection [" + connection + "]");  \n                }  \n                connection.setAutoCommit(desiredAutoCommit);  \n            }  \n        } catch (SQLException e) {  \n            // Only a very poorly implemented driver would fail here,  \n            // and there\'s not much we can do about that.  \n            throw new TransactionException("Error configuring AutoCommit.  "  \n             + "Your driver may not support getAutoCommit() or setAutoCommit(). "  \n             + "Requested setting: " + desiredAutoCommit + ".  Cause: " + e, e);  \n        }  \n    }  \n \n    protected void resetAutoCommit() {  \n        try {  \n            if (!connection.getAutoCommit()) {  \n                // MyBatis does not call commit/rollback on a connection if just selects were performed.  \n                // Some databases start transactions with select statements  \n                // and they mandate a commit/rollback before closing the connection.  \n                // A workaround is setting the autocommit to true before closing the connection.  \n                // Sybase throws an exception here.  \n                if (log.isDebugEnabled()) {  \n                    log.debug("Resetting autocommit to true on JDBC Connection [" + connection + "]");  \n                }  \n                connection.setAutoCommit(true);  \n            }  \n        } catch (SQLException e) {  \n            log.debug("Error resetting autocommit to true "  \n             + "before closing the connection.  Cause: " + e);  \n        }  \n    }  \n \n    protected void openConnection() throws SQLException {  \n        if (log.isDebugEnabled()) {  \n            log.debug("Opening JDBC Connection");  \n        }  \n        connection = dataSource.getConnection();  \n        if (level != null) {  \n            connection.setTransactionIsolation(level.getLevel());  \n        }  \n        setDesiredAutoCommit(autoCommmit);  \n    }  \n \n}  \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br")])]),s("h3",{attrs:{id:"managedtransaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#managedtransaction"}},[n._v("#")]),n._v(" ManagedTransaction")]),n._v(" "),s("p",[n._v("ManagedTransaction让容器来管理事务Transaction的整个生命周期，意思就是说，使用ManagedTransaction的commit和rollback功能不会对事务有任何的影响，它什么都不会做，它将事务管理的权利移交给了容器来实现。看如下Managed的实现代码大家就会一目了然：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/** \n *  \n * 让容器管理事务transaction的整个生命周期 \n * connection的获取延迟到getConnection()方法的调用 \n * 忽略所有的commit和rollback操作 \n * 默认情况下，可以关闭一个连接connection，也可以配置它不可以关闭一个连接 \n * 让容器来管理transaction的整个生命周期 \n * @see ManagedTransactionFactory \n */   \npublic class ManagedTransaction implements Transaction {  \n \n    private static final Log log = LogFactory.getLog(ManagedTransaction.class);  \n \n    private DataSource dataSource;  \n    private TransactionIsolationLevel level;  \n    private Connection connection;  \n    private boolean closeConnection;  \n \n    public ManagedTransaction(Connection connection, boolean closeConnection) {  \n        this.connection = connection;  \n        this.closeConnection = closeConnection;  \n    }  \n \n    public ManagedTransaction(DataSource ds, TransactionIsolationLevel level, boolean closeConnection) {  \n        this.dataSource = ds;  \n        this.level = level;  \n        this.closeConnection = closeConnection;  \n    }  \n \n    public Connection getConnection() throws SQLException {  \n        if (this.connection == null) {  \n            openConnection();  \n        }  \n        return this.connection;  \n    }  \n \n    public void commit() throws SQLException {  \n        // Does nothing  \n    }  \n \n    public void rollback() throws SQLException {  \n        // Does nothing  \n    }  \n \n    public void close() throws SQLException {  \n        if (this.closeConnection && this.connection != null) {  \n            if (log.isDebugEnabled()) {  \n                log.debug("Closing JDBC Connection [" + this.connection + "]");  \n            }  \n            this.connection.close();  \n        }  \n    }  \n \n    protected void openConnection() throws SQLException {  \n        if (log.isDebugEnabled()) {  \n            log.debug("Opening JDBC Connection");  \n        }  \n        this.connection = this.dataSource.getConnection();  \n        if (this.level != null) {  \n            this.connection.setTransactionIsolation(this.level.getLevel());  \n        }  \n    }\n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br")])]),s("p",[n._v('注意：如果我们使用MyBatis构建本地程序，即不是WEB程序，若将type设置成"MANAGED"，那么，我们执行的任何update操作，即使我们最后执行了commit操作，数据也不会保留，不会对数据库造成任何影响。因为我们将MyBatis配置成了“MANAGED”，即MyBatis自己不管理事务，而我们又是运行的本地程序，没有事务管理功能，所以对数据库的update操作都是无效的。)')])])}),[],!1,null,null,null);s.default=e.exports}}]);