(window.webpackJsonp=window.webpackJsonp||[]).push([[287],{270:function(n,e,a){n.exports=a.p+"assets/img/spring-framework-ioc-source-102.34854479.png"},3648:function(n,e,a){"use strict";a.r(e);var s=a(7),t=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"spring进阶-spring-ioc实现原理详解之bean实例化-生命周期-循环依赖等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring进阶-spring-ioc实现原理详解之bean实例化-生命周期-循环依赖等"}},[n._v("#")]),n._v(" Spring进阶- Spring IOC实现原理详解之Bean实例化(生命周期,循环依赖等)")]),n._v(" "),e("blockquote",[e("p",[n._v("上文，我们看了IOC设计要点和设计结构；以及Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的；容器中存放的是Bean的定义即BeanDefinition放到beanDefinitionMap中，本质上是一个"),e("code",[n._v("ConcurrentHashMap<String, Object>")]),n._v("；并且BeanDefinition接口中包含了这个类的Class信息以及是否是单例等。那么如何从BeanDefinition中实例化Bean对象呢，这是本文主要研究的内容？@pdai")])]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#spring%E8%BF%9B%E9%98%B6--spring-ioc%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E4%B9%8Bbean%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%AD%89"}},[n._v("Spring进阶- Spring IOC实现原理详解之Bean实例化(生命周期,循环依赖等)")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%BC%95%E5%85%A5"}},[n._v("引入")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#beanfactory%E4%B8%ADgetbean%E7%9A%84%E4%B8%BB%E4%BD%93%E6%80%9D%E8%B7%AF"}},[n._v("BeanFactory中getBean的主体思路")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%88%9D%E6%AD%A5%E7%9A%84%E6%80%9D%E8%80%83"}},[n._v("初步的思考")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#spring%E4%B8%ADgetbean%E7%9A%84%E4%B8%BB%E4%BD%93%E6%80%9D%E8%B7%AF"}},[n._v("Spring中getBean的主体思路")])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E9%87%8D%E7%82%B9spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98"}},[n._v("重点：Spring如何解决循环依赖问题")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#spring%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BE%9D%E8%B5%96"}},[n._v("Spring单例模式下的属性依赖")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#spring%E4%B8%BA%E4%BD%95%E4%B8%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E9%9D%9E%E5%8D%95%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8B%E5%A4%96%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96"}},[n._v("Spring为何不能解决非单例属性之外的循环依赖？")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#spring%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96"}},[n._v("Spring为什么不能解决构造器的循环依赖？")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#spring%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E8%A7%A3%E5%86%B3prototype%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96"}},[n._v("Spring为什么不能解决prototype作用域循环依赖？")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#spring%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E8%A7%A3%E5%86%B3%E5%A4%9A%E4%BE%8B%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96"}},[n._v("Spring为什么不能解决多例的循环依赖？")])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E9%82%A3%E4%B9%88%E5%85%B6%E5%AE%83%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3"}},[n._v("那么其它循环依赖如何解决？")])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E9%87%8D%E7%82%B9spring%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"}},[n._v("重点：Spring中Bean的生命周期")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#spring-bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B"}},[n._v("Spring Bean生命周期流程")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#spring-bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A1%88%E4%BE%8B"}},[n._v("Spring Bean生命周期案例")])]),n._v(" "),e("li",[e("a",{attrs:{href:"#spring-bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%BA%90%E7%A0%81"}},[n._v("Spring Bean生命周期源码")])])])]),n._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[n._v("参考文章")])])])])]),n._v(" "),e("h1",{attrs:{id:"引入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[n._v("#")]),n._v(" 引入")]),n._v(" "),e("hr"),n._v(" "),e("blockquote",[e("p",[n._v("上文，我们看了IOC设计要点和设计结构；\b以及Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的；容器中存放的是Bean的定义即BeanDefinition放到beanDefinitionMap中，本质上是一个"),e("code",[n._v("ConcurrentHashMap<String, Object>")]),n._v("；并且BeanDefinition接口中包含了这个类的Class信息以及是否是单例等。那么如何从BeanDefinition中实例化Bean对象呢？")])]),n._v(" "),e("p",[n._v("本文主要研究如何从IOC容器已有的BeanDefinition信息，实例化出Bean对象；这里还会包括三块重点内容：")]),n._v(" "),e("ul",[e("li",[n._v("BeanFactory中getBean的主体思路")]),n._v(" "),e("li",[n._v("Spring如何解决循环依赖问题")]),n._v(" "),e("li",[n._v("Spring中Bean的生命周期")])]),n._v(" "),e("p",[e("img",{attrs:{src:a(970),alt:""}})]),n._v(" "),e("h1",{attrs:{id:"beanfactory中getbean的主体思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory中getbean的主体思路"}},[n._v("#")]),n._v(" BeanFactory中getBean的主体思路")]),n._v(" "),e("hr"),n._v(" "),e("blockquote",[e("p",[n._v("上文中我们知道BeanFactory定义了Bean容器的规范，其中包含根据bean的名字, Class类型和参数等来得到bean实例。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 根据bean的名字和Class类型等来得到bean实例    \nObject getBean(String name) throws BeansException;    \nObject getBean(String name, Class requiredType) throws BeansException;    \nObject getBean(String name, Object... args) throws BeansException;\n<T> T getBean(Class<T> requiredType) throws BeansException;\n<T> T getBean(Class<T> requiredType, Object... args) throws BeansException;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("h3",{attrs:{id:"初步的思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初步的思考"}},[n._v("#")]),n._v(" 初步的思考")]),n._v(" "),e("p",[n._v("上文我们已经分析了IoC初始化的流程，最终的将Bean的定义即BeanDefinition放到beanDefinitionMap中，本质上是一个"),e("code",[n._v("ConcurrentHashMap<String, Object>")]),n._v("；并且BeanDefinition接口中包含了这个类的Class信息以及是否是单例等；")]),n._v(" "),e("p",[e("img",{attrs:{src:a(971),alt:""}})]),n._v(" "),e("p",[n._v("这样我们初步有了实现"),e("code",[n._v("Object getBean(String name)")]),n._v("这个方法的思路：")]),n._v(" "),e("ul",[e("li",[n._v("从beanDefinitionMap通过beanName获得BeanDefinition")]),n._v(" "),e("li",[n._v("从BeanDefinition中获得beanClassName")]),n._v(" "),e("li",[n._v("通过反射初始化beanClassName的实例instance\n"),e("ul",[e("li",[n._v("构造函数从BeanDefinition的getConstructorArgumentValues()方法获取")]),n._v(" "),e("li",[n._v("属性值从BeanDefinition的getPropertyValues()方法获取")])])]),n._v(" "),e("li",[n._v("返回beanName的实例instance")])]),n._v(" "),e("p",[n._v("由于BeanDefinition还有单例的信息，如果是无参构造函数的实例还可以放在一个缓存中，这样下次获取这个单例的实例时只需要从缓存中获取，如果获取不到再通过上述步骤获取。")]),n._v(" "),e("p",[n._v("（PS：如上只是我们初步的思路，而Spring还需要考虑各种设计上的问题，比如beanDefinition中其它定义，循环依赖等；所以我们来看下Spring是如何是如何实现的）")]),n._v(" "),e("h3",{attrs:{id:"spring中getbean的主体思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring中getbean的主体思路"}},[n._v("#")]),n._v(" Spring中getBean的主体思路")]),n._v(" "),e("p",[n._v("BeanFactory实现getBean方法在AbstractBeanFactory中，这个方法重载都是调用doGetBean方法进行实现的：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public Object getBean(String name) throws BeansException {\n  return doGetBean(name, null, null, false);\n}\npublic <T> T getBean(String name, Class<T> requiredType) throws BeansException {\n  return doGetBean(name, requiredType, null, false);\n}\npublic Object getBean(String name, Object... args) throws BeansException {\n  return doGetBean(name, null, args, false);\n}\npublic <T> T getBean(String name, @Nullable Class<T> requiredType, @Nullable Object... args)\n    throws BeansException {\n  return doGetBean(name, requiredType, args, false);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("p",[n._v("我们来看下doGetBean方法(这个方法很长，我们主要看它的整体思路和设计要点）：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 参数typeCheckOnly：bean实例是否包含一个类型检查\nprotected <T> T doGetBean(\n\t\t\tString name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly)\n\t\t\tthrows BeansException {\n\n  // 解析bean的真正name，如果bean是工厂类，name前缀会加&，需要去掉\n  String beanName = transformedBeanName(name);\n  Object beanInstance;\n\n  // Eagerly check singleton cache for manually registered singletons.\n  Object sharedInstance = getSingleton(beanName);\n  if (sharedInstance != null && args == null) {\n    // 无参单例从缓存中获取\n    beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n  }\n\n  else {\n    // 如果bean实例还在创建中，则直接抛出异常\n    if (isPrototypeCurrentlyInCreation(beanName)) {\n      throw new BeanCurrentlyInCreationException(beanName);\n    }\n\n    // 如果 bean definition 存在于父的bean工厂中，委派给父Bean工厂获取\n    BeanFactory parentBeanFactory = getParentBeanFactory();\n    if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n      // Not found -> check parent.\n      String nameToLookup = originalBeanName(name);\n      if (parentBeanFactory instanceof AbstractBeanFactory) {\n        return ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n            nameToLookup, requiredType, args, typeCheckOnly);\n      }\n      else if (args != null) {\n        // Delegation to parent with explicit args.\n        return (T) parentBeanFactory.getBean(nameToLookup, args);\n      }\n      else if (requiredType != null) {\n        // No args -> delegate to standard getBean method.\n        return parentBeanFactory.getBean(nameToLookup, requiredType);\n      }\n      else {\n        return (T) parentBeanFactory.getBean(nameToLookup);\n      }\n    }\n\n    if (!typeCheckOnly) {\n      // 将当前bean实例放入alreadyCreated集合里，标识这个bean准备创建了\n      markBeanAsCreated(beanName);\n    }\n\n    StartupStep beanCreation = this.applicationStartup.start("spring.beans.instantiate")\n        .tag("beanName", name);\n    try {\n      if (requiredType != null) {\n        beanCreation.tag("beanType", requiredType::toString);\n      }\n      RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n      checkMergedBeanDefinition(mbd, beanName, args);\n\n      // 确保它的依赖也被初始化了.\n      String[] dependsOn = mbd.getDependsOn();\n      if (dependsOn != null) {\n        for (String dep : dependsOn) {\n          if (isDependent(beanName, dep)) {\n            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                "Circular depends-on relationship between \'" + beanName + "\' and \'" + dep + "\'");\n          }\n          registerDependentBean(dep, beanName);\n          try {\n            getBean(dep); // 初始化它依赖的Bean\n          }\n          catch (NoSuchBeanDefinitionException ex) {\n            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                "\'" + beanName + "\' depends on missing bean \'" + dep + "\'", ex);\n          }\n        }\n      }\n\n      // 创建Bean实例：单例\n      if (mbd.isSingleton()) {\n        sharedInstance = getSingleton(beanName, () -> {\n          try {\n            // 真正创建bean的方法\n            return createBean(beanName, mbd, args);\n          }\n          catch (BeansException ex) {\n            // Explicitly remove instance from singleton cache: It might have been put there\n            // eagerly by the creation process, to allow for circular reference resolution.\n            // Also remove any beans that received a temporary reference to the bean.\n            destroySingleton(beanName);\n            throw ex;\n          }\n        });\n        beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n      }\n      // 创建Bean实例：原型\n      else if (mbd.isPrototype()) {\n        // It\'s a prototype -> create a new instance.\n        Object prototypeInstance = null;\n        try {\n          beforePrototypeCreation(beanName);\n          prototypeInstance = createBean(beanName, mbd, args);\n        }\n        finally {\n          afterPrototypeCreation(beanName);\n        }\n        beanInstance = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n      }\n      // 创建Bean实例：根据bean的scope创建\n      else {\n        String scopeName = mbd.getScope();\n        if (!StringUtils.hasLength(scopeName)) {\n          throw new IllegalStateException("No scope name defined for bean ´" + beanName + "\'");\n        }\n        Scope scope = this.scopes.get(scopeName);\n        if (scope == null) {\n          throw new IllegalStateException("No Scope registered for scope name \'" + scopeName + "\'");\n        }\n        try {\n          Object scopedInstance = scope.get(beanName, () -> {\n            beforePrototypeCreation(beanName);\n            try {\n              return createBean(beanName, mbd, args);\n            }\n            finally {\n              afterPrototypeCreation(beanName);\n            }\n          });\n          beanInstance = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n        }\n        catch (IllegalStateException ex) {\n          throw new ScopeNotActiveException(beanName, scopeName, ex);\n        }\n      }\n    }\n    catch (BeansException ex) {\n      beanCreation.tag("exception", ex.getClass().toString());\n      beanCreation.tag("message", String.valueOf(ex.getMessage()));\n      cleanupAfterBeanCreationFailure(beanName);\n      throw ex;\n    }\n    finally {\n      beanCreation.end();\n    }\n  }\n\n  return adaptBeanInstance(name, beanInstance, requiredType);\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br"),e("span",{staticClass:"line-number"},[n._v("82")]),e("br"),e("span",{staticClass:"line-number"},[n._v("83")]),e("br"),e("span",{staticClass:"line-number"},[n._v("84")]),e("br"),e("span",{staticClass:"line-number"},[n._v("85")]),e("br"),e("span",{staticClass:"line-number"},[n._v("86")]),e("br"),e("span",{staticClass:"line-number"},[n._v("87")]),e("br"),e("span",{staticClass:"line-number"},[n._v("88")]),e("br"),e("span",{staticClass:"line-number"},[n._v("89")]),e("br"),e("span",{staticClass:"line-number"},[n._v("90")]),e("br"),e("span",{staticClass:"line-number"},[n._v("91")]),e("br"),e("span",{staticClass:"line-number"},[n._v("92")]),e("br"),e("span",{staticClass:"line-number"},[n._v("93")]),e("br"),e("span",{staticClass:"line-number"},[n._v("94")]),e("br"),e("span",{staticClass:"line-number"},[n._v("95")]),e("br"),e("span",{staticClass:"line-number"},[n._v("96")]),e("br"),e("span",{staticClass:"line-number"},[n._v("97")]),e("br"),e("span",{staticClass:"line-number"},[n._v("98")]),e("br"),e("span",{staticClass:"line-number"},[n._v("99")]),e("br"),e("span",{staticClass:"line-number"},[n._v("100")]),e("br"),e("span",{staticClass:"line-number"},[n._v("101")]),e("br"),e("span",{staticClass:"line-number"},[n._v("102")]),e("br"),e("span",{staticClass:"line-number"},[n._v("103")]),e("br"),e("span",{staticClass:"line-number"},[n._v("104")]),e("br"),e("span",{staticClass:"line-number"},[n._v("105")]),e("br"),e("span",{staticClass:"line-number"},[n._v("106")]),e("br"),e("span",{staticClass:"line-number"},[n._v("107")]),e("br"),e("span",{staticClass:"line-number"},[n._v("108")]),e("br"),e("span",{staticClass:"line-number"},[n._v("109")]),e("br"),e("span",{staticClass:"line-number"},[n._v("110")]),e("br"),e("span",{staticClass:"line-number"},[n._v("111")]),e("br"),e("span",{staticClass:"line-number"},[n._v("112")]),e("br"),e("span",{staticClass:"line-number"},[n._v("113")]),e("br"),e("span",{staticClass:"line-number"},[n._v("114")]),e("br"),e("span",{staticClass:"line-number"},[n._v("115")]),e("br"),e("span",{staticClass:"line-number"},[n._v("116")]),e("br"),e("span",{staticClass:"line-number"},[n._v("117")]),e("br"),e("span",{staticClass:"line-number"},[n._v("118")]),e("br"),e("span",{staticClass:"line-number"},[n._v("119")]),e("br"),e("span",{staticClass:"line-number"},[n._v("120")]),e("br"),e("span",{staticClass:"line-number"},[n._v("121")]),e("br"),e("span",{staticClass:"line-number"},[n._v("122")]),e("br"),e("span",{staticClass:"line-number"},[n._v("123")]),e("br"),e("span",{staticClass:"line-number"},[n._v("124")]),e("br"),e("span",{staticClass:"line-number"},[n._v("125")]),e("br"),e("span",{staticClass:"line-number"},[n._v("126")]),e("br"),e("span",{staticClass:"line-number"},[n._v("127")]),e("br"),e("span",{staticClass:"line-number"},[n._v("128")]),e("br"),e("span",{staticClass:"line-number"},[n._v("129")]),e("br"),e("span",{staticClass:"line-number"},[n._v("130")]),e("br"),e("span",{staticClass:"line-number"},[n._v("131")]),e("br"),e("span",{staticClass:"line-number"},[n._v("132")]),e("br"),e("span",{staticClass:"line-number"},[n._v("133")]),e("br"),e("span",{staticClass:"line-number"},[n._v("134")]),e("br"),e("span",{staticClass:"line-number"},[n._v("135")]),e("br"),e("span",{staticClass:"line-number"},[n._v("136")]),e("br"),e("span",{staticClass:"line-number"},[n._v("137")]),e("br"),e("span",{staticClass:"line-number"},[n._v("138")]),e("br"),e("span",{staticClass:"line-number"},[n._v("139")]),e("br"),e("span",{staticClass:"line-number"},[n._v("140")]),e("br"),e("span",{staticClass:"line-number"},[n._v("141")]),e("br"),e("span",{staticClass:"line-number"},[n._v("142")]),e("br"),e("span",{staticClass:"line-number"},[n._v("143")]),e("br"),e("span",{staticClass:"line-number"},[n._v("144")]),e("br"),e("span",{staticClass:"line-number"},[n._v("145")]),e("br"),e("span",{staticClass:"line-number"},[n._v("146")]),e("br"),e("span",{staticClass:"line-number"},[n._v("147")]),e("br")])]),e("p",[n._v("这段代码很长，主要看我加中文注释的方法即可。")]),n._v(" "),e("ul",[e("li",[n._v("解析bean的真正name，如果bean是工厂类，name前缀会加&，需要去掉")]),n._v(" "),e("li",[n._v("无参单例先从缓存中尝试获取")]),n._v(" "),e("li",[n._v("如果bean实例还在创建中，则直接抛出异常")]),n._v(" "),e("li",[n._v("如果bean definition 存在于父的bean工厂中，委派给父Bean工厂获取")]),n._v(" "),e("li",[n._v("标记这个beanName的实例正在创建")]),n._v(" "),e("li",[n._v("确保它的依赖也被初始化")]),n._v(" "),e("li",[n._v("真正创建\n"),e("ul",[e("li",[n._v("单例时")]),n._v(" "),e("li",[n._v("原型时")]),n._v(" "),e("li",[n._v("根据bean的scope创建")])])])]),n._v(" "),e("h1",{attrs:{id:"重点-spring如何解决循环依赖问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重点-spring如何解决循环依赖问题"}},[n._v("#")]),n._v(" 重点：Spring如何解决循环依赖问题")]),n._v(" "),e("hr"),n._v(" "),e("blockquote",[e("p",[n._v("首先我们需要说明，Spring只是解决了单例模式下属性依赖的循环问题；Spring为了解决单例的循环依赖问题，使用了三级缓存。")])]),n._v(" "),e("h3",{attrs:{id:"spring单例模式下的属性依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring单例模式下的属性依赖"}},[n._v("#")]),n._v(" Spring单例模式下的属性依赖")]),n._v(" "),e("p",[n._v("先来看下这三级缓存")]),n._v(" "),e("p",[n._v("这三个属性存在于 DefaultSingletonBeanRegistry 类中")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/** Cache of singleton objects: bean name --\x3e bean instance */\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);\n \n/** Cache of early singleton objects: bean name --\x3e bean instance */\nprivate final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);\n\n/** Cache of singleton factories: bean name --\x3e ObjectFactory */\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("ul",[e("li",[e("strong",[n._v("第一层缓存（singletonObjects）")]),n._v("：单例对象缓存池，已经实例化并且属性赋值，这里的对象是"),e("strong",[n._v("成熟对象")]),n._v("；")]),n._v(" "),e("li",[e("strong",[n._v("第二层缓存（earlySingletonObjects）")]),n._v("：单例对象缓存池，已经实例化但尚未属性赋值，这里的对象是"),e("strong",[n._v("半成品对象")]),n._v("；")]),n._v(" "),e("li",[e("strong",[n._v("第三层缓存（singletonFactories）")]),n._v(": 单例工厂的缓存")])]),n._v(" "),e("p",[n._v("如下是获取单例中")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("protected Object getSingleton(String beanName, boolean allowEarlyReference) {\n  // Spring首先从singletonObjects（一级缓存）中尝试获取\n  Object singletonObject = this.singletonObjects.get(beanName);\n  // 若是获取不到而且对象在建立中，则尝试从earlySingletonObjects(二级缓存)中获取\n  if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n    synchronized (this.singletonObjects) {\n        singletonObject = this.earlySingletonObjects.get(beanName);\n        if (singletonObject == null && allowEarlyReference) {\n          ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n          if (singletonFactory != null) {\n            //若是仍是获取不到而且容许从singletonFactories经过getObject获取，则经过singletonFactory.getObject()(三级缓存)获取\n              singletonObject = singletonFactory.getObject();\n              //若是获取到了则将singletonObject放入到earlySingletonObjects,也就是将三级缓存提高到二级缓存中\n              this.earlySingletonObjects.put(beanName, singletonObject);\n              this.singletonFactories.remove(beanName);\n          }\n        }\n    }\n  }\n  return (singletonObject != NULL_OBJECT ? singletonObject : null);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br")])]),e("p",[n._v("补充一些方法和参数")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("isSingletonCurrentlyInCreation()")]),n._v("：判断当前单例bean是否正在建立中，也就是没有初始化完成(好比A的构造器依赖了B对象因此得先去建立B对象， 或则在A的populateBean过程当中依赖了B对象，得先去建立B对象，这时的A就是处于建立中的状态。)")]),n._v(" "),e("li",[e("code",[n._v("allowEarlyReference")]),n._v(" ：是否容许从singletonFactories中经过getObject拿到对象")])]),n._v(" "),e("p",[n._v("分析getSingleton()的整个过程，Spring首先从一级缓存singletonObjects中获取。若是获取不到，而且对象正在建立中，就再从二级缓存earlySingletonObjects中获取。若是仍是获取不到且容许singletonFactories经过getObject()获取，就从三级缓存singletonFactory.getObject()(三级缓存)获取，若是获取到了则从三级缓存移动到了二级缓存。")]),n._v(" "),e("p",[n._v("从上面三级缓存的分析，咱们能够知道，Spring解决循环依赖的诀窍就在于singletonFactories这个三级cache。这个cache的类型是ObjectFactory，定义以下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public interface ObjectFactory<T> {\n    T getObject() throws BeansException;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("在bean建立过程当中，有两处比较重要的匿名内部类实现了该接口。一处是Spring利用其建立bean的时候，另外一处就是:")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("addSingletonFactory(beanName, new ObjectFactory<Object>() {\n   @Override   public Object getObject() throws BeansException {\n      return getEarlyBeanReference(beanName, mbd, bean);\n   }});\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("此处就是解决循环依赖的关键，这段代码发生在createBeanInstance以后，也就是说单例对象此时已经被建立出来的。这个对象已经被生产出来了，虽然还不完美（尚未进行初始化的第二步和第三步），可是已经能被人认出来了（根据对象引用能定位到堆中的对象），因此Spring此时将这个对象提早曝光出来让你们认识，让你们使用。")]),n._v(" "),e("p",[n._v("好比“A对象setter依赖B对象，B对象setter依赖A对象”，A首先完成了初始化的第一步，而且将本身提早曝光到singletonFactories中，此时进行初始化的第二步，发现本身依赖对象B，此时就尝试去get(B)，发现B尚未被create，因此走create流程，B在初始化第一步的时候发现本身依赖了对象A，因而尝试get(A)，尝试一级缓存singletonObjects(确定没有，由于A还没初始化彻底)，尝试二级缓存earlySingletonObjects（也没有），尝试三级缓存singletonFactories，因为A经过ObjectFactory将本身提早曝光了，因此B可以经过ObjectFactory.getObject拿到A对象(半成品)，B拿到A对象后顺利完成了初始化阶段一、二、三，彻底初始化以后将本身放入到一级缓存singletonObjects中。此时返回A中，A此时能拿到B的对象顺利完成本身的初始化阶段二、三，最终A也完成了初始化，进去了一级缓存singletonObjects中，并且更加幸运的是，因为B拿到了A的对象引用，因此B如今hold住的A对象完成了初始化。")]),n._v(" "),e("h3",{attrs:{id:"spring为何不能解决非单例属性之外的循环依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring为何不能解决非单例属性之外的循环依赖"}},[n._v("#")]),n._v(" Spring为何不能解决非单例属性之外的循环依赖？")]),n._v(" "),e("blockquote",[e("p",[n._v("通过以下几个问题，辅助我们进一步理解。")])]),n._v(" "),e("h4",{attrs:{id:"spring为什么不能解决构造器的循环依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring为什么不能解决构造器的循环依赖"}},[n._v("#")]),n._v(" Spring为什么不能解决构造器的循环依赖？")]),n._v(" "),e("p",[n._v("构造器注入形成的循环依赖： 也就是beanB需要在beanA的构造函数中完成初始化，beanA也需要在beanB的构造函数中完成初始化，这种情况的结果就是两个bean都不能完成初始化，循环依赖难以解决。")]),n._v(" "),e("p",[n._v("Spring解决循环依赖主要是依赖三级缓存，但是的"),e("strong",[n._v("在调用构造方法之前还未将其放入三级缓存之中")]),n._v("，因此后续的依赖调用构造方法的时候并不能从三级缓存中获取到依赖的Bean，因此不能解决。")]),n._v(" "),e("h4",{attrs:{id:"spring为什么不能解决prototype作用域循环依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring为什么不能解决prototype作用域循环依赖"}},[n._v("#")]),n._v(" Spring为什么不能解决prototype作用域循环依赖？")]),n._v(" "),e("p",[n._v("这种循环依赖同样无法解决，因为spring不会缓存‘prototype’作用域的bean，而spring中循环依赖的解决正是通过缓存来实现的。")]),n._v(" "),e("h4",{attrs:{id:"spring为什么不能解决多例的循环依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring为什么不能解决多例的循环依赖"}},[n._v("#")]),n._v(" Spring为什么不能解决多例的循环依赖？")]),n._v(" "),e("p",[n._v("多实例Bean是每次调用一次getBean都会执行一次构造方法并且给属性赋值，根本没有三级缓存，因此不能解决循环依赖。")]),n._v(" "),e("h3",{attrs:{id:"那么其它循环依赖如何解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#那么其它循环依赖如何解决"}},[n._v("#")]),n._v(" 那么其它循环依赖如何解决？")]),n._v(" "),e("blockquote",[e("p",[n._v("那么实际开发中，类似的依赖是如何解决？")])]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("生成代理对象产生的循环依赖")])])]),n._v(" "),e("p",[n._v("这类循环依赖问题解决方法很多，主要有：")]),n._v(" "),e("ol",[e("li",[n._v("使用@Lazy注解，延迟加载")]),n._v(" "),e("li",[n._v("使用@DependsOn注解，指定加载先后关系")]),n._v(" "),e("li",[n._v("修改文件名称，改变循环依赖类的加载顺序")])]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("使用@DependsOn产生的循环依赖")])])]),n._v(" "),e("p",[n._v("这类循环依赖问题要找到@DependsOn注解循环依赖的地方，迫使它不循环依赖就可以解决问题。")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("多例循环依赖")])])]),n._v(" "),e("p",[n._v("这类循环依赖问题可以通过把bean改成单例的解决。")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("构造器循环依赖")])])]),n._v(" "),e("p",[n._v("这类循环依赖问题可以通过使用@Lazy注解解决。")]),n._v(" "),e("h1",{attrs:{id:"重点-spring中bean的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重点-spring中bean的生命周期"}},[n._v("#")]),n._v(" 重点：Spring中Bean的生命周期")]),n._v(" "),e("hr"),n._v(" "),e("blockquote",[e("p",[n._v("Spring 只帮我们管理单例模式 Bean 的"),e("strong",[n._v("完整")]),n._v("生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。")])]),n._v(" "),e("p",[n._v("Spring 容器可以管理 singleton 作用域 Bean 的生命周期，在此作用域下，Spring 能够精确地知道该 Bean 何时被创建，何时初始化完成，以及何时被销毁。")]),n._v(" "),e("p",[n._v("而对于 prototype 作用域的 Bean，Spring 只负责创建，当容器创建了 Bean 的实例后，Bean 的实例就交给客户端代码管理，Spring 容器将不再跟踪其生命周期。每次客户端请求 prototype 作用域的 Bean 时，Spring 容器都会创建一个新的实例，并且不会管那些被配置成 prototype 作用域的 Bean 的生命周期。")]),n._v(" "),e("p",[n._v("了解 Spring 生命周期的意义就在于，"),e("strong",[n._v("可以利用 Bean 在其存活期间的指定时刻完成一些相关操作")]),n._v("。这种时刻可能有很多，但一般情况下，会在 Bean 被初始化后和被销毁前执行一些相关操作。")]),n._v(" "),e("h3",{attrs:{id:"spring-bean生命周期流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean生命周期流程"}},[n._v("#")]),n._v(" Spring Bean生命周期流程")]),n._v(" "),e("blockquote",[e("p",[n._v("在 Spring 中，Bean 的生命周期是一个很复杂的执行过程，我们可以利用 Spring 提供的方法定制 Bean 的创建过程。")])]),n._v(" "),e("p",[e("strong",[n._v("Spring 容器中 Bean 的生命周期流程")])]),n._v(" "),e("p",[e("img",{attrs:{src:a(270),alt:""}})]),n._v(" "),e("ul",[e("li",[n._v("如果 BeanFactoryPostProcessor 和 Bean 关联, 则调用postProcessBeanFactory方法.(即首"),e("strong",[n._v("先尝试从Bean工厂中获取Bean")]),n._v(")")]),n._v(" "),e("li",[n._v("如果 InstantiationAwareBeanPostProcessor 和 Bean 关联，则调用postProcessBeforeInstantiation方法")]),n._v(" "),e("li",[n._v("根据配置情况调用 Bean 构造方法"),e("strong",[n._v("实例化 Bean")]),n._v("。")]),n._v(" "),e("li",[n._v("利用依赖注入完成 Bean 中所有"),e("strong",[n._v("属性值的配置注入")]),n._v("。")]),n._v(" "),e("li",[n._v("如果 InstantiationAwareBeanPostProcessor 和 Bean 关联，则调用postProcessAfterInstantiation方法和postProcessProperties")]),n._v(" "),e("li",[e("strong",[n._v("调用xxxAware接口")]),n._v(" (上图只是给了几个例子)\n"),e("ul",[e("li",[e("strong",[n._v("第一类Aware接口")]),n._v(" "),e("ul",[e("li",[n._v("如果 Bean 实现了 BeanNameAware 接口，则 Spring 调用 Bean 的 setBeanName() 方法传入当前 Bean 的 id 值。")]),n._v(" "),e("li",[n._v("如果 Bean 实现了 BeanClassLoaderAware 接口，则 Spring 调用 setBeanClassLoader() 方法传入classLoader的引用。")]),n._v(" "),e("li",[n._v("如果 Bean 实现了 BeanFactoryAware 接口，则 Spring 调用 setBeanFactory() 方法传入当前工厂实例的引用。")])])]),n._v(" "),e("li",[e("strong",[n._v("第二类Aware接口")]),n._v(" "),e("ul",[e("li",[n._v("如果 Bean 实现了 EnvironmentAware 接口，则 Spring 调用 setEnvironment() 方法传入当前 Environment 实例的引用。")]),n._v(" "),e("li",[n._v("如果 Bean 实现了 EmbeddedValueResolverAware 接口，则 Spring 调用 setEmbeddedValueResolver() 方法传入当前 StringValueResolver 实例的引用。")]),n._v(" "),e("li",[n._v("如果 Bean 实现了 ApplicationContextAware 接口，则 Spring 调用 setApplicationContext() 方法传入当前 ApplicationContext 实例的引用。")]),n._v(" "),e("li",[n._v("...")])])])])]),n._v(" "),e("li",[n._v("如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的预初始化方法 postProcessBeforeInitialzation() 对 Bean 进行加工操作，此处非常重要，Spring 的 AOP 就是利用它实现的。")]),n._v(" "),e("li",[n._v("如果 Bean 实现了 InitializingBean 接口，则 Spring 将调用 afterPropertiesSet() 方法。(或者有执行@PostConstruct注解的方法)")]),n._v(" "),e("li",[n._v("如果在配置文件中通过 "),e("strong",[n._v("init-method")]),n._v(" 属性指定了初始化方法，则调用该初始化方法。")]),n._v(" "),e("li",[n._v("如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的初始化方法 postProcessAfterInitialization()。此时，Bean 已经可以被应用系统使用了。")]),n._v(" "),e("li",[n._v("如果在 "),e("code",[n._v("<bean>")]),n._v(' 中指定了该 Bean 的作用范围为 scope="singleton"，则将该 Bean 放入 Spring IoC 的缓存池中，将触发 Spring 对该 Bean 的生命周期管理；如果在 '),e("code",[n._v("<bean>")]),n._v(' 中指定了该 Bean 的作用范围为 scope="prototype"，则将该 Bean 交给调用者，调用者管理该 Bean 的生命周期，Spring 不再管理该 Bean。')]),n._v(" "),e("li",[n._v("如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory() 方法将 Spring 中的 Bean 销毁；(或者有执行@PreDestroy注解的方法)")]),n._v(" "),e("li",[n._v("如果在配置文件中通过 "),e("strong",[n._v("destory-method")]),n._v(" 属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。")])]),n._v(" "),e("p",[e("strong",[n._v("Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类")]),n._v("：(结合上图，需要有如下顶层思维)")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("Bean自身的方法")]),n._v("： 这个包括了Bean本身调用的方法和通过配置文件中"),e("code",[n._v("<bean>")]),n._v("的init-method和destroy-method指定的方法")]),n._v(" "),e("li",[e("strong",[n._v("Bean级生命周期接口方法")]),n._v("： 这个包括了BeanNameAware、BeanFactoryAware、ApplicationContextAware；当然也包括InitializingBean和DiposableBean这些接口的方法（可以被@PostConstruct和@PreDestroy注解替代)")]),n._v(" "),e("li",[e("strong",[n._v("容器级生命周期接口方法")]),n._v("： 这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。")]),n._v(" "),e("li",[e("strong",[n._v("工厂后处理器接口方法")]),n._v("： 这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。")])]),n._v(" "),e("h3",{attrs:{id:"spring-bean生命周期案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean生命周期案例"}},[n._v("#")]),n._v(" Spring Bean生命周期案例")]),n._v(" "),e("blockquote",[e("p",[n._v("我们通过一个例子来验证上面的整个流程")])]),n._v(" "),e("p",[n._v("定义Bean（这里是User）, 并让它实现BeanNameAware,BeanFactoryAware,ApplicationContextAware接口和InitializingBean,DisposableBean接口：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package tech.pdai.springframework.entity;\n\nimport lombok.ToString;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\n\n/**\n * @author pdai\n */\n@Slf4j\n@ToString\npublic class User implements BeanFactoryAware, BeanNameAware, ApplicationContextAware,\n        InitializingBean, DisposableBean {\n    /**\n     * user\'s name.\n     */\n    private String name;\n\n    /**\n     * user\'s age.\n     */\n    private int age;\n\n    /**\n     * bean factory.\n     */\n    private BeanFactory beanFactory;\n\n    /**\n     * application context.\n     */\n    private ApplicationContext applicationContext;\n\n    /**\n     * bean name.\n     */\n    private String beanName;\n\n    public User() {\n        log.info("execute User#new User()");\n    }\n\n    public void setName(String name) {\n        log.info("execute User#setName({})", name);\n        this.name = name;\n    }\n\n    public void setAge(int age) {\n        log.info("execute User#setAge({})", age);\n        this.age = age;\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        log.info("execute BeanFactoryAware#setBeanFactory");\n        this.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void setBeanName(String s) {\n        log.info("execute BeanNameAware#setBeanName");\n        this.beanName = s;\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        log.info("execute ApplicationContextAware#setApplicationContext");\n        this.applicationContext = applicationContext;\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        log.info("execute DisposableBean#destroy");\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        log.info("execute InitializingBean#afterPropertiesSet");\n    }\n\n\n    public void doInit() {\n        log.info("execute User#doInit");\n    }\n\n    public void doDestroy() {\n        log.info("execute User#doDestroy");\n    }\n\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br"),e("span",{staticClass:"line-number"},[n._v("82")]),e("br"),e("span",{staticClass:"line-number"},[n._v("83")]),e("br"),e("span",{staticClass:"line-number"},[n._v("84")]),e("br"),e("span",{staticClass:"line-number"},[n._v("85")]),e("br"),e("span",{staticClass:"line-number"},[n._v("86")]),e("br"),e("span",{staticClass:"line-number"},[n._v("87")]),e("br"),e("span",{staticClass:"line-number"},[n._v("88")]),e("br"),e("span",{staticClass:"line-number"},[n._v("89")]),e("br"),e("span",{staticClass:"line-number"},[n._v("90")]),e("br"),e("span",{staticClass:"line-number"},[n._v("91")]),e("br"),e("span",{staticClass:"line-number"},[n._v("92")]),e("br"),e("span",{staticClass:"line-number"},[n._v("93")]),e("br"),e("span",{staticClass:"line-number"},[n._v("94")]),e("br"),e("span",{staticClass:"line-number"},[n._v("95")]),e("br"),e("span",{staticClass:"line-number"},[n._v("96")]),e("br"),e("span",{staticClass:"line-number"},[n._v("97")]),e("br")])]),e("p",[n._v("定义BeanFactoryPostProcessor的实现类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n * @author pdai\n */\n@Slf4j\n@Component\npublic class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException {\n        log.info("execute BeanFactoryPostProcessor#postProcessBeanFactory");\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("p",[n._v("定义InstantiationAwareBeanPostProcessor的实现类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n * @author pdai\n */\n@Slf4j\n@Component\npublic class MyInstantiationAwareBeanPostProcessor implements InstantiationAwareBeanPostProcessor {\n    @Override\n    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {\n        log.info("execute InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation for {}", beanName);\n        return InstantiationAwareBeanPostProcessor.super.postProcessBeforeInstantiation(beanClass, beanName);\n    }\n\n    @Override\n    public boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {\n        log.info("execute InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation for {}", beanName);\n        return InstantiationAwareBeanPostProcessor.super.postProcessAfterInstantiation(bean, beanName);\n    }\n\n    @Override\n    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) throws BeansException {\n        log.info("execute InstantiationAwareBeanPostProcessor#postProcessProperties for {}", beanName);\n        return InstantiationAwareBeanPostProcessor.super.postProcessProperties(pvs, bean, beanName);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br")])]),e("p",[n._v("定义BeanPostProcessor的实现类")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n * @author pdai\n */\n@Slf4j\n@Component\npublic class MyBeanPostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        log.info("execute BeanPostProcessor#postProcessBeforeInitialization for {}", beanName);\n        return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName);\n    }\n\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        log.info("execute BeanPostProcessor#postProcessAfterInitialization for {}", beanName);\n        return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])]),e("p",[n._v("通过Java配置方式初始化Bean")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n * @author pdai\n */\n@Configuration\npublic class BeansConfig {\n\n    @Bean(name = "user", initMethod = "doInit", destroyMethod = "doDestroy")\n    public User create() {\n        User user = new User();\n        user.setName("pdai");\n        user.setAge(18);\n        return user;\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("p",[n._v("测试的主方法")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n * Cglib proxy demo.\n *\n * @author pdai\n */\n@Slf4j\npublic class App {\n\n    /**\n     * main interface.\n     *\n     * @param args args\n     */\n    public static void main(String[] args) {\n        log.info("Init application context");\n        // create and configure beans\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n                "tech.pdai.springframework");\n\n        // retrieve configured instance\n        User user = (User) context.getBean("user");\n\n        // print info from beans\n        log.info(user.toString());\n\n        log.info("Shutdown application context");\n        context.registerShutdownHook();\n    }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br")])]),e("p",[n._v("输出结果（剔除无关输出）：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("12:44:42.547 [main] INFO tech.pdai.springframework.App - Init application context\n...\n12:44:43.134 [main] INFO tech.pdai.springframework.processor.MyBeanFactoryPostProcessor - execute BeanFactoryPostProcessor#postProcessBeanFactory\n...\n12:44:43.216 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'user'\n12:44:43.216 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation for user\n12:44:43.236 [main] INFO tech.pdai.springframework.entity.User - execute User#new User()\n12:44:43.237 [main] INFO tech.pdai.springframework.entity.User - execute User#setName(pdai)\n12:44:43.237 [main] INFO tech.pdai.springframework.entity.User - execute User#setAge(18)\n12:44:43.237 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation for user\n12:44:43.237 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessProperties for user\n12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute BeanNameAware#setBeanName\n12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute BeanFactoryAware#setBeanFactory\n12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute ApplicationContextAware#setApplicationContext\n12:44:43.242 [main] INFO tech.pdai.springframework.processor.MyBeanPostProcessor - execute BeanPostProcessor#postProcessBeforeInitialization for user\n12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute InitializingBean#afterPropertiesSet\n12:44:43.243 [main] INFO tech.pdai.springframework.entity.User - execute User#doInit\n12:44:43.243 [main] INFO tech.pdai.springframework.processor.MyBeanPostProcessor - execute BeanPostProcessor#postProcessAfterInitialization for user\n12:44:43.270 [main] INFO tech.pdai.springframework.App - User(name=pdai, age=18)\n12:44:43.270 [main] INFO tech.pdai.springframework.App - Shutdown application context\n12:44:43.276 [SpringContextShutdownHook] INFO tech.pdai.springframework.entity.User - execute DisposableBean#destroy\n12:44:43.276 [SpringContextShutdownHook] INFO tech.pdai.springframework.entity.User - execute User#doDestroy\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br")])]),e("h3",{attrs:{id:"spring-bean生命周期源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean生命周期源码"}},[n._v("#")]),n._v(" Spring Bean生命周期源码")]),n._v(" "),e("h1",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("https://juejin.cn/post/6844903843596107790")]),n._v(" "),e("p",[n._v("https://www.zhihu.com/question/438247718/answer/1730527725)")])])}),[],!1,null,null,null);e.default=t.exports},970:function(n,e,a){n.exports=a.p+"assets/img/spring-framework-ioc-source-74.563c957e.png"},971:function(n,e,a){n.exports=a.p+"assets/img/spring-framework-ioc-source-100.a0bb6ee2.png"}}]);