(window.webpackJsonp=window.webpackJsonp||[]).push([[391],{3461:function(a,e,r){a.exports=r.p+"assets/img/sharding-x-trans-xa-2.7854034a.png"},3462:function(a,e,r){a.exports=r.p+"assets/img/sharding-x-trans-xa-1.a6aec2ee.png"},4227:function(a,e,r){"use strict";r.r(e);var s=r(7),t=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"shardingsphere详解-事务实现原理之两阶段事务xa"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere详解-事务实现原理之两阶段事务xa"}},[a._v("#")]),a._v(" ShardingSphere详解 - 事务实现原理之两阶段事务XA")]),a._v(" "),e("p",[a._v("=======================================================================")]),a._v(" "),e("blockquote",[e("p",[a._v("本文主要介绍ShardingSphere分布式事务XA的实现原理; 这篇文章主要转载自"),e("a",{attrs:{href:"https://shardingsphere.apache.org/document/5.1.0/cn/reference/transaction/base-transaction-seata/",target:"_blank",rel:"noopener noreferrer"}},[a._v("ShardingSphere官方 在新窗口打开"),e("OutboundLink")],1),a._v("网站（V5.1.0版本）。@pdai")])]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#shardingsphere%E8%AF%A6%E8%A7%A3---%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8B%E4%B8%A4%E9%98%B6%E6%AE%B5%E4%BA%8B%E5%8A%A1xa"}},[a._v("ShardingSphere详解 - 事务实现原理之两阶段事务XA")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%B8%A4%E9%98%B6%E6%AE%B5%E4%BA%8B%E5%8A%A1xa%E4%BB%8B%E7%BB%8D"}},[a._v("两阶段事务XA介绍")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"}},[a._v("实现原理")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%BC%80%E5%90%AF%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1"}},[a._v("开启全局事务")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E6%89%A7%E8%A1%8C%E7%9C%9F%E5%AE%9E%E5%88%86%E7%89%87sql"}},[a._v("执行真实分片SQL")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E6%8F%90%E4%BA%A4%E6%88%96%E5%9B%9E%E6%BB%9A%E4%BA%8B%E5%8A%A1"}},[a._v("提交或回滚事务")])])])])])])]),a._v(" "),e("h1",{attrs:{id:"两阶段事务xa介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两阶段事务xa介绍"}},[a._v("#")]),a._v(" 两阶段事务XA介绍")]),a._v(" "),e("hr"),a._v(" "),e("p",[a._v("两阶段事务提交采用的是 X/OPEN 组织所定义的 DTP 模型所抽象的 AP（应用程序）, TM（事务管理器）和 RM（资源管理器） 概念来保证分布式事务的强一致性。 其中 TM 与 RM 间采用 XA 的协议进行双向通信。 与传统的本地事务相比，XA 事务增加了准备阶段，数据库除了被动接受提交指令外，还可以反向通知调用方事务是否可以被提交。 TM 可以收集所有分支事务的准备结果，并于最后进行原子提交，以保证事务的强一致性。")]),a._v(" "),e("p",[e("img",{attrs:{src:r(3461),alt:""}})]),a._v(" "),e("p",[a._v("Java 通过定义 JTA 接口实现了 XA 模型，JTA 接口中的 ResourceManager 需要数据库厂商提供 XA 驱动实现， TransactionManager 则需要事务管理器的厂商实现，传统的事务管理器需要同应用服务器绑定，因此使用的成本很高。 而嵌入式的事务管器可以通过 jar 形式提供服务，同 Apache ShardingSphere 集成后，可保证分片后跨库事务强一致性。")]),a._v(" "),e("p",[a._v("通常，只有使用了事务管理器厂商所提供的 XA 事务连接池，才能支持 XA 的事务。 Apache ShardingSphere 在整合 XA 事务时，采用分离 XA 事务管理和连接池管理的方式，做到对应用程序的零侵入。")]),a._v(" "),e("h1",{attrs:{id:"实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[a._v("#")]),a._v(" 实现原理")]),a._v(" "),e("hr"),a._v(" "),e("blockquote",[e("p",[a._v("XAShardingSphereTransactionManager 为 Apache ShardingSphere 的分布式事务的 XA 实现类。 它主要负责对多数据源进行管理和适配，并且将相应事务的开启、提交和回滚操作委托给具体的 XA 事务管理器。")])]),a._v(" "),e("p",[e("img",{attrs:{src:r(3462),alt:""}})]),a._v(" "),e("h3",{attrs:{id:"开启全局事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开启全局事务"}},[a._v("#")]),a._v(" 开启全局事务")]),a._v(" "),e("p",[a._v("收到接入端的 set autoCommit=0 时，XAShardingSphereTransactionManager 将调用具体的 XA 事务管理器开启 XA 全局事务，以 XID 的形式进行标记。")]),a._v(" "),e("h3",{attrs:{id:"执行真实分片sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行真实分片sql"}},[a._v("#")]),a._v(" 执行真实分片SQL")]),a._v(" "),e("p",[a._v("XAShardingSphereTransactionManager 将数据库连接所对应的 XAResource 注册到当前 XA 事务中之后，事务管理器会在此阶段发送 XAResource.start 命令至数据库。 数据库在收到 XAResource.end 命令之前的所有 SQL 操作，会被标记为 XA 事务。")]),a._v(" "),e("p",[a._v("例如:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('XAResource1.start             ## Enlist阶段执行\nstatement.execute("sql1");    ## 模拟执行一个分片SQL1\nstatement.execute("sql2");    ## 模拟执行一个分片SQL2\nXAResource1.end               ## 提交阶段执行\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("示例中的 sql1 和 sql2 将会被标记为 XA 事务。")]),a._v(" "),e("h3",{attrs:{id:"提交或回滚事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交或回滚事务"}},[a._v("#")]),a._v(" 提交或回滚事务")]),a._v(" "),e("p",[a._v("XAShardingSphereTransactionManager 在接收到接入端的提交命令后，会委托实际的 XA 事务管理进行提交动作， 事务管理器将收集到的当前线程中所有注册的 XAResource，并发送 XAResource.end 指令，用以标记此 XA 事务边界。 接着会依次发送 prepare 指令，收集所有参与 XAResource 投票。 若所有 XAResource 的反馈结果均为正确，则调用 commit 指令进行最终提交； 若有任意 XAResource 的反馈结果不正确，则调用 rollback 指令进行回滚。 在事务管理器发出提交指令后，任何 XAResource 产生的异常都会通过恢复日志进行重试，以保证提交阶段的操作原子性，和数据强一致性。")]),a._v(" "),e("p",[a._v("例如:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("XAResource1.prepare           ## ack: yes\nXAResource2.prepare           ## ack: yes\nXAResource1.commit\nXAResource2.commit\n\nXAResource1.prepare           ## ack: yes\nXAResource2.prepare           ## ack: no\nXAResource1.rollback\nXAResource2.rollback\n```)")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);