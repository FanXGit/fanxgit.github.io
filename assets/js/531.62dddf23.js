(window.webpackJsonp=window.webpackJsonp||[]).push([[531],{3660:function(a,s,n){"use strict";n.r(s);var e=n(7),t=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"springboot入门-开发中还有哪些常用注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springboot入门-开发中还有哪些常用注解"}},[a._v("#")]),a._v(" SpringBoot入门 - 开发中还有哪些常用注解")]),a._v(" "),s("blockquote",[s("p",[a._v("本文主要介绍一些SpringBoot中常用的注解。@pdai")])]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#springboot%E5%85%A5%E9%97%A8---%E5%BC%80%E5%8F%91%E4%B8%AD%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3"}},[a._v("SpringBoot入门 - 开发中还有哪些常用注解")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#spring-boot-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3"}},[a._v("Spring Boot 常用注解")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#springbootapplication"}},[a._v("@SpringBootApplication")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#enableautoconfiguration"}},[a._v("@EnableAutoConfiguration")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#importresource"}},[a._v("@ImportResource")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#value"}},[a._v("@Value")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#configurationpropertiesprefixperson"}},[a._v('@ConfigurationProperties(prefix="person")')])]),a._v(" "),s("li",[s("a",{attrs:{href:"#enableconfigurationproperties"}},[a._v("@EnableConfigurationProperties")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#restcontroller"}},[a._v("@RestController")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#requestmappingapi2copper"}},[a._v('@RequestMapping("/api2/copper")')])]),a._v(" "),s("li",[s("a",{attrs:{href:"#requestparam"}},[a._v("@RequestParam")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#responsebody"}},[a._v("@ResponseBody")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#bean"}},[a._v("@Bean")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#service"}},[a._v("@Service")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#controller"}},[a._v("@Controller")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#repository"}},[a._v("@Repository")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#component"}},[a._v("@Component")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#postconstruct"}},[a._v("@PostConstruct")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#pathvariable"}},[a._v("@PathVariable")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#componentscan"}},[a._v("@ComponentScan")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#enablezuulproxy"}},[a._v("@EnableZuulProxy")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#autowired"}},[a._v("@Autowired")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#configuration"}},[a._v("@Configuration")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#importconfig1class"}},[a._v("@Import(Config1.class)")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#order"}},[a._v("@Order")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#conditionalonexpression"}},[a._v("@ConditionalOnExpression")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#conditionalonproperty"}},[a._v("@ConditionalOnProperty")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#conditionalonclass"}},[a._v("@ConditionalOnClass")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#conditionalonmisssingclassapplicationmanagerclass"}},[a._v("@ConditionalOnMisssingClass({ApplicationManager.class})")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#conditiononmissingbeanname--example"}},[a._v('@ConditionOnMissingBean(name = "example")')])])])])])])]),a._v(" "),s("h1",{attrs:{id:"spring-boot-常用注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-常用注解"}},[a._v("#")]),a._v(" Spring Boot 常用注解")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"springbootapplication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[a._v("#")]),a._v(" @SpringBootApplication")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\npublic @interface SpringBootApplication {\n\n\t/**\n\t * Exclude specific auto-configuration classes such that they will never be applied.\n\t * @return the classes to exclude\n\t */\n\tClass<?>[] exclude() default {};\n\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br")])]),s("p",[a._v("定义在main方法入口类处，用于启动sping boot应用项目")]),a._v(" "),s("h3",{attrs:{id:"enableautoconfiguration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enableautoconfiguration"}},[a._v("#")]),a._v(" @EnableAutoConfiguration")]),a._v(" "),s("p",[a._v("让spring boot根据类路径中的jar包依赖当前项目进行自动配置")]),a._v(" "),s("p",[a._v("在src/main/resources的META-INF/spring.factories")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration\n\n若有多个自动配置，用“，”隔开\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"importresource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#importresource"}},[a._v("#")]),a._v(" @ImportResource")]),a._v(" "),s("p",[a._v("加载xml配置，一般是放在启动main类上")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@ImportResource("classpath*:/spring/*.xml")  单个\n\n@ImportResource({"classpath*:/spring/1.xml","classpath*:/spring/2.xml"})   多个\n\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[a._v("#")]),a._v(" @Value")]),a._v(" "),s("p",[a._v("application.properties定义属性，直接使用@Value注入即可")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class A{\n\t @Value("${push.start:0}")    如果缺失，默认值为0\n     private Long  id;\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"configurationproperties-prefix-person"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configurationproperties-prefix-person"}},[a._v("#")]),a._v(' @ConfigurationProperties(prefix="person")')]),a._v(" "),s("p",[a._v("可以新建一个properties文件，ConfigurationProperties的属性prefix指定properties的配置的前缀，通过location指定properties文件的位置")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@ConfigurationProperties(prefix="person")\npublic class PersonProperties {\n\t\n\tprivate String name ;\n\tprivate int age;\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h3",{attrs:{id:"enableconfigurationproperties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enableconfigurationproperties"}},[a._v("#")]),a._v(" @EnableConfigurationProperties")]),a._v(" "),s("p",[a._v("用 @EnableConfigurationProperties注解使 @ConfigurationProperties生效，并从IOC容器中获取bean。")]),a._v(" "),s("p",[a._v("https://blog.csdn.net/u010502101/article/details/78758330")]),a._v(" "),s("h3",{attrs:{id:"restcontroller"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restcontroller"}},[a._v("#")]),a._v(" @RestController")]),a._v(" "),s("p",[a._v("组合@Controller和@ResponseBody，当你开发一个和页面交互数据的控制时，比如bbs-web的api接口需要此注解")]),a._v(" "),s("h3",{attrs:{id:"requestmapping-api2-copper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-api2-copper"}},[a._v("#")]),a._v(' @RequestMapping("/api2/copper")')]),a._v(" "),s("p",[a._v("用来映射web请求(访问路径和参数)、处理类和方法，可以注解在类或方法上。注解在方法上的路径会继承注解在类上的路径。")]),a._v(" "),s("p",[a._v("produces属性: 定制返回的response的媒体类型和字符集，或需返回值是json对象")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@RequestMapping(value="/api2/copper",produces="application/json;charset=UTF-8",method = RequestMethod.POST)\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"requestparam"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestparam"}},[a._v("#")]),a._v(" @RequestParam")]),a._v(" "),s("p",[a._v("获取request请求的参数值")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(' public List<CopperVO> getOpList(HttpServletRequest request,\n                                    @RequestParam(value = "pageIndex", required = false) Integer pageIndex,\n                                    @RequestParam(value = "pageSize", required = false) Integer pageSize) {\n \n  }\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"responsebody"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#responsebody"}},[a._v("#")]),a._v(" @ResponseBody")]),a._v(" "),s("p",[a._v("支持将返回值放在response体内，而不是返回一个页面。比如Ajax接口，可以用此注解返回数据而不是页面。此注解可以放置在返回值前或方法前。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("另一个玩法，可以不用@ResponseBody。\n继承FastJsonHttpMessageConverter类并对writeInternal方法扩展，在spring响应结果时，再次拦截、加工结果\n// stringResult: json返回结果\n//HttpOutputMessage outputMessage\n\n byte[] payload = stringResult.getBytes();\n outputMessage.getHeaders().setContentType(META_TYPE);\n outputMessage.getHeaders().setContentLength(payload.length);\n outputMessage.getBody().write(payload);\n outputMessage.getBody().flush();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h3",{attrs:{id:"bean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean"}},[a._v("#")]),a._v(" @Bean")]),a._v(" "),s("p",[a._v('@Bean(name="bean的名字",initMethod="初始化时调用方法名字",destroyMethod="close")')]),a._v(" "),s("p",[a._v("定义在方法上，在容器内初始化一个bean实例类。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Bean(destroyMethod="close")\n@ConditionalOnMissingBean\npublic PersonService registryService() {\n\t\treturn new PersonService();\n\t}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h3",{attrs:{id:"service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[a._v("#")]),a._v(" @Service")]),a._v(" "),s("p",[a._v("用于标注业务层组件")]),a._v(" "),s("h3",{attrs:{id:"controller"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[a._v("#")]),a._v(" @Controller")]),a._v(" "),s("p",[a._v("用于标注控制层组件(如struts中的action)")]),a._v(" "),s("h3",{attrs:{id:"repository"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[a._v("#")]),a._v(" @Repository")]),a._v(" "),s("p",[a._v("用于标注数据访问组件，即DAO组件")]),a._v(" "),s("h3",{attrs:{id:"component"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[a._v("#")]),a._v(" @Component")]),a._v(" "),s("p",[a._v("泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。")]),a._v(" "),s("h3",{attrs:{id:"postconstruct"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postconstruct"}},[a._v("#")]),a._v(" @PostConstruct")]),a._v(" "),s("p",[a._v("spring容器初始化时，要执行该方法")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@PostConstruct  \npublic void init() {   \n}   \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"pathvariable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pathvariable"}},[a._v("#")]),a._v(" @PathVariable")]),a._v(" "),s("p",[a._v("用来获得请求url中的动态参数")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Controller  \npublic class TestController {  \n\n     @RequestMapping(value="/user/{userId}/roles/{roleId}",method = RequestMethod.GET)  \n     public String getLogin(@PathVariable("userId") String userId,  \n         @PathVariable("roleId") String roleId){\n           \n         System.out.println("User Id : " + userId);  \n         System.out.println("Role Id : " + roleId);  \n         return "hello";  \n     \n     }  \n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h3",{attrs:{id:"componentscan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentscan"}},[a._v("#")]),a._v(" @ComponentScan")]),a._v(" "),s("p",[a._v("注解会告知Spring扫描指定的包来初始化Spring")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@ComponentScan(basePackages = "com.bbs.xx")\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"enablezuulproxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enablezuulproxy"}},[a._v("#")]),a._v(" @EnableZuulProxy")]),a._v(" "),s("p",[a._v("路由网关的主要目的是为了让所有的微服务对外只有一个接口，我们只需访问一个网关地址，即可由网关将所有的请求代理到不同的服务中。Spring Cloud是通过Zuul来实现的，支持自动路由映射到在Eureka Server上注册的服务。Spring Cloud提供了注解@EnableZuulProxy来启用路由代理。")]),a._v(" "),s("h3",{attrs:{id:"autowired"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autowired"}},[a._v("#")]),a._v(" @Autowired")]),a._v(" "),s("p",[a._v("在默认情况下使用 @Autowired 注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。当找不到一个匹配的 Bean 时，Spring 容器将抛出 BeanCreationException 异常，并指出必须至少拥有一个匹配的 Bean。")]),a._v(" "),s("p",[a._v("当不能确定 Spring 容器中一定拥有某个类的 Bean 时，可以在需要自动注入该类 Bean 的地方可以使用 @Autowired(required = false)，这等于告诉 Spring: 在找不到匹配 Bean 时也不报错")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/ethunsex/article/details/66475792",target:"_blank",rel:"noopener noreferrer"}},[a._v("@Autowired注解注入map、list与@Qualifier 在新窗口打开"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[a._v("#")]),a._v(" @Configuration")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Configuration("name")//表示这是一个配置信息类,可以给这个配置类也起一个名称\n@ComponentScan("spring4")//类似于xml中的<context:component-scan base-package="spring4"/>\npublic class Config {\n\n    @Autowired//自动注入，如果容器中有多个符合的bean时，需要进一步明确\n    @Qualifier("compent")//进一步指明注入bean名称为compent的bean\n    private Compent compent;\n\n    @Bean//类似于xml中的<bean id="newbean" class="spring4.Compent"/>\n    public Compent newbean(){\n        return new Compent();\n    }   \n}\n\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("h3",{attrs:{id:"import-config1-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-config1-class"}},[a._v("#")]),a._v(" @Import(Config1.class)")]),a._v(" "),s("p",[a._v("导入Config1配置类里实例化的bean")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Configuration\npublic class CDConfig {\n\n    @Bean   // 将SgtPeppers注册为 SpringContext中的bean\n    public CompactDisc compactDisc() {\n        return new CompactDisc();  // CompactDisc类型的\n    }\n}\n\n@Configuration\n@Import(CDConfig.class)  //导入CDConfig的配置\npublic class CDPlayerConfig {\n\n    @Bean(name = "cDPlayer")\n    public CDPlayer cdPlayer(CompactDisc compactDisc) {  \n         // 这里会注入CompactDisc类型的bean\n         // 这里注入的这个bean是CDConfig.class中的CompactDisc类型的那个bean\n        return new CDPlayer(compactDisc);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("h3",{attrs:{id:"order"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#order"}},[a._v("#")]),a._v(" @Order")]),a._v(" "),s("p",[a._v("@Order(1)，值越小优先级超高，越先运行")]),a._v(" "),s("h3",{attrs:{id:"conditionalonexpression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonexpression"}},[a._v("#")]),a._v(" @ConditionalOnExpression")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Configuration\n@ConditionalOnExpression("${enabled:false}")\npublic class BigpipeConfiguration {\n    @Bean\n    public OrderMessageMonitor orderMessageMonitor(ConfigContext configContext) {\n        return new OrderMessageMonitor(configContext);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("开关为true的时候才实例化bean")]),a._v(" "),s("h3",{attrs:{id:"conditionalonproperty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonproperty"}},[a._v("#")]),a._v(" @ConditionalOnProperty")]),a._v(" "),s("p",[a._v("这个注解能够控制某个 @Configuration 是否生效。具体操作是通过其两个属性name以及havingValue来实现的，其中name用来从application.properties中读取某个属性值，如果该值为空，则返回false;如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。如果返回值为false，则该configuration不生效；为true则生效。")]),a._v(" "),s("p",[a._v("https://blog.csdn.net/dalangzhonghangxing/article/details/78420057")]),a._v(" "),s("h3",{attrs:{id:"conditionalonclass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonclass"}},[a._v("#")]),a._v(" @ConditionalOnClass")]),a._v(" "),s("p",[a._v("该注解的参数对应的类必须存在，否则不解析该注解修饰的配置类")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Configuration\n@ConditionalOnClass({Gson.class})\npublic class GsonAutoConfiguration {\n    public GsonAutoConfiguration() {\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public Gson gson() {\n        return new Gson();\n    }\n}\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h3",{attrs:{id:"conditionalonmisssingclass-applicationmanager-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonmisssingclass-applicationmanager-class"}},[a._v("#")]),a._v(" @ConditionalOnMisssingClass({ApplicationManager.class})")]),a._v(" "),s("p",[a._v("如果存在它修饰的类的bean，则不需要再创建这个bean；")]),a._v(" "),s("h3",{attrs:{id:"conditiononmissingbean-name-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditiononmissingbean-name-example"}},[a._v("#")]),a._v(' @ConditionOnMissingBean(name = "example")')]),a._v(" "),s("p",[a._v("表示如果name为“example”的bean存在，该注解修饰的代码块不执行。")])])}),[],!1,null,null,null);s.default=t.exports}}]);