(window.webpackJsonp=window.webpackJsonp||[]).push([[431],{1357:function(n,s,e){n.exports=e.p+"assets/img/alg-linkedlist-1.19c6e07f.png"},3756:function(n,s,e){"use strict";e.r(s);var a=e(7),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"线性表-链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性表-链表"}},[n._v("#")]),n._v(" 线性表 - 链表")]),n._v(" "),s("p",[n._v("=====================")]),n._v(" "),s("blockquote",[s("p",[n._v("n个节点离散分配，彼此通过指针相连，每个节点只有一个前驱节点，每个节点只有一个后续节点，首节点没有前驱节点，尾节点没有后续节点。确定一个链表我们只需要头指针，通过头指针就可以把整个链表都能推出来。@pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-linklist.html#%E7%9F%A5%E8%AF%86%E7%82%B9",target:"_blank",rel:"noopener noreferrer"}},[n._v("知识点"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-linklist.html#%E4%BC%98%E7%BC%BA%E7%82%B9",target:"_blank",rel:"noopener noreferrer"}},[n._v("优缺点"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-linklist.html#%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[n._v("分类"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-linklist.html#%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[n._v("实现"),s("OutboundLink")],1)])])]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-linklist.html#%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[n._v("链表相关题目"),s("OutboundLink")],1)])]),n._v(" "),s("h1",{attrs:{id:"知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[n._v("#")]),n._v(" 知识点")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[n._v("#")]),n._v(" 优缺点")]),n._v(" "),s("p",[n._v("链表优点")]),n._v(" "),s("ul",[s("li",[n._v("空间没有限制")]),n._v(" "),s("li",[n._v("插入删除元素很快")])]),n._v(" "),s("p",[n._v("链表缺点 存取速度很慢")]),n._v(" "),s("h3",{attrs:{id:"分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[n._v("#")]),n._v(" 分类")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("单向链表 一个节点指向下一个节点。")])]),n._v(" "),s("li",[s("p",[n._v("双向链表 一个节点有两个指针域。")])]),n._v(" "),s("li",[s("p",[n._v("循环链表 能通过任何一个节点找到其他所有的节点，将两种(双向/单向)链表的最后一个结点指向第一个结点从而实现循环。")])])]),n._v(" "),s("h3",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[n._v("#")]),n._v(" 实现")]),n._v(" "),s("p",[s("img",{attrs:{src:e(1357),alt:""}})]),n._v(" "),s("p",[n._v("节点")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Node {\n    //数据域\n    public int data;\n    //指针域，指向下一个节点\n    public Node next;\n\n    public Node() {\n    }\n    public Node(int data) {\n        this.data = data;\n    }\n    public Node(int data, Node next) {\n        this.data = data;\n        this.next = next;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("如上，一个链表节点对象就创建完成了，但理解链表本身并不难，但做相关的操作却并非易事，其算法包括且不限于:")]),n._v(" "),s("ul",[s("li",[n._v("插入节点")]),n._v(" "),s("li",[n._v("遍历")]),n._v(" "),s("li",[n._v("查找")]),n._v(" "),s("li",[n._v("清空")]),n._v(" "),s("li",[n._v("销毁")]),n._v(" "),s("li",[n._v("求长度")]),n._v(" "),s("li",[n._v("排序")]),n._v(" "),s("li",[n._v("删除节点")]),n._v(" "),s("li",[n._v("去重")])]),n._v(" "),s("p",[n._v("JDK中关于链表的实现，请参考:")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://pdai.tech/md/java/collection/java-collection-LinkedList.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("《Java - LinkedList 源码解析》"),s("OutboundLink")],1)]),n._v(" "),s("h1",{attrs:{id:"链表相关题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表相关题目"}},[n._v("#")]),n._v(" 链表相关题目")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。")]),n._v(" "),s("p",[s("strong",[n._v("找出两个链表的交点")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("160. Intersection of Two Linked Lists (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("A:          a1 → a2\n                    ↘\n                      c1 → c2 → c3\n                    ↗\nB:    b1 → b2 → b3\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("要求: 时间复杂度为 O(N)，空间复杂度为 O(1)")]),n._v(" "),s("p",[n._v("设 A 的长度为 a + c，B 的长度为 b + c，其中 c 为尾部公共部分长度，可知 a + c + b = b + c + a。")]),n._v(" "),s("p",[n._v("当访问 A 链表的指针访问到链表尾部时，令它从链表 B 的头部开始访问链表 B；同样地，当访问 B 链表的指针访问到链表尾部时，令它从链表 A 的头部开始访问链表 A。这样就能控制访问 A 和 B 两个链表的指针能同时访问到交点。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n    ListNode l1 = headA, l2 = headB;\n    while (l1 != l2) {\n        l1 = (l1 == null) ? headB : l1.next;\n        l2 = (l2 == null) ? headA : l2.next;\n    }\n    return l1;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("如果只是判断是否存在交点，那么就是另一个问题，即 编程之美 3.6 的问题。有两种解法:")]),n._v(" "),s("ul",[s("li",[n._v("把第一个链表的结尾连接到第二个链表的开头，看第二个链表是否存在环；")]),n._v(" "),s("li",[n._v("或者直接比较两个链表的最后一个节点是否相同。")])]),n._v(" "),s("p",[s("strong",[n._v("链表反转")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/reverse-linked-list/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("206. Reverse Linked List (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("递归")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode reverseList(ListNode head) {\n    if (head == null || head.next == null) {\n        return head;\n    }\n    ListNode next = head.next;\n    ListNode newHead = reverseList(next);\n    next.next = head;\n    head.next = null;\n    return newHead;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("头插法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode reverseList(ListNode head) {\n    ListNode newHead = new ListNode(-1);\n    while (head != null) {\n        ListNode next = head.next;\n        head.next = newHead.next;\n        newHead.next = head;\n        head = next;\n    }\n    return newHead.next;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[s("strong",[n._v("归并两个有序的链表")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/merge-two-sorted-lists/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("21. Merge Two Sorted Lists (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    if (l1 == null) return l2;\n    if (l2 == null) return l1;\n    if (l1.val < l2.val) {\n        l1.next = mergeTwoLists(l1.next, l2);\n        return l1;\n    } else {\n        l2.next = mergeTwoLists(l1, l2.next);\n        return l2;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[s("strong",[n._v("从有序链表中删除重复节点")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("83. Remove Duplicates from Sorted List (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Given 1->1->2, return 1->2.\nGiven 1->1->2->3->3, return 1->2->3.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode deleteDuplicates(ListNode head) {\n    if (head == null || head.next == null) return head;\n    head.next = deleteDuplicates(head.next);\n    return head.val == head.next.val ? head.next : head;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[s("strong",[n._v("删除链表的倒数第 n 个节点")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("19. Remove Nth Node From End of List (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Given linked list: 1->2->3->4->5, and n = 2.\nAfter removing the second node from the end, the linked list becomes 1->2->3->5.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode removeNthFromEnd(ListNode head, int n) {\n    ListNode fast = head;\n    while (n-- > 0) {\n        fast = fast.next;\n    }\n    if (fast == null) return head.next;\n    ListNode slow = head;\n    while (fast.next != null) {\n        fast = fast.next;\n        slow = slow.next;\n    }\n    slow.next = slow.next.next;\n    return head;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[s("strong",[n._v("交换链表中的相邻结点")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/swap-nodes-in-pairs/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("24. Swap Nodes in Pairs (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Given 1->2->3->4, you should return the list as 2->1->4->3.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("题目要求: 不能修改结点的 val 值，O(1) 空间复杂度。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode swapPairs(ListNode head) {\n    ListNode node = new ListNode(-1);\n    node.next = head;\n    ListNode pre = node;\n    while (pre.next != null && pre.next.next != null) {\n        ListNode l1 = pre.next, l2 = pre.next.next;\n        ListNode next = l2.next;\n        l1.next = next;\n        l2.next = l1;\n        pre.next = l2;\n\n        pre = l1;\n    }\n    return node.next;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("p",[s("strong",[n._v("链表求和")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/add-two-numbers-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("445. Add Two Numbers II (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 8 -> 0 -> 7\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("题目要求: 不能修改原始链表。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    Stack<Integer> l1Stack = buildStack(l1);\n    Stack<Integer> l2Stack = buildStack(l2);\n    ListNode head = new ListNode(-1);\n    int carry = 0;\n    while (!l1Stack.isEmpty() || !l2Stack.isEmpty() || carry != 0) {\n        int x = l1Stack.isEmpty() ? 0 : l1Stack.pop();\n        int y = l2Stack.isEmpty() ? 0 : l2Stack.pop();\n        int sum = x + y + carry;\n        ListNode node = new ListNode(sum % 10);\n        node.next = head.next;\n        head.next = node;\n        carry = sum / 10;\n    }\n    return head.next;\n}\n\nprivate Stack<Integer> buildStack(ListNode l) {\n    Stack<Integer> stack = new Stack<>();\n    while (l != null) {\n        stack.push(l.val);\n        l = l.next;\n    }\n    return stack;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("p",[s("strong",[n._v("回文链表")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/palindrome-linked-list/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("234. Palindrome Linked List (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("题目要求: 以 O(1) 的空间复杂度来求解。")]),n._v(" "),s("p",[n._v("切成两半，把后半段反转，然后比较两半是否相等。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean isPalindrome(ListNode head) {\n    if (head == null || head.next == null) return true;\n    ListNode slow = head, fast = head.next;\n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    if (fast != null) slow = slow.next;  // 偶数节点，让 slow 指向下一个节点\n    cut(head, slow);                     // 切成两个链表\n    return isEqual(head, reverse(slow));\n}\n\nprivate void cut(ListNode head, ListNode cutNode) {\n    while (head.next != cutNode) {\n        head = head.next;\n    }\n    head.next = null;\n}\n\nprivate ListNode reverse(ListNode head) {\n    ListNode newHead = null;\n    while (head != null) {\n        ListNode nextNode = head.next;\n        head.next = newHead;\n        newHead = head;\n        head = nextNode;\n    }\n    return newHead;\n}\n\nprivate boolean isEqual(ListNode l1, ListNode l2) {\n    while (l1 != null && l2 != null) {\n        if (l1.val != l2.val) return false;\n        l1 = l1.next;\n        l2 = l2.next;\n    }\n    return true;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br")])]),s("p",[s("strong",[n._v("分隔链表")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/split-linked-list-in-parts/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("725. Split Linked List in Parts(Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input:\nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\nOutput: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("题目描述: 把链表分隔成 k 部分，每部分的长度都应该尽可能相同，排在前面的长度应该大于等于后面的。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode[] splitListToParts(ListNode root, int k) {\n    int N = 0;\n    ListNode cur = root;\n    while (cur != null) {\n        N++;\n        cur = cur.next;\n    }\n    int mod = N % k;\n    int size = N / k;\n    ListNode[] ret = new ListNode[k];\n    cur = root;\n    for (int i = 0; cur != null && i < k; i++) {\n        ret[i] = cur;\n        int curSize = size + (mod-- > 0 ? 1 : 0);\n        for (int j = 0; j < curSize - 1; j++) {\n            cur = cur.next;\n        }\n        ListNode next = cur.next;\n        cur.next = null;\n        cur = next;\n    }\n    return ret;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("p",[s("strong",[n._v("链表元素按奇偶聚集")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/odd-even-linked-list/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("328. Odd Even Linked List (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Example:\nGiven 1->2->3->4->5->NULL,\nreturn 1->3->5->2->4->NULL.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public ListNode oddEvenList(ListNode head) {\n    if (head == null) {\n        return head;\n    }\n    ListNode odd = head, even = head.next, evenHead = even;\n    while (even != null && even.next != null) {\n        odd.next = odd.next.next;\n        odd = odd.next;\n        even.next = even.next.next;\n        even = even.next;\n    }\n    odd.next = evenHead;\n    return head;\n}\n```)")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);