(window.webpackJsonp=window.webpackJsonp||[]).push([[404],{3558:function(n,s,a){"use strict";a.r(s);var e=a(7),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"java-io-源码-inputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-io-源码-inputstream"}},[n._v("#")]),n._v(" Java IO - 源码: InputStream")]),n._v(" "),s("p",[n._v("======================================================")]),n._v(" "),s("blockquote",[s("p",[n._v("本文主要从"),s("strong",[n._v("JDK 11 源码")]),n._v("角度分析InputStream。 @pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#java-io---%E6%BA%90%E7%A0%81-inputstream"}},[n._v("Java IO - 源码: InputStream")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB"}},[n._v("InputStream 类实现关系")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB"}},[n._v("InputStream 抽象类")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0"}},[n._v("源码实现")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#inputstream"}},[n._v("InputStream")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#filterinputstream"}},[n._v("FilterInputStream")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#bytearrayinputstream"}},[n._v("ByteArrayInputStream")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#bufferedinputstream"}},[n._v("BufferedInputStream")])])])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[n._v("参考文章")])])])])]),n._v(" "),s("h2",{attrs:{id:"inputstream-类实现关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inputstream-类实现关系"}},[n._v("#")]),n._v(" InputStream 类实现关系")]),n._v(" "),s("hr"),n._v(" "),s("blockquote",[s("p",[n._v("InputStream是输入字节流，具体的实现类层次结构如下：")])]),n._v(" "),s("p",[s("img",{attrs:{src:a(593),alt:""}})]),n._v(" "),s("h2",{attrs:{id:"inputstream-抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inputstream-抽象类"}},[n._v("#")]),n._v(" InputStream 抽象类")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("InputStream 类重要方法设计如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 读取下一个字节，如果没有则返回-1\npublic abstract int read() \n\n// 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法\npublic int read(byte b[]) \n\n// 从第 off 位置读取<b>最多(实际可能小于)</b> len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。\npublic int read(byte b[], int off, int len) \n\n// JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法\npublic byte[] readAllBytes()\n\n// JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。\npublic byte[] readNBytes(int len)\n\n// JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。\npublic int readNBytes(byte[] b, int off, int len)\n\n// 跳过指定个数的字节不读取\npublic long skip(long n) \n\n// 返回可读的字节数量\npublic int available() \n\n// 读取完，关闭流，释放资源\npublic void close() \n\n// 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断\npublic synchronized void mark(int readlimit) \n\n// 重置读取位置为上次 mark 标记的位置\npublic synchronized void reset() \n\n// 判断当前流是否支持标记流，和上面两个方法配套使用\npublic boolean markSupported() \n\n// JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中\npublic long transferTo(OutputStream out) \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br")])]),s("h2",{attrs:{id:"源码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码实现"}},[n._v("#")]),n._v(" 源码实现")]),n._v(" "),s("hr"),n._v(" "),s("blockquote",[s("p",[n._v("梳理部分InputStream及其实现类的源码分析。")])]),n._v(" "),s("h3",{attrs:{id:"inputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inputstream"}},[n._v("#")]),n._v(" InputStream")]),n._v(" "),s("p",[n._v("InputStream抽象类源码如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public abstract class InputStream implements Closeable {\n    \n    // 当使用skip方法时，最大的buffer size大小\n    private static final int MAX_SKIP_BUFFER_SIZE = 2048;\n\n    // 默认的buffer size\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n\n    // JDK11中增加了一个nullInputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）\n    public static InputStream nullInputStream() {\n        return new InputStream() {\n            private volatile boolean closed;\n\n            private void ensureOpen() throws IOException {\n                if (closed) {\n                    throw new IOException("Stream closed");\n                }\n            }\n\n            @Override\n            public int available () throws IOException {\n                ensureOpen();\n                return 0;\n            }\n\n            @Override\n            public int read() throws IOException {\n                ensureOpen();\n                return -1;\n            }\n\n            @Override\n            public int read(byte[] b, int off, int len) throws IOException {\n                Objects.checkFromIndexSize(off, len, b.length);\n                if (len == 0) {\n                    return 0;\n                }\n                ensureOpen();\n                return -1;\n            }\n\n            @Override\n            public byte[] readAllBytes() throws IOException {\n                ensureOpen();\n                return new byte[0];\n            }\n\n            @Override\n            public int readNBytes(byte[] b, int off, int len)\n                throws IOException {\n                Objects.checkFromIndexSize(off, len, b.length);\n                ensureOpen();\n                return 0;\n            }\n\n            @Override\n            public byte[] readNBytes(int len) throws IOException {\n                if (len < 0) {\n                    throw new IllegalArgumentException("len < 0");\n                }\n                ensureOpen();\n                return new byte[0];\n            }\n\n            @Override\n            public long skip(long n) throws IOException {\n                ensureOpen();\n                return 0L;\n            }\n\n            @Override\n            public long transferTo(OutputStream out) throws IOException {\n                Objects.requireNonNull(out);\n                ensureOpen();\n                return 0L;\n            }\n\n            @Override\n            public void close() throws IOException {\n                closed = true;\n            }\n        };\n    }\n    \n    // 读取下一个字节的数据，如果没有则返回-1\n    public abstract int read() throws IOException;\n\n    // 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法\n    public int read(byte b[]) throws IOException {\n        return read(b, 0, b.length);\n    }\n\n    // 从第 off 位置读取<b>最多(实际可能小于)</b> len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。\n    public int read(byte b[], int off, int len) throws IOException {\n        // 检查边界\n        Objects.checkFromIndexSize(off, len, b.length);\n        if (len == 0) {\n            return 0;\n        }\n\n        // 读取下一个字节\n        int c = read();\n        if (c == -1) { // 读到stream末尾，则返回读取的字节数量为-1\n            return -1;\n        }\n        b[off] = (byte)c;\n\n        // i用来记录取了多少个字节\n        int i = 1;\n        try {\n            // 循环读取\n            for (; i < len ; i++) {\n                c = read();\n                if (c == -1) {// 读到stream末尾，则break\n                    break;\n                }\n                b[off + i] = (byte)c;\n            }\n        } catch (IOException ee) {\n        }\n        // 返回读取到的字节个数\n        return i;\n    }\n\n    // 分配的最大数组大小。\n    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）\n    private static final int MAX_BUFFER_SIZE = Integer.MAX_VALUE - 8;\n\n    // JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法\n    public byte[] readAllBytes() throws IOException {\n        return readNBytes(Integer.MAX_VALUE);\n    }\n\n    // JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。\n    public byte[] readNBytes(int len) throws IOException {\n        // 边界检查\n        if (len < 0) {\n            throw new IllegalArgumentException("len < 0");\n        }\n\n        List<byte[]> bufs = null; // 缓存每次读取到的内容放到bufs，最后组装成result\n        byte[] result = null; // 最后读取到的内容\n        int total = 0;\n        int remaining = len; // 剩余字节长度\n        int n;\n        do {\n            byte[] buf = new byte[Math.min(remaining, DEFAULT_BUFFER_SIZE)];\n            int nread = 0;\n\n            // 读取到结束为止，读取大小n可能大于或小于缓冲区大小\n            while ((n = read(buf, nread,\n                    Math.min(buf.length - nread, remaining))) > 0) {\n                nread += n; \n                remaining -= n;\n            }\n\n            if (nread > 0) {\n                if (MAX_BUFFER_SIZE - total < nread) {\n                    throw new OutOfMemoryError("Required array size too large");\n                }\n                total += nread;\n                if (result == null) {\n                    result = buf;\n                } else {\n                    if (bufs == null) {\n                        bufs = new ArrayList<>();\n                        bufs.add(result);\n                    }\n                    bufs.add(buf);\n                }\n            }\n            // 如果读不到内容（返回-1）或者没有剩余的字节，则跳出循环\n        } while (n >= 0 && remaining > 0);\n\n        if (bufs == null) {\n            if (result == null) {\n                return new byte[0];\n            }\n            return result.length == total ?\n                result : Arrays.copyOf(result, total);\n        }\n\n        // 组装最后的result\n        result = new byte[total];\n        int offset = 0;\n        remaining = total;\n        for (byte[] b : bufs) {\n            int count = Math.min(b.length, remaining);\n            System.arraycopy(b, 0, result, offset, count);\n            offset += count;\n            remaining -= count;\n        }\n\n        return result;\n    }\n\n    // JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。\n    public int readNBytes(byte[] b, int off, int len) throws IOException {\n        Objects.checkFromIndexSize(off, len, b.length);\n\n        int n = 0;\n        while (n < len) {\n            int count = read(b, off + n, len - n);\n            if (count < 0)\n                break;\n            n += count;\n        }\n        return n;\n    }\n\n    // 跳过指定个数的字节不读取\n    public long skip(long n) throws IOException {\n\n        long remaining = n;\n        int nr;\n\n        if (n <= 0) {\n            return 0;\n        }\n\n        int size = (int)Math.min(MAX_SKIP_BUFFER_SIZE, remaining);\n        byte[] skipBuffer = new byte[size];\n        while (remaining > 0) {\n            nr = read(skipBuffer, 0, (int)Math.min(size, remaining));\n            if (nr < 0) {\n                break;\n            }\n            remaining -= nr;\n        }\n\n        return n - remaining;\n    }\n\n    // 返回可读的字节数量\n    public int available() throws IOException {\n        return 0;\n    }\n\n    // 读取完，关闭流，释放资源\n    public void close() throws IOException {}\n\n    // 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断\n    public synchronized void mark(int readlimit) {}\n\n    // 重置读取位置为上次 mark 标记的位置\n    public synchronized void reset() throws IOException {\n        throw new IOException("mark/reset not supported");\n    }\n\n    // 判断当前流是否支持标记流，和上面两个方法配套使用。默认是false，由子类方法重写\n    public boolean markSupported() {\n        return false;\n    }\n\n    // JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中\n    public long transferTo(OutputStream out) throws IOException {\n        Objects.requireNonNull(out, "out");\n        long transferred = 0;\n        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n        int read;\n        while ((read = this.read(buffer, 0, DEFAULT_BUFFER_SIZE)) >= 0) {\n            out.write(buffer, 0, read);\n            transferred += read;\n        }\n        return transferred;\n    } \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("245")]),s("br"),s("span",{staticClass:"line-number"},[n._v("246")]),s("br"),s("span",{staticClass:"line-number"},[n._v("247")]),s("br"),s("span",{staticClass:"line-number"},[n._v("248")]),s("br"),s("span",{staticClass:"line-number"},[n._v("249")]),s("br"),s("span",{staticClass:"line-number"},[n._v("250")]),s("br"),s("span",{staticClass:"line-number"},[n._v("251")]),s("br"),s("span",{staticClass:"line-number"},[n._v("252")]),s("br"),s("span",{staticClass:"line-number"},[n._v("253")]),s("br"),s("span",{staticClass:"line-number"},[n._v("254")]),s("br"),s("span",{staticClass:"line-number"},[n._v("255")]),s("br"),s("span",{staticClass:"line-number"},[n._v("256")]),s("br"),s("span",{staticClass:"line-number"},[n._v("257")]),s("br"),s("span",{staticClass:"line-number"},[n._v("258")]),s("br"),s("span",{staticClass:"line-number"},[n._v("259")]),s("br"),s("span",{staticClass:"line-number"},[n._v("260")]),s("br"),s("span",{staticClass:"line-number"},[n._v("261")]),s("br"),s("span",{staticClass:"line-number"},[n._v("262")]),s("br"),s("span",{staticClass:"line-number"},[n._v("263")]),s("br"),s("span",{staticClass:"line-number"},[n._v("264")]),s("br"),s("span",{staticClass:"line-number"},[n._v("265")]),s("br"),s("span",{staticClass:"line-number"},[n._v("266")]),s("br")])]),s("blockquote",[s("p",[n._v("总结下JDK9的更新点")])]),n._v(" "),s("p",[n._v("类 java.io.InputStream 中增加了新的方法来读取和复制 InputStream 中包含的数据。")]),n._v(" "),s("ul",[s("li",[s("code",[n._v("readAllBytes")]),n._v("：读取 InputStream 中的所有剩余字节。")]),n._v(" "),s("li",[s("code",[n._v("readNBytes")]),n._v("： 从 InputStream 中读取指定数量的字节到数组中。")]),n._v(" "),s("li",[s("code",[n._v("transferTo")]),n._v("：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中 。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class TestInputStream {\n    private InputStream inputStream;\n    private static final String CONTENT = "Hello World";\n    @Before\n    public void setUp() throws Exception {\n        this.inputStream =\n            TestInputStream.class.getResourceAsStream("/input.txt");\n    }\n    @Test\n    public void testReadAllBytes() throws Exception {\n        final String content = new String(this.inputStream.readAllBytes());\n        assertEquals(CONTENT, content);\n    }\n    @Test\n    public void testReadNBytes() throws Exception {\n        final byte[] data = new byte[5];\n        this.inputStream.readNBytes(data, 0, 5);\n        assertEquals("Hello", new String(data));\n    }\n    @Test\n    public void testTransferTo() throws Exception {\n        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        this.inputStream.transferTo(outputStream);\n        assertEquals(CONTENT, outputStream.toString());\n    }\n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("ul",[s("li",[s("strong",[s("code",[n._v("read(byte[], int, int)")]),n._v(" 和 "),s("code",[n._v("readNBytes(byte[], int, int)")]),n._v("看似是实现的相同功能，为何会设计readNBytes方法呢")]),n._v("？")])]),n._v(" "),s("p",[n._v("这个问题可以参看"),s("a",{attrs:{href:"https://stackoverflow.com/questions/53754387/java-read-vs-readnbytes-of-the-inputstream-instance",target:"_blank",rel:"noopener noreferrer"}},[n._v("这里在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("ol",[s("li",[n._v("read(byte[], int, int)是尝试读到最多len个bytes，但是"),s("strong",[n._v("读取到的内容长度可能是小于len")]),n._v("的。")]),n._v(" "),s("li",[n._v("readNBytes(byte[], int, int) 会一直（while循环）查找直到stream尾为止")])]),n._v(" "),s("p",[n._v("举个例子：如果文本内容是"),s("code",[n._v("12345<end>")]),n._v(", read(s,0,10)是允许返回"),s("code",[n._v("123")]),n._v("的, 而readNbytes(s,0,10)会一直（while循环）查找直到stream尾为止，并返回"),s("code",[n._v("12345")]),n._v(".")]),n._v(" "),s("blockquote",[s("p",[n._v("补充下JDK11为什么会增加nullInputStream方法的设计？即空对象模式")])]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("空对象模式")])])]),n._v(" "),s("p",[n._v("举个例子：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class MyParser implements Parser {\n  private static Action NO_ACTION = new Action() {\n    public void doSomething() { /* do nothing */ }\n  };\n\n  public Action findAction(String userInput) {\n    // ...\n    if ( /* we can't find any actions */ ) {\n      return NO_ACTION;\n    }\n  }\n} \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("然后便"),s("strong",[n._v("可以始终可以这么调用，而不用再判断空了")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("ParserFactory.getParser().findAction(someInput).doSomething(); \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("h3",{attrs:{id:"filterinputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filterinputstream"}},[n._v("#")]),n._v(" FilterInputStream")]),n._v(" "),s("p",[n._v("FilterInputStream 源码如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class FilterInputStream extends InputStream {\n    \n    // 被装饰的inputStream\n    protected volatile InputStream in;\n    \n    // 构造函数，注入被装饰的inputStream\n    protected FilterInputStream(InputStream in) {\n        this.in = in;\n    }\n\n    // 本质是调用被装饰的inputStream的方法\n    public int read() throws IOException {\n        return in.read();\n    }\n    public int read(byte b[]) throws IOException {\n        return read(b, 0, b.length);\n     }\n    public int read(byte b[], int off, int len) throws IOException {\n        return in.read(b, off, len);\n     }\n    public long skip(long n) throws IOException {\n        return in.skip(n);\n    }\n    public int available() throws IOException {\n        return in.available();\n    }\n    public void close() throws IOException {\n        in.close();\n    }\n    public synchronized void mark(int readlimit) {\n        in.mark(readlimit);\n     }\n    public synchronized void reset() throws IOException {\n        in.reset();\n    }\n    public boolean markSupported() {\n        return in.markSupported();\n    }\n} \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br")])]),s("p",[s("strong",[n._v("为什么被装饰的inputStream是volatile类型的")]),n._v("？")]),n._v(" "),s("p",[n._v("请参看： "),s("a",{attrs:{href:"https://pdai.tech/md/java/thread/java-thread-x-key-volatile.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("关键字: volatile详解"),s("OutboundLink")],1)]),n._v(" "),s("h3",{attrs:{id:"bytearrayinputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bytearrayinputstream"}},[n._v("#")]),n._v(" ByteArrayInputStream")]),n._v(" "),s("p",[n._v("ByteArrayInputStream源码如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class ByteArrayInputStream extends InputStream {\n    \n    // 内部保存的byte 数组\n    protected byte buf[];\n    \n    // 读取下一个字节的数组下标，byte[pos]就是read获取的下个字节\n    protected int pos;\n    \n    // mark的数组下标位置\n    protected int mark = 0;\n    \n    // 保存的有效byte的个数\n    protected int count;\n\n    // 构造方法\n    public ByteArrayInputStream(byte buf[]) {\n        this.buf = buf;              \n        this.pos = 0;\n        this.count = buf.length;\n     }\n    \n    // 构造方法，带offset的\n     public ByteArrayInputStream(byte buf[], int offset, int length) {                \n        this.buf = buf;\n        this.pos = offset;\n        this.count = Math.min(offset + length, buf.length);\n        this.mark = offset;\n    }\n    \n    // 从流中读取下一个字节，没有读取到返回 -1\n    public synchronized int read() {\n        return (pos < count) ? (buf[pos++] & 0xff) : -1;\n    }\n    \n    // 从第 off 位置读取<b>最多(实际可能小于)</b> len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的\n    public synchronized int read(byte b[], int off, int len) {\n        // 边界检查\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        if (pos >= count) {\n            return -1;\n        }\n\n        int avail = count - pos;\n        if (len > avail) {\n            len = avail;\n        }\n        if (len <= 0) {\n            return 0;\n        }\n\n        // 从buf拷贝到byte 数组b中\n        System.arraycopy(buf, pos, b, off, len);\n        pos += len;\n        return len;\n    }\n\n    // 跳过指定个数的字节不读取\n    public synchronized long skip(long n) {\n        long k = count - pos;\n        if (n < k) {\n            k = n < 0 ? 0 : n;\n        }\n\n        pos += k;\n        return k;\n    }\n\n    // 还有稍稍byte在buffer中未读取，即总的count 减去 当前byte位置\n    public synchronized int available() {\n        return count - pos;\n    }\n\n    // 支持mark所以返回true\n    public boolean markSupported() { \n        return true;\n    }  \n\n    // 在流中当前位置mark, readAheadLimit参数未使用 \n    public void mark(int readAheadLimit) {            \n        mark = pos;\n    }\n\n    // 重置流，即回到mark的位置\n    public synchronized void reset() {\n        pos = mark;\n    }\n\n    // 关闭ByteArrayInputStream不会产生任何动作\n    public void close() throws IOException { \n\n    }\n} \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br")])]),s("h3",{attrs:{id:"bufferedinputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bufferedinputstream"}},[n._v("#")]),n._v(" BufferedInputStream")]),n._v(" "),s("p",[n._v("BufferedInputStream源码如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class BufferedInputStream extends FilterInputStream {\n\n    // 默认的buffer大小\n    private static int DEFAULT_BUFFER_SIZE = 8192;\n\n    // 分配的最大数组大小。\n    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）\n    private static int MAX_BUFFER_SIZE = Integer.MAX_VALUE - 8;\n\n    // 内部保存在byte 数组中\n    protected volatile byte buf[];\n\n    // 关闭流的方法可能是异步的，所以使用原子AtomicReferenceFieldUpdater提供CAS无锁方式（可以解决CAS的ABA问题）来保证\n    private static final AtomicReferenceFieldUpdater<BufferedInputStream, byte[]> bufUpdater =\n        AtomicReferenceFieldUpdater.newUpdater(BufferedInputStream.class,  byte[].class, "buf");\n\n    // 有效byte的大小\n    protected int count;\n\n    // 当前位置\n    protected int pos;\n\n    // 最后一次，调用mark方法，标记的位置\n    protected int markpos = -1;\n\n    /**\n     * 该变量惟一入口就是mark(int readLimit)，好比调用方法mark(1024)，那么后面读取的数据若是\n     * 超过了1024字节，那么这次mark就为无效标记，子类能够选择抛弃该mark标记，从头开始。不过具体实现\n     * 跟具体的子类有关，在BufferedInputStream中，会抛弃mark标记，从新将markpos赋值为-1\n     */\n    protected int marklimit;\n\n    // 获取被装饰的stream\n    private InputStream getInIfOpen() throws IOException {\n        InputStream input = in;\n        if (input == null)\n            throw new IOException("Stream closed");\n        return input;\n    }\n\n    // 获取实际内部的buffer数组\n    private byte[] getBufIfOpen() throws IOException {\n        byte[] buffer = buf;\n        if (buffer == null)\n            throw new IOException("Stream closed");\n        return buffer;\n    }\n\n    // 构造函数，buffer是8kb\n    public BufferedInputStream(InputStream in) {\n        this(in, DEFAULT_BUFFER_SIZE);\n    }\n\n    // 构造函数，指定buffer大小\n    public BufferedInputStream(InputStream in, int size) {\n        super(in);\n        if (size <= 0) {\n            throw new IllegalArgumentException("Buffer size <= 0");\n        }\n        buf = new byte[size];\n    }\n\n    /**\n     * 用更多的数据填充缓冲区,考虑到shuffling和其他处理标记的技巧，\n     * 假设它是由同步方法调用的。该方法还假设所有数据已经被读入，因此pos >count。\n     */\n    private void fill() throws IOException {\n    \t// 得到内部缓冲区buffer\n        byte[] buffer = getBufIfOpen();\n        // 没有mark的情况下， pos为0\n        if (markpos < 0)\n            pos = 0;            /* no mark: throw away the buffer */\n        // pos >= buffer.length  buffer已经被读取完了 \n        else if (pos >= buffer.length)  /* no room left in buffer */\n        \t// markpos > 0  有标记，标记处在缓存中间\n            if (markpos > 0) {  /* can throw away early part of the buffer */\n            \t// 把buffer中，markpos到pos的部分移动到0-sz处，pos设置为sz，markpos为0\n                int sz = pos - markpos;\n                System.arraycopy(buffer, markpos, buffer, 0, sz);\n                pos = sz;\n                markpos = 0;\n                // markpos已经为0了，marklimit比buffer.length小，再读取buffer已经没有地方了\n            } else if (buffer.length >= marklimit) {\n            \t// 清空缓存，清空标记，markpos为-1，pos为0\n                markpos = -1;   /* buffer got too big, invalidate mark */\n                pos = 0;        /* drop buffer contents */\n                // markpos已经为0了，marklimit比buffer.length大，而buffer.length已经最大了，不能扩容\n            } else if (buffer.length >= MAX_BUFFER_SIZE) {\n                throw new OutOfMemoryError("Required array size too large");\n               // markpos已经为0了，marklimit比buffer.length大\n            } else {            /* grow buffer */\n            \t// 建立一个长度为min(2*pos,marklimit,MAX_BUFFER_SIZE),的缓存数组，然后把原来0-pos移动到新数组的0-pos处\n                int nsz = (pos <= MAX_BUFFER_SIZE - pos) ?\n                        pos * 2 : MAX_BUFFER_SIZE;\n                if (nsz > marklimit)\n                    nsz = marklimit;\n                byte nbuf[] = new byte[nsz];\n                System.arraycopy(buffer, 0, nbuf, 0, pos);\n                // 用bufUpdater替换buffer\n                if (!bufUpdater.compareAndSet(this, buffer, nbuf)) {\n                    // Can\'t replace buf if there was an async close.\n                    // Note: This would need to be changed if fill()\n                    // is ever made accessible to multiple threads.\n                    // But for now, the only way CAS can fail is via close.\n                    // assert buf == null;\n                    throw new IOException("Stream closed");\n                }\n                buffer = nbuf;\n            }\n        // 当前读取上限count为pos\n        count = pos;\n        // 从内部的输入流，读取pos到buffer.length部分，读取的字节数加到count\n        int n = getInIfOpen().read(buffer, pos, buffer.length - pos);\n        if (n > 0)\n            count = n + pos;\n    }\n\n    // 读取byte\n    public synchronized int read() throws IOException {\n        // 说明当前buf[]数组大小不够了，须要fill()\n        if (pos >= count) {\n            fill();\n            // 说明没有读取到任何数据\n            if (pos >= count)\n                return -1;\n        }\n        return getBufIfOpen()[pos++] & 0xff;\n    }\n\n    /**\n     * Read characters into a portion of an array, reading from the underlying\n     * stream at most once if necessary.\n     */\n    private int read1(byte[] b, int off, int len) throws IOException {\n        int avail = count - pos;\n        if (avail <= 0) {\n            // 当写入指定数组b的长度大小超过BufferedInputStream中核心缓存数组buf[]的大小而且 markpos < 0，那么就直接从数据流中读取数据给b数组，而不经过buf[]缓存数组，避免buf[]数组急剧增大\n            if (len >= getBufIfOpen().length && markpos < 0) {\n                return getInIfOpen().read(b, off, len);\n            }\n            fill();\n            avail = count - pos;\n            if (avail <= 0) return -1;\n        }\n        int cnt = (avail < len) ? avail : len;\n        System.arraycopy(getBufIfOpen(), pos, b, off, cnt);\n        pos += cnt;\n        return cnt;\n    }\n\n    // 读取到byte数组b中\n    public synchronized int read(byte b[], int off, int len)\n        throws IOException\n    {\n        getBufIfOpen(); // Check for closed stream\n        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        int n = 0;\n        for (;;) {\n            int nread = read1(b, off + n, len - n);\n            if (nread <= 0)\n                return (n == 0) ? nread : n;\n            n += nread;\n            if (n >= len)\n                return n;\n            // if not closed but no bytes available, return\n            InputStream input = in;\n            if (input != null && input.available() <= 0)\n                return n;\n        }\n    }\n\n    // 跳过n个\n    public synchronized long skip(long n) throws IOException {\n        getBufIfOpen(); // Check for closed stream\n        if (n <= 0) {\n            return 0;\n        }\n        long avail = count - pos;\n\n        if (avail <= 0) {\n            // If no mark position set then don\'t keep in buffer\n            if (markpos <0)\n                return getInIfOpen().skip(n);\n\n            // Fill in buffer to save bytes for reset\n            fill();\n            avail = count - pos;\n            if (avail <= 0)\n                return 0;\n        }\n\n        long skipped = (avail < n) ? avail : n;\n        pos += skipped;\n        return skipped;\n    }\n\n    // buf[]数组剩余字节数+输入流中剩余字节数\n    public synchronized int available() throws IOException {\n        int n = count - pos;\n        int avail = getInIfOpen().available();\n        return n > (Integer.MAX_VALUE - avail)\n                    ? Integer.MAX_VALUE\n                    : n + avail;\n    }\n\n    \n    // 标记位置，marklimit只有在这里才可以被赋值，readlimit表示mark()方法执行后，最多可以从流中读取的数据\n    // 若是超过该字节大小，那么在fill()的时候，就会认为此mark()标记无效，从新将 markpos = -1，pos = 0\n    public synchronized void mark(int readlimit) {\n        marklimit = readlimit;\n        markpos = pos;\n    }\n\n    // 重置位置\n    public synchronized void reset() throws IOException {\n        getBufIfOpen(); // 如果已经close, 则直接报错\n        if (markpos < 0)\n            throw new IOException("Resetting to invalid mark");\n        pos = markpos;\n    }\n\n    // 支持mark, 所以返回true\n    public boolean markSupported() {\n        return true;\n    }\n\n    // 通过AtomicReferenceFieldUpdater的CAS无锁方式close\n    public void close() throws IOException {\n        byte[] buffer;\n        while ( (buffer = buf) != null) {\n            if (bufUpdater.compareAndSet(this, buffer, null)) {\n                InputStream input = in;\n                in = null;\n                if (input != null)\n                    input.close();\n                return;\n            }\n            // Else retry in case a new buf was CASed in fill()\n        }\n    }\n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br"),s("span",{staticClass:"line-number"},[n._v("119")]),s("br"),s("span",{staticClass:"line-number"},[n._v("120")]),s("br"),s("span",{staticClass:"line-number"},[n._v("121")]),s("br"),s("span",{staticClass:"line-number"},[n._v("122")]),s("br"),s("span",{staticClass:"line-number"},[n._v("123")]),s("br"),s("span",{staticClass:"line-number"},[n._v("124")]),s("br"),s("span",{staticClass:"line-number"},[n._v("125")]),s("br"),s("span",{staticClass:"line-number"},[n._v("126")]),s("br"),s("span",{staticClass:"line-number"},[n._v("127")]),s("br"),s("span",{staticClass:"line-number"},[n._v("128")]),s("br"),s("span",{staticClass:"line-number"},[n._v("129")]),s("br"),s("span",{staticClass:"line-number"},[n._v("130")]),s("br"),s("span",{staticClass:"line-number"},[n._v("131")]),s("br"),s("span",{staticClass:"line-number"},[n._v("132")]),s("br"),s("span",{staticClass:"line-number"},[n._v("133")]),s("br"),s("span",{staticClass:"line-number"},[n._v("134")]),s("br"),s("span",{staticClass:"line-number"},[n._v("135")]),s("br"),s("span",{staticClass:"line-number"},[n._v("136")]),s("br"),s("span",{staticClass:"line-number"},[n._v("137")]),s("br"),s("span",{staticClass:"line-number"},[n._v("138")]),s("br"),s("span",{staticClass:"line-number"},[n._v("139")]),s("br"),s("span",{staticClass:"line-number"},[n._v("140")]),s("br"),s("span",{staticClass:"line-number"},[n._v("141")]),s("br"),s("span",{staticClass:"line-number"},[n._v("142")]),s("br"),s("span",{staticClass:"line-number"},[n._v("143")]),s("br"),s("span",{staticClass:"line-number"},[n._v("144")]),s("br"),s("span",{staticClass:"line-number"},[n._v("145")]),s("br"),s("span",{staticClass:"line-number"},[n._v("146")]),s("br"),s("span",{staticClass:"line-number"},[n._v("147")]),s("br"),s("span",{staticClass:"line-number"},[n._v("148")]),s("br"),s("span",{staticClass:"line-number"},[n._v("149")]),s("br"),s("span",{staticClass:"line-number"},[n._v("150")]),s("br"),s("span",{staticClass:"line-number"},[n._v("151")]),s("br"),s("span",{staticClass:"line-number"},[n._v("152")]),s("br"),s("span",{staticClass:"line-number"},[n._v("153")]),s("br"),s("span",{staticClass:"line-number"},[n._v("154")]),s("br"),s("span",{staticClass:"line-number"},[n._v("155")]),s("br"),s("span",{staticClass:"line-number"},[n._v("156")]),s("br"),s("span",{staticClass:"line-number"},[n._v("157")]),s("br"),s("span",{staticClass:"line-number"},[n._v("158")]),s("br"),s("span",{staticClass:"line-number"},[n._v("159")]),s("br"),s("span",{staticClass:"line-number"},[n._v("160")]),s("br"),s("span",{staticClass:"line-number"},[n._v("161")]),s("br"),s("span",{staticClass:"line-number"},[n._v("162")]),s("br"),s("span",{staticClass:"line-number"},[n._v("163")]),s("br"),s("span",{staticClass:"line-number"},[n._v("164")]),s("br"),s("span",{staticClass:"line-number"},[n._v("165")]),s("br"),s("span",{staticClass:"line-number"},[n._v("166")]),s("br"),s("span",{staticClass:"line-number"},[n._v("167")]),s("br"),s("span",{staticClass:"line-number"},[n._v("168")]),s("br"),s("span",{staticClass:"line-number"},[n._v("169")]),s("br"),s("span",{staticClass:"line-number"},[n._v("170")]),s("br"),s("span",{staticClass:"line-number"},[n._v("171")]),s("br"),s("span",{staticClass:"line-number"},[n._v("172")]),s("br"),s("span",{staticClass:"line-number"},[n._v("173")]),s("br"),s("span",{staticClass:"line-number"},[n._v("174")]),s("br"),s("span",{staticClass:"line-number"},[n._v("175")]),s("br"),s("span",{staticClass:"line-number"},[n._v("176")]),s("br"),s("span",{staticClass:"line-number"},[n._v("177")]),s("br"),s("span",{staticClass:"line-number"},[n._v("178")]),s("br"),s("span",{staticClass:"line-number"},[n._v("179")]),s("br"),s("span",{staticClass:"line-number"},[n._v("180")]),s("br"),s("span",{staticClass:"line-number"},[n._v("181")]),s("br"),s("span",{staticClass:"line-number"},[n._v("182")]),s("br"),s("span",{staticClass:"line-number"},[n._v("183")]),s("br"),s("span",{staticClass:"line-number"},[n._v("184")]),s("br"),s("span",{staticClass:"line-number"},[n._v("185")]),s("br"),s("span",{staticClass:"line-number"},[n._v("186")]),s("br"),s("span",{staticClass:"line-number"},[n._v("187")]),s("br"),s("span",{staticClass:"line-number"},[n._v("188")]),s("br"),s("span",{staticClass:"line-number"},[n._v("189")]),s("br"),s("span",{staticClass:"line-number"},[n._v("190")]),s("br"),s("span",{staticClass:"line-number"},[n._v("191")]),s("br"),s("span",{staticClass:"line-number"},[n._v("192")]),s("br"),s("span",{staticClass:"line-number"},[n._v("193")]),s("br"),s("span",{staticClass:"line-number"},[n._v("194")]),s("br"),s("span",{staticClass:"line-number"},[n._v("195")]),s("br"),s("span",{staticClass:"line-number"},[n._v("196")]),s("br"),s("span",{staticClass:"line-number"},[n._v("197")]),s("br"),s("span",{staticClass:"line-number"},[n._v("198")]),s("br"),s("span",{staticClass:"line-number"},[n._v("199")]),s("br"),s("span",{staticClass:"line-number"},[n._v("200")]),s("br"),s("span",{staticClass:"line-number"},[n._v("201")]),s("br"),s("span",{staticClass:"line-number"},[n._v("202")]),s("br"),s("span",{staticClass:"line-number"},[n._v("203")]),s("br"),s("span",{staticClass:"line-number"},[n._v("204")]),s("br"),s("span",{staticClass:"line-number"},[n._v("205")]),s("br"),s("span",{staticClass:"line-number"},[n._v("206")]),s("br"),s("span",{staticClass:"line-number"},[n._v("207")]),s("br"),s("span",{staticClass:"line-number"},[n._v("208")]),s("br"),s("span",{staticClass:"line-number"},[n._v("209")]),s("br"),s("span",{staticClass:"line-number"},[n._v("210")]),s("br"),s("span",{staticClass:"line-number"},[n._v("211")]),s("br"),s("span",{staticClass:"line-number"},[n._v("212")]),s("br"),s("span",{staticClass:"line-number"},[n._v("213")]),s("br"),s("span",{staticClass:"line-number"},[n._v("214")]),s("br"),s("span",{staticClass:"line-number"},[n._v("215")]),s("br"),s("span",{staticClass:"line-number"},[n._v("216")]),s("br"),s("span",{staticClass:"line-number"},[n._v("217")]),s("br"),s("span",{staticClass:"line-number"},[n._v("218")]),s("br"),s("span",{staticClass:"line-number"},[n._v("219")]),s("br"),s("span",{staticClass:"line-number"},[n._v("220")]),s("br"),s("span",{staticClass:"line-number"},[n._v("221")]),s("br"),s("span",{staticClass:"line-number"},[n._v("222")]),s("br"),s("span",{staticClass:"line-number"},[n._v("223")]),s("br"),s("span",{staticClass:"line-number"},[n._v("224")]),s("br"),s("span",{staticClass:"line-number"},[n._v("225")]),s("br"),s("span",{staticClass:"line-number"},[n._v("226")]),s("br"),s("span",{staticClass:"line-number"},[n._v("227")]),s("br"),s("span",{staticClass:"line-number"},[n._v("228")]),s("br"),s("span",{staticClass:"line-number"},[n._v("229")]),s("br"),s("span",{staticClass:"line-number"},[n._v("230")]),s("br"),s("span",{staticClass:"line-number"},[n._v("231")]),s("br"),s("span",{staticClass:"line-number"},[n._v("232")]),s("br"),s("span",{staticClass:"line-number"},[n._v("233")]),s("br"),s("span",{staticClass:"line-number"},[n._v("234")]),s("br"),s("span",{staticClass:"line-number"},[n._v("235")]),s("br"),s("span",{staticClass:"line-number"},[n._v("236")]),s("br"),s("span",{staticClass:"line-number"},[n._v("237")]),s("br"),s("span",{staticClass:"line-number"},[n._v("238")]),s("br"),s("span",{staticClass:"line-number"},[n._v("239")]),s("br"),s("span",{staticClass:"line-number"},[n._v("240")]),s("br"),s("span",{staticClass:"line-number"},[n._v("241")]),s("br"),s("span",{staticClass:"line-number"},[n._v("242")]),s("br"),s("span",{staticClass:"line-number"},[n._v("243")]),s("br"),s("span",{staticClass:"line-number"},[n._v("244")]),s("br"),s("span",{staticClass:"line-number"},[n._v("245")]),s("br"),s("span",{staticClass:"line-number"},[n._v("246")]),s("br")])]),s("p",[n._v("AtomicReferenceFieldUpdater具体可以参考："),s("a",{attrs:{href:"https://pdai.tech/md/java/thread/java-thread-x-juc-AtomicInteger.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("JUC原子类: CAS, Unsafe和原子类详解"),s("OutboundLink")],1)]),n._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),s("hr"),n._v(" "),s("ul",[s("li",[n._v("JDK 11 源码")]),n._v(" "),s("li",[n._v("https://www.cnblogs.com/winterfells/p/8745297.html")]),n._v(" "),s("li",[n._v("https://www.cnblogs.com/AdaiCoffee/p/11369699.html")])])])}),[],!1,null,null,null);s.default=t.exports},593:function(n,s,a){n.exports=a.p+"assets/img/io-inputstream-1.482e39a8.png"}}]);