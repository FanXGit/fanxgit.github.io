(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{3408:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-init-1.82c07422.png"},3409:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-init-2.38261ac0.png"},3410:function(n,s,a){n.exports=a.p+"assets/img/mybatis-y-init-4.f4317fa8.png"},4213:function(n,s,a){"use strict";a.r(s);var e=a(7),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis详解-初始化基本过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解-初始化基本过程"}},[n._v("#")]),n._v(" MyBatis详解 - 初始化基本过程")]),n._v(" "),s("p",[n._v("===========================================")]),n._v(" "),s("blockquote",[s("p",[n._v("从上文我们知道MyBatis和数据库的交互有两种方式有Java API和Mapper接口两种，所以MyBatis的初始化必然也有两种；那么MyBatis是如何初始化的呢？@pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E8%BF%87%E7%A8%8B"}},[n._v("MyBatis详解 - 初始化基本过程")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#mybatis%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%BC%95%E5%85%A5"}},[n._v("MyBatis初始化的方式及引入")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F---xml%E9%85%8D%E7%BD%AE"}},[n._v("初始化方式 - XML配置")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#mybatis%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E8%BF%87%E7%A8%8B"}},[n._v("MyBatis初始化基本过程：")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E5%88%9B%E5%BB%BAconfiguration%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B"}},[n._v("创建Configuration对象的过程")])])])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F---%E5%9F%BA%E4%BA%8Ejava-api"}},[n._v("初始化方式 - 基于Java API")])])])])]),n._v(" "),s("h1",{attrs:{id:"mybatis初始化的方式及引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis初始化的方式及引入"}},[n._v("#")]),n._v(" MyBatis初始化的方式及引入")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("MyBatis的初始化可以有两种方式：")]),n._v(" "),s("ul",[s("li",[s("p",[s("strong",[n._v("基于XML配置文件")]),n._v("：基于XML配置文件的方式是将MyBatis的所有配置信息放在XML文件中，MyBatis通过加载并XML配置文件，将配置文信息组装成内部的Configuration对象。")])]),n._v(" "),s("li",[s("p",[s("strong",[n._v("基于Java API")]),n._v("：这种方式不使用XML配置文件，需要MyBatis使用者在Java代码中，手动创建Configuration对象，然后将配置参数set 进入Configuration对象中。")])])]),n._v(" "),s("h1",{attrs:{id:"初始化方式-xml配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化方式-xml配置"}},[n._v("#")]),n._v(" 初始化方式 - XML配置")]),n._v(" "),s("hr"),n._v(" "),s("blockquote",[s("p",[n._v("接下来我们将通过 基于XML配置文件方式的MyBatis初始化，深入探讨MyBatis是如何通过配置文件构建Configuration对象，并使用它。")])]),n._v(" "),s("p",[n._v("现在就从使用MyBatis的简单例子入手，深入分析一下MyBatis是怎样完成初始化的，都初始化了什么。看以下代码：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// mybatis初始化\nString resource = "mybatis-config.xml";  \nInputStream inputStream = Resources.getResourceAsStream(resource);  \nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n// 创建SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();  \n\n// 执行SQL语句\nList list = sqlSession.selectList("com.foo.bean.BlogMapper.queryAllBlogInfo");\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("有过MyBatis使用经验的读者会知道，上述语句的作用是执行"),s("code",[n._v("com.foo.bean.BlogMapper.queryAllBlogInfo")]),n._v(" 定义的SQL语句，返回一个List结果集。总的来说，上述代码经历了三个阶段(本系列也对应三篇文章分别讲解)：")]),n._v(" "),s("ul",[s("li",[s("code",[n._v("mybatis初始化")]),n._v(" 本文")]),n._v(" "),s("li",[s("code",[n._v("创建SqlSession")]),n._v(" - 详解后文")]),n._v(" "),s("li",[s("code",[n._v("执行SQL语句")]),n._v(" - 详解后文")])]),n._v(" "),s("p",[n._v("上述代码的功能是根据配置文件mybatis-config.xml 配置文件，创建SqlSessionFactory对象，然后产生SqlSession，执行SQL语句。而mybatis的初始化就发生在第三句：SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); 现在就让我们看看第三句到底发生了什么。")]),n._v(" "),s("h3",{attrs:{id:"mybatis初始化基本过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis初始化基本过程"}},[n._v("#")]),n._v(" MyBatis初始化基本过程：")]),n._v(" "),s("p",[n._v("SqlSessionFactoryBuilder根据传入的数据流生成Configuration对象，然后根据Configuration对象创建默认的SqlSessionFactory实例。")]),n._v(" "),s("p",[n._v("初始化的基本过程如下序列图所示：")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3408),alt:""}})]),n._v(" "),s("p",[n._v("由上图所示，mybatis初始化要经过简单的以下几步：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("调用SqlSessionFactoryBuilder对象的build(inputStream)方法；")])]),n._v(" "),s("li",[s("p",[n._v("SqlSessionFactoryBuilder会根据输入流inputStream等信息创建XMLConfigBuilder对象;")])]),n._v(" "),s("li",[s("p",[n._v("SqlSessionFactoryBuilder调用XMLConfigBuilder对象的parse()方法；")])]),n._v(" "),s("li",[s("p",[n._v("XMLConfigBuilder对象返回Configuration对象；")])]),n._v(" "),s("li",[s("p",[n._v("SqlSessionFactoryBuilder根据Configuration对象创建一个DefaultSessionFactory对象；")])]),n._v(" "),s("li",[s("p",[n._v("SqlSessionFactoryBuilder返回 DefaultSessionFactory对象给Client，供Client使用。")])])]),n._v(" "),s("p",[n._v("SqlSessionFactoryBuilder相关的代码如下所示：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public SqlSessionFactory build(InputStream inputStream)  {  \n    return build(inputStream, null, null);  \n}  \n\npublic SqlSessionFactory build(InputStream inputStream, String environment, Properties properties)  {  \n    try  {  \n        //2. 创建XMLConfigBuilder对象用来解析XML配置文件，生成Configuration对象  \n        XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);  \n        //3. 将XML配置文件内的信息解析成Java对象Configuration对象  \n        Configuration config = parser.parse();  \n        //4. 根据Configuration对象创建出SqlSessionFactory对象  \n        return build(config);  \n    } catch (Exception e) {  \n        throw ExceptionFactory.wrapException("Error building SqlSession.", e);  \n    } finally {  \n        ErrorContext.instance().reset();  \n        try {  \n            inputStream.close();  \n        } catch (IOException e) {  \n            // Intentionally ignore. Prefer previous error.  \n        }  \n    }\n}\n\n// 从此处可以看出，MyBatis内部通过Configuration对象来创建SqlSessionFactory,用户也可以自己通过API构造好Configuration对象，调用此方法创SqlSessionFactory  \npublic SqlSessionFactory build(Configuration config) {  \n    return new DefaultSqlSessionFactory(config);  \n}  \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br")])]),s("p",[n._v("上述的初始化过程中，涉及到了以下几个对象：")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("SqlSessionFactoryBuilder ： SqlSessionFactory的构造器，用于创建SqlSessionFactory，采用了Builder设计模式")])]),n._v(" "),s("li",[s("p",[n._v("Configuration ：该对象是mybatis-config.xml文件中所有mybatis配置信息")])]),n._v(" "),s("li",[s("p",[n._v("SqlSessionFactory：SqlSession工厂类，以工厂形式创建SqlSession对象，采用了Factory工厂设计模式")])]),n._v(" "),s("li",[s("p",[n._v("XmlConfigParser ：负责将mybatis-config.xml配置文件解析成Configuration对象，共SqlSessonFactoryBuilder使用，创建SqlSessionFactory")])])]),n._v(" "),s("h3",{attrs:{id:"创建configuration对象的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建configuration对象的过程"}},[n._v("#")]),n._v(" 创建Configuration对象的过程")]),n._v(" "),s("blockquote",[s("p",[n._v("接着上述的 MyBatis初始化基本过程讨论，当SqlSessionFactoryBuilder执行build()方法，调用了XMLConfigBuilder的parse()方法，然后返回了Configuration对象。那么parse()方法是如何处理XML文件，生成Configuration对象的呢？")])]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("XMLConfigBuilder会将XML配置文件的信息转换为Document对象")])])]),n._v(" "),s("p",[n._v("而XML配置定义文件DTD转换成XMLMapperEntityResolver对象，然后将二者封装到XpathParser对象中，XpathParser的作用是提供根据Xpath表达式获取基本的DOM节点Node信息的操作。如下图所示：")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3409),alt:""}})]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("之后XMLConfigBuilder调用parse()方法")])])]),n._v(" "),s("p",[n._v("会从XPathParser中取出"),s("code",[n._v("<configuration>")]),n._v("节点对应的Node对象，然后解析此Node节点的子Node：properties, settings, typeAliases,typeHandlers, objectFactory, objectWrapperFactory, plugins, environments,databaseIdProvider, mappers：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public Configuration parse() {  \n    if (parsed) {  \n        throw new BuilderException("Each XMLConfigBuilder can only be used once.");  \n    }  \n    parsed = true;  \n    //源码中没有这一句，只有 parseConfiguration(parser.evalNode("/configuration"));  \n    //为了让读者看得更明晰，源码拆分为以下两句  \n    XNode configurationNode = parser.evalNode("/configuration");  \n    parseConfiguration(configurationNode);  \n    return configuration;  \n}  \n/** \n * 解析 "/configuration"节点下的子节点信息，然后将解析的结果设置到Configuration对象中 \n */  \nprivate void parseConfiguration(XNode root) {  \n    try {  \n        //1.首先处理properties 节点     \n        propertiesElement(root.evalNode("properties")); //issue #117 read properties first  \n        //2.处理typeAliases  \n        typeAliasesElement(root.evalNode("typeAliases"));  \n        //3.处理插件  \n        pluginElement(root.evalNode("plugins"));  \n        //4.处理objectFactory  \n        objectFactoryElement(root.evalNode("objectFactory"));  \n        //5.objectWrapperFactory  \n        objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));  \n        //6.settings  \n        settingsElement(root.evalNode("settings"));  \n        //7.处理environments  \n        environmentsElement(root.evalNode("environments")); // read it after objectFactory and objectWrapperFactory issue #631  \n        //8.database  \n        databaseIdProviderElement(root.evalNode("databaseIdProvider"));  \n        //9.typeHandlers  \n        typeHandlerElement(root.evalNode("typeHandlers"));  \n        //10.mappers  \n        mapperElement(root.evalNode("mappers"));  \n    } catch (Exception e) {  \n        throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);  \n    }  \n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])]),s("p",[n._v("注意：在上述代码中，还有一个非常重要的地方，就是解析XML配置文件子节点"),s("code",[n._v("<mappers>")]),n._v('的方法mapperElements(root.evalNode("mappers")), 它将解析我们配置的Mapper.xml配置文件，Mapper配置文件可以说是MyBatis的核心，MyBatis的特性和理念都体现在此Mapper的配置和设计上。')]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("然后将这些值解析出来设置到Configuration对象中")])])]),n._v(" "),s("p",[n._v('解析子节点的过程这里就不一一介绍了，用户可以参照MyBatis源码仔细揣摩，我们就看上述的environmentsElement(root.evalNode("environments")); 方法是如何将environments的信息解析出来，设置到Configuration对象中的：')]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/** \n * 解析environments节点，并将结果设置到Configuration对象中 \n * 注意：创建envronment时，如果SqlSessionFactoryBuilder指定了特定的环境（即数据源）； \n *      则返回指定环境（数据源）的Environment对象，否则返回默认的Environment对象； \n *      这种方式实现了MyBatis可以连接多数据源 \n */  \nprivate void environmentsElement(XNode context) throws Exception {  \n    if (context != null)  \n    {  \n        if (environment == null)  \n        {  \n            environment = context.getStringAttribute("default");  \n        }  \n        for (XNode child : context.getChildren())  \n        {  \n            String id = child.getStringAttribute("id");  \n            if (isSpecifiedEnvironment(id))  \n            {  \n                //1.创建事务工厂 TransactionFactory  \n                TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));  \n                DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));  \n                //2.创建数据源DataSource  \n                DataSource dataSource = dsFactory.getDataSource();  \n                //3. 构造Environment对象  \n                Environment.Builder environmentBuilder = new Environment.Builder(id)  \n                .transactionFactory(txFactory)  \n                .dataSource(dataSource);  \n                //4. 将创建的Envronment对象设置到configuration 对象中  \n                configuration.setEnvironment(environmentBuilder.build());  \n            }  \n        }  \n    }  \n}\n\nprivate boolean isSpecifiedEnvironment(String id)  \n{  \n    if (environment == null)  \n    {  \n        throw new BuilderException("No environment specified.");  \n    }  \n    else if (id == null)  \n    {  \n        throw new BuilderException("Environment requires an id attribute.");  \n    }  \n    else if (environment.equals(id))  \n    {  \n        return true;  \n    }  \n    return false;  \n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br")])]),s("ul",[s("li",[s("strong",[n._v("返回Configuration对象")])])]),n._v(" "),s("p",[n._v("将上述的MyBatis初始化基本过程的序列图细化：")]),n._v(" "),s("p",[s("img",{attrs:{src:a(3410),alt:""}})]),n._v(" "),s("h1",{attrs:{id:"初始化方式-基于java-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化方式-基于java-api"}},[n._v("#")]),n._v(" 初始化方式 - 基于Java API")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("当然我们可以使用XMLConfigBuilder手动解析XML配置文件来创建Configuration对象，代码如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('String resource = "mybatis-config.xml";  \nInputStream inputStream = Resources.getResourceAsStream(resource);  \n// 手动创建XMLConfigBuilder，并解析创建Configuration对象  \nXMLConfigBuilder parser = new XMLConfigBuilder(inputStream, null,null); // 看这里 \nConfiguration configuration = parser.parse();  \n// 使用Configuration对象创建SqlSessionFactory  \nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);  \n// 使用MyBatis  \nSqlSession sqlSession = sqlSessionFactory.openSession();  \nList list = sqlSession.selectList("com.foo.bean.BlogMapper.queryAllBlogInfo");  \n```)')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);