(window.webpackJsonp=window.webpackJsonp||[]).push([[425],{1136:function(e,s,t){e.exports=t.p+"assets/img/java-thread-x-juc-overview-1-u.6162f47c.png"},3701:function(e,s,t){"use strict";t.r(s);var r=t(7),a=Object(r.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"springboot定时任务-scheduleexecutorservice实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springboot定时任务-scheduleexecutorservice实现方式"}},[e._v("#")]),e._v(" SpringBoot定时任务 - ScheduleExecutorService实现方式")]),e._v(" "),s("blockquote",[s("p",[e._v("上文介绍的Timer在实际开发中很少被使用， 因为Timer底层是使用一个单线程来实现多个Timer任务处理的，所有任务都是由同一个线程来调度，所有任务都是串行执行。而ScheduledExecutorService是基于线程池的，可以开启多个线程进行执行多个任务，每个任务开启一个线程； 这样任务的延迟和未处理异常就不会影响其它任务的执行了。@pdai")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1---scheduleexecutorservice%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F"}},[e._v("SpringBoot定时任务 - ScheduleExecutorService实现方式")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%9F%A5%E8%AF%86%E5%87%86%E5%A4%87"}},[e._v("知识准备")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8scheduledexecutorservice-%E4%BB%A3%E6%9B%BF-timer"}},[e._v("为什么用ScheduledExecutorService 代替 Timer？")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#scheduledexecutorservice%E6%89%80%E5%9C%A8%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB"}},[e._v("ScheduledExecutorService所在的线程池的知识体系？")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#scheduledexecutorservice%E5%AE%9E%E7%8E%B0%E6%A1%88%E4%BE%8B"}},[e._v("ScheduledExecutorService实现案例")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#schedule"}},[e._v("schedule")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#scheduleatfixedrate"}},[e._v("scheduleAtFixedRate")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#schedulewithfixeddelay"}},[e._v("scheduleWithFixedDelay")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3"}},[e._v("进一步理解")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#schedule-%E5%92%8C-scheduleatfixedrate%E5%92%8C-schedulewithfixeddelay%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB"}},[e._v("schedule 和 scheduleAtFixedRate和 scheduleWithFixedDelay有何区别？")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%A4%BA%E4%BE%8B%E6%BA%90%E7%A0%81"}},[e._v("示例源码")])])])])]),e._v(" "),s("h1",{attrs:{id:"知识准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识准备"}},[e._v("#")]),e._v(" 知识准备")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[e._v("需要对ScheduledExecutorService 代替 Timer的原因以及ScheduledExecutorService所在的知识体系有了解。")])]),e._v(" "),s("h3",{attrs:{id:"为什么用scheduledexecutorservice-代替-timer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么用scheduledexecutorservice-代替-timer"}},[e._v("#")]),e._v(" 为什么用ScheduledExecutorService 代替 Timer？")]),e._v(" "),s("p",[e._v("上文我们说到Timer底层是使用一个单线程来实现多个Timer任务处理的，所有任务都是由同一个线程来调度，所有任务都是串行执行，意味着同一时间只能有一个任务得到执行，而前一个任务的延迟或者异常会影响到之后的任务。")]),e._v(" "),s("p",[e._v("如果有一个定时任务在运行时，产生未处理的异常，那么当前这个线程就会停止，那么所有的定时任务都会停止，受到影响。")]),e._v(" "),s("p",[e._v("而ScheduledExecutorService是基于线程池的，可以开启多个线程进行执行多个任务，每个任务开启一个线程； 这样任务的延迟和未处理异常就不会影响其它任务的执行了。")]),e._v(" "),s("h3",{attrs:{id:"scheduledexecutorservice所在的线程池的知识体系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledexecutorservice所在的线程池的知识体系"}},[e._v("#")]),e._v(" ScheduledExecutorService所在的线程池的知识体系？")]),e._v(" "),s("p",[e._v("属于Java并发中JUC，具体可以看"),s("a",{attrs:{href:"https://pdai.tech/md/java/thread/java-thread-x-juc-overview.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JUC - 类汇总和学习指南"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("img",{attrs:{src:t(1136),alt:"image"}})]),e._v(" "),s("h1",{attrs:{id:"scheduledexecutorservice实现案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledexecutorservice实现案例"}},[e._v("#")]),e._v(" ScheduledExecutorService实现案例")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[e._v("ScheduledExecutorService使用例子如下。")])]),e._v(" "),s("h3",{attrs:{id:"schedule"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#schedule"}},[e._v("#")]),e._v(" schedule")]),e._v(" "),s("p",[e._v("延迟1秒执行一个进程任务。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@SneakyThrows\npublic static void schedule() {\n    ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n    executor.schedule(\n            new Runnable() {\n                @Override\n                @SneakyThrows\n                public void run() {\n                    log.info("run schedule @ {}", LocalDateTime.now());\n                }\n            },\n            1000,\n            TimeUnit.MILLISECONDS);\n    // waiting to process(sleep to mock)\n    Thread.sleep(10000);\n\n    // stop\n    executor.shutdown();\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br")])]),s("p",[e._v("输出")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("21:07:02.047 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run schedule @ 2022-03-10T21:07:02.046\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"scheduleatfixedrate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduleatfixedrate"}},[e._v("#")]),e._v(" scheduleAtFixedRate")]),e._v(" "),s("p",[e._v("延迟0.5秒开始执行，每秒执行一次， 10秒后停止。")]),e._v(" "),s("p",[e._v("同时测试某次任务执行时间大于周期时间的变化。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('/**\n    * 每秒执行一次，延迟0.5秒执行。\n    */\n@SneakyThrows\npublic static void scheduleAtFixedRate() {\n    AtomicInteger count = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n    executor.scheduleAtFixedRate(\n            new Runnable() {\n                @Override\n                @SneakyThrows\n                public void run() {\n                    if (count.getAndIncrement()==2) {\n                        Thread.sleep(5000); // 执行时间超过执行周期\n                    }\n                    log.info("run scheduleAtFixedRate @ {}", LocalDateTime.now());\n                }\n            },\n            500,\n            1000, // 每隔多久执行\n            TimeUnit.MILLISECONDS);\n    // waiting to process(sleep to mock)\n    Thread.sleep(10000);\n\n    // stop\n    executor.shutdown();\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br")])]),s("p",[e._v("输出")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("20:51:47.626 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:47.624\n20:51:48.575 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:48.575\n20:51:54.579 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:54.579\n20:51:54.579 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:54.579\n20:51:54.579 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:54.579\n20:51:54.580 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:54.580\n20:51:54.580 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:54.580\n20:51:54.580 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:54.580\n20:51:55.574 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:55.574\n20:51:56.578 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleAtFixedRate @ 2022-03-10T20:51:56.578\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("（你会发现周期执行1秒中执行一次，但是某次执行了5秒，这时候，后续的任务会加快执行进度，一次性就执行了，执行的时间都是20:51:54，所以scheduleAtFixedRate最大的特点是"),s("strong",[e._v("保证了总时间段内的执行次数")]),e._v("）")]),e._v(" "),s("h3",{attrs:{id:"schedulewithfixeddelay"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#schedulewithfixeddelay"}},[e._v("#")]),e._v(" scheduleWithFixedDelay")]),e._v(" "),s("p",[e._v("延迟0.5秒开始执行，每秒执行一次， 10秒后停止。")]),e._v(" "),s("p",[e._v("同时测试某次任务执行时间大于周期时间的变化。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('/**\n    * 每秒执行一次，延迟0.5秒执行。\n    */\n@SneakyThrows\npublic static void scheduleWithFixedDelay() {\n    AtomicInteger count = new AtomicInteger(0);\n    ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n    executor.scheduleWithFixedDelay(\n            new Runnable() {\n                @Override\n                @SneakyThrows\n                public void run() {\n                    if (count.getAndIncrement()==2) {\n                        Thread.sleep(5000); // 执行时间超过执行周期\n                    }\n                    log.info("run scheduleWithFixedDelay @ {}", LocalDateTime.now());\n                }\n            },\n            500,\n            1000, // 上次执行完成后，延迟多久执行\n            TimeUnit.MILLISECONDS);\n\n    // waiting to process(sleep to mock)\n    Thread.sleep(10000);\n\n    // stop\n    executor.shutdown();\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br")])]),s("p",[e._v("输出")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("20:50:03.559 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleWithFixedDelay @ 2022-03-10T20:50:03.557\n20:50:04.564 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleWithFixedDelay @ 2022-03-10T20:50:04.564\n20:50:10.568 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleWithFixedDelay @ 2022-03-10T20:50:10.568\n20:50:11.569 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleWithFixedDelay @ 2022-03-10T20:50:11.569\n20:50:12.571 [pool-1-thread-1] INFO tech.pdai.springboot.schedule.executorservice.ScheduleExecutorServiceDemo - run scheduleWithFixedDelay @ 2022-03-10T20:50:12.571\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h1",{attrs:{id:"进一步理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进一步理解"}},[e._v("#")]),e._v(" 进一步理解")]),e._v(" "),s("hr"),e._v(" "),s("blockquote",[s("p",[e._v("我们再通过一些问题来帮助你更深入理解ScheduleExecutorService实现方式。@pdai")])]),e._v(" "),s("h3",{attrs:{id:"schedule-和-scheduleatfixedrate和-schedulewithfixeddelay有何区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#schedule-和-scheduleatfixedrate和-schedulewithfixeddelay有何区别"}},[e._v("#")]),e._v(" schedule 和 scheduleAtFixedRate和 scheduleWithFixedDelay有何区别？")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("schedule")]),e._v("：延迟执行一个任务。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("scheduleAtFixedRate")]),e._v("：每次执行时间为上一次任务开始起向后推一个period间隔，也就是说下次执行时间相对于上一次任务开始的时间点；按照上述的例子，它"),s("strong",[e._v("保证了总时间段内的任务的执行次数")])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("scheduleAtFixedDelay")]),e._v("：每次执行完当前任务后，然后间隔一个period的时间再执行下一个任务； 当某个任务执行周期大于时间间隔时，依然按照间隔时间执行下个任务，即它"),s("strong",[e._v("保证了任务之间执行的间隔")]),e._v("。")])])]),e._v(" "),s("p",[e._v("（PS：和timer对比下，timer中没有scheduleAtFixedDelay，它的schedule等同于scheduleAtFixedDelay）")]),e._v(" "),s("h1",{attrs:{id:"示例源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例源码"}},[e._v("#")]),e._v(" 示例源码")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("https://github.com/realpdai/tech-pdai-spring-demos")])])}),[],!1,null,null,null);s.default=a.exports}}]);