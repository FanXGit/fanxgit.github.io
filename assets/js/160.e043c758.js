(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{3523:function(e,n,s){"use strict";s.r(n);var t=s(7),a=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"map-treeset-treemap-源码解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-treeset-treemap-源码解析"}},[e._v("#")]),e._v(" Map - TreeSet & TreeMap 源码解析")]),e._v(" "),n("blockquote",[n("p",[e._v("本文主要对Map - TreeSet & TreeMap 源码解析。@pdai")])]),e._v(" "),n("h2",{attrs:{id:"java-7-treeset-treemap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-7-treeset-treemap"}},[e._v("#")]),e._v(" Java 7 - TreeSet & TreeMap")]),e._v(" "),n("hr"),e._v(" "),n("h3",{attrs:{id:"总体介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总体介绍"}},[e._v("#")]),e._v(" 总体介绍")]),e._v(" "),n("p",[e._v("之所以把"),n("em",[e._v("TreeSet")]),e._v("和"),n("em",[e._v("TreeMap")]),e._v("放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说"),n("em",[e._v("TreeSet")]),e._v("里面有一个"),n("em",[e._v("TreeMap")]),e._v(" "),n("strong",[e._v("(适配器模式)")]),e._v("。因此本文将重点分析"),n("em",[e._v("TreeMap")]),e._v("。")]),e._v(" "),n("p",[e._v("Java "),n("em",[e._v("TreeMap")]),e._v("实现了"),n("em",[e._v("SortedMap")]),e._v("接口，也就是说会按照"),n("code",[e._v("key")]),e._v("的大小顺序对"),n("em",[e._v("Map")]),e._v("中的元素进行排序，"),n("code",[e._v("key")]),e._v("大小的评判可以通过其本身的自然顺序(natural ordering)，也可以通过构造时传入的比较器(Comparator)。")]),e._v(" "),n("p",[n("strong",[n("em",[e._v("TreeMap")]),e._v("底层通过红黑树(Red-Black tree)实现")]),e._v("，也就意味着"),n("code",[e._v("containsKey()")]),e._v(", "),n("code",[e._v("get()")]),e._v(", "),n("code",[e._v("put()")]),e._v(", "),n("code",[e._v("remove()")]),e._v("都有着"),n("code",[e._v("log(n)")]),e._v("的时间复杂度。其具体算法实现参照了《算法导论》。")]),e._v(" "),n("p",[n("img",{attrs:{src:s(422),alt:"TreeMap_base.png"}})]),e._v(" "),n("p",[e._v("出于性能原因，"),n("em",[e._v("TreeMap")]),e._v("是非同步的(not synchronized)，如果需要在多线程环境使用，需要程序员手动同步；或者通过如下方式将"),n("em",[e._v("TreeMap")]),e._v("包装成(wrapped)同步的:")]),e._v(" "),n("p",[n("code",[e._v("SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));")])]),e._v(" "),n("p",[n("strong",[e._v("红黑树是一种近似平衡的二叉查找树，它能够确保任何一个节点的左右子树的高度差不会超过二者中较低那个的一倍")]),e._v("。具体来说，红黑树是满足如下条件的二叉查找树(binary search tree):")]),e._v(" "),n("ol",[n("li",[e._v("每个节点要么是红色，要么是黑色。")]),e._v(" "),n("li",[e._v("根节点必须是黑色")]),e._v(" "),n("li",[e._v("红色节点不能连续(也即是，红色节点的孩子和父亲都不能是红色)。")]),e._v(" "),n("li",[e._v("对于每个节点，从该点至"),n("code",[e._v("null")]),e._v("(树尾端)的任何路径，都含有相同个数的黑色节点。")])]),e._v(" "),n("p",[e._v("在树的结构发生改变时(插入或者删除操作)，往往会破坏上述条件3或条件4，需要通过调整使得查找树重新满足红黑树的约束条件。")]),e._v(" "),n("h3",{attrs:{id:"预备知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预备知识"}},[e._v("#")]),e._v(" 预备知识")]),e._v(" "),n("p",[e._v("前文说到当查找树的结构发生改变时，红黑树的约束条件可能被破坏，需要通过调整使得查找树重新满足红黑树的约束条件。调整可以分为两类: 一类是颜色调整，即改变某个节点的颜色；另一类是结构调整，即改变检索树的结构关系。结构调整过程包含两个基本操作 : "),n("strong",[e._v("左旋(Rotate Left)，右旋(RotateRight)")]),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"左旋"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#左旋"}},[e._v("#")]),e._v(" 左旋")]),e._v(" "),n("p",[e._v("左旋的过程是将"),n("code",[e._v("x")]),e._v("的右子树绕"),n("code",[e._v("x")]),e._v("逆时针旋转，使得"),n("code",[e._v("x")]),e._v("的右子树成为"),n("code",[e._v("x")]),e._v("的父亲，同时修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。")]),e._v(" "),n("p",[n("img",{attrs:{src:s(423),alt:"TreeMap_rotateLeft.png"}})]),e._v(" "),n("p",[n("em",[e._v("TreeMap")]),e._v("中左旋代码如下:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//Rotate Left\nprivate void rotateLeft(Entry<K,V> p) {\n    if (p != null) {\n        Entry<K,V> r = p.right;\n        p.right = r.left;\n        if (r.left != null)\n            r.left.parent = p;\n        r.parent = p.parent;\n        if (p.parent == null)\n            root = r;\n        else if (p.parent.left == p)\n            p.parent.left = r;\n        else\n            p.parent.right = r;\n        r.left = p;\n        p.parent = r;\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("h4",{attrs:{id:"右旋"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#右旋"}},[e._v("#")]),e._v(" 右旋")]),e._v(" "),n("p",[e._v("右旋的过程是将"),n("code",[e._v("x")]),e._v("的左子树绕"),n("code",[e._v("x")]),e._v("顺时针旋转，使得"),n("code",[e._v("x")]),e._v("的左子树成为"),n("code",[e._v("x")]),e._v("的父亲，同时修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。")]),e._v(" "),n("p",[n("img",{attrs:{src:s(424),alt:"TreeMap_rotateRight.png"}})]),e._v(" "),n("p",[n("em",[e._v("TreeMap")]),e._v("中右旋代码如下:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//Rotate Right\nprivate void rotateRight(Entry<K,V> p) {\n    if (p != null) {\n        Entry<K,V> l = p.left;\n        p.left = l.right;\n        if (l.right != null) l.right.parent = p;\n        l.parent = p.parent;\n        if (p.parent == null)\n            root = l;\n        else if (p.parent.right == p)\n            p.parent.right = l;\n        else p.parent.left = l;\n        l.right = p;\n        p.parent = l;\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("h4",{attrs:{id:"寻找节点后继"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#寻找节点后继"}},[e._v("#")]),e._v(" 寻找节点后继")]),e._v(" "),n("p",[e._v("对于一棵二叉查找树，给定节点t，其后继(树中比大于t的最小的那个元素)可以通过如下方式找到:")]),e._v(" "),n("blockquote",[n("ol",[n("li",[e._v("t的右子树不空，则t的后继是其右子树中最小的那个元素。")]),e._v(" "),n("li",[e._v("t的右孩子为空，则t的后继是其第一个向左走的祖先。")])])]),e._v(" "),n("p",[e._v("后继节点在红黑树的删除操作中将会用到。")]),e._v(" "),n("p",[n("img",{attrs:{src:s(425),alt:"TreeMap_successor.png"}})]),e._v(" "),n("p",[n("em",[e._v("TreeMap")]),e._v("中寻找节点后继的代码如下:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 寻找节点后继函数successor()\nstatic <K,V> TreeMap.Entry<K,V> successor(Entry<K,V> t) {\n    if (t == null)\n        return null;\n    else if (t.right != null) {// 1. t的右子树不空，则t的后继是其右子树中最小的那个元素\n        Entry<K,V> p = t.right;\n        while (p.left != null)\n            p = p.left;\n        return p;\n    } else {// 2. t的右孩子为空，则t的后继是其第一个向左走的祖先\n        Entry<K,V> p = t.parent;\n        Entry<K,V> ch = t;\n        while (p != null && ch == p.right) {\n            ch = p;\n            p = p.parent;\n        }\n        return p;\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br")])]),n("h3",{attrs:{id:"方法剖析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法剖析"}},[e._v("#")]),e._v(" 方法剖析")]),e._v(" "),n("h4",{attrs:{id:"get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" get()")]),e._v(" "),n("p",[n("code",[e._v("get(Object key)")]),e._v("方法根据指定的"),n("code",[e._v("key")]),e._v("值返回对应的"),n("code",[e._v("value")]),e._v("，该方法调用了"),n("code",[e._v("getEntry(Object key)")]),e._v("得到相应的"),n("code",[e._v("entry")]),e._v("，然后返回"),n("code",[e._v("entry.value")]),e._v("。因此"),n("code",[e._v("getEntry()")]),e._v("是算法的核心。算法思想是根据"),n("code",[e._v("key")]),e._v("的自然顺序(或者比较器顺序)对二叉查找树进行查找，直到找到满足"),n("code",[e._v("k.compareTo(p.key) == 0")]),e._v("的"),n("code",[e._v("entry")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:s(426),alt:"TreeMap_getEntry.png"}})]),e._v(" "),n("p",[e._v("具体代码如下:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//getEntry()方法\nfinal Entry<K,V> getEntry(Object key) {\n    ......\n    if (key == null)//不允许key值为null\n        throw new NullPointerException();\n    Comparable<? super K> k = (Comparable<? super K>) key;//使用元素的自然顺序\n    Entry<K,V> p = root;\n    while (p != null) {\n        int cmp = k.compareTo(p.key);\n        if (cmp < 0)//向左找\n            p = p.left;\n        else if (cmp > 0)//向右找\n            p = p.right;\n        else\n            return p;\n    }\n    return null;\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("h4",{attrs:{id:"put"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[e._v("#")]),e._v(" put()")]),e._v(" "),n("p",[n("code",[e._v("put(K key, V value)")]),e._v("方法是将指定的"),n("code",[e._v("key")]),e._v(", "),n("code",[e._v("value")]),e._v("对添加到"),n("code",[e._v("map")]),e._v("里。该方法首先会对"),n("code",[e._v("map")]),e._v("做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于"),n("code",[e._v("getEntry()")]),e._v("方法；如果没有找到则会在红黑树中插入新的"),n("code",[e._v("entry")]),e._v("，如果插入之后破坏了红黑树的约束条件，还需要进行调整(旋转，改变某些节点的颜色)。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public V put(K key, V value) {\n\t......\n    int cmp;\n    Entry<K,V> parent;\n    if (key == null)\n        throw new NullPointerException();\n    Comparable<? super K> k = (Comparable<? super K>) key;//使用元素的自然顺序\n    do {\n        parent = t;\n        cmp = k.compareTo(t.key);\n        if (cmp < 0) t = t.left;//向左找\n        else if (cmp > 0) t = t.right;//向右找\n        else return t.setValue(value);\n    } while (t != null);\n    Entry<K,V> e = new Entry<>(key, value, parent);//创建并插入新的entry\n    if (cmp < 0) parent.left = e;\n    else parent.right = e;\n    fixAfterInsertion(e);//调整\n    size++;\n    return null;\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("p",[e._v("上述代码的插入部分并不难理解: 首先在红黑树上找到合适的位置，然后创建新的"),n("code",[e._v("entry")]),e._v("并插入(当然，新插入的节点一定是树的叶子)。难点是调整函数"),n("code",[e._v("fixAfterInsertion()")]),e._v("，前面已经说过，调整往往需要1.改变某些节点的颜色，2.对某些节点进行旋转。")]),e._v(" "),n("p",[n("img",{attrs:{src:s(427),alt:"TreeMap_put.png"}})]),e._v(" "),n("p",[e._v("调整函数"),n("code",[e._v("fixAfterInsertion()")]),e._v("的具体代码如下，其中用到了上文中提到的"),n("code",[e._v("rotateLeft()")]),e._v("和"),n("code",[e._v("rotateRight()")]),e._v("函数。通过代码我们能够看到，情况2其实是落在情况3内的。情况4～情况6跟前三种情况是对称的，因此图解中并没有画出后三种情况，读者可以参考代码自行理解。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//红黑树调整函数fixAfterInsertion()\nprivate void fixAfterInsertion(Entry<K,V> x) {\n    x.color = RED;\n    while (x != null && x != root && x.parent.color == RED) {\n        if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {\n            Entry<K,V> y = rightOf(parentOf(parentOf(x)));\n            if (colorOf(y) == RED) {\n                setColor(parentOf(x), BLACK);              // 情况1\n                setColor(y, BLACK);                        // 情况1\n                setColor(parentOf(parentOf(x)), RED);      // 情况1\n                x = parentOf(parentOf(x));                 // 情况1\n            } else {\n                if (x == rightOf(parentOf(x))) {\n                    x = parentOf(x);                       // 情况2\n                    rotateLeft(x);                         // 情况2\n                }\n                setColor(parentOf(x), BLACK);              // 情况3\n                setColor(parentOf(parentOf(x)), RED);      // 情况3\n                rotateRight(parentOf(parentOf(x)));        // 情况3\n            }\n        } else {\n            Entry<K,V> y = leftOf(parentOf(parentOf(x)));\n            if (colorOf(y) == RED) {\n                setColor(parentOf(x), BLACK);              // 情况4\n                setColor(y, BLACK);                        // 情况4\n                setColor(parentOf(parentOf(x)), RED);      // 情况4\n                x = parentOf(parentOf(x));                 // 情况4\n            } else {\n                if (x == leftOf(parentOf(x))) {\n                    x = parentOf(x);                       // 情况5\n                    rotateRight(x);                        // 情况5\n                }\n                setColor(parentOf(x), BLACK);              // 情况6\n                setColor(parentOf(parentOf(x)), RED);      // 情况6\n                rotateLeft(parentOf(parentOf(x)));         // 情况6\n            }\n        }\n    }\n    root.color = BLACK;\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br")])]),n("h4",{attrs:{id:"remove"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#remove"}},[e._v("#")]),e._v(" remove()")]),e._v(" "),n("p",[n("code",[e._v("remove(Object key)")]),e._v("的作用是删除"),n("code",[e._v("key")]),e._v("值对应的"),n("code",[e._v("entry")]),e._v("，该方法首先通过上文中提到的"),n("code",[e._v("getEntry(Object key)")]),e._v("方法找到"),n("code",[e._v("key")]),e._v("值对应的"),n("code",[e._v("entry")]),e._v("，然后调用"),n("code",[e._v("deleteEntry(Entry<K,V> entry)")]),e._v("删除对应的"),n("code",[e._v("entry")]),e._v("。由于删除操作会改变红黑树的结构，有可能破坏红黑树的约束条件，因此有可能要进行调整。")]),e._v(" "),n("p",[n("code",[e._v("getEntry()")]),e._v("函数前面已经讲解过，这里重点放"),n("code",[e._v("deleteEntry()")]),e._v("上，该函数删除指定的"),n("code",[e._v("entry")]),e._v("并在红黑树的约束被破坏时进行调用"),n("code",[e._v("fixAfterDeletion(Entry<K,V> x)")]),e._v("进行调整。")]),e._v(" "),n("p",[n("strong",[e._v("由于红黑树是一棵增强版的二叉查找树，红黑树的删除操作跟普通二叉查找树的删除操作也就非常相似，唯一的区别是红黑树在节点删除之后可能需要进行调整")]),e._v("。现在考虑一棵普通二叉查找树的删除过程，可以简单分为两种情况:")]),e._v(" "),n("blockquote",[n("ol",[n("li",[e._v("删除点p的左右子树都为空，或者只有一棵子树非空。")]),e._v(" "),n("li",[e._v("删除点p的左右子树都非空。")])])]),e._v(" "),n("p",[e._v("对于上述情况1，处理起来比较简单，直接将p删除(左右子树都为空时)，或者用非空子树替代p(只有一棵子树非空时)；对于情况2，可以用p的后继s(树中大于x的最小的那个元素)代替p，然后使用情况1删除s(此时s一定满足情况1.可以画画看)。")]),e._v(" "),n("p",[e._v("基于以上逻辑，红黑树的节点删除函数"),n("code",[e._v("deleteEntry()")]),e._v("代码如下:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 红黑树entry删除函数deleteEntry()\nprivate void deleteEntry(Entry<K,V> p) {\n    modCount++;\n    size--;\n    if (p.left != null && p.right != null) {// 2. 删除点p的左右子树都非空。\n        Entry<K,V> s = successor(p);// 后继\n        p.key = s.key;\n        p.value = s.value;\n        p = s;\n    }\n    Entry<K,V> replacement = (p.left != null ? p.left : p.right);\n    if (replacement != null) {// 1. 删除点p只有一棵子树非空。\n        replacement.parent = p.parent;\n        if (p.parent == null)\n            root = replacement;\n        else if (p == p.parent.left)\n            p.parent.left  = replacement;\n        else\n            p.parent.right = replacement;\n        p.left = p.right = p.parent = null;\n        if (p.color == BLACK)\n            fixAfterDeletion(replacement);// 调整\n    } else if (p.parent == null) {\n        root = null;\n    } else { // 1. 删除点p的左右子树都为空\n        if (p.color == BLACK)\n            fixAfterDeletion(p);// 调整\n        if (p.parent != null) {\n            if (p == p.parent.left)\n                p.parent.left = null;\n            else if (p == p.parent.right)\n                p.parent.right = null;\n            p.parent = null;\n        }\n    }\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br")])]),n("p",[e._v("上述代码中占据大量代码行的，是用来修改父子节点间引用关系的代码，其逻辑并不难理解。下面着重讲解删除后调整函数"),n("code",[e._v("fixAfterDeletion()")]),e._v("。首先请思考一下，删除了哪些点才会导致调整？"),n("strong",[e._v("只有删除点是BLACK的时候，才会触发调整函数")]),e._v("，因为删除RED节点不会破坏红黑树的任何约束，而删除BLACK节点会破坏规则4。")]),e._v(" "),n("p",[e._v("跟上文中讲过的"),n("code",[e._v("fixAfterInsertion()")]),e._v("函数一样，这里也要分成若干种情况。记住，"),n("strong",[e._v("无论有多少情况，具体的调整操作只有两种: 1.改变某些节点的颜色，2.对某些节点进行旋转。")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(428),alt:"TreeMap_fixAfterDeletion.png"}})]),e._v(" "),n("p",[e._v("上述图解的总体思想是: 将情况1首先转换成情况2，或者转换成情况3和情况4。当然，该图解并不意味着调整过程一定是从情况1开始。通过后续代码我们还会发现几个有趣的规则: a).如果是由情况1之后紧接着进入的情况2，那么情况2之后一定会退出循环(因为x为红色)；b).一旦进入情况3和情况4，一定会退出循环(因为x为root)。")]),e._v(" "),n("p",[e._v("删除后调整函数"),n("code",[e._v("fixAfterDeletion()")]),e._v("的具体代码如下，其中用到了上文中提到的"),n("code",[e._v("rotateLeft()")]),e._v("和"),n("code",[e._v("rotateRight()")]),e._v("函数。通过代码我们能够看到，情况3其实是落在情况4内的。情况5～情况8跟前四种情况是对称的，因此图解中并没有画出后四种情况，读者可以参考代码自行理解。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void fixAfterDeletion(Entry<K,V> x) {\n    while (x != root && colorOf(x) == BLACK) {\n        if (x == leftOf(parentOf(x))) {\n            Entry<K,V> sib = rightOf(parentOf(x));\n            if (colorOf(sib) == RED) {\n                setColor(sib, BLACK);                   // 情况1\n                setColor(parentOf(x), RED);             // 情况1\n                rotateLeft(parentOf(x));                // 情况1\n                sib = rightOf(parentOf(x));             // 情况1\n            }\n            if (colorOf(leftOf(sib))  == BLACK &&\n                colorOf(rightOf(sib)) == BLACK) {\n                setColor(sib, RED);                     // 情况2\n                x = parentOf(x);                        // 情况2\n            } else {\n                if (colorOf(rightOf(sib)) == BLACK) {\n                    setColor(leftOf(sib), BLACK);       // 情况3\n                    setColor(sib, RED);                 // 情况3\n                    rotateRight(sib);                   // 情况3\n                    sib = rightOf(parentOf(x));         // 情况3\n                }\n                setColor(sib, colorOf(parentOf(x)));    // 情况4\n                setColor(parentOf(x), BLACK);           // 情况4\n                setColor(rightOf(sib), BLACK);          // 情况4\n                rotateLeft(parentOf(x));                // 情况4\n                x = root;                               // 情况4\n            }\n        } else { // 跟前四种情况对称\n            Entry<K,V> sib = leftOf(parentOf(x));\n            if (colorOf(sib) == RED) {\n                setColor(sib, BLACK);                   // 情况5\n                setColor(parentOf(x), RED);             // 情况5\n                rotateRight(parentOf(x));               // 情况5\n                sib = leftOf(parentOf(x));              // 情况5\n            }\n            if (colorOf(rightOf(sib)) == BLACK &&\n                colorOf(leftOf(sib)) == BLACK) {\n                setColor(sib, RED);                     // 情况6\n                x = parentOf(x);                        // 情况6\n            } else {\n                if (colorOf(leftOf(sib)) == BLACK) {\n                    setColor(rightOf(sib), BLACK);      // 情况7\n                    setColor(sib, RED);                 // 情况7\n                    rotateLeft(sib);                    // 情况7\n                    sib = leftOf(parentOf(x));          // 情况7\n                }\n                setColor(sib, colorOf(parentOf(x)));    // 情况8\n                setColor(parentOf(x), BLACK);           // 情况8\n                setColor(leftOf(sib), BLACK);           // 情况8\n                rotateRight(parentOf(x));               // 情况8\n                x = root;                               // 情况8\n            }\n        }\n    }\n    setColor(x, BLACK);\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br")])]),n("h3",{attrs:{id:"treeset"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[e._v("#")]),e._v(" TreeSet")]),e._v(" "),n("p",[e._v("前面已经说过"),n("code",[e._v("TreeSet")]),e._v("是对"),n("code",[e._v("TreeMap")]),e._v("的简单包装，对"),n("code",[e._v("TreeSet")]),e._v("的函数调用都会转换成合适的"),n("code",[e._v("TreeMap")]),e._v("方法，因此"),n("code",[e._v("TreeSet")]),e._v("的实现非常简单。这里不再赘述。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// TreeSet是对TreeMap的简单包装\npublic class TreeSet<E> extends AbstractSet<E>\n    implements NavigableSet<E>, Cloneable, java.io.Serializable\n{\n\t......\n    private transient NavigableMap<E,Object> m;\n    // Dummy value to associate with an Object in the backing Map\n    private static final Object PRESENT = new Object();\n    public TreeSet() {\n        this.m = new TreeMap<E,Object>();// TreeSet里面有一个TreeMap\n    }\n    ......\n    public boolean add(E e) {\n        return m.put(e, PRESENT)==null;\n    }\n    ......\n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])])])}),[],!1,null,null,null);n.default=a.exports},422:function(e,n,s){e.exports=s.p+"assets/img/collection_TreeMap_base.ca9114ba.png"},423:function(e,n,s){e.exports=s.p+"assets/img/collection_TreeMap_rotateLeft.e69eb850.png"},424:function(e,n,s){e.exports=s.p+"assets/img/collection_TreeMap_rotateRight.5fbd2edf.png"},425:function(e,n,s){e.exports=s.p+"assets/img/collection_TreeMap_successor.f57c6598.png"},426:function(e,n,s){e.exports=s.p+"assets/img/collection_TreeMap_getEntry.b8a15758.png"},427:function(e,n,s){e.exports=s.p+"assets/img/collection_TreeMap_put.7b85fff8.png"},428:function(e,n,s){e.exports=s.p+"assets/img/collection_TreeMap_fixAfterDeletion.00ea6736.png"}}]);