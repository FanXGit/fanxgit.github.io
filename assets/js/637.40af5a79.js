(window.webpackJsonp=window.webpackJsonp||[]).push([[637],{4018:function(t,e,r){"use strict";r.r(e);var a=r(7),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"♥常见开发理论♥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#♥常见开发理论♥"}},[t._v("#")]),t._v(" ♥常见开发理论♥")]),t._v(" "),e("p",[t._v("=======================")]),t._v(" "),e("blockquote",[e("p",[t._v("开源协议知识体系详解。@pdai")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E5%BC%80%E5%8F%91%E7%90%86%E8%AE%BA"}},[t._v("♥常见开发理论♥")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0"}},[t._v("相关文章")])])])])]),t._v(" "),e("h1",{attrs:{id:"相关文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关文章"}},[t._v("#")]),t._v(" 相关文章")]),t._v(" "),e("hr"),t._v(" "),e("blockquote",[e("p",[t._v("常见开发理论相关文章。")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://pdai.tech/md/dev-spec/spec/dev-th-solid.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("软件开发中的原则 - SOLID"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("在软件开发中，前人对软件系统的设计和开发总结了一些原则和模式， 不管用什么语言做开发，都将对我们系统设计和开发提供指导意义。本文主要将总结这些常见的原则，和具体阐述意义。")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/dev-spec/spec/dev-th-cap.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式理论 - CAP"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("CAP理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中C代表一致性 (Consistency)，A代表可用性 (Availability)，P代表分区容错性 (Partition tolerance)。CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个。")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/dev-spec/spec/dev-th-base.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式理论 - BASE"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("BASE是“Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母缩写。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高了可用性。")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/dev-spec/spec/dev-th-acid.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("事务理论 - ACID"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("一个事务有四个基本特性，也就是我们常说的（ACID）："),e("strong",[t._v("Atomicity（原子性）")]),t._v("：事务是一个不可分割的整体，事务内所有操作要么全做成功，要么全失败。"),e("strong",[t._v("Consistency（一致性）")]),t._v("：务执行前后，数据从一个状态到另一个状态必须是一致的（A向B转账，不能出现A扣了钱，B却没收到）。"),e("strong",[t._v("Isolation（隔离性）")]),t._v("： 多个并发事务之间相互隔离，不能互相干扰。"),e("strong",[t._v("Durability（持久性）")]),t._v("：事务完成后，对数据库的更改是永久保存的，不能回滚。")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://pdai.tech/md/dev-spec/spec/dev-microservice-kangwei.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("微服务基础 - 康威定律"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("微服务这个概念很早就提出了， 真正火起来是在2016年左右，而康威定律(Conway's Law)就是微服务理论基础。本文整理自肥侠的文章, 帮助大家理解微服务理论体系。@pdai)")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);