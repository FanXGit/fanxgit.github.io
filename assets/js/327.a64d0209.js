(window.webpackJsonp=window.webpackJsonp||[]).push([[327],{3411:function(e,n,s){e.exports=s.p+"assets/img/mybatis-y-sql-1.77217805.jpg"},3412:function(e,n,s){e.exports=s.p+"assets/img/mybatis-y-sql-2.5131a0c5.jpg"},3413:function(e,n,s){e.exports=s.p+"assets/img/mybatis-y-sql-3.817ad5dd.png"},4216:function(e,n,s){"use strict";s.r(n);var a=s(7),t=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"mybatis详解-sqlsession执行流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解-sqlsession执行流程"}},[e._v("#")]),e._v(" MyBatis详解 - sqlSession执行流程")]),e._v(" "),n("p",[e._v("=========================================================")]),e._v(" "),n("blockquote",[n("p",[e._v("前面的章节主要讲mybatis如何解析配置文件，这些都是一次性的过程。从本章开始讲解动态的过程，它们跟应用程序对mybatis的调用密切相关。@pdai")])]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---sqlsession%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B"}},[e._v("MyBatis详解 - sqlSession执行流程")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#sqlsessionfactory-%E4%B8%8E-sqlsession"}},[e._v("sqlSessionFactory 与 SqlSession")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#%E5%88%A9%E5%99%A8%E4%B9%8Bmapperproxy"}},[e._v("利器之MapperProxy")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#excutor"}},[e._v("Excutor")])]),e._v(" "),n("li",[n("a",{attrs:{href:"#statementhandler"}},[e._v("StatementHandler")])])])])]),e._v(" "),n("h1",{attrs:{id:"sqlsessionfactory-与-sqlsession"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessionfactory-与-sqlsession"}},[e._v("#")]),e._v(" sqlSessionFactory 与 SqlSession")]),e._v(" "),n("hr"),e._v(" "),n("blockquote",[n("p",[e._v("通过前面的章节对于mybatis 的介绍及使用，大家都能体会到SqlSession的重要性了吧，没错，从表面上来看，咱们都是通过SqlSession去执行sql语句（注意：是从表面看，实际的待会儿就会讲）。")])]),e._v(" "),n("p",[e._v("正如其名，Sqlsession对应着一次数据库会话。由于数据库会话不是永久的，因此Sqlsession的生命周期也不应该是永久的，相反，在你每次访问数据库时都需要创建它（当然并不是说在Sqlsession里只能执行一次sql，你可以执行多次，当一旦关闭了Sqlsession就需要重新创建它）。")]),e._v(" "),n("p",[e._v("那么咱们就先看看是怎么获取SqlSession的吧：")]),e._v(" "),n("p",[n("img",{attrs:{src:s(3411),alt:""}})]),e._v(" "),n("p",[e._v("首先，SqlSessionFactoryBuilder去读取mybatis的配置文件，然后build一个DefaultSqlSessionFactory。源码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' /**\n  * 一系列的构造方法最终都会调用本方法（配置文件为Reader时会调用本方法，还有一个InputStream方法与此对应）\n  * @param reader\n  * @param environment\n  * @param properties\n  * @return\n  */\n public SqlSessionFactory build(Reader reader, String environment, Properties properties) {\n   try {\n     //通过XMLConfigBuilder解析配置文件，解析的配置相关信息都会封装为一个Configuration对象\n     XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);\n     //这儿创建DefaultSessionFactory对象\n     return build(parser.parse());\n   } catch (Exception e) {\n     throw ExceptionFactory.wrapException("Error building SqlSession.", e);\n   } finally {\n     ErrorContext.instance().reset();\n     try {\n       reader.close();\n     } catch (IOException e) {\n       // Intentionally ignore. Prefer previous error.\n     }\n   }\n }\n\n public SqlSessionFactory build(Configuration config) {\n   return new DefaultSqlSessionFactory(config);\n }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br")])]),n("p",[e._v("当我们获取到SqlSessionFactory之后，就可以通过SqlSessionFactory去获取SqlSession对象。源码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n  * 通常一系列openSession方法最终都会调用本方法\n  * @param execType \n  * @param level\n  * @param autoCommit\n  * @return\n  */\n private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n   Transaction tx = null;\n   try {\n     //通过Confuguration对象去获取Mybatis相关配置信息, Environment对象包含了数据源和事务的配置\n     final Environment environment = configuration.getEnvironment();\n     final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n     tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n     //之前说了，从表面上来看，咱们是用sqlSession在执行sql语句， 实际呢，其实是通过excutor执行， excutor是对于Statement的封装\n     final Executor executor = configuration.newExecutor(tx, execType);\n     //关键看这儿，创建了一个DefaultSqlSession对象\n     return new DefaultSqlSession(configuration, executor, autoCommit);\n   } catch (Exception e) {\n     closeTransaction(tx); // may have fetched a connection so lets call close()\n     throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);\n   } finally {\n     ErrorContext.instance().reset();\n   }\n }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br")])]),n("p",[e._v("通过以上步骤，咱们已经得到SqlSession对象了。接下来就是该干嘛干嘛去了（话说还能干嘛，当然是执行sql语句咯）。看了上面，咱们也回想一下之前写的Demo：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('SqlSessionFactory sessionFactory = null;  \nString resource = "mybatis-conf.xml";  \ntry {\n    //SqlSessionFactoryBuilder读取配置文件\n   sessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(resource));\n} catch (IOException e) {  \n   e.printStackTrace();  \n}    \n//通过SqlSessionFactory获取SqlSession\nSqlSession sqlSession = sessionFactory.openSession();\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("创建Sqlsession的地方只有一个，那就是SqlsessionFactory的openSession方法：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public SqlSessionopenSession() {  \n    return openSessionFromDataSource(configuration.getDefaultExecutorType(),null, false);  \n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("我们可以看到实际创建SqlSession的地方是openSessionFromDataSource，如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {  \n \n    Connection connection = null;  \n \n    try {  \n \n        final Environment environment = configuration.getEnvironment();  \n \n        final DataSource dataSource = getDataSourceFromEnvironment(environment);  \n        \n        // MyBatis对事务的处理相对简单，TransactionIsolationLevel中定义了几种隔离级别，并不支持内嵌事务这样较复杂的场景，同时由于其是持久层的缘故，所以真正在应用开发中会委托Spring来处理事务实现真正的与开发者隔离。分析事务的实现是个入口，借此可以了解不少JDBC规范方面的事情。\n        TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);  \n \n        connection = dataSource.getConnection();  \n \n        if (level != null) {  \n            connection.setTransactionIsolation(level.getLevel());\n        }  \n \n        connection = wrapConnection(connection);  \n \n        Transaction tx = transactionFactory.newTransaction(connection,autoCommit);  \n \n        Executorexecutor = configuration.newExecutor(tx, execType);  \n \n        return newDefaultSqlSession(configuration, executor, autoCommit);  \n \n    } catch (Exceptione) {  \n        closeConnection(connection);  \n        throwExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);  \n    } finally {\n        ErrorContext.instance().reset();\n    }\n}  \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br")])]),n("p",[e._v("可以看出，创建sqlsession经过了以下几个主要步骤：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("从配置中获取Environment；")])]),e._v(" "),n("li",[n("p",[e._v("从Environment中取得DataSource；")])]),e._v(" "),n("li",[n("p",[e._v("从Environment中取得TransactionFactory；")])]),e._v(" "),n("li",[n("p",[e._v("从DataSource里获取数据库连接对象Connection；")])]),e._v(" "),n("li",[n("p",[e._v("在取得的数据库连接上创建事务对象Transaction；")])]),e._v(" "),n("li",[n("p",[e._v("创建Executor对象（该对象非常重要，事实上sqlsession的所有操作都是通过它完成的）；")])]),e._v(" "),n("li",[n("p",[e._v("创建sqlsession对象。")])])]),e._v(" "),n("p",[e._v("SqlSession咱们也拿到了，咱们可以调用SqlSession中一系列的select..., insert..., update..., delete...方法轻松自如的进行CRUD操作了。就这样？那咱配置的映射文件去哪儿了？别急，咱们接着往下看。")]),e._v(" "),n("h1",{attrs:{id:"利器之mapperproxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利器之mapperproxy"}},[e._v("#")]),e._v(" 利器之MapperProxy")]),e._v(" "),n("hr"),e._v(" "),n("p",[n("img",{attrs:{src:s(3412),alt:""}})]),e._v(" "),n("p",[e._v("在mybatis中，通过MapperProxy动态代理咱们的dao， 也就是说， 当咱们执行自己写的dao里面的方法的时候，其实是对应的mapperProxy在代理。那么，咱们就看看怎么获取MapperProxy对象吧：")]),e._v(" "),n("p",[e._v("通过SqlSession从Configuration中获取。源码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' /**\n  * 什么都不做，直接去configuration中找， 哥就是这么任性\n  */\n @Override\n public <T> T getMapper(Class<T> type) {\n   return configuration.<T>getMapper(type, this);\n }\nSqlSession把包袱甩给了Configuration, 接下来就看看Configuration。源码如下：\n /**\n  * 烫手的山芋，俺不要，你找mapperRegistry去要\n  * @param type\n  * @param sqlSession\n  * @return\n  */\n public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n   return mapperRegistry.getMapper(type, sqlSession);\n }\nConfiguration不要这烫手的山芋，接着甩给了MapperRegistry， 那咱看看MapperRegistry。 源码如下：\n /**\n  * 烂活净让我来做了，没法了，下面没人了，我不做谁来做\n  * @param type\n  * @param sqlSession\n  * @return\n  */\n @SuppressWarnings("unchecked")\n public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n   //能偷懒的就偷懒，俺把粗活交给MapperProxyFactory去做\n   final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);\n   if (mapperProxyFactory == null) {\n     throw new BindingException("Type " + type + " is not known to the MapperRegistry.");\n   }\n   try {\n     //关键在这儿\n     return mapperProxyFactory.newInstance(sqlSession);\n   } catch (Exception e) {\n     throw new BindingException("Error getting mapper instance. Cause: " + e, e);\n   }\n }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br")])]),n("p",[e._v("MapperProxyFactory是个苦B的人，粗活最终交给它去做了。咱们看看源码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' /**\n  * 别人虐我千百遍，我待别人如初恋\n  * @param mapperProxy\n  * @return\n  */\n @SuppressWarnings("unchecked")\n protected T newInstance(MapperProxy<T> mapperProxy) {\n   //动态代理我们写的dao接口\n   return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);\n }\n \n public T newInstance(SqlSession sqlSession) {\n   final MapperProxy<T> mapperProxy = new MapperProxy<T>(sqlSession, mapperInterface, methodCache);\n   return newInstance(mapperProxy);\n }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("通过以上的动态代理，咱们就可以方便地使用dao接口啦， 就像之前咱们写的demo那样：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("UserDao userMapper = sqlSession.getMapper(UserDao.class);  \nUser insertUser = new User();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("这下方便多了吧， 呵呵， 貌似mybatis的源码就这么一回事儿啊。具体详细介绍，请参见MyBatis Mapper 接口如何通过JDK动态代理来包装SqlSession 源码分析。别急，还没完， 咱们还没看具体是怎么执行sql语句的呢。")]),e._v(" "),n("h1",{attrs:{id:"excutor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#excutor"}},[e._v("#")]),e._v(" Excutor")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("Executor与Sqlsession的关系就像市长与书记，Sqlsession只是个门面，真正干事的是Executor，Sqlsession对数据库的操作都是通过Executor来完成的。与Sqlsession一样，Executor也是动态创建的：")]),e._v(" "),n("p",[n("img",{attrs:{src:s(3413),alt:""}})]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("Executor创建的源代码")]),e._v("：")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public Executor newExecutor(Transaction transaction, ExecutorType executorType) {  \n\n    executorType = executorType == null ? defaultExecutorType : executorType;  \n\n    executorType = executorType == null ?ExecutorType.SIMPLE : executorType;  \n\n    Executor executor;  \n\n    if(ExecutorType.BATCH == executorType) {\n        executor = new BatchExecutor(this,transaction);\n    } else if(ExecutorType.REUSE == executorType) {\n        executor = new ReuseExecutor(this,transaction);  \n    } else {  \n        executor = newSimpleExecutor(this, transaction);\n    }\n\n    if (cacheEnabled) {\n        executor = new CachingExecutor(executor);  \n    }\n    executor = (Executor) interceptorChain.pluginAll(executor);  \n    return executor;  \n}  \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("可以看出，如果不开启cache的话，创建的Executor只是3中基础类型之一，BatchExecutor专门用于执行批量sql操作，ReuseExecutor会重用statement执行sql操作，SimpleExecutor只是简单执行sql没有什么特别的。开启cache的话（默认是开启的并且没有任何理由去关闭它），就会创建CachingExecutor，它以前面创建的Executor作为唯一参数。CachingExecutor在查询数据库前先查找缓存，若没找到的话调用delegate（就是构造时传入的Executor对象）从数据库查询，并将查询结果存入缓存中。")]),e._v(" "),n("p",[e._v("Executor对象是可以被插件拦截的，如果定义了针对Executor类型的插件，最终生成的Executor对象是被各个插件插入后的代理对象。")]),e._v(" "),n("p",[e._v("接下来，咱们才要真正去看sql的执行过程了。上面，咱们拿到了MapperProxy, 每个MapperProxy对应一个dao接口， 那么咱们在使用的时候，MapperProxy是怎么做的呢？ 源码奉上：")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("MapperProxy")])])]),e._v(" "),n("p",[e._v("我们知道对被代理对象的方法的访问都会落实到代理者的invoke上来，MapperProxy的invoke如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  /**\n   * MapperProxy在执行时会触发此方法\n   */\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    if (Object.class.equals(method.getDeclaringClass())) {\n      try {\n        return method.invoke(this, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n    final MapperMethod mapperMethod = cachedMapperMethod(method);\n    //二话不说，主要交给MapperMethod自己去管\n    return mapperMethod.execute(sqlSession, args);\n  }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("ul",[n("li",[n("strong",[e._v("MapperMethod")])])]),e._v(" "),n("p",[e._v("就像是一个分发者，他根据参数和返回值类型选择不同的sqlsession方法来执行。这样mapper对象与sqlsession就真正的关联起来了。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  /**\n   * 看着代码不少，不过其实就是先判断CRUD类型，然后根据类型去选择到底执行sqlSession中的哪个方法，绕了一圈，又转回sqlSession了\n   * @param sqlSession\n   * @param args\n   * @return\n   */\n  public Object execute(SqlSession sqlSession, Object[] args) {\n    Object result;\n    if (SqlCommandType.INSERT == command.getType()) {\n      Object param = method.convertArgsToSqlCommandParam(args);\n      result = rowCountResult(sqlSession.insert(command.getName(), param));\n    } else if (SqlCommandType.UPDATE == command.getType()) {\n      Object param = method.convertArgsToSqlCommandParam(args);\n      result = rowCountResult(sqlSession.update(command.getName(), param));\n    } else if (SqlCommandType.DELETE == command.getType()) {\n      Object param = method.convertArgsToSqlCommandParam(args);\n      result = rowCountResult(sqlSession.delete(command.getName(), param));\n    } else if (SqlCommandType.SELECT == command.getType()) {\n      if (method.returnsVoid() && method.hasResultHandler()) {\n        executeWithResultHandler(sqlSession, args);\n        result = null;\n      } else if (method.returnsMany()) {\n        result = executeForMany(sqlSession, args);\n      } else if (method.returnsMap()) {\n        result = executeForMap(sqlSession, args);\n      } else {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = sqlSession.selectOne(command.getName(), param);\n      }\n    } else {\n      throw new BindingException("Unknown execution method for: " + command.getName());\n    }\n    if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n      throw new BindingException("Mapper method \'" + command.getName() \n          + " attempted to return null from a method with a primitive return type (" + method.getReturnType() + ").");\n    }\n    return result;\n  }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br")])]),n("p",[e._v("既然又回到SqlSession了，前面提到过，sqlsession只是一个门面，真正发挥作用的是executor，对sqlsession方法的访问最终都会落到executor的相应方法上去。Executor分成两大类，一类是CacheExecutor，另一类是普通Executor。Executor的创建前面已经介绍了，那么咱们就看看SqlSession的CRUD方法了，为了省事，还是就选择其中的一个方法来做分析吧。这儿，咱们选择了selectList方法：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n    try {\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      //CRUD实际上是交给Excetor去处理， excutor其实也只是穿了个马甲而已，小样，别以为穿个马甲我就不认识你嘞！\n      return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("ul",[n("li",[n("strong",[e._v("CacheExecutor")])])]),e._v(" "),n("p",[e._v("CacheExecutor有一个重要属性delegate，它保存的是某类普通的Executor，值在构照时传入。执行数据库update操作时，它直接调用delegate的update方法，执行query方法时先尝试从cache中取值，取不到再调用delegate的查询方法，并将查询结果存入cache中。代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public List query(MappedStatement ms, Object parameterObject, RowBounds rowBounds,ResultHandler resultHandler) throws SQLException {  \n    if (ms != null) {  \n        Cache cache = ms.getCache();  \n        if (cache != null) {  \n            flushCacheIfRequired(ms);  \n            cache.getReadWriteLock().readLock().lock();  \n            try {  \n                if (ms.isUseCache() && resultHandler ==null) {  \n                    CacheKey key = createCacheKey(ms, parameterObject, rowBounds);  \n                    final List cachedList = (List)cache.getObject(key);  \n                    if (cachedList != null) {  \n                        return cachedList;  \n                    } else {  \n                        List list = delegate.query(ms,parameterObject, rowBounds, resultHandler);  \n                        tcm.putObject(cache,key, list);  \n                        return list;  \n                    }  \n                } else {  \n                    return delegate.query(ms,parameterObject, rowBounds, resultHandler);  \n                }  \n            } finally {  \n                cache.getReadWriteLock().readLock().unlock();  \n            }\n        }  \n    }  \n    return delegate.query(ms,parameterObject, rowBounds, resultHandler);  \n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br")])]),n("ul",[n("li",[n("strong",[e._v("普通Executor")])])]),e._v(" "),n("p",[e._v("有3类，他们都继承于BaseExecutor，BatchExecutor专门用于执行批量sql操作，ReuseExecutor会重用statement执行sql操作，SimpleExecutor只是简单执行sql没有什么特别的。下面以SimpleExecutor为例：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public List doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds,ResultHandler resultHandler) throws SQLException {  \n    Statement stmt = null;  \n    try {  \n        Configuration configuration = ms.getConfiguration();  \n        StatementHandler handler = configuration.newStatementHandler(this, ms,parameter, rowBounds,resultHandler);  \n        stmt =prepareStatement(handler);  \n        returnhandler.query(stmt, resultHandler);  \n    } finally {  \n        closeStatement(stmt);  \n    }  \n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("然后，通过一层一层的调用，最终会来到doQuery方法， 这儿咱们就随便找个Excutor看看doQuery方法的实现吧，我这儿选择了SimpleExecutor:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n    Statement stmt = null;\n    try {\n      Configuration configuration = ms.getConfiguration();\n      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n      stmt = prepareStatement(handler, ms.getStatementLog());\n      //StatementHandler封装了Statement, 让 StatementHandler 去处理\n      return handler.<E>query(stmt, resultHandler);\n    } finally {\n      closeStatement(stmt);\n    }\n  }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("Mybatis内置的ExecutorType有3种，默认的是simple，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句， 并且批量执行所有更新语句，显然batch性能将更优；")]),e._v(" "),n("p",[e._v("但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，这在某型情形下是不符合业务要求的；")]),e._v(" "),n("p",[e._v("通过走码和研读spring相关文件发现，在同一事务中batch模式和simple模式之间无法转换，由于本项目一开始选择了simple模式，所以碰到需要批量更新时，只能在单独的事务中进行；")]),e._v(" "),n("p",[e._v("在代码中使用batch模式可以使用以下方式：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//从spring注入原有的sqlSessionTemplate\n@Autowired\nprivate SqlSessionTemplate sqlSessionTemplate;\n \npublic void testInsertBatchByTrue() {\n    //新获取一个模式为BATCH，自动提交为false的session\n    //如果自动提交设置为true,将无法控制提交的条数，改为最后统一提交，可能导致内存溢出\n    SqlSession session = sqlSessionTemplate.getSqlSessionFactory().openSession(ExecutorType.BATCH, false);\n    //通过新的session获取mapper\n    fooMapper = session.getMapper(FooMapper.class);\n    int size = 10000;\n    try {\n        for (int i = 0; i < size; i++) {\n            Foo foo = new Foo();\n            foo.setName(String.valueOf(System.currentTimeMillis()));\n            fooMapper.insert(foo);\n            if (i % 1000 == 0 || i == size - 1) {\n                //手动每1000个一提交，提交后无法回滚\n                session.commit();\n                //清理缓存，防止溢出\n                session.clearCache();\n            }\n        }\n    } catch (Exception e) {\n        //没有提交的数据可以回滚\n        session.rollback();\n    } finally {\n        session.close();\n    }\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br")])]),n("p",[e._v("上述代码没有使用spring的事务，改手动控制，如果和原spring事务一起使用，将无法回滚，必须注意，最好单独使用；")]),e._v(" "),n("h1",{attrs:{id:"statementhandler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#statementhandler"}},[e._v("#")]),e._v(" StatementHandler")]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("可以看出，Executor本质上也是个甩手掌柜，具体的事情原来是StatementHandler来完成的。当Executor将指挥棒交给StatementHandler后，接下来的工作就是StatementHandler的事了。我们先看看StatementHandler是如何创建的：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public StatementHandler newStatementHandler(Executor executor, MappedStatementmappedStatement,  \n        ObjectparameterObject, RowBounds rowBounds, ResultHandler resultHandler) {  \n    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement,parameterObject,rowBounds, resultHandler);  \n    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);  \n    return statementHandler;\n}  \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("可以看到每次创建的StatementHandler都是RoutingStatementHandler，它只是一个分发者，他一个属性delegate用于指定用哪种具体的StatementHandler。可选的StatementHandler有SimpleStatementHandler、PreparedStatementHandler和CallableStatementHandler三种。选用哪种在mapper配置文件的每个statement里指定，默认的是PreparedStatementHandler。同时还要注意到StatementHandler是可以被拦截器拦截的，和Executor一样，被拦截器拦截后的对像是一个代理对象。由于mybatis没有实现数据库的物理分页，众多物理分页的实现都是在这个地方使用拦截器实现的，本文作者也实现了一个分页拦截器，在后续的章节会分享给大家，敬请期待。")]),e._v(" "),n("p",[e._v("StatementHandler创建后需要执行一些初始操作，比如statement的开启和参数设置、对于PreparedStatement还需要执行参数的设置操作等。代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private Statement prepareStatement(StatementHandler handler) throws SQLException {  \n    Statement stmt;  \n    Connection connection = transaction.getConnection();  \n    stmt =handler.prepare(connection);  \n    handler.parameterize(stmt);  \n    return stmt;  \n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("statement的开启和参数设置没什么特别的地方，handler.parameterize倒是可以看看是怎么回事。handler.parameterize通过调用ParameterHandler的setParameters完成参数的设置，ParameterHandler随着StatementHandler的创建而创建，默认的实现是DefaultParameterHandler：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {  \n   ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement,parameterObject,boundSql);  \n   parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);  \n   return parameterHandler;  \n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("同Executor和StatementHandler一样，ParameterHandler也是可以被拦截的。DefaultParameterHandler里设置参数的代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public void setParameters(PreparedStatement ps) throws SQLException {  \n    ErrorContext.instance().activity("settingparameters").object(mappedStatement.getParameterMap().getId());  \n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();  \n    if(parameterMappings != null) {  \n        MetaObject metaObject = parameterObject == null ? null :configuration.newMetaObject(parameterObject);  \n        for (int i = 0; i< parameterMappings.size(); i++) {  \n            ParameterMapping parameterMapping = parameterMappings.get(i);  \n            if(parameterMapping.getMode() != ParameterMode.OUT) {  \n                Object value;  \n                String propertyName = parameterMapping.getProperty();  \n                PropertyTokenizer prop = newPropertyTokenizer(propertyName);  \n                if (parameterObject == null) {  \n                    value = null;  \n                } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())){  \n                    value = parameterObject;  \n                } else if (boundSql.hasAdditionalParameter(propertyName)){  \n                    value = boundSql.getAdditionalParameter(propertyName);  \n                } else if(propertyName.startsWith(ForEachSqlNode.ITEM_PREFIX)  \n                        && boundSql.hasAdditionalParameter(prop.getName())){  \n                    value = boundSql.getAdditionalParameter(prop.getName());  \n                    if (value != null) {  \n                        value = configuration.newMetaObject(value).getValue(propertyName.substring(prop.getName().length()));  \n                    }  \n                } else {  \n                    value = metaObject == null ? null :metaObject.getValue(propertyName);  \n                }  \n                TypeHandler typeHandler = parameterMapping.getTypeHandler();  \n                if (typeHandler == null) {  \n                   throw new ExecutorException("Therewas no TypeHandler found for parameter " + propertyName  + " of statement " + mappedStatement.getId());  \n                }  \n                typeHandler.setParameter(ps, i + 1, value,parameterMapping.getJdbcType());  \n            }  \n  \n        }  \n  \n    }  \n} \n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br")])]),n("p",[e._v("这里面最重要的一句其实就是最后一句代码，它的作用是用合适的TypeHandler完成参数的设置。那么什么是合适的TypeHandler呢，它又是如何决断出来的呢？BaseStatementHandler的构造方法里有这么一句：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this.boundSql= mappedStatement.getBoundSql(parameterObject);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("它触发了sql 的解析，在解析sql的过程中，TypeHandler也被决断出来了，决断的原则就是根据参数的类型和参数对应的JDBC类型决定使用哪个TypeHandler。比如：参数类型是String的话就用StringTypeHandler，参数类型是整数的话就用IntegerTypeHandler等。")]),e._v(" "),n("p",[e._v("参数设置完毕后，执行数据库操作（update或query）。如果是query最后还有个查询结果的处理过程。")]),e._v(" "),n("p",[e._v("接下来，咱们看看StatementHandler 的一个实现类 PreparedStatementHandler（这也是我们最常用的，封装的是PreparedStatement）, 看看它使怎么去处理的：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n    // 到此，原形毕露， PreparedStatement, 这个大家都已经滚瓜烂熟了吧\n    PreparedStatement ps = (PreparedStatement) statement;\n    ps.execute();\n    // 结果交给了ResultSetHandler 去处理\n    return resultSetHandler.<E> handleResultSets(ps);\n  }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("结果处理使用ResultSetHandler来完成，默认的ResultSetHandler是FastResultSetHandler，它在创建StatementHandler时一起创建，代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement,  \nRowBounds rowBounds, ParameterHandler parameterHandler, ResultHandler resultHandler, BoundSql boundSql) {  \n   ResultSetHandler resultSetHandler = mappedStatement.hasNestedResultMaps() ? newNestedResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds): new FastResultSetHandler(executor,mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);  \n   resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);  \n   return resultSetHandler;  \n} \n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("可以看出ResultSetHandler也是可以被拦截的，可以编写自己的拦截器改变ResultSetHandler的默认行为。ResultSetHandler内部一条记录一条记录的处理，在处理每条记录的每一列时会调用TypeHandler转换结果，如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected boolean applyAutomaticMappings(ResultSet rs, List<String> unmappedColumnNames,MetaObject metaObject) throws SQLException {  \n    boolean foundValues = false;  \n    for (String columnName : unmappedColumnNames) {  \n        final String property = metaObject.findProperty(columnName);  \n        if (property!= null) {  \n            final ClasspropertyType =metaObject.getSetterType(property);  \n            if (typeHandlerRegistry.hasTypeHandler(propertyType)) {  \n                final TypeHandler typeHandler = typeHandlerRegistry.getTypeHandler(propertyType);  \n                final Object value = typeHandler.getResult(rs,columnName);  \n                if (value != null) {  \n                    metaObject.setValue(property, value);  \n                    foundValues = true;  \n                }  \n            }  \n        }  \n    }  \n    return foundValues;  \n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[e._v("从代码里可以看到，决断TypeHandler使用的是结果参数的属性类型。因此我们在定义作为结果的对象的属性时一定要考虑与数据库字段类型的兼容性。到此， 一次sql的执行流程就完了。)")])])}),[],!1,null,null,null);n.default=t.exports}}]);