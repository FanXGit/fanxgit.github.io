(window.webpackJsonp=window.webpackJsonp||[]).push([[392],{3472:function(a,t,e){a.exports=e.p+"assets/img/sharding-x-trans-seata-1.0f4415bd.png"},3473:function(a,t,e){a.exports=e.p+"assets/img/sharding-x-trans-seata-2.72d931e7.png"},4230:function(a,t,e){"use strict";e.r(t);var r=e(7),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"shardingsphere详解-事务实现原理之柔性事务seata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere详解-事务实现原理之柔性事务seata"}},[a._v("#")]),a._v(" ShardingSphere详解 - 事务实现原理之柔性事务SEATA")]),a._v(" "),t("p",[a._v("===========================================================================")]),a._v(" "),t("blockquote",[t("p",[a._v("Apache ShardingSphere 集成了 SEATA 作为柔性事务的使用方案，本文主要介绍其实现原理; 这篇文章主要转载自"),t("a",{attrs:{href:"https://shardingsphere.apache.org/document/5.1.0/cn/reference/transaction/base-transaction-seata/",target:"_blank",rel:"noopener noreferrer"}},[a._v("ShardingSphere官方 在新窗口打开"),t("OutboundLink")],1),a._v("网站（V5.1.0版本）。@pdai")])]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#shardingsphere%E8%AF%A6%E8%A7%A3---%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8B%E6%9F%94%E6%80%A7%E4%BA%8B%E5%8A%A1seata"}},[a._v("ShardingSphere详解 - 事务实现原理之柔性事务SEATA")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#seata%E6%9F%94%E6%80%A7%E4%BA%8B%E5%8A%A1"}},[a._v("Seata柔性事务")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"}},[a._v("实现原理")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E5%BC%95%E6%93%8E%E5%88%9D%E5%A7%8B%E5%8C%96"}},[a._v("引擎初始化")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E5%BC%80%E5%90%AF%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1"}},[a._v("开启全局事务")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E6%89%A7%E8%A1%8C%E7%9C%9F%E5%AE%9E%E5%88%86%E7%89%87sql"}},[a._v("执行真实分片SQL")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%E6%8F%90%E4%BA%A4%E6%88%96%E5%9B%9E%E6%BB%9A%E4%BA%8B%E5%8A%A1"}},[a._v("提交或回滚事务")])])])])])])]),a._v(" "),t("h1",{attrs:{id:"seata柔性事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seata柔性事务"}},[a._v("#")]),a._v(" Seata柔性事务")]),a._v(" "),t("hr"),a._v(" "),t("blockquote",[t("p",[a._v("Apache ShardingSphere 集成了 SEATA 作为柔性事务的使用方案。")])]),a._v(" "),t("p",[t("strong",[a._v("柔性事务")])]),a._v(" "),t("p",[a._v("柔性事务在 2008 年发表的一篇论文中被最早提到， 它提倡采用最终一致性放宽对强一致性的要求，以达到事务处理并发度的提升。")]),a._v(" "),t("p",[a._v("TCC 和 Saga 是两种常见实现方案。 他们主张开发者自行实现对数据库的反向操作，来达到数据在回滚时仍能够保证最终一致性。 SEATA 实现了 SQL 反向操作的自动生成，可以使柔性事务不再必须由开发者介入才能使用。")]),a._v(" "),t("p",[t("strong",[a._v("Seata")])]),a._v(" "),t("p",[a._v("Seata是阿里集团和蚂蚁金服联合打造的分布式事务框架，截止到0.5.x版本包含了AT事务和TCC事务。其中AT事务的目标是在微服务架构下，提供增量的事务ACID语意，让用户像使用本地事务一样，使用分布式事务，核心理念同ShardingSphere一脉相承。")]),a._v(" "),t("p",[t("strong",[a._v("Seata AT事务模型")])]),a._v(" "),t("p",[a._v("Seata AT事务模型包含TM(事务管理器)，RM(资源管理器)，TC(事务协调器)。其中TC是一个独立的服务需要单独部署，TM和RM以jar包的方式同业务应用部署在一起，它们同TC建立长连接，在整个事务生命周期内，保持RPC通信。 其中全局事务的发起方作为TM，全局事务的参与者作为RM ; TM负责全局事务的begin和commit/rollback，RM负责分支事务的执行结果上报，并且通过TC的协调进行commit/rollback。")]),a._v(" "),t("p",[t("img",{attrs:{src:e(3472),alt:""}})]),a._v(" "),t("h1",{attrs:{id:"实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[a._v("#")]),a._v(" 实现原理")]),a._v(" "),t("hr"),a._v(" "),t("blockquote",[t("p",[a._v("整合 Seata AT 事务时，需要将 TM，RM 和 TC 的模型融入 Apache ShardingSphere 的分布式事务生态中。 在数据库资源上，Seata 通过对接 DataSource 接口，让 JDBC 操作可以同 TC 进行远程通信。 同样，Apache ShardingSphere 也是面向 DataSource 接口，对用户配置的数据源进行聚合。 因此，将 DataSource 封装为 基于Seata 的 DataSource 后，就可以将 Seata AT 事务融入到 Apache ShardingSphere的分片生态中。")])]),a._v(" "),t("p",[t("img",{attrs:{src:e(3473),alt:""}})]),a._v(" "),t("h3",{attrs:{id:"引擎初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引擎初始化"}},[a._v("#")]),a._v(" 引擎初始化")]),a._v(" "),t("p",[a._v("包含 Seata 柔性事务的应用启动时，用户配置的数据源会根据 seata.conf 的配置，适配为 Seata 事务所需的 DataSourceProxy，并且注册至 RM 中。")]),a._v(" "),t("h3",{attrs:{id:"开启全局事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启全局事务"}},[a._v("#")]),a._v(" 开启全局事务")]),a._v(" "),t("p",[a._v("TM 控制全局事务的边界，TM 通过向 TC 发送 Begin 指令，获取全局事务 ID，所有分支事务通过此全局事务 ID，参与到全局事务中；全局事务 ID 的上下文存放在当前线程变量中。")]),a._v(" "),t("h3",{attrs:{id:"执行真实分片sql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行真实分片sql"}},[a._v("#")]),a._v(" 执行真实分片SQL")]),a._v(" "),t("p",[a._v("处于 Seata 全局事务中的分片 SQL 通过 RM 生成 undo 快照，并且发送 participate 指令至 TC，加入到全局事务中。 由于 Apache ShardingSphere 的分片物理 SQL 采取多线程方式执行，因此整合 Seata AT 事务时，需要在主线程和子线程间进行全局事务 ID 的上下文传递。")]),a._v(" "),t("h3",{attrs:{id:"提交或回滚事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交或回滚事务"}},[a._v("#")]),a._v(" 提交或回滚事务")]),a._v(" "),t("p",[a._v("提交 Seata 事务时，TM 会向 TC 发送全局事务的提交或回滚指令，TC 根据全局事务 ID 协调所有分支事务进行提交或回滚。)")])])}),[],!1,null,null,null);t.default=s.exports}}]);