(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{3529:function(a,n,s){"use strict";s.r(n);var i=s(7),e=Object(i.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"关键字-final详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关键字-final详解"}},[a._v("#")]),a._v(" 关键字: final详解")]),a._v(" "),n("p",[a._v("==============================")]),a._v(" "),n("blockquote",[n("p",[a._v("final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。@pdai")])]),a._v(" "),n("h2",{attrs:{id:"带着bat大厂的面试问题去理解final"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#带着bat大厂的面试问题去理解final"}},[a._v("#")]),a._v(" 带着BAT大厂的面试问题去理解final")]),a._v(" "),n("hr"),a._v(" "),n("p",[a._v("提示")]),a._v(" "),n("p",[a._v("请带着这些问题继续后文，会很大程度上帮助你更好的理解final。@pdai")]),a._v(" "),n("ul",[n("li",[a._v("所有的final修饰的字段都是编译期常量吗?")]),a._v(" "),n("li",[a._v("如何理解private所修饰的方法是隐式的final?")]),a._v(" "),n("li",[a._v("说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做?")]),a._v(" "),n("li",[a._v("final方法可以被重载吗? 可以")]),a._v(" "),n("li",[a._v("父类的final方法能不能够被子类重写? 不可以")]),a._v(" "),n("li",[a._v("说说final域重排序规则?")]),a._v(" "),n("li",[a._v("说说final的原理?")]),a._v(" "),n("li",[a._v("使用 final 的限制条件和局限性?")]),a._v(" "),n("li",[a._v("看本文最后的一个思考题")])]),a._v(" "),n("h2",{attrs:{id:"final基础使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#final基础使用"}},[a._v("#")]),a._v(" final基础使用")]),a._v(" "),n("hr"),a._v(" "),n("h3",{attrs:{id:"修饰类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰类"}},[a._v("#")]),a._v(" 修饰类")]),a._v(" "),n("p",[a._v("当某个类的整体定义为final时，就表明了你不能打算继承该类，而且也不允许别人这么做。即这个类是不能有子类的。")]),a._v(" "),n("p",[a._v("注意：final类中的所有方法都隐式为final，因为无法覆盖他们，所以在final类中给任何方法添加final关键字是没有任何意义的。")]),a._v(" "),n("blockquote",[n("p",[a._v("这里顺道说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做? @pdai")])]),a._v(" "),n("p",[a._v("设计模式中最重要的两种关系，一种是继承/实现；另外一种是组合关系。所以当遇到不能用继承的(final修饰的类),应该考虑用组合, 如下代码大概写个组合实现的意思：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("/**\n* @pdai\n*/\nclass MyString{\n\n    private String innerString;\n\n    // ...init & other methods\n\n    // 支持老的方法\n    public int length(){\n        return innerString.length(); // 通过innerString调用老的方法\n    }\n\n    // 添加新方法\n    public String toMyString(){\n        //...\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br")])]),n("h3",{attrs:{id:"修饰方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰方法"}},[a._v("#")]),a._v(" 修饰方法")]),a._v(" "),n("blockquote",[n("p",[a._v("常规的使用就不说了，这里说下:")])]),a._v(" "),n("ul",[n("li",[a._v("private 方法是隐式的final")]),a._v(" "),n("li",[a._v("final方法是可以被重载的")])]),a._v(" "),n("h4",{attrs:{id:"private-final"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#private-final"}},[a._v("#")]),a._v(" private final")]),a._v(" "),n("p",[a._v("类中所有private方法都隐式地指定为final的，由于无法取用private方法，所以也就不能覆盖它。可以对private方法增添final关键字，但这样做并没有什么好处。看下下面的例子：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class Base {\n    private void test() {\n    }\n}\n\npublic class Son extends Base{\n    public void test() {\n    }\n    public static void main(String[] args) {\n        Son son = new Son();\n        Base father = son;\n        //father.test();\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br")])]),n("p",[a._v("Base和Son都有方法test(),但是这并不是一种覆盖，因为private所修饰的方法是隐式的final，也就是无法被继承，所以更不用说是覆盖了，在Son中的test()方法不过是属于Son的新成员罢了，Son进行向上转型得到father，但是father.test()是不可执行的，因为Base中的test方法是private的，无法被访问到。")]),a._v(" "),n("h4",{attrs:{id:"final方法是可以被重载的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#final方法是可以被重载的"}},[a._v("#")]),a._v(" final方法是可以被重载的")]),a._v(" "),n("p",[a._v("我们知道父类的final方法是不能够被子类重写的，那么final方法可以被重载吗? 答案是可以的，下面代码是正确的。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class FinalExampleParent {\n    public final void test() {\n    }\n\n    public final void test(String str) {\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("h3",{attrs:{id:"修饰参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰参数"}},[a._v("#")]),a._v(" 修饰参数")]),a._v(" "),n("p",[a._v("Java允许在参数列表中以声明的方式将参数指明为final，这意味这你无法在方法中更改参数引用所指向的对象。这个特性主要用来向匿名内部类传递数据。")]),a._v(" "),n("h3",{attrs:{id:"修饰变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰变量"}},[a._v("#")]),a._v(" 修饰变量")]),a._v(" "),n("blockquote",[n("p",[a._v("常规的用法比较简单，这里通过下面三个问题进一步说明。")])]),a._v(" "),n("h4",{attrs:{id:"所有的final修饰的字段都是编译期常量吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#所有的final修饰的字段都是编译期常量吗"}},[a._v("#")]),a._v(" 所有的final修饰的字段都是编译期常量吗?")]),a._v(" "),n("p",[a._v("现在来看编译期常量和非编译期常量, 如：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class Test {\n    //编译期常量\n    final int i = 1;\n    final static int J = 1;\n    final int[] a = {1,2,3,4};\n    //非编译期常量\n    Random r = new Random();\n    final int k = r.nextInt();\n\n    public static void main(String[] args) {\n\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br")])]),n("p",[a._v("k的值由随机数对象决定，所以"),n("strong",[a._v("不是所有的final修饰的字段都是编译期常量")]),a._v("，只是k的值在被初始化后无法被更改。")]),a._v(" "),n("h4",{attrs:{id:"static-final"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#static-final"}},[a._v("#")]),a._v(" static final")]),a._v(" "),n("p",[a._v("一个既是static又是final 的字段只占据一段不能改变的存储空间，它必须在定义的时候进行赋值，否则编译器将不予通过。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('import java.util.Random;\npublic class Test {\n    static Random r = new Random();\n    final int k = r.nextInt(10);\n    static final int k2 = r.nextInt(10); \n    public static void main(String[] args) {\n        Test t1 = new Test();\n        System.out.println("k="+t1.k+" k2="+t1.k2);\n        Test t2 = new Test();\n        System.out.println("k="+t2.k+" k2="+t2.k2);\n    }\n} \n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br")])]),n("p",[a._v("上面代码某次输出结果：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("k=2 k2=7\nk=8 k2=7 \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("我们可以发现对于不同的对象k的值是不同的，但是k2的值却是相同的，这是为什么呢? 因为static关键字所修饰的字段并不属于一个对象，而是属于这个类的(ps:类变量与实例变量有什么区别?)。也可简单的理解为static final所修饰的字段仅占据内存的一个一份空间，一旦被初始化之后便不会被更改。")]),a._v(" "),n("h4",{attrs:{id:"blank-final"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#blank-final"}},[a._v("#")]),a._v(" blank final")]),a._v(" "),n("p",[a._v("Java允许生成空白final，也就是说被声明为final但又没有给出定值的字段,但是必须在该字段被使用之前被赋值，这给予我们两种选择：")]),a._v(" "),n("ul",[n("li",[a._v("在定义处进行赋值(这不叫空白final)")]),a._v(" "),n("li",[a._v("在构造器中进行赋值，保证了该值在被使用前赋值。")])]),a._v(" "),n("p",[a._v("这增强了final的灵活性。")]),a._v(" "),n("p",[a._v("看下面代码:")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class Test {\n    final int i1 = 1;\n    final int i2;//空白final\n    public Test() {\n        i2 = 1;\n    }\n    public Test(int x) {\n        this.i2 = x;\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])]),n("p",[a._v("可以看到i2的赋值更为灵活。但是请注意，如果字段由static和final修饰，仅能在声明时赋值或声明后在静态代码块中赋值，因为该字段不属于对象，属于这个类。")]),a._v(" "),n("h2",{attrs:{id:"final域重排序规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#final域重排序规则"}},[a._v("#")]),a._v(" final域重排序规则")]),a._v(" "),n("hr"),a._v(" "),n("p",[a._v("上面我们聊的final使用，应该属于Java基础层面的，当理解这些后我们就真的算是掌握了final吗? 有考虑过final在多线程并发的情况吗? 在java内存模型中我们知道java内存模型为了能让处理器和编译器底层发挥他们的最大优势，对底层的约束就很少，也就是说针对底层来说java内存模型就是一弱内存数据模型。同时，处理器和编译为了性能优化会对指令序列有编译器和处理器重排序。那么，在多线程情况下,final会进行怎样的重排序? 会导致线程安全的问题吗? 下面，就来看看final的重排序。")]),a._v(" "),n("h3",{attrs:{id:"final域为基本类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#final域为基本类型"}},[a._v("#")]),a._v(" final域为基本类型")]),a._v(" "),n("p",[a._v("先看一段示例性的代码：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class FinalDemo {\n    private int a;  //普通域\n    private final int b; //final域\n    private static FinalDemo finalDemo;\n\n    public FinalDemo() {\n        a = 1; // 1. 写普通域\n        b = 2; // 2. 写final域\n    }\n\n    public static void writer() {\n        finalDemo = new FinalDemo();\n    }\n\n    public static void reader() {\n        FinalDemo demo = finalDemo; // 3.读对象引用\n        int a = demo.a;    //4.读普通域\n        int b = demo.b;    //5.读final域\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br")])]),n("p",[a._v("假设线程A在执行writer()方法，线程B执行reader()方法。")]),a._v(" "),n("h4",{attrs:{id:"写final域重排序规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写final域重排序规则"}},[a._v("#")]),a._v(" 写final域重排序规则")]),a._v(" "),n("p",[a._v("写final域的重排序规则禁止对final域的写重排序到构造函数之外，这个规则的实现主要包含了两个方面：")]),a._v(" "),n("ul",[n("li",[a._v("JMM禁止编译器把final域的写重排序到构造函数之外；")]),a._v(" "),n("li",[a._v("编译器会在final域写之后，构造函数return之前，插入一个storestore屏障。这个屏障可以禁止处理器把final域的写重排序到构造函数之外。")])]),a._v(" "),n("p",[a._v("我们再来分析writer方法，虽然只有一行代码，但实际上做了两件事情：")]),a._v(" "),n("ul",[n("li",[a._v("构造了一个FinalDemo对象；")]),a._v(" "),n("li",[a._v("把这个对象赋值给成员变量finalDemo。")])]),a._v(" "),n("p",[a._v("我们来画下存在的一种可能执行时序图，如下：")]),a._v(" "),n("p",[n("img",{attrs:{src:s(457),alt:""}})]),a._v(" "),n("p",[a._v("由于a,b之间没有数据依赖性，普通域(普通变量)a可能会被重排序到构造函数之外，线程B就有可能读到的是普通变量a初始化之前的值(零值)，这样就可能出现错误。而final域变量b，根据重排序规则，会禁止final修饰的变量b重排序到构造函数之外，从而b能够正确赋值，线程B就能够读到final变量初始化后的值。")]),a._v(" "),n("p",[a._v("因此，写final域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，而普通域就不具有这个保障。比如在上例，线程B有可能就是一个未正确初始化的对象finalDemo。")]),a._v(" "),n("h4",{attrs:{id:"读final域重排序规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读final域重排序规则"}},[a._v("#")]),a._v(" 读final域重排序规则")]),a._v(" "),n("p",[a._v("读final域重排序规则为：在一个线程中，初次读对象引用和初次读该对象包含的final域，JMM会禁止这两个操作的重排序。(注意，这个规则仅仅是针对处理器)，处理器会在读final域操作的前面插入一个LoadLoad屏障。实际上，读对象的引用和读该对象的final域存在间接依赖性，一般处理器不会重排序这两个操作。但是有一些处理器会重排序，因此，这条禁止重排序规则就是针对这些处理器而设定的。")]),a._v(" "),n("p",[a._v("read()方法主要包含了三个操作：")]),a._v(" "),n("ul",[n("li",[a._v("初次读引用变量finalDemo;")]),a._v(" "),n("li",[a._v("初次读引用变量finalDemo的普通域a;")]),a._v(" "),n("li",[a._v("初次读引用变量finalDemo的final域b;")])]),a._v(" "),n("p",[a._v("假设线程A写过程没有重排序，那么线程A和线程B有一种的可能执行时序为下图：")]),a._v(" "),n("p",[n("img",{attrs:{src:s(458),alt:""}})]),a._v(" "),n("p",[a._v("读对象的普通域被重排序到了读对象引用的前面就会出现线程B还未读到对象引用就在读取该对象的普通域变量，这显然是错误的操作。而final域的读操作就“限定”了在读final域变量前已经读到了该对象的引用，从而就可以避免这种情况。")]),a._v(" "),n("p",[a._v("读final域的重排序规则可以确保：在读一个对象的final域之前，一定会先读这个包含这个final域的对象的引用。")]),a._v(" "),n("h3",{attrs:{id:"final域为引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#final域为引用类型"}},[a._v("#")]),a._v(" final域为引用类型")]),a._v(" "),n("p",[a._v("我们已经知道了final域是基本数据类型的时候重排序规则是怎么的了? 如果是引用数据类型了? 我们接着继续来探讨。")]),a._v(" "),n("h4",{attrs:{id:"对final修饰的对象的成员域写操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对final修饰的对象的成员域写操作"}},[a._v("#")]),a._v(" 对final修饰的对象的成员域写操作")]),a._v(" "),n("p",[a._v("针对引用数据类型，final域写针对编译器和处理器重排序增加了这样的约束：在构造函数内对一个final修饰的对象的成员域的写入，与随后在构造函数之外把这个被构造的对象的引用赋给一个引用变量，这两个操作是不能被重排序的。注意这里的是“增加”也就说前面对final基本数据类型的重排序规则在这里还是使用。这句话是比较拗口的，下面结合实例来看。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class FinalReferenceDemo {\n    final int[] arrays;\n    private FinalReferenceDemo finalReferenceDemo;\n\n    public FinalReferenceDemo() {\n        arrays = new int[1];  //1\n        arrays[0] = 1;        //2\n    }\n\n    public void writerOne() {\n        finalReferenceDemo = new FinalReferenceDemo(); //3\n    }\n\n    public void writerTwo() {\n        arrays[0] = 2;  //4\n    }\n\n    public void reader() {\n        if (finalReferenceDemo != null) {  //5\n            int temp = finalReferenceDemo.arrays[0];  //6\n        }\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br")])]),n("p",[a._v("针对上面的实例程序，线程线程A执行wirterOne方法，执行完后线程B执行writerTwo方法，然后线程C执行reader方法。下图就以这种执行时序出现的一种情况来讨论(耐心看完才有收获)。")]),a._v(" "),n("p",[n("img",{attrs:{src:s(459),alt:""}})]),a._v(" "),n("p",[a._v("由于对final域的写禁止重排序到构造方法外，因此1和3不能被重排序。由于一个final域的引用对象的成员域写入不能与随后将这个被构造出来的对象赋给引用变量重排序，因此2和3不能重排序。")]),a._v(" "),n("h4",{attrs:{id:"对final修饰的对象的成员域读操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对final修饰的对象的成员域读操作"}},[a._v("#")]),a._v(" 对final修饰的对象的成员域读操作")]),a._v(" "),n("p",[a._v("JMM可以确保线程C至少能看到写线程A对final引用的对象的成员域的写入，即能看下arrays[0] = 1，而写线程B对数组元素的写入可能看到可能看不到。JMM不保证线程B的写入对线程C可见，线程B和线程C之间存在数据竞争，此时的结果是不可预知的。如果可见的，可使用锁或者volatile。")]),a._v(" "),n("h3",{attrs:{id:"关于final重排序的总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于final重排序的总结"}},[a._v("#")]),a._v(" 关于final重排序的总结")]),a._v(" "),n("p",[a._v("按照final修饰的数据类型分类：")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("基本数据类型:")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("final域写")]),a._v("：禁止final域写与构造方法重排序，即禁止final域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的final域全部已经初始化过。")]),a._v(" "),n("li",[n("code",[a._v("final域读")]),a._v("：禁止初次读对象的引用与读该对象包含的final域的重排序。")])])]),a._v(" "),n("li",[n("p",[a._v("引用数据类型：")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("额外增加约束")]),a._v("：禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序")])])])]),a._v(" "),n("h2",{attrs:{id:"final再深入理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#final再深入理解"}},[a._v("#")]),a._v(" final再深入理解")]),a._v(" "),n("hr"),a._v(" "),n("h3",{attrs:{id:"final的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#final的实现原理"}},[a._v("#")]),a._v(" final的实现原理")]),a._v(" "),n("p",[a._v("上面我们提到过，写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障。")]),a._v(" "),n("p",[a._v("很有意思的是，如果以X86处理为例，X86不会对写-写重排序，所以StoreStore屏障可以省略。由于不会对有间接依赖性的操作重排序，所以在X86处理器中，读final域需要的LoadLoad屏障也会被省略掉。也就是说，以X86为例的话，对final域的读/写的内存屏障都会被省略！具体是否插入还是得看是什么处理器")]),a._v(" "),n("h3",{attrs:{id:"为什么final引用不能从构造函数中-溢出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么final引用不能从构造函数中-溢出"}},[a._v("#")]),a._v(" 为什么final引用不能从构造函数中“溢出”")]),a._v(" "),n("p",[a._v("这里还有一个比较有意思的问题：上面对final域写重排序规则可以确保我们在使用一个对象引用的时候该对象的final域已经在构造函数被初始化过了。但是这里其实是有一个前提条件的，也就是：在构造函数，不能让这个被构造的对象被其他线程可见，也就是说该对象引用不能在构造函数中“溢出”。以下面的例子来说：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class FinalReferenceEscapeDemo {\n    private final int a;\n    private FinalReferenceEscapeDemo referenceDemo;\n\n    public FinalReferenceEscapeDemo() {\n        a = 1;  //1\n        referenceDemo = this; //2\n    }\n\n    public void writer() {\n        new FinalReferenceEscapeDemo();\n    }\n\n    public void reader() {\n        if (referenceDemo != null) {  //3\n            int temp = referenceDemo.a; //4\n        }\n    }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br")])]),n("p",[a._v("可能的执行时序如图所示：")]),a._v(" "),n("p",[n("img",{attrs:{src:s(460),alt:""}})]),a._v(" "),n("p",[a._v("假设一个线程A执行writer方法另一个线程执行reader方法。因为构造函数中操作1和2之间没有数据依赖性，1和2可以重排序，先执行了2，这个时候引用对象referenceDemo是个没有完全初始化的对象，而当线程B去读取该对象时就会出错。尽管依然满足了final域写重排序规则：在引用对象对所有线程可见时，其final域已经完全初始化成功。但是，引用对象“this”逸出，该代码依然存在线程安全的问题。")]),a._v(" "),n("h3",{attrs:{id:"使用-final-的限制条件和局限性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-final-的限制条件和局限性"}},[a._v("#")]),a._v(" 使用 final 的限制条件和局限性")]),a._v(" "),n("p",[a._v("当声明一个 final 成员时，必须在构造函数退出前设置它的值。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class MyClass {\n  private final int myField = 1;\n  public MyClass() {\n    ...\n  }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("p",[a._v("或者")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public class MyClass {\n  private final int myField;\n  public MyClass() {\n    ...\n    myField = 1;\n    ...\n  }\n} \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("将指向对象的成员声明为 final 只能将该引用设为不可变的，而非所指的对象。")]),a._v(" "),n("p",[a._v("下面的方法仍然可以修改该 list。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('private final List myList = new ArrayList();\nmyList.add("Hello"); \n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("声明为 final 可以保证如下操作不合法")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("myList = new ArrayList();\nmyList = someOtherList; \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("如果一个对象将会在多个线程中访问并且你并没有将其成员声明为 final，则必须提供其他方式保证线程安全。")]),a._v(" "),n("p",[a._v('" 其他方式 " 可以包括声明成员为 volatile，使用 synchronized 或者显式 Lock 控制所有该成员的访问。')]),a._v(" "),n("h3",{attrs:{id:"再思考一个有趣的现象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#再思考一个有趣的现象"}},[a._v("#")]),a._v(" 再思考一个有趣的现象：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("byte b1=1;\nbyte b2=3;\nbyte b3=b1+b2;//当程序执行到这一行的时候会出错，因为b1、b2可以自动转换成int类型的变量，运算时java虚拟机对它进行了转换，结果导致把一个int赋值给byte-----出错 \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("p",[a._v("如果对b1 b2加上final就不会出错")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("final byte b1=1;\nfinal byte b2=3;\nbyte b3=b1+b2;//不会出错，相信你看了上面的解释就知道原因了。 \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h2",{attrs:{id:"thread-java-thread-x-key-final-4-参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-java-thread-x-key-final-4-参考文章"}},[a._v("#")]),a._v(" thread_java-thread-x-key-final-4 参考文章")]),a._v(" "),n("hr"),a._v(" "),n("ul",[n("li",[a._v("https://www.jianshu.com/p/1e82c75034b7")]),a._v(" "),n("li",[a._v("《java并发编程的艺术》")]),a._v(" "),n("li",[a._v("《疯狂java讲义》")])])])}),[],!1,null,null,null);n.default=e.exports},457:function(a,n,s){a.exports=s.p+"assets/img/thread_java-thread-x-key-final-1.2aa5232e.png"},458:function(a,n,s){a.exports=s.p+"assets/img/thread_java-thread-x-key-final-2.4184660a.png"},459:function(a,n,s){a.exports=s.p+"assets/img/thread_java-thread-x-key-final-3.7bfb5aab.png"},460:function(a,n,s){a.exports=s.p+"assets/img/thread_java-thread-x-key-final-4.d6047c71.png"}}]);