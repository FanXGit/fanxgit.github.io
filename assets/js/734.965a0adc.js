(window.webpackJsonp=window.webpackJsonp||[]).push([[734],{4218:function(e,a,t){"use strict";t.r(a);var s=t(7),n=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"mybatis详解-官网配置清单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解-官网配置清单"}},[e._v("#")]),e._v(" MyBatis详解 - 官网配置清单")]),e._v(" "),a("p",[e._v("=========================================")]),e._v(" "),a("blockquote",[a("p",[e._v("【本文为低优先级】通过上文我们知道配置是如何加载并初始化的，那MyBatis提供了哪些配置呢？通过MyBatis官网文档我们一探究竟。PS：对于清单型的，只需要大致浏览且在使用时能快速查找即可，所以是低优先级的。@pdai")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---%E5%AE%98%E7%BD%91%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95"}},[e._v("MyBatis详解 - 官网配置清单")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#mybatis%E9%85%8D%E7%BD%AE%E9%A1%B9"}},[e._v("MyBatis配置项")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%B1%9E%E6%80%A7properties"}},[e._v("属性（properties）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E8%AE%BE%E7%BD%AEsettings"}},[e._v("设置（settings）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8Dtypealiases"}},[e._v("类型别名（typeAliases）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E5%99%A8typehandlers"}},[e._v("类型处理器（typeHandlers）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%A4%84%E7%90%86%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B"}},[e._v("处理枚举类型")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%B7%A5%E5%8E%82objectfactory"}},[e._v("对象工厂（objectFactory）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E6%8F%92%E4%BB%B6plugins"}},[e._v("插件（plugins）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEenvironments"}},[e._v("环境配置（environments）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8transactionmanager"}},[e._v("事务管理器（transactionManager）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E6%BA%90datasource"}},[e._v("数据源（dataSource）")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#unpooled"}},[e._v("UNPOOLED")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#pooled"}},[e._v("POOLED")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#jndi"}},[e._v("JNDI")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%82%E5%95%86%E6%A0%87%E8%AF%86databaseidprovider"}},[e._v("数据库厂商标识（databaseIdProvider）")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E6%98%A0%E5%B0%84%E5%99%A8mappers"}},[e._v("映射器（mappers）")])])])])]),e._v(" "),a("h1",{attrs:{id:"mybatis配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis配置项"}},[e._v("#")]),e._v(" MyBatis配置项")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。通过上一篇的初始化过程，我们就能看出，在mybatis的配置文件中：")]),e._v(" "),a("ul",[a("li",[e._v("configuration节点为根节点。")]),e._v(" "),a("li",[e._v("在configuration节点之下，我们可以配置10个子节点， 分别为：properties、typeAliases、plugins、objectFactory、objectWrapperFactory、settings、environments、databaseIdProvider、typeHandlers、mappers。")])]),e._v(" "),a("p",[e._v("通过官方文档，我们梳理下配置文档的顶层结构：")]),e._v(" "),a("ul",[a("li",[e._v("configuration（配置）")]),e._v(" "),a("li",[e._v("properties（属性）")]),e._v(" "),a("li",[e._v("settings（设置）")]),e._v(" "),a("li",[e._v("typeAliases（类型别名）")]),e._v(" "),a("li",[e._v("typeHandlers（类型处理器）")]),e._v(" "),a("li",[e._v("objectFactory（对象工厂）")]),e._v(" "),a("li",[e._v("plugins（插件）")]),e._v(" "),a("li",[e._v("environments（环境配置）\n"),a("ul",[a("li",[e._v("environment（环境变量）\n"),a("ul",[a("li",[e._v("transactionManager（事务管理器）")]),e._v(" "),a("li",[e._v("dataSource（数据源）")])])])])]),e._v(" "),a("li",[e._v("databaseIdProvider（数据库厂商标识）")]),e._v(" "),a("li",[e._v("mappers（映射器）")])]),e._v(" "),a("h1",{attrs:{id:"属性-properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-properties"}},[e._v("#")]),e._v(" 属性（properties）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<properties resource="org/mybatis/example/config.properties">\n  <property name="username" value="dev_user"/>\n  <property name="password" value="F2Fa3!33TYyg"/>\n</properties>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<dataSource type="POOLED">\n  <property name="driver" value="${driver}"/>\n  <property name="url" value="${url}"/>\n  <property name="username" value="${username}"/>\n  <property name="password" value="${password}"/>\n</dataSource>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("这个例子中的 username 和 password 将会由 properties 元素中设置的相应值来替换。 driver 和 url 属性将会由 config.properties 文件中对应的值来替换。这样就为配置提供了诸多灵活选择。")]),e._v(" "),a("p",[e._v("也可以在 SqlSessionFactoryBuilder.build() 方法中传入属性值。例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);\n\n// ... 或者 ...\n\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：")]),e._v(" "),a("ul",[a("li",[e._v("首先读取在 properties 元素体内指定的属性。")]),e._v(" "),a("li",[e._v("然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。")]),e._v(" "),a("li",[e._v("最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。")])]),e._v(" "),a("p",[e._v("因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。")]),e._v(" "),a("p",[e._v("从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dataSource type=\"POOLED\">\n  \x3c!-- ... --\x3e\n  <property name=\"username\" value=\"${username:ut_user}\"/> \x3c!-- 如果属性 'username' 没有被配置，'username' 属性的值将为 'ut_user' --\x3e\n</dataSource>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<properties resource="org/mybatis/example/config.properties">\n  \x3c!-- ... --\x3e\n  <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/> \x3c!-- 启用默认值特性 --\x3e\n</properties>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("blockquote",[a("p",[e._v("如果你在属性名中使用了 \":\" 字符（如：db:username），或者在 SQL 映射中使用了 OGNL 表达式的三元运算符（如： ${tableName != null ? tableName : 'global_constants'}），就需要设置特定的属性来修改分隔属性名和默认值的字符。例如：")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<properties resource="org/mybatis/example/config.properties">\n  \x3c!-- ... --\x3e\n  <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/> \x3c!-- 修改默认值的分隔符 --\x3e\n</properties>\n<dataSource type="POOLED">\n  \x3c!-- ... --\x3e\n  <property name="username" value="${db:username?:ut_user}"/>\n</dataSource>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("h1",{attrs:{id:"设置-settings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置-settings"}},[e._v("#")]),e._v(" 设置（settings）")]),e._v(" "),a("hr"),e._v(" "),a("blockquote",[a("p",[e._v("这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("设置名")]),e._v(" "),a("th",[e._v("描述")]),e._v(" "),a("th",[e._v("有效值")]),e._v(" "),a("th",[e._v("默认值")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("cacheEnabled")]),e._v(" "),a("td",[e._v("全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("true")])]),e._v(" "),a("tr",[a("td",[e._v("lazyLoadingEnabled")]),e._v(" "),a("td",[e._v("延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("false")])]),e._v(" "),a("tr",[a("td",[e._v("aggressiveLazyLoading")]),e._v(" "),a("td",[e._v("开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("false （在 3.4.1 及之前的版本中默认为 true）")])]),e._v(" "),a("tr",[a("td",[e._v("multipleResultSetsEnabled")]),e._v(" "),a("td",[e._v("是否允许单个语句返回多结果集（需要数据库驱动支持）。")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("true")])]),e._v(" "),a("tr",[a("td",[e._v("useColumnLabel")]),e._v(" "),a("td",[e._v("使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 true, false")]),e._v(" "),a("td",[e._v("true")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("useGeneratedKeys")]),e._v(" "),a("td",[e._v("允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("False")])]),e._v(" "),a("tr",[a("td",[e._v("autoMappingBehavior")]),e._v(" "),a("td",[e._v("指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。")]),e._v(" "),a("td",[e._v("NONE, PARTIAL, FULL")]),e._v(" "),a("td",[e._v("PARTIAL")])]),e._v(" "),a("tr",[a("td",[e._v("autoMappingUnknownColumnBehavior")]),e._v(" "),a("td",[e._v("指定发现自动映射目标未知列（或未知属性类型）的行为。NONE: 不做任何反应;WARNING: 输出警告日志（'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN;FAILING: 映射失败 (抛出 SqlSessionException)")]),e._v(" "),a("td",[e._v("NONE, WARNING, FAILING")]),e._v(" "),a("td",[e._v("NONE")])]),e._v(" "),a("tr",[a("td",[e._v("defaultExecutorType")]),e._v(" "),a("td",[e._v("配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。")]),e._v(" "),a("td",[e._v("SIMPLE REUSE BATCH")]),e._v(" "),a("td",[e._v("SIMPLE")])]),e._v(" "),a("tr",[a("td",[e._v("defaultStatementTimeout")]),e._v(" "),a("td",[e._v("设置超时时间，它决定数据库驱动等待数据库响应的秒数。")]),e._v(" "),a("td",[e._v("任意正整数")]),e._v(" "),a("td",[e._v("未设置 (null)")])]),e._v(" "),a("tr",[a("td",[e._v("defaultFetchSize")]),e._v(" "),a("td",[e._v("为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。")]),e._v(" "),a("td",[e._v("任意正整数")]),e._v(" "),a("td",[e._v("未设置 (null)")])]),e._v(" "),a("tr",[a("td",[e._v("defaultResultSetType")]),e._v(" "),a("td",[e._v("指定语句默认的滚动策略。（新增于 3.5.2）")]),e._v(" "),a("td",[e._v("FORWARD_ONLY,SCROLL_SENSITIVE,SCROLL_INSENSITIVE, DEFAULT（等同于未设置）")]),e._v(" "),a("td",[e._v("未设置 (null)")])]),e._v(" "),a("tr",[a("td",[e._v("safeRowBoundsEnabled")]),e._v(" "),a("td",[e._v("是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("False")])]),e._v(" "),a("tr",[a("td",[e._v("safeResultHandlerEnabled")]),e._v(" "),a("td",[e._v("是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。 true, false")]),e._v(" "),a("td",[e._v("True")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("mapUnderscoreToCamelCase")]),e._v(" "),a("td",[e._v("是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 true, false")]),e._v(" "),a("td",[e._v("False")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("localCacheScope")]),e._v(" "),a("td",[e._v("MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。")]),e._v(" "),a("td",[e._v("SESSION,STATEMENT")]),e._v(" "),a("td",[e._v("SESSION")])]),e._v(" "),a("tr",[a("td",[e._v("jdbcTypeForNull")]),e._v(" "),a("td",[e._v("当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。")]),e._v(" "),a("td",[e._v("JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。")]),e._v(" "),a("td",[e._v("OTHER")])]),e._v(" "),a("tr",[a("td",[e._v("lazyLoadTriggerMethods 指定对象的哪些方法触发一次延迟加载。")]),e._v(" "),a("td",[e._v("用逗号分隔的方法列表。")]),e._v(" "),a("td",[e._v("equals,clone,hashCode,toString")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("defaultScriptingLanguage")]),e._v(" "),a("td",[e._v("指定动态 SQL 生成使用的默认脚本语言。")]),e._v(" "),a("td",[e._v("一个类型别名或全限定类名。")]),e._v(" "),a("td",[e._v("org.apache.ibatis.scripting.xmltags.XMLLanguageDriver")])]),e._v(" "),a("tr",[a("td",[e._v("defaultEnumTypeHandler")]),e._v(" "),a("td",[e._v("指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）")]),e._v(" "),a("td",[e._v("一个类型别名或全限定类名。")]),e._v(" "),a("td",[e._v("org.apache.ibatis.type.EnumTypeHandler")])]),e._v(" "),a("tr",[a("td",[e._v("callSettersOnNulls")]),e._v(" "),a("td",[e._v("指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("false")])]),e._v(" "),a("tr",[a("td",[e._v("returnInstanceForEmptyRow")]),e._v(" "),a("td",[e._v("当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("false")])]),e._v(" "),a("tr",[a("td",[e._v("logPrefix")]),e._v(" "),a("td",[e._v("指定 MyBatis 增加到日志名称的前缀。")]),e._v(" "),a("td",[e._v("任何字符串")]),e._v(" "),a("td",[e._v("未设置")])]),e._v(" "),a("tr",[a("td",[e._v("logImpl")]),e._v(" "),a("td",[e._v("指定 MyBatis 所用日志的具体实现，未指定时将自动查找。")]),e._v(" "),a("td",[e._v("SLF4J,LOG4J, LOG4J2, JDK_LOGGING, COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING")]),e._v(" "),a("td",[e._v("未设置")])]),e._v(" "),a("tr",[a("td",[e._v("proxyFactory 指定 Mybatis 创建可延迟加载对象所用到的代理工具。")]),e._v(" "),a("td",[e._v("CGLIB ,JAVASSIST")]),e._v(" "),a("td",[e._v("JAVASSIST （MyBatis 3.3 以上）")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("vfsImpl")]),e._v(" "),a("td",[e._v("指定 VFS 的实现")]),e._v(" "),a("td",[e._v("自定义 VFS 的实现的类全限定名，以逗号分隔。")]),e._v(" "),a("td",[e._v("未设置")])]),e._v(" "),a("tr",[a("td",[e._v("useActualParamName")]),e._v(" "),a("td",[e._v("允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("true")])]),e._v(" "),a("tr",[a("td",[e._v("configurationFactory")]),e._v(" "),a("td",[e._v("指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）")]),e._v(" "),a("td",[e._v("一个类型别名或完全限定类名。")]),e._v(" "),a("td",[e._v("未设置")])]),e._v(" "),a("tr",[a("td",[e._v("shrinkWhitespacesInSql")]),e._v(" "),a("td",[e._v("Removes extra whitespace characters from the SQL. Note that this also affects literal strings in SQL. (Since 3.5.5)")]),e._v(" "),a("td",[e._v("true, false")]),e._v(" "),a("td",[e._v("false")])])])]),e._v(" "),a("p",[e._v("一个配置完整的 settings 元素的示例如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<settings>\n  <setting name="cacheEnabled" value="true"/>\n  <setting name="lazyLoadingEnabled" value="true"/>\n  <setting name="multipleResultSetsEnabled" value="true"/>\n  <setting name="useColumnLabel" value="true"/>\n  <setting name="useGeneratedKeys" value="false"/>\n  <setting name="autoMappingBehavior" value="PARTIAL"/>\n  <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>\n  <setting name="defaultExecutorType" value="SIMPLE"/>\n  <setting name="defaultStatementTimeout" value="25"/>\n  <setting name="defaultFetchSize" value="100"/>\n  <setting name="safeRowBoundsEnabled" value="false"/>\n  <setting name="mapUnderscoreToCamelCase" value="false"/>\n  <setting name="localCacheScope" value="SESSION"/>\n  <setting name="jdbcTypeForNull" value="OTHER"/>\n  <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>\n</settings>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br")])]),a("h1",{attrs:{id:"类型别名-typealiases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名-typealiases"}},[e._v("#")]),e._v(" 类型别名（typeAliases）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<typeAliases>\n  <typeAlias alias="Author" type="domain.blog.Author"/>\n  <typeAlias alias="Blog" type="domain.blog.Blog"/>\n  <typeAlias alias="Comment" type="domain.blog.Comment"/>\n  <typeAlias alias="Post" type="domain.blog.Post"/>\n  <typeAlias alias="Section" type="domain.blog.Section"/>\n  <typeAlias alias="Tag" type="domain.blog.Tag"/>\n</typeAliases>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[e._v("当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。")]),e._v(" "),a("p",[e._v("也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<typeAliases>\n  <package name="domain.blog"/>\n</typeAliases>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。见下面的例子：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Alias("author")\npublic class Author {\n    ...\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("别名")]),e._v(" "),a("th",[e._v("映射的类型")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("_byte")]),e._v(" "),a("td",[e._v("byte")])]),e._v(" "),a("tr",[a("td",[e._v("_long")]),e._v(" "),a("td",[e._v("long")])]),e._v(" "),a("tr",[a("td",[e._v("_short")]),e._v(" "),a("td",[e._v("short")])]),e._v(" "),a("tr",[a("td",[e._v("_int")]),e._v(" "),a("td",[e._v("int")])]),e._v(" "),a("tr",[a("td",[e._v("_integer")]),e._v(" "),a("td",[e._v("int")])]),e._v(" "),a("tr",[a("td",[e._v("_double")]),e._v(" "),a("td",[e._v("double")])]),e._v(" "),a("tr",[a("td",[e._v("_float")]),e._v(" "),a("td",[e._v("float")])]),e._v(" "),a("tr",[a("td",[e._v("_boolean")]),e._v(" "),a("td",[e._v("boolean")])]),e._v(" "),a("tr",[a("td",[e._v("string")]),e._v(" "),a("td",[e._v("String")])]),e._v(" "),a("tr",[a("td",[e._v("byte")]),e._v(" "),a("td",[e._v("Byte")])]),e._v(" "),a("tr",[a("td",[e._v("long")]),e._v(" "),a("td",[e._v("Long")])]),e._v(" "),a("tr",[a("td",[e._v("short")]),e._v(" "),a("td",[e._v("Short")])]),e._v(" "),a("tr",[a("td",[e._v("int")]),e._v(" "),a("td",[e._v("Integer")])]),e._v(" "),a("tr",[a("td",[e._v("integer")]),e._v(" "),a("td",[e._v("Integer")])]),e._v(" "),a("tr",[a("td",[e._v("double")]),e._v(" "),a("td",[e._v("Double")])]),e._v(" "),a("tr",[a("td",[e._v("float")]),e._v(" "),a("td",[e._v("Float")])]),e._v(" "),a("tr",[a("td",[e._v("boolean")]),e._v(" "),a("td",[e._v("Boolean")])]),e._v(" "),a("tr",[a("td",[e._v("date")]),e._v(" "),a("td",[e._v("Date")])]),e._v(" "),a("tr",[a("td",[e._v("decimal")]),e._v(" "),a("td",[e._v("BigDecimal")])]),e._v(" "),a("tr",[a("td",[e._v("bigdecimal")]),e._v(" "),a("td",[e._v("BigDecimal")])]),e._v(" "),a("tr",[a("td",[e._v("object")]),e._v(" "),a("td",[e._v("Object")])]),e._v(" "),a("tr",[a("td",[e._v("map")]),e._v(" "),a("td",[e._v("Map")])]),e._v(" "),a("tr",[a("td",[e._v("hashmap")]),e._v(" "),a("td",[e._v("HashMap")])]),e._v(" "),a("tr",[a("td",[e._v("list")]),e._v(" "),a("td",[e._v("List")])]),e._v(" "),a("tr",[a("td",[e._v("arraylist")]),e._v(" "),a("td",[e._v("ArrayList")])]),e._v(" "),a("tr",[a("td",[e._v("collection")]),e._v(" "),a("td",[e._v("Collection")])]),e._v(" "),a("tr",[a("td",[e._v("iterator")]),e._v(" "),a("td",[e._v("Iterator")])])])]),e._v(" "),a("h1",{attrs:{id:"类型处理器-typehandlers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型处理器-typehandlers"}},[e._v("#")]),e._v(" 类型处理器（typeHandlers）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。")]),e._v(" "),a("blockquote",[a("p",[e._v("从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("类型处理器")]),e._v(" "),a("th",[e._v("Java 类型")]),e._v(" "),a("th",[e._v("JDBC类型")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("BooleanTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.Boolean, boolean")]),e._v(" "),a("td",[e._v("数据库兼容的 BOOLEAN")])]),e._v(" "),a("tr",[a("td",[e._v("ByteTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.Byte, byte")]),e._v(" "),a("td",[e._v("数据库兼容的 NUMERIC 或 BYTE")])]),e._v(" "),a("tr",[a("td",[e._v("ShortTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.Short, short")]),e._v(" "),a("td",[e._v("数据库兼容的 NUMERIC 或 SMALLINT")])]),e._v(" "),a("tr",[a("td",[e._v("IntegerTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.Integer, int")]),e._v(" "),a("td",[e._v("数据库兼容的 NUMERIC 或 INTEGER")])]),e._v(" "),a("tr",[a("td",[e._v("LongTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.Long, long")]),e._v(" "),a("td",[e._v("数据库兼容的 NUMERIC 或 BIGINT")])]),e._v(" "),a("tr",[a("td",[e._v("FloatTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.Float, float")]),e._v(" "),a("td",[e._v("数据库兼容的 NUMERIC 或 FLOAT")])]),e._v(" "),a("tr",[a("td",[e._v("DoubleTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.Double, double")]),e._v(" "),a("td",[e._v("数据库兼容的 NUMERIC 或 DOUBLE")])]),e._v(" "),a("tr",[a("td",[e._v("BigDecimalTypeHandler")]),e._v(" "),a("td",[e._v("java.math.BigDecimal")]),e._v(" "),a("td",[e._v("数据库兼容的 NUMERIC 或 DECIMAL")])]),e._v(" "),a("tr",[a("td",[e._v("StringTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.String")]),e._v(" "),a("td",[e._v("CHAR, VARCHAR")])]),e._v(" "),a("tr",[a("td",[e._v("ClobReaderTypeHandler")]),e._v(" "),a("td",[e._v("java.io.Reader")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("ClobTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.String")]),e._v(" "),a("td",[e._v("CLOB, LONGVARCHAR")])]),e._v(" "),a("tr",[a("td",[e._v("NStringTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.String")]),e._v(" "),a("td",[e._v("NVARCHAR, NCHAR")])]),e._v(" "),a("tr",[a("td",[e._v("NClobTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.String")]),e._v(" "),a("td",[e._v("NCLOB")])]),e._v(" "),a("tr",[a("td",[e._v("BlobInputStreamTypeHandler")]),e._v(" "),a("td",[e._v("java.io.InputStream")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("ByteArrayTypeHandler")]),e._v(" "),a("td",[e._v("byte[]")]),e._v(" "),a("td",[e._v("数据库兼容的字节流类型")])]),e._v(" "),a("tr",[a("td",[e._v("BlobTypeHandler")]),e._v(" "),a("td",[e._v("byte[] BLOB,")]),e._v(" "),a("td",[e._v("LONGVARBINARY")])]),e._v(" "),a("tr",[a("td",[e._v("DateTypeHandler")]),e._v(" "),a("td",[e._v("java.util.Date")]),e._v(" "),a("td",[e._v("TIMESTAMP")])]),e._v(" "),a("tr",[a("td",[e._v("DateOnlyTypeHandler")]),e._v(" "),a("td",[e._v("java.util.Date")]),e._v(" "),a("td",[e._v("DATE")])]),e._v(" "),a("tr",[a("td",[e._v("TimeOnlyTypeHandler")]),e._v(" "),a("td",[e._v("java.util.Date")]),e._v(" "),a("td",[e._v("TIME")])]),e._v(" "),a("tr",[a("td",[e._v("SqlTimestampTypeHandler")]),e._v(" "),a("td",[e._v("java.sql.Timestamp")]),e._v(" "),a("td",[e._v("TIMESTAMP")])]),e._v(" "),a("tr",[a("td",[e._v("SqlDateTypeHandler")]),e._v(" "),a("td",[e._v("java.sql.Date")]),e._v(" "),a("td",[e._v("DATE")])]),e._v(" "),a("tr",[a("td",[e._v("SqlTimeTypeHandler")]),e._v(" "),a("td",[e._v("java.sql.Time")]),e._v(" "),a("td",[e._v("TIME")])]),e._v(" "),a("tr",[a("td",[e._v("ObjectTypeHandler")]),e._v(" "),a("td",[e._v("Any")]),e._v(" "),a("td",[e._v("OTHER 或未指定类型")])]),e._v(" "),a("tr",[a("td",[e._v("EnumTypeHandler")]),e._v(" "),a("td",[e._v("Enumeration Type")]),e._v(" "),a("td",[e._v("VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）")])]),e._v(" "),a("tr",[a("td",[e._v("EnumOrdinalTypeHandler")]),e._v(" "),a("td",[e._v("Enumeration Type")]),e._v(" "),a("td",[e._v("任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）。")])]),e._v(" "),a("tr",[a("td",[e._v("SqlxmlTypeHandler")]),e._v(" "),a("td",[e._v("java.lang.String")]),e._v(" "),a("td",[e._v("SQLXML")])]),e._v(" "),a("tr",[a("td",[e._v("InstantTypeHandler")]),e._v(" "),a("td",[e._v("java.time.Instant")]),e._v(" "),a("td",[e._v("TIMESTAMP")])]),e._v(" "),a("tr",[a("td",[e._v("LocalDateTimeTypeHandler")]),e._v(" "),a("td",[e._v("java.time.LocalDateTime")]),e._v(" "),a("td",[e._v("TIMESTAMP")])]),e._v(" "),a("tr",[a("td",[e._v("LocalDateTypeHandler")]),e._v(" "),a("td",[e._v("java.time.LocalDate")]),e._v(" "),a("td",[e._v("DATE")])]),e._v(" "),a("tr",[a("td",[e._v("LocalTimeTypeHandler")]),e._v(" "),a("td",[e._v("java.time.LocalTime")]),e._v(" "),a("td",[e._v("TIME")])]),e._v(" "),a("tr",[a("td",[e._v("OffsetDateTimeTypeHandler")]),e._v(" "),a("td",[e._v("java.time.OffsetDateTime")]),e._v(" "),a("td",[e._v("TIMESTAMP")])]),e._v(" "),a("tr",[a("td",[e._v("OffsetTimeTypeHandler")]),e._v(" "),a("td",[e._v("java.time.OffsetTime")]),e._v(" "),a("td",[e._v("TIME")])]),e._v(" "),a("tr",[a("td",[e._v("ZonedDateTimeTypeHandler")]),e._v(" "),a("td",[e._v("java.time.ZonedDateTime")]),e._v(" "),a("td",[e._v("TIMESTAMP")])]),e._v(" "),a("tr",[a("td",[e._v("YearTypeHandler")]),e._v(" "),a("td",[e._v("java.time.Year")]),e._v(" "),a("td",[e._v("INTEGER")])]),e._v(" "),a("tr",[a("td",[e._v("MonthTypeHandler")]),e._v(" "),a("td",[e._v("java.time.Month")]),e._v(" "),a("td",[e._v("INTEGER")])]),e._v(" "),a("tr",[a("td",[e._v("YearMonthTypeHandler")]),e._v(" "),a("td",[e._v("java.time.YearMonth")]),e._v(" "),a("td",[e._v("VARCHAR 或 LONGVARCHAR")])]),e._v(" "),a("tr",[a("td",[e._v("JapaneseDateTypeHandler")]),e._v(" "),a("td",[e._v("java.time.chrono.JapaneseDate")]),e._v(" "),a("td",[e._v("DATE")])])])]),e._v(" "),a("p",[e._v("你可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 并且可以（可选地）将它映射到一个 JDBC 类型。比如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ExampleTypeHandler.java\n@MappedJdbcTypes(JdbcType.VARCHAR)\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n    ps.setString(i, parameter);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n    return rs.getString(columnName);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n    return rs.getString(columnIndex);\n  }\n\n  @Override\n  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n    return cs.getString(columnIndex);\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- mybatis-config.xml --\x3e\n<typeHandlers>\n  <typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>\n</typeHandlers>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("使用上述的类型处理器将会覆盖已有的处理 Java String 类型的属性以及 VARCHAR 类型的参数和结果的类型处理器。 要注意 MyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。")]),e._v(" "),a("p",[e._v("通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：")]),e._v(" "),a("ul",[a("li",[e._v('在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如：javaType="String"）；')]),e._v(" "),a("li",[e._v("在类型处理器的类上增加一个 @MappedTypes 注解指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解上的配置将被忽略。")])]),e._v(" "),a("p",[e._v("可以通过两种方式来指定关联的 JDBC 类型：")]),e._v(" "),a("ul",[a("li",[e._v('在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType="VARCHAR"）；')]),e._v(" "),a("li",[e._v("在类型处理器的类上增加一个 @MappedJdbcTypes 注解指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解上的配置将被忽略。")])]),e._v(" "),a("p",[e._v("当在 ResultMap 中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。 因此 Mybatis 使用 javaType=[Java 类型], jdbcType=null 的组合来选择一个类型处理器。 这意味着使用 @MappedJdbcTypes 注解可以限制类型处理器的作用范围，并且可以确保，除非显式地设置，否则类型处理器在 ResultMap 中将不会生效。 如果希望能在 ResultMap 中隐式地使用类型处理器，那么设置 @MappedJdbcTypes 注解的 includeNullJdbcType=true 即可。 然而从 Mybatis 3.4.0 开始，如果某个 Java 类型只有一个注册的类型处理器，即使没有设置 includeNullJdbcType=true，那么这个类型处理器也会是 ResultMap 使用 Java 类型时的默认处理器。")]),e._v(" "),a("p",[e._v("最后，可以让 MyBatis 帮你查找类型处理器：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- mybatis-config.xml --\x3e\n<typeHandlers>\n  <package name="org.mybatis.example"/>\n</typeHandlers>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型。")]),e._v(" "),a("p",[e._v("你可以创建能够处理多个类的泛型类型处理器。为了使用泛型类型处理器， 需要增加一个接受该类的 class 作为参数的构造器，这样 MyBatis 会在构造一个类型处理器实例的时候传入一个具体的类。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//GenericTypeHandler.java\npublic class GenericTypeHandler<E extends MyObject> extends BaseTypeHandler<E> {\n\n  private Class<E> type;\n\n  public GenericTypeHandler(Class<E> type) {\n    if (type == null) throw new IllegalArgumentException("Type argument cannot be null");\n    this.type = type;\n  }\n  ...\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("EnumTypeHandler 和 EnumOrdinalTypeHandler 都是泛型类型处理器，我们将会在接下来的部分详细探讨。")]),e._v(" "),a("h1",{attrs:{id:"处理枚举类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理枚举类型"}},[e._v("#")]),e._v(" 处理枚举类型")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选择一个来使用。")]),e._v(" "),a("p",[e._v("比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。")]),e._v(" "),a("blockquote",[a("p",[e._v("注意 EnumTypeHandler 在某种意义上来说是比较特别的，其它的处理器只针对某个特定的类，而它不同，它会处理任意继承了 Enum 的类。")])]),e._v(" "),a("p",[e._v("不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。那也一样简单：在配置文件中把 EnumOrdinalTypeHandler 加到 typeHandlers 中即可， 这样每个 RoundingMode 将通过他们的序数值来映射成对应的整形数值。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- mybatis-config.xml --\x3e\n<typeHandlers>\n  <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="java.math.RoundingMode"/>\n</typeHandlers>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("但要是你想在一个地方将 Enum 映射成字符串，在另外一个地方映射成整形值呢？")]),e._v(" "),a("p",[e._v("自动映射器（auto-mapper）会自动地选用 EnumOrdinalTypeHandler 来处理枚举类型， 所以如果我们想用普通的 EnumTypeHandler，就必须要显式地为那些 SQL 语句设置要使用的类型处理器。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<!DOCTYPE mapper\n    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n\n<mapper namespace="org.apache.ibatis.submitted.rounding.Mapper">\n\t<resultMap type="org.apache.ibatis.submitted.rounding.User" id="usermap">\n\t\t<id column="id" property="id"/>\n\t\t<result column="name" property="name"/>\n\t\t<result column="funkyNumber" property="funkyNumber"/>\n\t\t<result column="roundingMode" property="roundingMode"/>\n\t</resultMap>\n\n\t<select id="getUser" resultMap="usermap">\n\t\tselect * from users\n\t</select>\n\t<insert id="insert">\n\t    insert into users (id, name, funkyNumber, roundingMode) values (\n\t    \t#{id}, #{name}, #{funkyNumber}, #{roundingMode}\n\t    )\n\t</insert>\n\n\t<resultMap type="org.apache.ibatis.submitted.rounding.User" id="usermap2">\n\t\t<id column="id" property="id"/>\n\t\t<result column="name" property="name"/>\n\t\t<result column="funkyNumber" property="funkyNumber"/>\n\t\t<result column="roundingMode" property="roundingMode" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>\n\t</resultMap>\n\t<select id="getUser2" resultMap="usermap2">\n\t\tselect * from users2\n\t</select>\n\t<insert id="insert2">\n\t    insert into users2 (id, name, funkyNumber, roundingMode) values (\n\t    \t#{id}, #{name}, #{funkyNumber}, #{roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler}\n\t    )\n\t</insert>\n\n</mapper>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br"),a("span",{staticClass:"line-number"},[e._v("32")]),a("br"),a("span",{staticClass:"line-number"},[e._v("33")]),a("br"),a("span",{staticClass:"line-number"},[e._v("34")]),a("br"),a("span",{staticClass:"line-number"},[e._v("35")]),a("br"),a("span",{staticClass:"line-number"},[e._v("36")]),a("br"),a("span",{staticClass:"line-number"},[e._v("37")]),a("br")])]),a("blockquote",[a("p",[e._v("注意，这里的 select 语句必须指定 resultMap 而不是 resultType。")])]),e._v(" "),a("h1",{attrs:{id:"对象工厂-objectfactory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象工厂-objectfactory"}},[e._v("#")]),e._v(" 对象工厂（objectFactory）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。比如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ExampleObjectFactory.java\npublic class ExampleObjectFactory extends DefaultObjectFactory {\n  public Object create(Class type) {\n    return super.create(type);\n  }\n  public Object create(Class type, List<Class> constructorArgTypes, List<Object> constructorArgs) {\n    return super.create(type, constructorArgTypes, constructorArgs);\n  }\n  public void setProperties(Properties properties) {\n    super.setProperties(properties);\n  }\n  public <T> boolean isCollection(Class<T> type) {\n    return Collection.class.isAssignableFrom(type);\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- mybatis-config.xml --\x3e\n<objectFactory type="org.mybatis.example.ExampleObjectFactory">\n  <property name="someProperty" value="100"/>\n</objectFactory>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("ObjectFactory 接口很简单，它包含两个创建实例用的方法，一个是处理默认无参构造方法的，另外一个是处理带参数的构造方法的。 另外，setProperties 方法可以被用来配置 ObjectFactory，在初始化你的 ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。")]),e._v(" "),a("h1",{attrs:{id:"插件-plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件-plugins"}},[e._v("#")]),e._v(" 插件（plugins）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)\nParameterHandler (getParameterObject, setParameters)\nResultSetHandler (handleResultSets, handleOutputParameters)\nStatementHandler (prepare, parameterize, batch, update, query)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。")]),e._v(" "),a("p",[e._v("通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// ExamplePlugin.java\n@Intercepts({@Signature(\n  type= Executor.class,\n  method = "update",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  private Properties properties = new Properties();\n  public Object intercept(Invocation invocation) throws Throwable {\n    // implement pre processing if need\n    Object returnObject = invocation.proceed();\n    // implement post processing if need\n    return returnObject;\n  }\n  public void setProperties(Properties properties) {\n    this.properties = properties;\n  }\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- mybatis-config.xml --\x3e\n<plugins>\n  <plugin interceptor="org.mybatis.example.ExamplePlugin">\n    <property name="someProperty" value="100"/>\n  </plugin>\n</plugins>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。")]),e._v(" "),a("blockquote",[a("p",[e._v("覆盖配置类: 除了用插件来修改 MyBatis 核心行为以外，还可以通过完全覆盖配置类来达到目的。只需继承配置类后覆盖其中的某个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会极大影响 MyBatis 的行为，务请慎之又慎。")])]),e._v(" "),a("h1",{attrs:{id:"环境配置-environments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境配置-environments"}},[e._v("#")]),e._v(" 环境配置（environments）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。")]),e._v(" "),a("blockquote",[a("p",[e._v("不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。")])]),e._v(" "),a("p",[e._v("所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：")]),e._v(" "),a("ul",[a("li",[e._v("每个数据库对应一个 SqlSessionFactory 实例")])]),e._v(" "),a("p",[e._v("为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("如果忽略了环境参数，那么将会加载默认环境，如下所示：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, properties);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("environments 元素定义了如何配置环境。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<environments default="development">\n  <environment id="development">\n    <transactionManager type="JDBC">\n      <property name="..." value="..."/>\n    </transactionManager>\n    <dataSource type="POOLED">\n      <property name="driver" value="${driver}"/>\n      <property name="url" value="${url}"/>\n      <property name="username" value="${username}"/>\n      <property name="password" value="${password}"/>\n    </dataSource>\n  </environment>\n</environments>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("注意一些关键点:")]),e._v(" "),a("ul",[a("li",[e._v('默认使用的环境 ID（比如：default="development"）。')]),e._v(" "),a("li",[e._v('每个 environment 元素定义的环境 ID（比如：id="development"）。')]),e._v(" "),a("li",[e._v('事务管理器的配置（比如：type="JDBC"）。')]),e._v(" "),a("li",[e._v('数据源的配置（比如：type="POOLED"）。')]),e._v(" "),a("li",[e._v("默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。")])]),e._v(" "),a("h1",{attrs:{id:"事务管理器-transactionmanager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务管理器-transactionmanager"}},[e._v("#")]),e._v(" 事务管理器（transactionManager）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("在 MyBatis 中有两种类型的事务管理器（也就是 "),a("code",[e._v('type="[JDBC|MANAGED]"')]),e._v("）：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("JDBC")]),e._v(" – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。")]),e._v(" "),a("li",[a("strong",[e._v("MANAGED")]),e._v(" – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<transactionManager type="MANAGED">\n  <property name="closeConnection" value="false"/>\n</transactionManager>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("blockquote",[a("p",[e._v("如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。")])]),e._v(" "),a("p",[e._v("这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface TransactionFactory {\n  default void setProperties(Properties props) { // 从 3.5.2 开始，该方法为默认方法\n    // 空实现\n  }\n  Transaction newTransaction(Connection conn);\n  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface Transaction {\n  Connection getConnection() throws SQLException;\n  void commit() throws SQLException;\n  void rollback() throws SQLException;\n  void close() throws SQLException;\n  Integer getTimeout() throws SQLException;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。")]),e._v(" "),a("h1",{attrs:{id:"数据源-datasource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据源-datasource"}},[e._v("#")]),e._v(" 数据源（dataSource）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。")]),e._v(" "),a("p",[e._v("大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。 有三种内建的数据源类型（也就是 "),a("code",[e._v('type="[UNPOOLED|POOLED|JNDI]"')]),e._v("）：")]),e._v(" "),a("h3",{attrs:{id:"unpooled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unpooled"}},[e._v("#")]),e._v(" UNPOOLED")]),e._v(" "),a("p",[e._v("这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：")]),e._v(" "),a("ul",[a("li",[e._v("driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。")]),e._v(" "),a("li",[e._v("url – 这是数据库的 JDBC URL 地址。")]),e._v(" "),a("li",[e._v("username – 登录数据库的用户名。")]),e._v(" "),a("li",[e._v("password – 登录数据库的密码。")]),e._v(" "),a("li",[e._v("defaultTransactionIsolationLevel – 默认的连接事务隔离级别。")]),e._v(" "),a("li",[e._v("defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。")])]),e._v(" "),a("p",[e._v("作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：")]),e._v(" "),a("ul",[a("li",[e._v("driver.encoding=UTF8")])]),e._v(" "),a("p",[e._v("这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。")]),e._v(" "),a("h3",{attrs:{id:"pooled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pooled"}},[e._v("#")]),e._v(" POOLED")]),e._v(" "),a("p",[e._v("这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。")]),e._v(" "),a("p",[e._v("除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：")]),e._v(" "),a("ul",[a("li",[e._v("poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10")]),e._v(" "),a("li",[e._v("poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。")]),e._v(" "),a("li",[e._v("poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）")]),e._v(" "),a("li",[e._v("poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。")]),e._v(" "),a("li",[e._v("poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5）")]),e._v(" "),a("li",[e._v("poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。")]),e._v(" "),a("li",[e._v("poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。")]),e._v(" "),a("li",[e._v("poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。")])]),e._v(" "),a("h3",{attrs:{id:"jndi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jndi"}},[e._v("#")]),e._v(" JNDI")]),e._v(" "),a("p",[e._v("这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：")]),e._v(" "),a("ul",[a("li",[e._v("initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。")]),e._v(" "),a("li",[e._v("data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。")])]),e._v(" "),a("p",[e._v("和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：")]),e._v(" "),a("ul",[a("li",[e._v("env.encoding=UTF8")])]),e._v(" "),a("p",[e._v("这就会在 InitialContext 实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。")]),e._v(" "),a("p",[e._v("你可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源实现：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface DataSourceFactory {\n  void setProperties(Properties props);\n  DataSource getDataSource();\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\npublic class C3P0DataSourceFactory extends UnpooledDataSourceFactory {\n\n  public C3P0DataSourceFactory() {\n    this.dataSource = new ComboPooledDataSource();\n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("为了令其工作，记得在配置文件中为每个希望 MyBatis 调用的 setter 方法增加对应的属性。 下面是一个可以连接至 PostgreSQL 数据库的例子：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<dataSource type="org.myproject.C3P0DataSourceFactory">\n  <property name="driver" value="org.postgresql.Driver"/>\n  <property name="url" value="jdbc:postgresql:mydb"/>\n  <property name="username" value="postgres"/>\n  <property name="password" value="root"/>\n</dataSource>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h1",{attrs:{id:"数据库厂商标识-databaseidprovider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库厂商标识-databaseidprovider"}},[e._v("#")]),e._v(" 数据库厂商标识（databaseIdProvider）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<databaseIdProvider type="DB_VENDOR" />\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("databaseIdProvider 对应的 DB_VENDOR 实现会将 databaseId 设置为 DatabaseMetaData#getDatabaseProductName() 返回的字符串。 由于通常情况下这些字符串都非常长，而且相同产品的不同版本会返回不同的值，你可能想通过设置属性别名来使其变短：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<databaseIdProvider type="DB_VENDOR">\n  <property name="SQL Server" value="sqlserver"/>\n  <property name="DB2" value="db2"/>\n  <property name="Oracle" value="oracle" />\n</databaseIdProvider>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("在提供了属性别名时，databaseIdProvider 的 DB_VENDOR 实现会将 databaseId 设置为数据库产品名与属性中的名称第一个相匹配的值，如果没有匹配的属性，将会设置为 “null”。 在这个例子中，如果 getDatabaseProductName() 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。")]),e._v(" "),a("p",[e._v("你可以通过实现接口 org.apache.ibatis.mapping.DatabaseIdProvider 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface DatabaseIdProvider {\n  default void setProperties(Properties p) { // 从 3.5.2 开始，该方法为默认方法\n    // 空实现\n  }\n  String getDatabaseId(DataSource dataSource) throws SQLException;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h1",{attrs:{id:"映射器-mappers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#映射器-mappers"}},[e._v("#")]),e._v(" 映射器（mappers）")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- 使用相对于类路径的资源引用 --\x3e\n<mappers>\n  <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>\n  <mapper resource="org/mybatis/builder/BlogMapper.xml"/>\n  <mapper resource="org/mybatis/builder/PostMapper.xml"/>\n</mappers>\n\x3c!-- 使用完全限定资源定位符（URL） --\x3e\n<mappers>\n  <mapper url="file:///var/mappers/AuthorMapper.xml"/>\n  <mapper url="file:///var/mappers/BlogMapper.xml"/>\n  <mapper url="file:///var/mappers/PostMapper.xml"/>\n</mappers>\n\x3c!-- 使用映射器接口实现类的完全限定类名 --\x3e\n<mappers>\n  <mapper class="org.mybatis.builder.AuthorMapper"/>\n  <mapper class="org.mybatis.builder.BlogMapper"/>\n  <mapper class="org.mybatis.builder.PostMapper"/>\n</mappers>\n\x3c!-- 将包内的映射器接口实现全部注册为映射器 --\x3e\n<mappers>\n  <package name="org.mybatis.builder"/>\n</mappers>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br")])]),a("p",[e._v("这些配置会告诉 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了，也就是接下来我们要讨论的。)")])])}),[],!1,null,null,null);a.default=n.exports}}]);