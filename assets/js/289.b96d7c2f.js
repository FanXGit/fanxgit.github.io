(window.webpackJsonp=window.webpackJsonp||[]).push([[289],{1082:function(t,a,v){t.exports=v.p+"assets/img/springboot-hikari-1.bd3f6ad7.png"},1083:function(t,a,v){t.exports=v.p+"assets/img/springboot-hikari-3.6c1036f1.png"},323:function(t,a,v){t.exports=v.p+"assets/img/springboot-hikari-2.9fd5e744.png"},3685:function(t,a,v){"use strict";v.r(a);var r=v(7),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"▶springboot集成连接池-数据库连接池和默认连接池hikaricp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#▶springboot集成连接池-数据库连接池和默认连接池hikaricp"}},[t._v("#")]),t._v(" ▶SpringBoot集成连接池 - 数据库连接池和默认连接池HikariCP")]),t._v(" "),a("blockquote",[a("p",[t._v("本文主要介绍数据库连接池，以及SpringBoot集成默认的HikariCP的实践。@pdai")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#springboot%E9%9B%86%E6%88%90%E8%BF%9E%E6%8E%A5%E6%B1%A0---%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%92%8C%E9%BB%98%E8%AE%A4%E8%BF%9E%E6%8E%A5%E6%B1%A0hikaricp"}},[t._v("▶SpringBoot集成连接池 - 数据库连接池和默认连接池HikariCP")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E7%9F%A5%E8%AF%86%E5%87%86%E5%A4%87"}},[t._v("知识准备")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0"}},[t._v("什么是数据库连接池？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86"}},[t._v("数据库连接池基本原理？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0"}},[t._v("有哪些常见的数据库连接池？")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B"}},[t._v("简单示例")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%90%86%E8%A7%A3"}},[t._v("进一步理解")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#springboot2%E9%BB%98%E8%AE%A4%E8%BF%9E%E6%8E%A5%E6%B1%A0hikaricp%E6%98%AF%E5%A6%82%E4%BD%95%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84"}},[t._v("SpringBoot2默认连接池HikariCP是如何起作用的？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9B%B4%E5%A4%9Ahikaricp%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0"}},[t._v("更多HikariCP配置参数？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88hikaricp%E4%BC%9A%E6%88%90%E4%B8%BA%E9%BB%98%E8%AE%A4%E8%BF%9E%E6%8E%A5%E6%B1%A0"}},[t._v("为什么HikariCP会成为默认连接池？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9B%B4%E5%A4%9A%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98"}},[t._v("更多常见的使用问题")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%BA%90%E7%A0%81%E7%A4%BA%E4%BE%8B"}},[t._v("源码示例")])])])])]),t._v(" "),a("h1",{attrs:{id:"知识准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识准备"}},[t._v("#")]),t._v(" 知识准备")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("需要理解数据库连接池的基本原理，Java DataSource规范，常见的连接池等。部分内容整理自"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/1518538?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度百科 在新窗口打开"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"什么是数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据库连接池"}},[t._v("#")]),t._v(" 什么是数据库连接池？")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是连接池，它要解决什么样的问题呢？")])]),t._v(" "),a("p",[t._v("数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。")]),t._v(" "),a("h3",{attrs:{id:"数据库连接池基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池基本原理"}},[t._v("#")]),t._v(" 数据库连接池基本原理？")]),t._v(" "),a("p",[t._v("连接池基本的思想是在系统初始化的时候，将数据库连接作为对象存储在内存中，当用户需要访问数据库时，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。使用完毕后，用户也并非将连接关闭，而是将连接放回连接池中，以供下一个请求访问使用。而连接的建立、断开都由连接池自身来管理。同时，还可以通过设置连接池的参数来控制连接池中的初始连接数、连接的上下限数以及每个连接的最大使用次数、最大空闲时间等等。也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。")]),t._v(" "),a("p",[t._v("数据库连接池的最小连接数和最大连接数的设置要考虑到下列几个因素：")]),t._v(" "),a("ul",[a("li",[t._v("最小连接数")])]),t._v(" "),a("p",[t._v("是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费。")]),t._v(" "),a("ul",[a("li",[t._v("最大连接数")])]),t._v(" "),a("p",[t._v("是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。")]),t._v(" "),a("ul",[a("li",[t._v("最小连接数与最大连接数差距")])]),t._v(" "),a("p",[t._v("最小连接数与最大连接数相差太大，那么最先的连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完不会马上被释放，它将被放到连接池中等待重复使用或是空闲超时后被释放。")]),t._v(" "),a("h3",{attrs:{id:"有哪些常见的数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常见的数据库连接池"}},[t._v("#")]),t._v(" 有哪些常见的数据库连接池？")]),t._v(" "),a("blockquote",[a("p",[t._v("开源的数据库连接池众多，这里我们需要了解曾经常用的开源数据库连接池及其被淘汰原因，并了解目前最常用的数据库连接池。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("C3P0(被淘汰：历史悠久，过于复杂，性能差)")])])]),t._v(" "),a("p",[t._v("是一个开放源代码的JDBC连接池，它在lib目录中与Hibernate一起发布，包括了实现jdbc3和jdbc2扩展规范说明的Connection 和Statement 池的DataSources 对象。由于一度是Hibernate内置的数据库连接池而被开发者熟知，但是由于性能和复杂度，官方已经放弃维护。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("DBCP（被淘汰：依赖Commons-Pool，性能差）")]),t._v(" DBCP（DataBase Connection Pool）属于Apache顶级项目Commons中的核心子项目。但DBCP并不是独立实现连接池功能的，它内部依赖于Commons-Pool项目，连接池最核心的“池”，就是由Commons-Pool组件提供的，因此，DBCP的性能实际上就是Pool的性能。")])]),t._v(" "),a("p",[t._v("终于在tomcat 7.0版本中，tomcat重新设计开发出了一套连接池（"),a("strong",[t._v("Tomcat JDBC Pool")]),t._v("）并且于13年9月发布了Commons-Pool 2.0。命脉已经更新的DBCP终于在14年2月份发布了DBCP2.0。但是，毕竟由于长时间没有更新突破的DBCP，已经被人放弃了。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("BoneCP（被淘汰：为解决C3P0/DBCP性能而生，后续出现了更高性能的hikariCP，BoneCP也不再更新）")])])]),t._v(" "),a("p",[t._v("是一个快速、开源的数据库连接池。帮用户管理数据连接，让应用程序能更快速地访问数据库。")]),t._v(" "),a("p",[t._v("BoneCP的出现主要是为了解决C3P0/DBCP连接池性能问题，有一些测试表明其性能提升了25倍。")]),t._v(" "),a("p",[t._v("后来出现了更高性能的hikariCP，BoneCP也不再更新，所以BoneCP目前也很少被使用。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Druid")])])]),t._v(" "),a("p",[t._v("Druid功能最为全面，sql拦截等功能，统计数据较为全面，具有良好的扩展性")]),t._v(" "),a("h1",{attrs:{id:"简单示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单示例"}},[t._v("#")]),t._v(" 简单示例")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("主要展示HikariCP的使用配置等。")])]),t._v(" "),a("p",[t._v("如下是常用的HikariCP的使用配置")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/test_db?useSSL=false&autoReconnect=true&characterEncoding=utf8\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: root\n    password: bfXa4Pt2lUUScy8jakXf\n    # 指定为HikariDataSource\n    type: com.zaxxer.hikari.HikariDataSource\n    # hikari连接池配置\n    hikari:\n      #连接池名\n      pool-name: HikariCP\n      #最小空闲连接数\n      minimum-idle: 5\n      # 空闲连接存活最大时间，默认10分钟\n      idle-timeout: 600000\n      # 连接池最大连接数，默认是10\n      maximum-pool-size: 10\n      # 此属性控制从池返回的连接的默认自动提交行为,默认值：true\n      auto-commit: true\n      # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认30分钟\n      max-lifetime: 1800000\n      # 数据库连接超时时间,默认30秒\n      connection-timeout: 30000\n      # 连接测试query\n      connection-test-query: SELECT 1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br")])]),a("h1",{attrs:{id:"进一步理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进一步理解"}},[t._v("#")]),t._v(" 进一步理解")]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[t._v("通过如下几个问题，进一步理解HikariCP。")])]),t._v(" "),a("h3",{attrs:{id:"springboot2默认连接池hikaricp是如何起作用的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot2默认连接池hikaricp是如何起作用的"}},[t._v("#")]),t._v(" SpringBoot2默认连接池HikariCP是如何起作用的？")]),t._v(" "),a("blockquote",[a("p",[t._v("从SpringBoot自动初始化配置 和 默认的数据源 两个角度理解。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("SpringBoot自动初始化配置")])])]),t._v(" "),a("p",[t._v("关键代码如下")]),t._v(" "),a("p",[a("img",{attrs:{src:v(1082),alt:""}})]),t._v(" "),a("p",[t._v("然后可以找到HikariCP数据源的配置")]),t._v(" "),a("p",[a("img",{attrs:{src:v(323),alt:""}})]),t._v(" "),a("p",[t._v("你可以发现，为了支持动态更新配置（基于MXBean)，这里还设计了一层HikariConfigMXBean接口")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("为什么说是默认的数据源呢")]),t._v("？")])]),t._v(" "),a("p",[t._v("首先，springboot-starter-jdbc中默认加载了Hikari")]),t._v(" "),a("p",[a("img",{attrs:{src:v(1083),alt:""}})]),t._v(" "),a("p",[t._v("其次，在配置初始化或者加载时都是第一个被加载的")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('private static <T extends DataSource> MappedDataSourceProperties<T> lookupPooled(ClassLoader classLoader,\n    Class<T> type) {\n  MappedDataSourceProperties<T> result = null;\n  result = lookup(classLoader, type, result, "com.zaxxer.hikari.HikariDataSource",\n      HikariDataSourceProperties::new);\n  result = lookup(classLoader, type, result, "org.apache.tomcat.jdbc.pool.DataSource",\n      TomcatPoolDataSourceProperties::new);\n  result = lookup(classLoader, type, result, "org.apache.commons.dbcp2.BasicDataSource",\n      MappedDbcp2DataSource::new);\n  result = lookup(classLoader, type, result, "oracle.ucp.jdbc.PoolDataSourceImpl",\n      OraclePoolDataSourceProperties::new, "oracle.jdbc.OracleConnection");\n  return result;\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"更多hikaricp配置参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多hikaricp配置参数"}},[t._v("#")]),t._v(" 更多HikariCP配置参数？")]),t._v(" "),a("p",[t._v("从代码的角度，你已经可以看到，可以配置如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:v(323),alt:""}})]),t._v(" "),a("p",[t._v("更具体的可以看"),a("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方配置 在新窗口打开"),a("OutboundLink")],1),t._v("或者如下"),a("a",{attrs:{href:"http://www.lanxinbase.com/?p=2482",target:"_blank",rel:"noopener noreferrer"}},[t._v("深蓝Blog总结翻译的配置 在新窗口打开"),a("OutboundLink")],1)]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("构造器默认值")]),t._v(" "),a("th",[t._v("默认配置validate之后的值")]),t._v(" "),a("th",[t._v("validate重置")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("autoCommit")]),t._v(" "),a("td",[t._v("自动提交从池中返回的连接")]),t._v(" "),a("td",[t._v("TRUE")]),t._v(" "),a("td",[t._v("TRUE")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("connectionTimeout")]),t._v(" "),a("td",[t._v("等待来自池的连接的最大毫秒数")]),t._v(" "),a("td",[t._v("SECONDS.toMillis(30) = 30000")]),t._v(" "),a("td",[t._v("30000")]),t._v(" "),a("td",[t._v("如果小于250毫秒，则被重置回30秒")])]),t._v(" "),a("tr",[a("td",[t._v("idleTimeout")]),t._v(" "),a("td",[t._v("连接允许在池中闲置的最长时间 MINUTES.toMillis(10) = 600000")]),t._v(" "),a("td",[t._v("600000")]),t._v(" "),a("td",[t._v("如果idleTimeout+1秒>maxLifetime 且 maxLifetime>0，则会被重置为0（代表永远不会退出）；如果idleTimeout!=0且小于10秒，则会被重置为10秒")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("maxLifetime")]),t._v(" "),a("td",[t._v("池中连接最长生命周期")]),t._v(" "),a("td",[t._v("MINUTES.toMillis(30) = 1800000")]),t._v(" "),a("td",[t._v("1800000")]),t._v(" "),a("td",[t._v("如果不等于0且小于30秒则会被重置回30分钟")])]),t._v(" "),a("tr",[a("td",[t._v("connectionTestQuery")]),t._v(" "),a("td",[t._v("如果您的驱动程序支持JDBC4，我们强烈建议您不要设置此属性")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("minimumIdle")]),t._v(" "),a("td",[t._v("池中维护的最小空闲连接数")]),t._v(" "),a("td",[t._v("-1")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("minIdle<0或者minIdle>maxPoolSize,则被重置为maxPoolSize")])]),t._v(" "),a("tr",[a("td",[t._v("maximumPoolSize")]),t._v(" "),a("td",[t._v("池中最大连接数，包括闲置和使用中的连接")]),t._v(" "),a("td",[t._v("-1")]),t._v(" "),a("td",[t._v("10")]),t._v(" "),a("td",[t._v("如果maxPoolSize小于1，则会被重置。当minIdle<=0被重置为DEFAULT_POOL_SIZE则为10;如果minIdle>0则重置为minIdle的值")])]),t._v(" "),a("tr",[a("td",[t._v("metricRegistry")]),t._v(" "),a("td",[t._v("该属性允许您指定一个 Codahale / Dropwizard MetricRegistry 的实例，供池使用以记录各种指标")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("healthCheckRegistry")]),t._v(" "),a("td",[t._v("该属性允许您指定池使用的Codahale / Dropwizard HealthCheckRegistry的实例来报告当前健康信息")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("poolName")]),t._v(" "),a("td",[t._v("连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("HikariPool-1")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("initializationFailTimeout")]),t._v(" "),a("td",[t._v("如果池无法成功初始化连接，则此属性控制池是否将 fail fast")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("isolateInternalQueries")]),t._v(" "),a("td",[t._v("是否在其自己的事务中隔离内部池查询，例如连接活动测试")]),t._v(" "),a("td",[t._v("FALSE")]),t._v(" "),a("td",[t._v("FALSE")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("allowPoolSuspension")]),t._v(" "),a("td",[t._v("控制池是否可以通过JMX暂停和恢复")]),t._v(" "),a("td",[t._v("FALSE")]),t._v(" "),a("td",[t._v("FALSE")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("readOnly")]),t._v(" "),a("td",[t._v("从池中获取的连接是否默认处于只读模式")]),t._v(" "),a("td",[t._v("FALSE")]),t._v(" "),a("td",[t._v("FALSE –")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("registerMbeans")]),t._v(" "),a("td",[t._v("是否注册JMX管理Bean（MBeans）")]),t._v(" "),a("td",[t._v("FALSE")]),t._v(" "),a("td",[t._v("FALSE –")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("catalog")]),t._v(" "),a("td",[t._v("为支持 catalog 概念的数据库设置默认 catalog driver")]),t._v(" "),a("td",[t._v("default")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("connectionInitSql")]),t._v(" "),a("td",[t._v("该属性设置一个SQL语句，在将每个新连接创建后，将其添加到池中之前执行该语句。")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("driverClassName")]),t._v(" "),a("td",[t._v("HikariCP将尝试通过仅基于jdbcUrl的DriverManager解析驱动程序，但对于一些较旧的驱动程序，还必须指定driverClassName")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("transactionIsolation")]),t._v(" "),a("td",[t._v("控制从池返回的连接的默认事务隔离级别")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("validationTimeout")]),t._v(" "),a("td",[t._v("连接将被测试活动的最大时间量")]),t._v(" "),a("td",[t._v("SECONDS.toMillis(5) = 5000")]),t._v(" "),a("td",[t._v("5000")]),t._v(" "),a("td",[t._v("如果小于250毫秒，则会被重置回5秒")])]),t._v(" "),a("tr",[a("td",[t._v("leakDetectionThreshold")]),t._v(" "),a("td",[t._v("记录消息之前连接可能离开池的时间量，表示可能的连接泄漏")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("如果大于0且不是单元测试，则进一步判断：(leakDetectionThreshold < SECONDS.toMillis(2) or (leakDetectionThreshold > maxLifetime && maxLifetime > 0)，会被重置为0 . 即如果要生效则必须>0，而且不能小于2秒，而且当maxLifetime > 0时不能大于maxLifetime")])]),t._v(" "),a("tr",[a("td",[t._v("dataSource")]),t._v(" "),a("td",[t._v("这个属性允许你直接设置数据源的实例被池包装，而不是让HikariCP通过反射来构造它")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("schema")]),t._v(" "),a("td",[t._v("该属性为支持模式概念的数据库设置默认模式 driver")]),t._v(" "),a("td",[t._v("default")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("threadFactory")]),t._v(" "),a("td",[t._v("此属性允许您设置将用于创建池使用的所有线程的java.util.concurrent.ThreadFactory的实例。")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])]),t._v(" "),a("tr",[a("td",[t._v("scheduledExecutor")]),t._v(" "),a("td",[t._v("此属性允许您设置将用于各种内部计划任务的java.util.concurrent.ScheduledExecutorService实例")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("null")]),t._v(" "),a("td",[t._v("–")])])])]),t._v(" "),a("h3",{attrs:{id:"为什么hikaricp会成为默认连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么hikaricp会成为默认连接池"}},[t._v("#")]),t._v(" 为什么HikariCP会成为默认连接池？")]),t._v(" "),a("blockquote",[a("p",[t._v("官网详细地说明了HikariCP所做的一些优化，总结如下：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("字节码精简")]),t._v(" ：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；")]),t._v(" "),a("li",[a("strong",[t._v("优化代理和拦截器")]),t._v("：减少代码，例如HikariCP的Statement proxy只有100行代码，只有BoneCP的十分之一；")]),t._v(" "),a("li",[a("strong",[t._v("自定义数组类型（FastStatementList）代替ArrayList")]),t._v("：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；")]),t._v(" "),a("li",[a("strong",[t._v("自定义集合类型（ConcurrentBag)")]),t._v("：提高并发读写的效率；")]),t._v(" "),a("li",[a("strong",[t._v("其它")]),t._v("：针对BoneCP缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究等。")])]),t._v(" "),a("p",[t._v("更多可以参考："),a("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP/wiki/Down-the-Rabbit-Hole",target:"_blank",rel:"noopener noreferrer"}},[t._v("Down the Rabbit Hole 在新窗口打开"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"更多常见的使用问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多常见的使用问题"}},[t._v("#")]),t._v(" 更多常见的使用问题")]),t._v(" "),a("p",[t._v("请参考 "),a("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP/wiki/FAQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方WIKI - FAQ 在新窗口打开"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"源码示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码示例"}},[t._v("#")]),t._v(" 源码示例")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("https://github.com/realpdai/tech-pdai-spring-demos")]),t._v(" "),a("p",[t._v("参考文章")]),t._v(" "),a("p",[t._v("https://github.com/brettwooldridge/HikariCP")]),t._v(" "),a("p",[t._v("http://www.lanxinbase.com/?p=2482")])])}),[],!1,null,null,null);a.default=_.exports}}]);