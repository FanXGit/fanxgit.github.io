(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{3608:function(t,e,a){"use strict";a.r(e);var _=a(7),n=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"虚拟机的基石-class文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机的基石-class文件"}},[t._v("#")]),t._v(" 虚拟机的基石: .class文件")]),t._v(" "),e("h3",{attrs:{id:"字节码文件里面是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字节码文件里面是什么"}},[t._v("#")]),t._v(" 字节码文件里面是什么？")]),t._v(" "),e("p",[t._v("java源代码经过编译器编译之后便会生成一个字节码文件，字节码是一种二进制的类文件，它的内容是JVM的指令，而不像C、C++经由编译器直接生成机器码。")]),t._v(" "),e("ul",[e("li",[t._v("jvm的指令集、字节码指令集、bytecode 含义都是相同的。它们都表示Java虚拟机（JVM）所能理解和执行的指令集。")])]),t._v(" "),e("h3",{attrs:{id:"什么是字节码指令-byte-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码指令-byte-code"}},[t._v("#")]),t._v(" 什么是字节码指令(byte code)?")]),t._v(" "),e("p",[t._v("Java虚拟机的指令由 一个字节 长度的、代表着某种特定操作含义的操作码(opcode)以及跟随其后的零至多个代表此操作所需参数的操作数(operand) 所构成。虚拟机中许多指令并不包含操作数，只有一个操作码。")]),t._v(" "),e("p",[t._v("比如:")]),t._v(" "),e("p",[e("img",{attrs:{src:a(786),alt:""}})]),t._v(" "),e("ul",[e("li",[t._v('"astore"指令是存储操作数栈顶的引用值到局部变量表中的指定位置。它有多个变体，如"astore_0"、"astore_1"等，用于存储到特定的局部变量表索引位置。这类指令通常与方法的参数传递、临时变量等相关。')]),t._v(" "),e("li",[t._v('"bipush"指令是将一个字节常量（-128~127）扩展为整型常量，并将其推送到操作数栈顶。例如，"bipush 5"表示将整数常量5推送到操作数栈顶。这类指令主要用于处理较小范围的整数常量。')])]),t._v(" "),e("h3",{attrs:{id:"如何解读供虚拟机执行的二进制字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何解读供虚拟机执行的二进制字节码"}},[t._v("#")]),t._v(" 如何解读供虚拟机执行的二进制字节码？")]),t._v(" "),e("p",[e("strong",[t._v("方式一: 一个一个 二进制的看")]),e("br"),t._v("\n这里用到的是idea的插件来查看"),e("code",[t._v("十六进制")]),t._v(" 文件")]),t._v(" "),e("p",[e("img",{attrs:{src:a(787),alt:""}})]),t._v(" "),e("p",[t._v("** 方式二: 使用javap指令:JDK自带的反解析工具**")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" javap -verbose Demo.class\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("** 方式三: jclasslib 或 jclasslib bytecode viewer客户端工具。(可视化更好)**")]),t._v(" "),e("p",[e("img",{attrs:{src:a(788),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"class类的本质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class类的本质"}},[t._v("#")]),t._v(" Class类的本质")]),t._v(" "),e("p",[t._v("任何一个Class文件都对应着唯一个类或接口的定义信息。但反过来说。Class文件实际上它并不一定以磁盘文件的形式存在,Class文件是一组以8位二进制位为基础单位的二进制流。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("bit")]),t._v(" 代表一个"),e("code",[t._v("二进制位")]),t._v("，8bit组成1个字节(byte)。 "),e("code",[t._v("字节")]),t._v("是"),e("code",[t._v(".class文件")]),t._v("的基础单位。 "),e("code",[t._v(".class文件")]),t._v("也叫做 "),e("code",[t._v("字节码文件")])])]),t._v(" "),e("h3",{attrs:{id:"class文件格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class文件格式"}},[t._v("#")]),t._v(" Class文件格式")]),t._v(" "),e("p",[t._v("官方文档位置:"),e("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Class的结构不像XML等描述语言，由于它没有任何分隔符号。所以在其中的数据项。无论是字节顺序还是数量，都是被严格限定的，哪个字节代表什么含义。长度是多少，先后顺序如何，都不允许改变。")]),t._v(" "),e("p",[t._v("Class文件格式采用一种类似于C语言结构体的方式进行数据存储，这种结构中只有两种数据类型:"),e("code",[t._v("无符号数")]),t._v("和"),e("code",[t._v("表")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("无符号数属于基本的数据类型。以u1. u2. u4. u8 来分别代表1个字节。2个字节。4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。")]),t._v(" "),e("li",[t._v('表是由多个无符号数或者其他表作为数据项构成的复合数据类型。所有表都习惯性地以 -info"结尾。表用于描述有层次关系的复合结构的数据，整个Class 文件本质上就是一张表。由于表没有固定长度， 所以通常会在其前面加上个数说明。')])]),t._v(" "),e("p",[t._v("代码举例:")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        num "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("对应的字节码文件：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(789),alt:""}})]),t._v(" "),e("p",[t._v("换句话说。充分理解了每一个字节码文件的细节， 自己也可以反编译出Java源文件来。")]),t._v(" "),e("h2",{attrs:{id:"class文件结构概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class文件结构概述"}},[t._v("#")]),t._v(" class文件结构概述")]),t._v(" "),e("p",[t._v("Class文件的结构并不是一成不变的。随着Java虚拟机的不断发展。总是不可避免地会对Class文件结构做出一些调整。 但是其基本结构和框架是非常稳定的。")]),t._v(" "),e("p",[t._v("Class文件的总体结构如下:")]),t._v(" "),e("ul",[e("li",[t._v("魔数")]),t._v(" "),e("li",[t._v("Class文件版本")]),t._v(" "),e("li",[t._v("常量池")]),t._v(" "),e("li",[t._v("访问标志")]),t._v(" "),e("li",[t._v("类索引。(父类索引，接口索引集合)")]),t._v(" "),e("li",[t._v("字段表集合")]),t._v(" "),e("li",[t._v("方法表集合")]),t._v(" "),e("li",[t._v("属性表集合")])]),t._v(" "),e("p",[t._v("A class file consists of a single ClassFile structure:\n类文件由单个ClassFile结构组成")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ClassFile {\n    u4             magic;\n    u2             minor_version;\n    u2             major_version;\n    u2             constant_pool_count;\n    cp_info        constant_pool[constant_pool_count-1];\n    u2             access_flags;\n    u2             this_class;\n    u2             super_class;\n    u2             interfaces_count;\n    u2             interfaces[interfaces_count];\n    u2             fields_count;\n    field_info     fields[fields_count];\n    u2             methods_count;\n    method_info    methods[methods_count];\n    u2             attributes_count;\n    attribute_info attributes[attributes_count];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("p",[t._v("从上面的字节码文件中我们可以看到，里面就是一堆的16进制字节。那么该如何解读呢？别急，我们先来看一张表：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("长度")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("magic")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("魔数，识别Class文件格式")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("minor_version")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("副版本号")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("major_version")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("主版本号")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("constant_pool_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("常量池个数")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("cp_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("constant_pool")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("常量池")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("access_flags")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("访问标志")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("this_class")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("super_class")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("父类索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("interfaces_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("接口个数")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("interfaces")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("接口索引集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("fields_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段个数")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("field_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("fields")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("methods_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法个数")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("method_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("methods")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("附加属性个数")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("附加属性集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n个字节")])])])]),t._v(" "),e("p",[t._v("这是一张Java字节码总的结构表，我们按照上面的顺序逐一进行解读就可以了。")]),t._v(" "),e("p",[t._v("class文件只有两种数据类型："),e("strong",[t._v("无符号数")]),t._v("和"),e("strong",[t._v("表")]),t._v("。如下表所示：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("数据类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("定义")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("无符号数")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("无符号数可以用来描述数字、索引引用、数量值或按照utf-8编码构成的字符串值。")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("其中无符号数属于基本的数据类型。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("表是由多个无符号数或其他表构成的复合数据结构。")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("所有的表都以“_info”结尾。")])])])]),t._v(" "),e("p",[t._v("实际上整个class文件就是一张表，其结构就是上面的 "),e("code",[t._v("ClassFile")]),t._v(" 描述的一样。")]),t._v(" "),e("p",[t._v("那么我们现在再来看"),e("code",[t._v("ClassFile")]),t._v(" 中的类型那一列，也就很简单了：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("长度")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u8")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("8个字节")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("8")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("cp_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("常量表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("field_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("method_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("n")])])])]),t._v(" "),e("h2",{attrs:{id:"自己解读-class-文件结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己解读-class-文件结构"}},[t._v("#")]),t._v(" 自己解读 CLass 文件结构")]),t._v(" "),e("p",[t._v("1、"),e("strong",[t._v("准备示例代码")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestByteCode")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("88")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("inc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("2、"),e("strong",[t._v("使用javac 命令  将源代码TestByteCode.java 反编译成 字节码TestByteCode.class")])]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" javac TestByteCode.java \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("3、"),e("strong",[t._v("使用idea二进制工具 打开查看  如下图")]),t._v(" "),e("img",{attrs:{src:a(790),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_1、maglc-number-魔数-class文件的标志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、maglc-number-魔数-class文件的标志"}},[t._v("#")]),t._v(" 1、Maglc Number (魔数):Class文件的标志")]),t._v(" "),e("ul",[e("li",[t._v("每个Class 文件开头的4个字节的无符号整数称为魔数(Magic Number)")]),t._v(" "),e("li",[t._v("它的唯一作用是确定这个文件是否为一个能被虚拟机接受的有效合法的Class文件。即:魔数是Class文件的标识符。")]),t._v(" "),e("li",[t._v("魔数值固定为0xCAFEBABE. 不会改变。")]),t._v(" "),e("li",[t._v("如果一个Class文件不以0xCAFEBABE开头， 虚拟机在进行文件校验的时候就会直接抛出以下错误:")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Error: A JNI error has occurred, please check your installation and try again \nException in thread "main" java .lang. ClassFormatError: Incompatible magic value 1885430635 in class\nfile StringTest\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("ul",[e("li",[t._v("使用魔数而不是扩展名来进行识别主要是基于安全方面的考虑， 因为文件扩展名可以随意地改动。")])]),t._v(" "),e("h4",{attrs:{id:"解析魔数字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析魔数字节码"}},[t._v("#")]),t._v(" 解析魔数字节码")]),t._v(" "),e("p",[t._v("魔数对应的字节码结构对应关系")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("长度")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("magic")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("魔数，识别Class文件格式")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4个字节")])])])]),t._v(" "),e("p",[t._v("根据示例代码:前四个字节对应的是魔数:")]),t._v(" "),e("p",[t._v("11001010 11111110 10111010 10111110 对应16进制 为 0xCAFEBABE")]),t._v(" "),e("h3",{attrs:{id:"_2、clss文件版本号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、clss文件版本号"}},[t._v("#")]),t._v(" 2、Clss文件版本号")]),t._v(" "),e("p",[t._v("Clss文件版本号对应的字节码结构对应关系:")]),t._v(" "),e("ul",[e("li",[t._v("紧接着魔数的4个字节存储的是Class 文件的版本号。同样也是4个字节。第5个和第6个字节所代表的含文就是编译的副版本号minor_ version. 而第7个和第8个字节就是编译的主版本号major_version.")]),t._v(" "),e("li",[t._v("它们共同构成了class文件的格式版本号。譬如某个Class 文件的主版本号为M.副版本号为m。那么这个Class 文件的格式版本号就确定为M.m.")]),t._v(" "),e("li",[t._v("版本号和Java编译器的对应关系如下表:")])]),t._v(" "),e("p",[t._v("class与jdk版本关系")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("class 第7-8和5-6字节")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("major版本")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("minor版本")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("jdk版本")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2D03")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("45")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2E00")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("46")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("2F00")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("47")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.3")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3000")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("48")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.4")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3100")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("49")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.5")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3200")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("50")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.6")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3300")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("51")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.7")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3400")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("52")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.8")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3500")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("53")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk1.9")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3600")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("54")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk10")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3700")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("55")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk11")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3800")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("56")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk12")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3900")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("57")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk13")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3A00")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("58")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk14")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("3B00")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("59")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("jdk15")])])])]),t._v(" "),e("p",[e("strong",[t._v("为什么没有jdk1.0的版本号?")])]),t._v(" "),e("ul",[e("li",[t._v('这是因为在JDK 1.0发布时，并未使用类似于现在的Java字节码文件格式，而是采用了一种称为"Java源代码类文件（Java Source Code File）"的格式。')]),t._v(" "),e("li",[t._v("在JDK 1.0中，Java源代码类文件以.java文件形式存储，并通过编译器将其转换为可执行的Java字节码。因此，在这种情况下，没有对应的major版本和minor版本来标识JDK 1.0的版本号。")]),t._v(" "),e("li",[t._v("从JDK 1.1开始，Java字节码文件采用了现在常见的.class文件格式，并引入了major版本和minor版本的概念。所以，JDK 1.1及之后的版本才有相应的major版本和minor版本来表示JDK的版本号。")])]),t._v(" "),e("p",[t._v("Java的版本号是从45开始的。JDK 1.1之后的每个JDK大版本发布主版本号向上加1.")]),t._v(" "),e("p",[t._v("不同版本的Java编译器编译的Class文件对应的版本是不一样的。目前。高版本的Java虚拟机可以执行由低版本编译器生成的Class文件，但是低版本的Java虚拟机不能执行由高版本编译生成的Class文件。否则JVM会抛出java.lang.UnsupportedClassVersionError异常。(向下兼容)")]),t._v(" "),e("p",[t._v("在实际应用中，由于开发环境和生产环境的不同，可能会导致该问题的发生。因此。需要我们在开发时，特别注意开发编译器的JDK版本和生产环境中的JDK版本是否一致。")]),t._v(" "),e("h4",{attrs:{id:"解析版本号字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析版本号字节码"}},[t._v("#")]),t._v(" 解析版本号字节码")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("长度")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("magic")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("魔数，识别Class文件格式")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("minor_version")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("副版本号")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("major_version")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("主版本号")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2个字节")])])])]),t._v(" "),e("p",[t._v("根据示例代码:")]),t._v(" "),e("p",[t._v("第五个字节 与第六个字节对应 的是副版本号:\n00000000 00000000  对应16进制 为 0x0")]),t._v(" "),e("p",[t._v("第七个字节 与第八个字节对应的是主版本号\n00000000 00110100  对应16进制为 0x34 对应10进制为 52")]),t._v(" "),e("p",[t._v("52.00 对应的jdk版本号为 jdk1.8 或者16进制 0x3400对应 jdk1.8")]),t._v(" "),e("h3",{attrs:{id:"_3、常量池-存放所有常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、常量池-存放所有常量"}},[t._v("#")]),t._v(" 3、常量池：存放所有常量")]),t._v(" "),e("p",[t._v("在版本号之后。紧跟着的是"),e("strong",[t._v("常量池的数量")]),t._v("，以及"),e("strong",[t._v("若干个常量池表项")]),t._v("。\n"),e("img",{attrs:{src:a(791),alt:""}})]),t._v(" "),e("p",[t._v("常量池中常量的数量是不固定的。所以在常量池的入口需要放置一项u2类型的无符号数。代表常量池容量计数值(constant_pool_count) 。与Java中语言习惯不一样的是。 这个容量计数是从1而不是0开始的。由上表可见，Class文件使用了一个前置的容量计数器(constant_pool_count) 加若干个连续的数据项(constant_pool) 的形式来描述常量池内容。我们把这一系列连续常量池数据称为"),e("strong",[t._v("常量池集合")]),t._v("。")]),t._v(" "),e("p",[t._v("常量池表项中，用于存放编译时期生成的各种"),e("code",[t._v("字面量")]),t._v("和"),e("code",[t._v("符号引用")]),t._v("，这部分内容将在类加载后进入方法区的运行时常量池中存放")]),t._v(" "),e("p",[t._v("常量池是Class文件中内容最为丰富的区域之一。 常量池对于Class文件中的字段和方法解析也有着至关重要的作用。")]),t._v(" "),e("p",[t._v("随着Java虚拟机的不断发展。常量池的内容也日渐丰富。可以说,常量池是整个Class文件的基石。")]),t._v(" "),e("h4",{attrs:{id:"_3-1、常量池计数器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、常量池计数器"}},[t._v("#")]),t._v(" 3.1、常量池计数器")]),t._v(" "),e("p",[t._v("根据 "),e("code",[t._v("ClassFile")]),t._v(" 表中可以查询到，版本号后面接下来就是常量池了。由于常量池的数量不固定，时长时短，所以需要放置两个字节来表示常量池容量计数值。")]),t._v(" "),e("p",[e("strong",[t._v("面试题:在jvm常量池中，常量池计数器最大是多少？")])]),t._v(" "),e("ul",[e("li",[t._v("在 Java 虚拟机规范中，常量池计数器是一个 16 位的无符号整数(即 u2 修饰的)，用于表示常量池中常量项的数量。因此，最大的常量池计数器值是 2 的 16 次方减一，即 65535。")]),t._v(" "),e("li",[t._v("需要注意的是，常量池计数器的值并不等于常量池中实际常量项的数量。因为有些常量项会占用多个常量池表项，比如 long 和 double 类型的字面量。这些常量项会在常量池表中被连续地存放，并且会占用两个常量池表项，即常量池计数器会增加 2。")])]),t._v(" "),e("h4",{attrs:{id:"_3-2、常量池表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、常量池表"}},[t._v("#")]),t._v(" 3.2、常量池表")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("constant_pool是一种表结构以1 ~ constant_pool_count - 1为索引。表明了后面有多少个常量项")])]),t._v(" "),e("li",[e("p",[t._v("常量池主要存放两大类常量:"),e("code",[t._v("字面量(Literal)")]),t._v(" 和"),e("code",[t._v("符号引用(Symbolic References )")])])]),t._v(" "),e("li",[e("p",[t._v("它包含了class文件结构及其子结构中引用的所有字符串常量。类或接口名、字段名和其他常量。常量池中的每项都具备相同的特征。第1个字节作为类型标记。用于确定该项的格式，这个字节称为tag byte (标记字节、 标签字节)。")]),t._v(" "),e("p",[t._v("常量池主要存放两大类常量："),e("strong",[t._v("字面量")]),t._v("和"),e("strong",[t._v("符号引用")]),t._v("。如下表：")])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("常量")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("具体的常量")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("字面量")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("文本字符串         例如: #29 = Utf8    ab;c")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("声明为final的常量值  例如:   #4 = Long    2l")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("符号引用")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("类和接口的全限定名")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("字段的名称和描述符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("方法的名称和描述符")])])])]),t._v(" "),e("p",[e("strong",[t._v("类的全限定名")])]),t._v(" "),e("ul",[e("li",[t._v('com/april/test/Demo这个就是类的全限定名，仅仅是把包名的".“替换成”/"，为了使连续的多个全限定名之间不产生混淆，在使用时最后一般会\t加入一个“;”表示全限定名结束。')])]),t._v(" "),e("p",[e("strong",[t._v("字段的名称和描述符")])]),t._v(" "),e("ul",[e("li",[t._v("例如:  #13 = Fieldref   #14.#41   // com/fan/study/jvm/bytecodes/EmptyClass.str:Ljava/lang/String;")])]),t._v(" "),e("p",[e("strong",[t._v("方法的名称和描述符")])]),t._v(" "),e("ul",[e("li",[t._v("例如:   #17 = Methodref     #50.#53  // java/io/PrintStream.println:(Ljava/lang/String;)V")])]),t._v(" "),e("p",[e("strong",[t._v("简单名称")])]),t._v(" "),e("ul",[e("li",[t._v("简单名称是指没有类型和参数修饰的方法或者字段名称，如"),e("strong",[t._v("add()"),e("strong",[t._v("方法和")]),t._v("num")]),t._v("字段的简单名称分别是"),e("strong",[t._v("add")]),t._v("和"),e("strong",[t._v("num")]),t._v("。")])]),t._v(" "),e("p",[e("strong",[t._v("描述符")])]),t._v(" "),e("ul",[e("li",[t._v("描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示，详见下表:")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("标志符")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("B")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型byte")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("C")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型char")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("D")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型double")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("F")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型float")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("I")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型int")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("J")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型long")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("S")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型short")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Z")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型boolean")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("V")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型void")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("L")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("对象类型,如Ljava/lang/Object")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("[")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("数组类型，代表一维数组。比如:double[][] is [[D")])])])]),t._v(" "),e("p",[t._v("对于数组类型，每一维度将使用一个前置的[字符来描述，如一个定义为java.lang.String[][]类型的二维数组，将被记录为：[[Ljava/lang/String;，一个整型数组int[]被记录为[I。")]),t._v(" "),e("p",[t._v("用描述符来描述方法时，按照先参数列表，后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号“( )”之内。如方法java.lang.String toString()的描述符为( ) LJava/lang/String;，方法int abc(int[] x, int y)的描述符为([II) I")]),t._v(" "),e("h4",{attrs:{id:"常量类型和结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量类型和结构"}},[t._v("#")]),t._v(" 常量类型和结构")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("CONSTANT_class_info 结构用于表示类或者接口")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_Fieldref_info、CONSTANT_Methodref_info 和CONSTANT_InterfaceMethodref_info 结构表示字段、方法和接口方法。")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_string_info 结构用于表示String类型的常量对象。")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_Integer_info 和CONSTANT_Float_info 表示4字节（int和float）的数值常量。")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_Long_info 和CONSTANT_Double_info 结构表示8字节（long和double）的数值常量。")]),t._v(" "),e("ul",[e("li",[t._v("在class文件的常量池表中，所有的8字节常量均占两个表成员(项)的空间。如果一个CONSTANT_Long_info或CONSTANT_Double_info结构的项在常量池表中的索引位n,则常量池表中下一个可用项的索引位n+2,此时常量池表中索引为n+1的项仍然有效但必须视为不可用的。")])])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_NameAndType_info 结构用于表示字段或方法。与CONSTANT_Class_info、CONSTANT_Fieldref_info 和 CONSTANT_Methodref_info不同的是，CONSTANT_NameAndType_info 结构并没有指定该字段或方法所属的类或接口。")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_Utf8_info 用于表示字符常量的值")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_MethodHandle_info 结构用于表示方法句柄(Qa "),e("strong",[t._v("什么是方法句柄?")]),t._v(")")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_MethodType_info 结构表示方法类型")])]),t._v(" "),e("li",[e("p",[t._v("CONSTANT_InvokeDynamic_info 结构用于表示 invokedynamic指令所用到的引导方法（bootstrap method）、引导方法所用到的动态调用名称（dynamic invocation name）、参数和返回类型，并可以给引导方法传入一系列称为静态参数（static argument）的常量。")])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("标志(或标识)")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Class_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("类或接口的符号引用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Fieldref_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("字段的符号引用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Methodref_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("类中方法的符号引用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_InterfaceMethodref_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("接口中方法的符号引用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_String_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("字符本类型字面量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Integer_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("整形字面量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Float_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("深点型字面量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Long_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("长整型字面量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Double_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("双精变浮点型字面量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_NameAndType_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("字段或方法的符号引用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_Utf8_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("UTF-8的的字符串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_MethodHandle_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("表示方法句柄")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_MethodType_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("标志方法类型")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CONSTANT_InvokeDynamic_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("18")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("表示一个动态方法调用点")])])])]),t._v(" "),e("p",[t._v("常量池中每项常量都是一个表， JDK1.7之后共有14种不同的表结构数据。 如下表格所示:")]),t._v(" "),e("table",[e("tr",[e("td",{attrs:{colspan:"6"}},[t._v("常量类型和结构")])]),t._v(" "),e("tr",[e("td",[t._v("标志")]),t._v(" "),e("td",[t._v("常量")]),t._v(" "),e("td",[t._v("描述")]),t._v(" "),e("td",[t._v("细节")]),t._v(" "),e("td",[t._v("长度")]),t._v(" "),e("td",[t._v("细节描述")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"3"}},[t._v(" 1")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v(" CONSTANT_Utf8_info")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v(" UTF-8编码字符串")]),t._v(" "),e("td",[t._v("tag ")]),t._v(" "),e("td",[t._v(" u1")]),t._v(" "),e("td",[t._v("值为1 ")])]),t._v(" "),e("tr",[e("td",[t._v("length")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("UTF-8编码的字符串占用的字符数 ")])]),t._v(" "),e("tr",[e("td",[t._v("bytes")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("长度为1ength的UTF-8编码的字符串")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"2"}},[t._v("3")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("CONSTANT_Integer_info")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("整型字面量")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为3")])]),t._v(" "),e("tr",[e("td",[t._v("bytes")]),t._v(" "),e("td",[t._v("u4")]),t._v(" "),e("td",[t._v("按照高位在前存储的int值")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"2"}},[t._v("4")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("CONSTANT_Float_info")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("浮点型字面量")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为4")])]),t._v(" "),e("tr",[e("td",[t._v("bytes")]),t._v(" "),e("td",[t._v("u4")]),t._v(" "),e("td",[t._v("按照高位在前存储的float值")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"2"}},[t._v("5")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("CONSTANT_Long_info")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("长整型字面量")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为5")])]),t._v(" "),e("tr",[e("td",[t._v("bytes")]),t._v(" "),e("td",[t._v("u8")]),t._v(" "),e("td",[t._v("按照高位在前存储的long值")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"2"}},[t._v("6")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("CONSTANT_Double_info")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("双精度浮点型字面量")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为6")])]),t._v(" "),e("tr",[e("td",[t._v("bytes")]),t._v(" "),e("td",[t._v("u8")]),t._v(" "),e("td",[t._v("按照高位在前存储的double值")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"2"}},[t._v("7")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("CONSTANT_Class_info")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("类或接口的符号引用")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为7")])]),t._v(" "),e("tr",[e("td",[t._v("index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向全限定名常量项的索引")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"2"}},[t._v("8")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("CONSTANT_String_info")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("字符串类型字面量")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为8")])]),t._v(" "),e("tr",[e("td",[t._v("index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向字符串字面量的索引")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"3"}},[t._v("9")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("CONSTANT_Fieldref_info")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("字段的符号引用")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为9")])]),t._v(" "),e("tr",[e("td",[t._v("class_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向声明字段的类或接口描述符CONSTANT_Class_info的索引项")])]),t._v(" "),e("tr",[e("td",[t._v("name_and_type_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向字段描述符CONSTANT_NameAndType的索引项")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"3"}},[t._v("10")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("CONSTANT_Methodref_info")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("类中方法的符号引用")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为10")])]),t._v(" "),e("tr",[e("td",[t._v("class_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向声明方法的类描述符CONSTANT_Class_Info的索引项")])]),t._v(" "),e("tr",[e("td",[t._v("name_and_type_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向名称及类型描述符CONSTANT_NameAndType的索引项")])]),t._v(" "),e("tr"),e("tr",[e("td",{attrs:{rowspan:"3"}},[t._v("11")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("CONSTANT_InterfaceMethodref_info")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("接口中方法的符号引用")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为11")])]),t._v(" "),e("tr",[e("td",[t._v("class_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向声明方法的接口描述符CONSTANT_Class_Info的索引项")])]),t._v(" "),e("tr",[e("td",[t._v("name_and_type_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向名称及类型描述符CONSTANT_NameAndType的索引项")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"3"}},[t._v("12")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("CONSTANT_NameAndType_info")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("字段或方法的符号引用")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为12")])]),t._v(" "),e("tr",[e("td",[t._v("index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向该字段或方法名称常量项的索引")])]),t._v(" "),e("tr",[e("td",[t._v("index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("指向该字段或方法描述符常量项的索引")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"3"}},[t._v("15")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("CONSTANT_MethodHandle_info")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("表示方法句柄")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为15")])]),t._v(" "),e("tr",[e("td",[t._v("reference_kind")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值必须在1-9之间，它决定了方法句柄的类型方法句柄类型的值表示方法句柄的字节码行为")])]),t._v(" "),e("tr",[e("td",[t._v("reference_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("值必须是对常量池的有效索引")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"2"}},[t._v("16")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("CONSTANT_MethodType_info")]),t._v(" "),e("td",{attrs:{rowspan:"2"}},[t._v("标志方法类型")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为16")])]),t._v(" "),e("tr",[e("td",[t._v("descriptor_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("值必须是对常量池的有效索引，常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示方法的描述符")])]),t._v(" "),e("tr",[e("td",{attrs:{rowspan:"3"}},[t._v("18")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("CONSTANT_InvokeDynamic_info")]),t._v(" "),e("td",{attrs:{rowspan:"3"}},[t._v("表示一个动态方法调用点")]),t._v(" "),e("td",[t._v("tag")]),t._v(" "),e("td",[t._v("u1")]),t._v(" "),e("td",[t._v("值为18")])]),t._v(" "),e("tr",[e("td",[t._v("bootstrap_method_attr")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("值必须是对当前Class文件中引导方法表的bootstrap_methods[]数组的有效索引")])]),t._v(" "),e("tr",[e("td",[t._v("name_and_type_index")]),t._v(" "),e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("值必须是对当前常量池的有效索引，常量池在该索引处的项必须是CONSTANT_NameAndType_Info结构，表示方法名和方法描述符")])])]),t._v(" "),e("p",[t._v("根据上图每个类型的描述我们也可以知道每个类型是用来描述常量池中哪些内容(主要是字面量、特号引用)的。比知: CONSTANT_Integer_ info是用来描述常量池中字面量信息的，而且只是整型字面量信息。")]),t._v(" "),e("p",[t._v("标志为15. 16. 18的常量项类型是用来支持"),e("strong",[t._v("动态语言调用")]),t._v("的(jdk1.7时才加入的)。")]),t._v(" "),e("p",[e("strong",[t._v("补充说明:")])]),t._v(" "),e("p",[t._v("虚拟机在加载Class文件时才会进行动态链接。也就是说，Class文件中不会保存各个方法和字段的最终内存布局信息，因此，这些字段和方法的符号引用不经过转换是无法直接被虚拟机使用的。当虚拟机运行时，需要从常最池中获得对应的符号引用，再在类加载过程中的"),e("code",[t._v("解析")]),t._v("阶段将其替换为直接引用，并翻译到具体的内存地址中。")]),t._v(" "),e("p",[t._v("这里说明下"),e("code",[t._v("符号引用")]),t._v("和"),e("code",[t._v("直接引用")]),t._v("的区别与关联:")]),t._v(" "),e("p",[t._v("符号引用:符号引用以一组符号来描述所引用的目标。")]),t._v(" "),e("ul",[e("li",[t._v("符号可以是任何形式的字面量。只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关。引用的目标并不一定已经加载到了内存中。")]),t._v(" "),e("li",[t._v("直接引用:直接引用可以是直接指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存是有关联的。同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定经存在于内存之中了。")])]),t._v(" "),e("p",[e("strong",[t._v("总结")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("这14种表(或者常量项结构)的共同点是:表开始的第一位是一个u1类型的标志位(tag) 。代表当前这个常量项使用的是哪种表结构，即哪种常量类型。")]),t._v(" "),e("li",[t._v("在常量池列表中。CONSTANT_Utf8_info常量项是一种使用改进过的UTF-8编码格式来存储诸如文字字符串、类或者接口的全限定名。字段或者方法的简单名称以及描述符等常量字符串信息。")]),t._v(" "),e("li",[t._v("这14种常量项结构还有一个特点是。其中13个常量项占用的字节固定，只有CONSTANT_Utf8_info占用字节不固定。其大小由length决定。为什么呢?因为从常量池存放的内容可知。其存放的是字面量和符号引用，最终这些内容最终都会是一个字符串。这些字符串的大小是在编写程序时才确定。比如你定义一个类，类名可以取长取短。所以在没编译前，大小不固定，编译后，通过utf-8编码。就可以知道其长度。")]),t._v(" "),e("li",[t._v("常量池:可以理解为Class文件之中的"),e("strong",[t._v("资源仓库")]),t._v("，它是Class文件结构中与其他项目关联最多的数据类型( 后面的很多数据类型都会指向此处)，也是占用Class文件空间最大的数据项目之一。")]),t._v(" "),e("li",[t._v("常量池中为什么要包含这些内容"),e("br"),t._v('\nJava代码在进行Javac编译的时候。 并不像C和C++那样有“连接"这步骤， 而是在虚拟机加载Class 文件的时候进行动态链接。也就是说，在Class文件中不会保存各个方法、字段的最终内存布局信息，因此这些字段、方法的符号引用不经过运行期转换的话无法得到真正的内存入口地址，也就无法直接被虚拟机使用。 当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析。翻译到具体的内存地址之中。关于类的创建和动态链接的内容，在虚拟机类加载过程时再进行详细讲解。')])]),t._v(" "),e("h4",{attrs:{id:"解析常量池字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析常量池字节码"}},[t._v("#")]),t._v(" 解析常量池字节码")]),t._v(" "),e("p",[t._v("Clss文件版本号对应的字节码结构对应关系:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("类型")]),t._v(" "),e("th",[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),e("th",[t._v("长度")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("u4")]),t._v(" "),e("td",[t._v("magic")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("魔数，识别Class文件格式")]),t._v(" "),e("td",[t._v("4个字节")])]),t._v(" "),e("tr",[e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("minor_version")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("副版本号")]),t._v(" "),e("td",[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("major_version")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("主版本号")]),t._v(" "),e("td",[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",[t._v("u2")]),t._v(" "),e("td",[t._v("constant_pool_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("常量池个数")]),t._v(" "),e("td",[t._v("2个字节")])]),t._v(" "),e("tr",[e("td",[t._v("cp_info")]),t._v(" "),e("td",[t._v("constant_pool")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("常量池")]),t._v(" "),e("td",[t._v("n个字节")])])])]),t._v(" "),e("p",[t._v("根据示例代码:")]),t._v(" "),e("p",[t._v("第九个字节与第十个字节对应 常量池个数")]),t._v(" "),e("p",[t._v("00000000 00011101 对应16进制为0x1D 对应10进制为29 ，代表有28个常量个数")]),t._v(" "),e("p",[e("strong",[t._v("ps:为什么不是29个常量数？")])]),t._v(" "),e("ul",[e("li",[t._v("通常我们写代码时都是从0开始的，但是这里的常量池却是从1开始，因为它把第0项常量空出来了。这是为了在于满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义，这种情况可用索引值0来表示。Class文件中只有常量池的容量计数是从1开始的")]),t._v(" "),e("li",[t._v("对于其他集合类型，包括接口索引集合、字段表集合、方法表集合等的容量计数都与一般习惯相同，是从0开始的。")])]),t._v(" "),e("p",[t._v("紧接着后面对应的是 常量池表")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("cp_info {\n    u1 tag;\n    u1 info[];\n}\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("也就是说 后面对应了 28个  "),e("code",[t._v("cp_info")]),t._v(" 参数。下面来看第一个常量池信息")]),t._v(" "),e("p",[t._v("第11个字节码 对应 "),e("code",[t._v("cp_info")]),t._v("表中的 tag 占了一个字节码的长度")]),t._v(" "),e("p",[t._v("00001010 对应 10进制为 10，10对应的常量池表CONSTANT_Methodref_info参数,CONSTANT_Methodref_info的结构为:")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CONSTANT_Methodref_info {\n    u1 tag;\n    u2 class_index; // 指向声明字段的类或接口描述符CONSTANT_Class_info的索引项\n    u2 name_and_type_index; //指向字段描述符CONSTANT_NameAndType的索引项\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("顺腾摸瓜 ，后面的两个字节对应class_index ，也就是说第12个字节与第13个字节对应 class_index,第14个字节与第15个字节对应的是name_and_type_index")]),t._v(" "),e("p",[t._v("00000000 00000111 对应10进制是7 ,表示该"),e("code",[t._v("CONSTANT_Methodref_info")]),t._v("的"),e("code",[t._v("CONSTANT_Class_info")]),t._v("的索引项对应常量池第7 个元素位置")]),t._v(" "),e("p",[t._v("00000000 00010110 对应10进制的22 ,表示该"),e("code",[t._v("CONSTANT_Methodref_info")]),t._v("的"),e("code",[t._v("CONSTANT_NameAndType")]),t._v("的索引项对应常量池第22个元素位置")]),t._v(" "),e("p",[t._v("这块表述起来非常抽象，不知道具体是什么意思。 可以使用jclasslib 工具查看一下TestByteCode.class 字节码文件。看到具体的东西 理解起来会比较清楚\n"),e("img",{attrs:{src:a(792),alt:"img.png"}})]),t._v(" "),e("p",[t._v("或者使用 javap 命令 编译一下字节码文件")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("javap -verbose \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:a(793),alt:"img.png"}})]),t._v(" "),e("p",[t._v("这段字节码具体的含义是表示对java.lang.Object类的构造函数（初始化方法）<init> 的引用，该构造函数是一个无参数方法且没有返回值（void）。这是在Java字节码中用于初始化对象的标准方式，它会调用java.lang.Object类的构造函数来创建一个新的对象。")]),t._v(" "),e("blockquote",[e("p",[t._v('注: #1 = Methodref          #7.#22         // java/lang/Object."<init>": ()V 属于符号引用')])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("在这个例子中，#1 引用了java/lang/Object类的构造函数<init>，但它并没有直接指向该构造函数的实际内存地址。虚拟机在运行时会根据符号引用来解析这个引用，找到java/lang/Object类的构造函数，并执行相应的初始化操作。")])]),t._v(" "),e("li",[e("p",[t._v("与符号引用不同，直接引用包含了实际的内存地址或偏移量，它是在解析符号引用后得到的。直接引用用于直接访问内存中的对象、字段或方法。在字节码中，符号引用通常在常量池中表示，而直接引用则在运行时生成")])])]),t._v(" "),e("p",[t._v("上面的步骤就是 解析 常量池结构的方式。 值得一提的就是 其中13个常量项占用的字节固定，只有CONSTANT_Utf8_info占用字节不固定，其大小由length决定。")]),t._v(" "),e("p",[t._v("下面我举一个解析 CONSTANT_Utf8_info 结构的例子。")]),t._v(" "),e("p",[t._v("还是以 示例代码为例，示例代码中 是以二进制的格式 展示的，不如16进制的格式直观。下面是我将二进制的格式转换成了16进制的格式")]),t._v(" "),e("p",[e("img",{attrs:{src:a(794),alt:""}})]),t._v(" "),e("p",[t._v("根据class文件结构格式分析:\n其中 01\t00\t05\t76\t61\t6c\t75\t65 代表的就是 CONSTANT_Utf8_info的常量池表数据")]),t._v(" "),e("p",[t._v("在class文件结构中, CONSTANT_Utf8_info 对应的结构为")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("CONSTANT_Utf8_info {\n    u1 tag;\n    u2 length;\n    u1 bytes[length];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("ul",[e("li",[t._v("01 代表 CONSTANT_Utf8_info 的tag")]),t._v(" "),e("li",[t._v("00 05 代表该CONSTANT_Utf8_info常量值的长度")]),t._v(" "),e("li",[t._v("76\t61\t6c\t75\t65  16进制对应的 UTF-8编码 的值为 value")])]),t._v(" "),e("p",[t._v("下面是 16进制数后两位 转utf-8的代码示例:")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    public void testUtf8String() throws Exception {\n        String[] strings = {"76", "61", "6c", "75", "65"};\n        byte[] utfBytes = stringToByte(strings);\n        // 创建一个ByteArrayInputStream对象\n        ByteArrayInputStream bis = new ByteArrayInputStream(utfBytes);\n        // 创建一个InputStreamReader对象，并指定使用UTF-8编码\n        InputStreamReader isr = new InputStreamReader(bis, "UTF-8");\n        // 使用StringBuilder对象读取转换后的字符串\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = isr.read()) != -1) {\n            sb.append((char) c);\n        }\n        // 输出转换后的字符串\n        System.out.println(sb.toString()); // 输出："value"\n    }\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("p",[t._v("以上就是解析 CONSTANT_Utf8_info 格式的步骤。 动手实操解析可以让印象更加深刻。")]),t._v(" "),e("h3",{attrs:{id:"_4、访问标识-access-flag访问标志、访问标识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、访问标识-access-flag访问标志、访问标识"}},[t._v("#")]),t._v(" 4、访问标识(access_flag访问标志、访问标识)")]),t._v(" "),e("p",[t._v("常量池后面就是访问标志，用两个字节来表示，其标识了类或者接口的访问信息，比如：该Class文件是类还是接口，是否被定义成public，是否是abstract，如果是类，是否被声明成final等等。各种访问标志如下所示：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("标志名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("标志值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_PUBLIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0001")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是否为Public类型")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_FINAL")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0010")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是否被声明为final，只有类可以设置")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_SUPER")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0020")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是否允许使用invokespecial字节码指令的新语义，JDK1.0.2之后编译出来的类的这个标志默认为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_INTERFACE")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0200")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("标志这是一个接口")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_ABSTRACT")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0400")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是否为abstract类型，对于接口或者抽象类来说，次标志值为真，其他类型为假")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_SYNTHETIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x1000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("标志这个类并非由用户代码产生")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_ANNOTATION")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x2000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("标志这是一个注解")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_ENUM")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x4000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("标志这是一个枚举")])])])]),t._v(" "),e("p",[t._v("类的访问权限通常为ACC_ 开头的常量:")]),t._v(" "),e("p",[t._v("每一种类型的表示都是通过设置访问标记的32位中的特定位来实现的。比如，若是public final的类，则该标记为ACC_PUBLIC | ACC_FINAL。使用ACC_SUPER可以让类更准确地定位到父类的方法super.method(),现代编译器都会设置并且使用这个标记。")]),t._v(" "),e("p",[e("strong",[t._v("补充说明")]),t._v(":")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("1.带有ACC_INTERFACE标志的class文件表示的是接口而不是类。反之则表示的是类而不是接口。")]),t._v(" "),e("ul",[e("li",[t._v("1)如果一个Class文件被设置 ACC_INTERFACE标志。那么同时也界设置ACC_ABSTRACT标志。同时它不能再设置ACC_FINAL ACC_SUPER或ACC_EMUM标志。")]),t._v(" "),e("li",[t._v("2)如果没有设置ACC_INTERFACE标志。 那么这个class文作可以具有 上表中除ACC_ANNOTATION外的其他所有标志。当然。ACC_FINAL和ACC_ABSTRACT这类互斥的标志除外。这两个标志不得同时设置。")])])]),t._v(" "),e("li",[e("p",[t._v("2.ACC_SUPER标志用于确定类或接口里面的invokespecial指令使用的是哪一 种执行语义。针对Java虚拟机指令集的编译器都应当设置这个标志。对于Java SE 8及后续版本来说，无论class文件中这 个标志的实际值是什么。也不管class文件的版本号是多少，Java虚拟机都认为每个class文件均设置了ACC_SUPER标志。")]),t._v(" "),e("ul",[e("li",[t._v("1)ACC_SUPER标志是为了向后兼容由旧Java编译器所编译的代码而设计的。目前的ACC_SUPER标志在由JDK 1.0.2之前的编译器所生成的access_flags中是没有确定含文的，如果设置了该标志，那么Oracle的Java虚拟机实现会将其忽略。")])])]),t._v(" "),e("li",[e("p",[t._v("3.ACC_SYNTHETIC标志意味着该类或接口是由编译器生成的。 而不是由源代码生成的。")])]),t._v(" "),e("li",[e("p",[t._v("4.注解类型必须设置ACC_ANNOTATION标志。 如果设置了ACC_ANNOTATION标志， 那么也必须设置ACC_INTERFACE标志。")])]),t._v(" "),e("li",[e("p",[t._v("5.ACC_ENUM标志表明该类或其父类为校举类型。")])])]),t._v(" "),e("h4",{attrs:{id:"解析访问标识字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析访问标识字节码"}},[t._v("#")]),t._v(" 解析访问标识字节码")]),t._v(" "),e("p",[t._v("解析完常量池字节码后面是 访问标识的字节码结构,访问标识的字节码 结构比较简单，占了固定的字节码长度")]),t._v(" "),e("p",[e("img",{attrs:{src:a(795),alt:""}})]),t._v(" "),e("p",[t._v("可以看到 代表访问标识的字节码为 00 21 ,是  ACC_SUPER 与  ACC_PUBLIC 累加相得而来的。")]),t._v(" "),e("h3",{attrs:{id:"_5、类索引、父类索引、接口索引集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、类索引、父类索引、接口索引集合"}},[t._v("#")]),t._v(" 5、类索引、父类索引、接口索引集合")]),t._v(" "),e("p",[t._v("在访问标记后，会指定该类的类别，父类类别以及实现的接口，格式如下:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("长度")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("this_class")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("类索引")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("super_class")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("父类索引")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("interfaces_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("所实现接口数量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("interfaces[interfaces_count]")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("所实现的接口索引")])])])]),t._v(" "),e("ul",[e("li",[t._v("这三项数据来确定这个类的继承关系。\n"),e("ul",[e("li",[t._v("类索引用于确定这个类的全限定名")]),t._v(" "),e("li",[t._v("父类索引用于确定这个类的父类的全限定名。由于Java语言不允许多重继承。所以父类索引只有一个。除了java.lang.object之外，所有的Java类都有父类，因此除了java.lang.object外，所有Java类的父类索引都不为0。")]),t._v(" "),e("li",[t._v("接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按implements 语句(如果这个类本身是一个接口，则应当是extends 语句)后的接口顺序从左到右排列在接口索引集合中。")])])])]),t._v(" "),e("h4",{attrs:{id:"_1-this-class-类索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-this-class-类索引"}},[t._v("#")]),t._v(" 1.this_class (类索引)")]),t._v(" "),e("p",[t._v("2字节无符号整数，指向常量池的素引。它提供了类的全限定名。如com/atguigu/java1/Demo. this _class的值必须是对常量池表中某项的一个有效索引值。常量池在这个索引处的成员必须为CONSTANT_Class_info类型结构体。该结构体表示这个class文件所定义的类或接口。")]),t._v(" "),e("h4",{attrs:{id:"_2-super-class-父类索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-super-class-父类索引"}},[t._v("#")]),t._v(" 2.super_class (父类索引)")]),t._v(" "),e("p",[t._v("2字节无符号整数。指向常量池的索引。它提供了当前类的父类的全限定名。如果我们没有继承任何类，其默认继承的是java/lang/0bject类.同时，由于Java不支持 多继承，所以其父类只有一个。 super_class指向的父类 不能是final.")]),t._v(" "),e("h4",{attrs:{id:"_3-interfaces"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-interfaces"}},[t._v("#")]),t._v(" 3.interfaces")]),t._v(" "),e("p",[t._v("指向常量池索引集合，它提供了一个符号引用到所有已实现的接口,由于一个类可以实现多个接口，因此需要以数组形式保存多个接口的索引。表示接口的每个索引也是个指向常 量池的CONSTANT_Class (当然这里就必须是接口，而不是类)。")]),t._v(" "),e("h5",{attrs:{id:"_3-1-interfaces-count-接口计数器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-interfaces-count-接口计数器"}},[t._v("#")]),t._v(" 3.1 interfaces count (接口计数器)")]),t._v(" "),e("p",[t._v("interfaces_count项的值表示当前类或接口的 直接超接口的数量。")]),t._v(" "),e("h4",{attrs:{id:"_3-2-interfaces-接口索引集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-interfaces-接口索引集合"}},[t._v("#")]),t._v(" 3.2 interfaces [](接口索引集合)")]),t._v(" "),e("p",[t._v("interfaces [ ]中每个成员的值必须是对常量池表中某项的有效索引值。它的长度为interfaces_count。 每个成 员interfaces[i]必须为CONSTANT_Class_info结构。其中 0<=I< interfaces.count. 在interfaces[]中。 各成员。所表示的接口顺序和对应的源代码中给定的接口顺序(从左至右)一样， 即interfaces[0]对应的是源代码中 最左边的接口。")]),t._v(" "),e("h4",{attrs:{id:"解析类索引集合字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析类索引集合字节码"}},[t._v("#")]),t._v(" 解析类索引集合字节码")]),t._v(" "),e("p",[e("img",{attrs:{src:a(796),alt:""}})]),t._v(" "),e("p",[t._v("从示例的字节码中 可以看到，本示例 的接口个数为0 ，所有不存在所实现的接口索引的 字节码。")]),t._v(" "),e("h3",{attrs:{id:"_6、字段表集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、字段表集合"}},[t._v("#")]),t._v(" 6、字段表集合")]),t._v(" "),e("h4",{attrs:{id:"fields"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fields"}},[t._v("#")]),t._v(" fields")]),t._v(" "),e("ul",[e("li",[t._v("用于描述接口或类中声明的变量。字段(field) 包括类级变量以及实例级变量，但是不包括方法内部、代码块内部声明的局部变量。")]),t._v(" "),e("li",[t._v("字段叫什么名字、字段被定义为什么数据类型，这些都是无法固定的，只能引用常量池中的常量来描述。")]),t._v(" "),e("li",[t._v("它指向常量池索引集合。它描述了每个字段的完整信息。比如字段的标识符、访问修饰符(public. private或protected)、是类变量还是实例变量(static修饰符)、是否是常量(final修饰符)等。")])]),t._v(" "),e("p",[e("strong",[t._v("注意事项")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("字段表集合中不会列出从父类或者实现的接口中继承而来的字段，但有可能列出原本Java代码之中不存在的字段。譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。")]),t._v(" "),e("li",[t._v("在Java语言中字段是无法重载的，两个字段的数据类型、修饰符不管是否相同，都必须使用不一“样的名称。但是对于字节码来讲，如果两个字段的描述符不一致。那字段重名就是合法的。")])]),t._v(" "),e("h4",{attrs:{id:"_6-1、fields-count字段计数器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1、fields-count字段计数器"}},[t._v("#")]),t._v(" 6.1、fields_count字段计数器")]),t._v(" "),e("p",[t._v("fields_count的值表示当前class文件fields表的成员个数。使用两个字节来表示。")]),t._v(" "),e("p",[t._v("fields表中每个成员都是一个field_ info结构，用于表示该类或接口所声明的所有类字段或者实例字段，不包括方法内部声明的变量，也不包括从父类或父接口继承的那些字段。")]),t._v(" "),e("h4",{attrs:{id:"_6-2、flelds-字段表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2、flelds-字段表"}},[t._v("#")]),t._v(" 6.2、flelds [] 字段表")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("fields表中的每个成员都必须是一个fields.info结构的数据项，用于表示当前类或接口中某个字段的完整描述。")])]),t._v(" "),e("li",[e("p",[t._v("一个字段的信息包括如下这些信息。这些信息中。各个修饰符都是布尔值，要么有。要么没有。")]),t._v(" "),e("ul",[e("li",[t._v("1、作用城(public. private. protected修饰符 )")]),t._v(" "),e("li",[t._v("2、是实例变量还是类变量(static修饰符)")]),t._v(" "),e("li",[t._v("3、可变性(final )")]),t._v(" "),e("li",[t._v("4、并发可见性(volatile修饰符，是否强制从主内存读写)")]),t._v(" "),e("li",[t._v("5、可否序列化(transient修饰符)")]),t._v(" "),e("li",[t._v("6、字段数据类型(基本数据类型、对象、数组)")]),t._v(" "),e("li",[t._v("7、字段名称")])])]),t._v(" "),e("li",[e("p",[t._v("字段结构\n字段表作为一个表，同样有他自己的结构")])])]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("field_info {\n    u2             access_flags;\n    u2             name_index;\n    u2             descriptor_index;\n    u2             attributes_count;\n    attribute_info attributes[attributes_count];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数量")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("access_flags")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("访问标志")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("name_index")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段表索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("descriptor_index")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("描述符索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性计数器")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_count")])])])]),t._v(" "),e("h5",{attrs:{id:"_6-2-1-字段表访问标识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-字段表访问标识"}},[t._v("#")]),t._v(" 6.2.1.字段表访问标识")]),t._v(" "),e("p",[t._v("我们知道，一个字段可以被各种关键字去修饰，比如：作用域修饰符（public、private、protected）、static修饰符、final修饰符、volatile修饰符等等。因此，其可像类的访问标志那样，使用一些标志来标记字段。字段的访问标志有如下这些：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("标志名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("标志值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_PUBLIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0001")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为public")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_PRIVATE")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0002")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为private")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_PROTECTED")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0004")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为protected")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_STATIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0008")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为static")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_FINAL")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0010")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为final")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_VOLATILE")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0040")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为volatile")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_TRANSTENT")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0080")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为transient")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_SYNCHETIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x1000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为由编译器自动产生")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_ENUM")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x4000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段是否为enum")])])])]),t._v(" "),e("h5",{attrs:{id:"_6-2-2-字段表索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-2-字段表索引"}},[t._v("#")]),t._v(" 6.2.2 字段表索引")]),t._v(" "),e("p",[t._v("根据字段名索引值，查询常量池中的指定索引即可。")]),t._v(" "),e("h5",{attrs:{id:"_6-2-3、描述符索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-3、描述符索引"}},[t._v("#")]),t._v(" 6.2.3、描述符索引")]),t._v(" "),e("p",[t._v("描述符的作用是用来描述字段的数据类型、方法的参数列表(包括数量、类型以及顺序)和返回值。根据描述符规则，基本数据类型(byte, char, double, float , int, long. short, boolean)及代表无返回值的void类型都用一个大写字符来表示。而对象则用字符L加对象的全限定名来表示，如下所示:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("标志符")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("B")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("byte")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有符号字节型数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("C")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("char")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Unicode字符，Utf-16编码")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("D")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("double")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("双精度浮点数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("F")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("单精度浮点数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("I")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("整型数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("J")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("long")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("长整型数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("S")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("short")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("有符号短整型数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Z")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("布尔值true/false")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LClassName")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("reference")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("一个名为ClassName的实例")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("[")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("reference")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("一个一维数组")])])])]),t._v(" "),e("h5",{attrs:{id:"_6-2-4属性表集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-4属性表集合"}},[t._v("#")]),t._v(" 6.2.4属性表集合")]),t._v(" "),e("p",[t._v("一个字段还可能拥有一些属性。用于存储更多的额外信息。比如初始化值、一些注释信息等。属性个数存放在attribute_count中， 属性具体内容存放在attributes数组中。\n以常量属性为例。结构为:")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ConstantValue_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 constantvalue_index;\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("说明:对于常量属性而言，attribute_ length值恒为2.\n根据上面的例子，我们来实际分析一下，声明一个常量\n"),e("img",{attrs:{src:a(797),alt:""}})]),t._v(" "),e("p",[t._v("如下图:\n"),e("img",{attrs:{src:a(798),alt:""}})]),t._v(" "),e("h4",{attrs:{id:"解析字段表字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析字段表字节码"}},[t._v("#")]),t._v(" 解析字段表字节码")]),t._v(" "),e("p",[e("img",{attrs:{src:a(799),alt:""}})]),t._v(" "),e("p",[t._v("根据示例文件可以分析到  ，字节码文件存在三个 字段，第一个字段的结构为: 00  02  00  08  00  09  00  00")]),t._v(" "),e("ul",[e("li",[t._v("00 02 代表 访问标识符 access_flags  0x0002 对应的字段标识符为ACC_PRIVATE")]),t._v(" "),e("li",[t._v("00 08 代表  字段表索引,常量池中第八个索引位置的数据。")]),t._v(" "),e("li",[t._v("00 09 代表 描述符索引 ,常量池中第九个索引位置的数据。值为Ljava/lang/String;")]),t._v(" "),e("li",[t._v("00 00 代表 属性计数器，个数为0个，所以属性集合 结构的数据为空的。")])]),t._v(" "),e("h3",{attrs:{id:"_7、方法表集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、方法表集合"}},[t._v("#")]),t._v(" 7、方法表集合")]),t._v(" "),e("p",[t._v("methods:指向常量池索引集合。它完整描述了每个方法的签名。")]),t._v(" "),e("ul",[e("li",[t._v("在字节码文件中，每一个method_info项都对应着一个类或者接口中的方法信息。比如方法的访问修饰符(public、private或protected),方法的返回值类型以及方法的参数信息等。")]),t._v(" "),e("li",[t._v("如果这个方法不是抽象的或者不是native的，那么字节码中会体现出来。")]),t._v(" "),e("li",[t._v("一方面，methods表只描述当前类或接口中声明的方法。不包括从父类或父接口继承的方法。另一方面，methods表有可能会出现由编译器自动添加的方法。最典型的便是编译器产生的方法信息(比如:类(接口)初始化方法<clinit>()和实例初始化方法<init>())。")])]),t._v(" "),e("p",[e("strong",[t._v("使用注意事项")]),t._v(":")]),t._v(" "),e("p",[t._v("在Java语言中，要重载(Overload)一个方法。除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名，特征签名就是一个方法中各个参数在常量池中的字段符号引用的集合（方法参数）。也就是因为返回值不会包含在特征签名之中。因此Java语言里无法仅仅依靠返回值的不同来对一个已有方法进行重载。但在Class文件格式中，特征签名的范围更大一些，只要描述符不是完全一致的两个方法就可以共存。也就是说，如果两个方法有相同的名称和特征签名。但返回值不同。那么也可以合法共存于同一个class文件中。")]),t._v(" "),e("p",[t._v("也就是说，尽管Java语法规范并不允许在一个类或者接口中声明多 个方法签名相同的方法。但是和Java语法规范相反。字节码文件中却恰恰允许存放多个方法签名相同的方法。唯一的条件就是这些方法之间的返回值不能相同。")]),t._v(" "),e("h4",{attrs:{id:"_7-1、methods-count方法计数器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1、methods-count方法计数器"}},[t._v("#")]),t._v(" 7.1、methods count方法计数器")]),t._v(" "),e("p",[t._v("methods_count 的值表示当前class文件methods表的成员个数，使用两个字节来表示。")]),t._v(" "),e("p",[t._v("methods 表中每个成员都是一个method_info结构。")]),t._v(" "),e("h4",{attrs:{id:"_7-2、methods-方法表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2、methods-方法表"}},[t._v("#")]),t._v(" 7.2、methods[]方法表")]),t._v(" "),e("ul",[e("li",[t._v("methods表中的每个成员都必须是一个method_info结构。 用于表示当前类或接口中某个方法的完整描述。如果某个methed_ info结构的access_ flags项既没有设置ACC_NATIVE标志也没有设置ACC_ABSTRACT标志， 那么该结构中也应包含实现这个方法所用的Java虚拟机指令。")]),t._v(" "),e("li",[t._v("method_info结构可以表示类和接口中定义的所有方法。包括实例方法、类方法。实例初始化方法和类或接口初始化方法")]),t._v(" "),e("li",[t._v("方法表的结构实际跟字段表是一样的，方法表结构如下:")])]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("method_info {\n    u2             access_flags;\n    u2             name_index;\n    u2             descriptor_index;\n    u2             attributes_count;\n    attribute_info attributes[attributes_count];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数量")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("access_flags")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("访问标志")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("name_index")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法名索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("descriptor_index")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("描述符索引")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性计数器")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性集合")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes_count")])])])]),t._v(" "),e("h4",{attrs:{id:"_7-2-1方法表访问标志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1方法表访问标志"}},[t._v("#")]),t._v(" 7.2.1方法表访问标志")]),t._v(" "),e("p",[t._v("跟字段表一样，方法表也有访问标志，而且他们的标志有部分相同，部分则不同，方法表的具体访问标志如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("标志名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("标志值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_PUBLIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0001")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为public")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_PRIVATE")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0002")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为private")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_PROTECTED")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0004")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为protected")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_STATIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0008")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为static")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_FINAL")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0010")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为final")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_SYHCHRONRIZED")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0020")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为synchronized")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_BRIDGE")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0040")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否是有编译器产生的方法")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_VARARGS")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0080")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否接受参数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_NATIVE")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0100")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为native")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_ABSTRACT")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0400")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为abstract")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_STRICTFP")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x0800")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否为strictfp")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ACC_SYNTHETIC")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0x1000")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法是否是有编译器自动产生的")])])])]),t._v(" "),e("h4",{attrs:{id:"解析方法表字节码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析方法表字节码"}},[t._v("#")]),t._v(" 解析方法表字节码")]),t._v(" "),e("p",[t._v("这里不再粘贴复制图片了，直接将对应的16字节码的copy 出来 供大家参考比较 直观。")]),t._v(" "),e("p",[t._v("示例代码 对应的 方便表的字节码为")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("00\t03    \n00\t01  00  0d  00\t0e\t00\t01\n\n\n00\t0f\t00\t00\t00\t27\n\n00\t02\t00\t01  00\t00\t00\t0b\t2a\tb7\t00\t01\t2a\t12\t02\tb5\t00\t03\tb1\t00\n00\t00\t01\t00\t10\t00\t00\t00\t0a\t00\t02\t00\t00\t00\t08\t00\t04\t00\t0a\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("ul",[e("li",[t._v("00 03   代表方法的个数  占用了两个两个字节长度")])]),t._v(" "),e("p",[t._v("下面的结构对应的就是  method_info 里面的属性")]),t._v(" "),e("ul",[e("li",[t._v("00 01 access_flags(访问标志)  代表public")]),t._v(" "),e("li",[t._v("00 0d name_index(方法名索引)  对应常池的值 <init>")]),t._v(" "),e("li",[t._v("00 0e descriptor_index   描述符索引  对应常量池的值 ()V")]),t._v(" "),e("li",[t._v("00 01 attributes_count 属性计数器  代表这个方法含有一个属性")])]),t._v(" "),e("p",[t._v("方法表的大致结构 已经解析完成， 后面的字节码属于 方法表的 属性值，需要借助 属性表集合的结构来解析。属性表的通用格式")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("attribute_info {\n    u2 attribute_name_index;\n    u4 attribute_length; \n    u1 info[attribute_length];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("ul",[e("li",[t._v("00 0f attribute_name_index  属性名索引  对应常量池的值 为 "),e("code",[t._v("Code")])]),t._v(" "),e("li",[t._v("00 00\t00\t27 attribute_length 属性长度 对应十进制 39")])]),t._v(" "),e("p",[t._v("值得一提的是 属性名索引,java中属性有很多种  比如像 Code、ConstantValue、Deprecated等属性，对应的字节码结构也有所不同。那属性表式怎么对应上相应的类型的呢？\n其实就是根据 attribute_name_index 属性名索引 所对应的 常量池的 值 去对应  相关的属性，比如 上面的例子， 00 0f对应常量池的值 为 "),e("code",[t._v("Code")]),t._v("，代表了 这个属性为方法表的"),e("code",[t._v("Code")]),t._v("属性")]),t._v(" "),e("p",[t._v("Code 属性对应的结构为")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("```text\nCode_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 max_stack;\n    u2 max_locals;\n    u4 code_length;\n    u1 code[code_length];\n    u2 exception_table_length;\n    {   u2 start_pc;\n        u2 end_pc;\n        u2 handler_pc;\n        u2 catch_type;\n    } exception_table[exception_table_length];\n    u2 attributes_count;\n    attribute_info attributes[attributes_count];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br")])]),e("p",[t._v("你会发现 Code_attribute 与 attribute_info 前两项 是相同的，即Code属性表遵循属性表的结构，后面那些则是他自定义的结构。")]),t._v(" "),e("p",[t._v("即前两项我们已经分析过了 ，我们继续 max_stack 继续分析")]),t._v(" "),e("ul",[e("li",[t._v("00 02 max_stack  操作数栈深度的最大值")]),t._v(" "),e("li",[t._v("00 01 max_locals 局部变量表所需的存续空间")]),t._v(" "),e("li",[t._v("00 00\t00\t0b code_length 字节码指令的长度")]),t._v(" "),e("li",[t._v("2a b7\t00\t01\t2a\t12\t02\tb5\t00\t03\tb1  code[] 存储字节码指令\n"),e("ul",[e("li",[t._v("参考jvm 字节码指令集  对应关系，下面是 分析出来的结果")]),t._v(" "),e("li",[t._v("2a: aload_0 - 将局部变量表中索引为0的引用类型数据压入操作数栈")]),t._v(" "),e("li",[t._v("b7: invokespecial - 调用超类、接口或私有方法")]),t._v(" "),e("li",[t._v("00 01: 操作数，表示方法索引1")]),t._v(" "),e("li",[t._v("2a: aload_0 - 将局部变量表中索引为0的引用类型数据压入操作数栈")]),t._v(" "),e("li",[t._v("12: ldc - 将常量池中的项推送到操作数栈")]),t._v(" "),e("li",[t._v("02: 操作数，表示常量池中索引为2的项")]),t._v(" "),e("li",[t._v("b5: putfield - 将栈顶的值赋给字段")]),t._v(" "),e("li",[t._v("00 03: 操作数，表示字段索引3")]),t._v(" "),e("li",[t._v("b1: return - 从当前方法返回void")])])]),t._v(" "),e("li",[t._v("00 00 exception_table_length 异常表长度")]),t._v(" "),e("li",[t._v("00 01 attributes_count 属性集合计数器\n属性集合")]),t._v(" "),e("li",[t._v("00 10 attribute_name_index   属性名索引 对应10进制16所对应的常量池 为  "),e("code",[t._v("LineNumberTable")])])]),t._v(" "),e("p",[t._v("LineNumberTable属性表结构：")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("LineNumberTable_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 line_number_table_length;\n    {   u2 start_pc;\n        u2 line_number;\t\n    } line_number_table[line_number_table_length];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("ul",[e("li",[t._v("00 00\t00\t0a attribute_length  属性长度")]),t._v(" "),e("li",[t._v("00 02\t line_number_table_length 行号表的 长度")]),t._v(" "),e("li",[t._v("00\t00\tstart_pc    起始pc")]),t._v(" "),e("li",[t._v("00\t08\tline_number  行号")]),t._v(" "),e("li",[t._v("00\t04\tstart_pc")]),t._v(" "),e("li",[t._v("00\t0a  line_number")])]),t._v(" "),e("p",[t._v("上面就是完整的分析了 方法表的字节码文件结构。")]),t._v(" "),e("h3",{attrs:{id:"_8、属性表集合-attributes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、属性表集合-attributes"}},[t._v("#")]),t._v(" 8、属性表集合(attributes)")]),t._v(" "),e("p",[t._v("方法表集合之后的属性表集合。指的是class文件 所携带的辅助信息，比如该class 文件的源文件的名称。以及任何带有RetentionPolicy.CLASS或者RetentionPolicy.RUNTIME的注解。这类信息通常被用于Java虚拟机的验证和运行，以及Java程序的调试，一般无须深入了解。\n此外，字段表、方法表都可以有自己的属性表。用于描述某些场景专有的信息。")]),t._v(" "),e("p",[t._v("属性表集合的限制没有那么严格。不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复。任何人实现的编译器都可以向属性表中写入自己定义的属性信息，但Java虚拟机运行时 会忽略掉它不认识的属性。")]),t._v(" "),e("h4",{attrs:{id:"_8-1、属性计数器-attributes-count-属性计数器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1、属性计数器-attributes-count-属性计数器"}},[t._v("#")]),t._v(" 8.1、属性计数器 attributes_count(属性计数器)")]),t._v(" "),e("p",[t._v("attributes_count 的值表好似当前class文件属性表的成员个数，属性表中每一项都是一个attribute_info结构。")]),t._v(" "),e("h4",{attrs:{id:"_8-2-attributes-属性表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-attributes-属性表"}},[t._v("#")]),t._v(" 8.2 attributes [] (属性表)")]),t._v(" "),e("p",[t._v("属性表的每个项的值必须是attribute_info结构。属性表的结构比较灵活，各种不同的属性只要满足以下结构即可。")]),t._v(" "),e("h5",{attrs:{id:"_8-2-1属性的通用格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-1属性的通用格式"}},[t._v("#")]),t._v(" 8.2.1属性的通用格式")]),t._v(" "),e("p",[t._v("属性表的结构比较灵活，各种不同的属性只要满足以下结构即可：")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("attribute_info {\n    u2 attribute_name_index;\n    u4 attribute_length; \n    u1 info[attribute_length];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数量")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_name_index")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性名索引")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性表")])])])]),t._v(" "),e("p",[t._v("即只需说明属性的名称以及占用位数的长度即可，属性表具体的结构可以去自定义。")]),t._v(" "),e("h4",{attrs:{id:"_8-3-属性类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-属性类型"}},[t._v("#")]),t._v(" 8.3 属性类型")]),t._v(" "),e("p",[t._v("下面这些是虚拟机中预定义的属性:")]),t._v(" "),e("p",[t._v("属性表实际上可以有很多类型，上面看到的Code属性只是其中一种，下面这些是虚拟机中预定义的属性：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("属性名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("使用位置")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Code")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Java代码编译成的字节码指令")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ConstantValue")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字段表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("final关键字定义的常量池")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Deprecated")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类，方法，字段表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被声明为deprecated的方法和字段")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Exceptions")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法抛出的异常")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("EnclosingMethod")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类文件")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅当一个类为局部类或者匿名类是才能拥有这个属性，这个属性用于标识这个类所在的外围方法")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("InnerClass")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类文件")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("内部类列表")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LineNumberTable")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Code属性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Java源码的行号与字节码指令的对应关系")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LocalVariableTable")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Code属性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法的局部变量描述")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("StackMapTable")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Code属性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("JDK1.6中新增的属性，供新的类型检查检验器检查和处理目标方法的局部变量和操作数有所需要的类是否匹配")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Signature")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类，方法表，字段表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于支持泛型情况下的方法签名")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("SourceFile")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类文件")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("记录源文件名称")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("SourceDebugExtension")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类文件")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于存储额外的调试信息")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Synthetic")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类，方法表，字段表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("标志方法或字段为编译器自动生成的")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("LocalVariableTypeTable")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("RuntimeVisibleAnnotations")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类，方法表，字段表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("为动态注解提供支持")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("RuntimeInvisibleAnnotations")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("表，方法表，字段表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于指明哪些注解是运行时不可见的")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("RuntimeVisibleParameterAnnotation")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("作用与RuntimeVisibleAnnotations属性类似，只不过作用对象为方法")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("RuntimeInvisibleParameterAnnotation")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("作用与RuntimeInvisibleAnnotations属性类似，作用对象哪个为方法参数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("AnnotationDefault")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("方法表")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于记录注解类元素的默认值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BootstrapMethods")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("类文件")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于保存invokeddynamic指令引用的引导方式限定符")])])])]),t._v(" "),e("p",[t._v("或者（查看官网）"),e("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jvms-4.7",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jvms-4.7"),e("OutboundLink")],1),t._v(" "),e("img",{attrs:{src:a(800),alt:""}})]),t._v(" "),e("h4",{attrs:{id:"_8-4-部分属性详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-部分属性详解"}},[t._v("#")]),t._v(" 8.4 部分属性详解")]),t._v(" "),e("h5",{attrs:{id:"_1、constantvalue-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、constantvalue-属性"}},[t._v("#")]),t._v(" 1、ConstantValue 属性")]),t._v(" "),e("p",[t._v("ConstantValue 属性表示一个常量字段的值，位于field_info结构的属性表中。")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ConstantValue_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 constantvalue_index;\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h5",{attrs:{id:"_2、deprecated属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、deprecated属性"}},[t._v("#")]),t._v(" 2、Deprecated属性")]),t._v(" "),e("p",[t._v("Deprecated 属性是在JDK1.1 为了支持注释中的关键词@deprecated 而引入的。")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ConstantValue_ attribute{\nu2 attribute_name_index;\nu4 attribute_length;\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("h5",{attrs:{id:"_3、code属性表结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、code属性表结构"}},[t._v("#")]),t._v(" 3、Code属性表结构")]),t._v(" "),e("p",[t._v("先来看下Code属性表的结构,如下图：")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Code_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 max_stack;\n    u2 max_locals;\n    u4 code_length;\n    u1 code[code_length];\n    u2 exception_table_length;\n    {   u2 start_pc;\n        u2 end_pc;\n        u2 handler_pc;\n        u2 catch_type;\n    } exception_table[exception_table_length];\n    u2 attributes_count;\n    attribute_info attributes[attributes_count];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数量")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_name_index")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性名索引")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("max_stack")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("操作数栈深度的最大值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("max_locals")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("局部变量表所需的存续空间")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("code_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("字节码指令的长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("code")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("code_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("存储字节码指令")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("exception_table_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("异常表长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("exception_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("exception_table")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("exception_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("异常表")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性集合计数器")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attributes_count")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性集合")])])])]),t._v(" "),e("p",[t._v("可以看到：Code属性表的前两项跟属性表是一致的，即Code属性表遵循属性表的结构，后面那些则是他自定义的结构。")]),t._v(" "),e("h5",{attrs:{id:"_4、innerclasses-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、innerclasses-属性"}},[t._v("#")]),t._v(" 4、InnerClasses 属性")]),t._v(" "),e("p",[t._v("为了方便说明特别定文一个表示类或接口的Class 格式为C.如果C的常量池中包含某个CONSTANT_Class_info 成员，且这个成员所表示的类或接口不属于任何一个包。那么C的ClassFile 结构的属性表中就必须含有对应的InnerClasses属性。InnerClasses 属性是在JDK 1.1中为了支持内部类和内部接口而引入的,位于ClassFile结构的属性表。")]),t._v(" "),e("p",[t._v("The InnerClasses attribute has the following format:")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("InnerClasses_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 number_of_classes;\n    {   u2 inner_class_info_index;\n        u2 outer_class_info_index;\n        u2 inner_name_index;\n        u2 inner_class_access_flags;\n    } classes[number_of_classes];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("h5",{attrs:{id:"_5、linenumbertable-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、linenumbertable-属性"}},[t._v("#")]),t._v(" 5、LineNumberTable 属性")]),t._v(" "),e("p",[t._v("LineNumberTable属性是可选变长属性，位于Code结构的属性表。\nLineNumberTable属性是用来描述Java源码行号与字节码行号之间的对应关系。这个属性可以用来在调试的时候定位代码执行的行数。")]),t._v(" "),e("ul",[e("li",[t._v("start pc,即字节码行号;line_nunber,即Java源代码行号。")])]),t._v(" "),e("p",[t._v("在Code属性的属性表中,LineNumberTable 属性可以按照任意顺序出现，此外，多个LineNumberTable属性可以共同表示一个行号在源文件中表示的内容，即LineNumberTable 属性不需要与源文件的行一一对应。")]),t._v(" "),e("p",[t._v("LineNumberTable属性表结构：")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("LineNumberTable_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 line_number_table_length;\n    {   u2 start_pc;\n        u2 line_number;\t\n    } line_number_table[line_number_table_length];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("数量")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_name_index")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性名索引")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u4")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("attribute_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("u2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("line_number_table_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("行号表长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("line_number_info")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("line_number_table")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("line_number_table_length")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("行号表")])])])]),t._v(" "),e("h5",{attrs:{id:"_6、localvariabletable属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、localvariabletable属性"}},[t._v("#")]),t._v(" 6、LocalVariableTable属性")]),t._v(" "),e("p",[t._v("LocalVariableTable是可选变长属性。位于Code属性的属性表中。它被调试器用于确定方法在执行过程中局邮变量的信息，在Code属性的属性表中，LocalVariableTable 属性可以按照任意顺序出现。Code 属性中的每个局部变量最多只一个LocalVariableTable 属性。")]),t._v(" "),e("ul",[e("li",[t._v("start pc + length表示这个变量在字节码中的生命周期 起始和结束的偏移位置(this生命周期从头0到结尾10)")]),t._v(" "),e("li",[t._v("index就是这个变量在局部变量表中的槽位(槽位可复用)")]),t._v(" "),e("li",[t._v("name就是变量名称")]),t._v(" "),e("li",[t._v("Descriptor表示局部变量类型描述")])]),t._v(" "),e("p",[t._v("LocalVariableTable属性表结构")]),t._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("LocalVariableTable_attribute {\n    u2 attribute_name_index;\n    u4 attribute_length;\n    u2 local_variable_table_length;\n    {   u2 start_pc;\n        u2 length;\n        u2 name_index;\n        u2 descriptor_index;\n        u2 index;\n    } local_variable_table[local_variable_table_length];\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("本章主要介绍了Class文件的基本格式。")]),t._v(" "),e("p",[t._v("随着Java平台的不断发展，在将来，Class文件的内容也一一定会做进一步的扩充，但是其基本的格式和结构不会做重大调整。")]),t._v(" "),e("p",[t._v("从Java虛拟机的角度看，通过Class文件。可以让更多的计算机语言支持Java虚拟机平台。因此。Class 文件结构不仅仅是Java虚扣机的执行入口，更是Java生态圈的基础和核心。")])])}),[],!1,null,null,null);e.default=n.exports},786:function(t,e,a){t.exports=a.p+"assets/img/bytecode1.9ab6a579.png"},787:function(t,e,a){t.exports=a.p+"assets/img/bytecode2.6d550507.png"},788:function(t,e,a){t.exports=a.p+"assets/img/bytecode3.a12cc273.png"},789:function(t,e,a){t.exports=a.p+"assets/img/b4.095b7b9d.png"},790:function(t,e,a){t.exports=a.p+"assets/img/b12.0931b4d8.png"},791:function(t,e,a){t.exports=a.p+"assets/img/b15.68e82f83.png"},792:function(t,e,a){t.exports=a.p+"assets/img/b13.43c50ed9.png"},793:function(t,e,a){t.exports=a.p+"assets/img/b14.6e11e4d3.png"},794:function(t,e,a){t.exports=a.p+"assets/img/b16.60b27df1.png"},795:function(t,e,a){t.exports=a.p+"assets/img/b20.8301d32a.png"},796:function(t,e,a){t.exports=a.p+"assets/img/b21.8161d9f9.png"},797:function(t,e,a){t.exports=a.p+"assets/img/b8.c7fdc309.png"},798:function(t,e,a){t.exports=a.p+"assets/img/b9.6a2a8ebe.png"},799:function(t,e,a){t.exports=a.p+"assets/img/b22.39017dee.png"},800:function(t,e,a){t.exports=a.p+"assets/img/b10.80e5d889.png"}}]);