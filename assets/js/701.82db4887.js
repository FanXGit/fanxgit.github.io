(window.webpackJsonp=window.webpackJsonp||[]).push([[701],{4156:function(a,e,s){"use strict";s.r(e);var t=s(7),r=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker基础-docker数据卷和数据管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker基础-docker数据卷和数据管理"}},[a._v("#")]),a._v(" Docker基础 - Docker数据卷和数据管理")]),a._v(" "),e("p",[a._v("=======================================================")]),a._v(" "),e("blockquote",[e("p",[a._v("Docker 容器的数据放哪里呢？ 本文带你理解如何在 Docker 内部以及容器之间管理数据。@pdai")])]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#docker%e5%9f%ba%e7%a1%80---docker%e6%95%b0%e6%8d%ae%e5%8d%b7%e5%92%8c%e6%95%b0%e6%8d%ae%e7%ae%a1%e7%90%86"}},[a._v("Docker基础 - Docker数据卷和数据管理")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#docker-%e6%95%b0%e6%8d%ae%e7%ae%a1%e7%90%86%e7%ae%80%e4%bb%8b"}},[a._v("Docker 数据管理简介")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%e6%95%b0%e6%8d%ae%e5%8d%b7data-volume"}},[a._v("数据卷(Data Volume)")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%e5%bb%ba%e4%b8%80%e4%b8%aa%e6%95%b0%e6%8d%ae%e5%8d%b7"}},[a._v("建一个数据卷")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%e6%8c%82%e8%bd%bd%e4%b8%80%e4%b8%aa%e4%b8%bb%e6%9c%ba%e7%9b%ae%e5%bd%95%e4%bd%9c%e4%b8%ba%e6%95%b0%e6%8d%ae%e5%8d%b7"}},[a._v("挂载一个主机目录作为数据卷")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%e6%8c%82%e8%bd%bd%e4%b8%80%e4%b8%aa%e6%9c%ac%e5%9c%b0%e4%b8%bb%e6%9c%ba%e6%96%87%e4%bb%b6%e4%bd%9c%e4%b8%ba%e6%95%b0%e6%8d%ae%e5%8d%b7"}},[a._v("挂载一个本地主机文件作为数据卷")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%e6%95%b0%e6%8d%ae%e5%8d%b7%e5%ae%b9%e5%99%a8data-volume-container"}},[a._v("数据卷容器(Data Volume Container)")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%e6%95%b0%e6%8d%ae%e5%a4%87%e4%bb%bd%e6%81%a2%e5%a4%8d%e8%bf%81%e7%a7%bb%e6%95%b0%e6%8d%ae%e5%8d%b7"}},[a._v("数据备份、恢复、迁移数据卷")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%e5%a4%87%e4%bb%bd"}},[a._v("备份")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%e6%81%a2%e5%a4%8d"}},[a._v("恢复")])])])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0"}},[a._v("参考文章")])])])])]),a._v(" "),e("h1",{attrs:{id:"docker-数据管理简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-数据管理简介"}},[a._v("#")]),a._v(" Docker 数据管理简介")]),a._v(" "),e("hr"),a._v(" "),e("h3",{attrs:{id:"数据卷-data-volume"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据卷-data-volume"}},[a._v("#")]),a._v(" 数据卷(Data Volume)")]),a._v(" "),e("blockquote",[e("p",[a._v("数据卷的使用，类似于 Linux 下对目录或文件进行 mount")])]),a._v(" "),e("p",[a._v("数据卷(Data Volume)是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：")]),a._v(" "),e("ul",[e("li",[a._v("数据卷可以在容器之间共享和重用")]),a._v(" "),e("li",[a._v("对数据卷的修改会立马生效")]),a._v(" "),e("li",[a._v("对数据卷的更新，不会影响镜像")]),a._v(" "),e("li",[a._v("卷会一直存在，直到没有容器使用")])]),a._v(" "),e("h4",{attrs:{id:"建一个数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#建一个数据卷"}},[a._v("#")]),a._v(" 建一个数据卷")]),a._v(" "),e("blockquote",[e("p",[a._v("在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。")])]),a._v(" "),e("p",[a._v("下面创建一个 web 容器，并加载一个数据卷到容器的 /webapp-data 目录。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai ~]# docker run -d -P --name web -v /webapp-data training/webapp python app.py\ne331e83e59486a131919cba8698b24eaee051a947838bb1c15c03df8b3464b97\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("我们看下容器内部是否生成/webapp-data目录")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai ~]# docker exec -it web /bin/bash\nroot@e331e83e5948:/opt/webapp# cd /webapp-data\nroot@e331e83e5948:/webapp-data# ll\ntotal 8\ndrwxr-xr-x 2 root root 4096 Feb 20 01:24 ./\ndrwxr-xr-x 1 root root 4096 Feb 20 01:24 ../\nroot@e331e83e5948:/webapp-data#\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br")])]),e("p",[a._v("*注意：也可以在 Dockerfile 中使用 VOLUME 来添加一个或者多个新的卷到由该镜像创建的任意容器。")]),a._v(" "),e("h4",{attrs:{id:"挂载一个主机目录作为数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#挂载一个主机目录作为数据卷"}},[a._v("#")]),a._v(" 挂载一个主机目录作为数据卷")]),a._v(" "),e("blockquote",[e("p",[a._v("使用 -v 标记也可以指定挂载一个本地主机的目录到容器中去。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai ~]# docker rm -f web\nweb\n[root@pdai opt]# docker run -d --name web -v /opt/webapp-data5:/opt/webapp2 training/webapp\nfce27f6ea9ce9699864644a48aed6db8b772c96be36f46bee6154d2e2c9915b9\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("我们验证下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai opt]# docker exec -it web /bin/bash\nroot@fce27f6ea9ce:/opt/webapp# cd ..\nroot@fce27f6ea9ce:/opt# ls\nwebapp  webapp2\nroot@fce27f6ea9ce:/opt# cd webapp2\nroot@fce27f6ea9ce:/opt/webapp2# mkdir test\nroot@fce27f6ea9ce:/opt/webapp2# exit\nexit\n[root@pdai opt]# cd webapp-data5\n[root@pdai webapp-data5]# ll\ntotal 4\ndrwxr-xr-x 2 root root 4096 Feb 20 10:12 test\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("p",[a._v("上面的命令加载主机的 /opt/webapp-data5 目录到容器的 /opt/webapp2 目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。"),e("strong",[a._v("本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它")]),a._v("。")]),a._v(" "),e("p",[a._v("*注意：Dockerfile 显然是不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的, 因为不同操作系统的路径格式不一样，所以目前还不能支持。")]),a._v(" "),e("p",[a._v("我们删除容器，看主机上数据是否会被删除")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai opt]# docker rm -f web\nweb\n[root@pdai opt]# cd /opt/webapp-data5\n[root@pdai webapp-data5]# ll\ntotal 4\ndrwxr-xr-x 2 root root 4096 Feb 20 10:12 test\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("很明显，没有被删除")]),a._v(" "),e("h4",{attrs:{id:"挂载一个本地主机文件作为数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#挂载一个本地主机文件作为数据卷"}},[a._v("#")]),a._v(" 挂载一个本地主机文件作为数据卷")]),a._v(" "),e("blockquote",[e("p",[a._v("-v 标记也可以从主机挂载单个文件到容器中")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai ~]# docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash\nroot@79eca07938db:/# ll | grep .bash_history\n-rw-------   1 root root 19549 Feb 19 10:28 .bash_history\nroot@79eca07938db:/# exit\nexit\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("p",[a._v("这样就可以记录在容器输入过的命令了。")]),a._v(" "),e("p",[a._v("*注意：如果直接挂载一个文件，很多文件编辑工具，包括 "),e("code",[a._v("vi")]),a._v(" 或者 "),e("code",[a._v("sed --in-place")]),a._v("，可能会造成文件 inode 的改变，从 Docker 1.1 .0起，这会导致报错误信息。所以最简单的办法就直接挂载文件的父目录。")]),a._v(" "),e("h3",{attrs:{id:"数据卷容器-data-volume-container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据卷容器-data-volume-container"}},[a._v("#")]),a._v(" 数据卷容器(Data Volume Container)")]),a._v(" "),e("blockquote",[e("p",[a._v("上面讲述的是主机和容器之间共享数据，那么如何你有一些持续更新的数据需要在容器之间共享，最好的方法就是创建数据卷容器。")])]),a._v(" "),e("p",[a._v("数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('[root@pdai ~]# docker run -d -v /dbdata --name dbdata training/postgres\n70966085a85b05dd741a44a96725e2e44f146cc404b1b4e3aa3e519cd546c6b4\n[root@pdai ~]# docker run -d --volumes-from dbdata --name db1 training/postgres\n4c92240096d919724b233e1a5cfca94b5ceb0505e43262a7121cb83cfd8542f6\n[root@pdai ~]# docker run -d --volumes-from dbdata --name db2 training/postgres\n25246ebfae2f8437316b10d7eac3b34c1bd1522f50ba81651aec198bc79415a2\n[root@pdai ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES\n70966085a85b        training/postgres   "su postgres -c \'/us…"   46 seconds ago       Up 45 seconds       5432/tcp            dbdata\n25246ebfae2f        training/postgres   "su postgres -c \'/us…"   About a minute ago   Up About a minute   5432/tcp            db2\n4c92240096d9        training/postgres   "su postgres -c \'/us…"   2 minutes ago        Up 2 minutes        5432/tcp            db1\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("-volumes-from 可以多次使用来 mount 多个conatainer里的多个volumes。")]),a._v(" "),e("p",[a._v("这个操作是链式的， 我们在db1 中通过 --volumes-from mount进来的 volume可以继续被其他container使用")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('[root@pdai ~]# docker run -d --name db3 --volumes-from db1 training/postgres\n44d0719377e86e3080b26d22adcb6055de93033dc9509ca2ecd8be2c93dc33b5\n[root@pdai ~]# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n44d0719377e8        training/postgres   "su postgres -c \'/us…"   3 seconds ago       Up 2 seconds        5432/tcp            db3\n70966085a85b        training/postgres   "su postgres -c \'/us…"   3 minutes ago       Up 3 minutes        5432/tcp            dbdata\n25246ebfae2f        training/postgres   "su postgres -c \'/us…"   4 minutes ago       Up 4 minutes        5432/tcp            db2\n4c92240096d9        training/postgres   "su postgres -c \'/us…"   4 minutes ago       Up 4 minutes        5432/tcp            db1\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("p",[e("strong",[a._v("使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态")]),a._v("。")]),a._v(" "),e("p",[e("strong",[a._v("如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 "),e("code",[a._v("docker rm -v")]),a._v(" 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷")]),a._v("。")]),a._v(" "),e("h3",{attrs:{id:"数据备份、恢复、迁移数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据备份、恢复、迁移数据卷"}},[a._v("#")]),a._v(" 数据备份、恢复、迁移数据卷")]),a._v(" "),e("p",[a._v("可以利用数据卷对其中的数据进行进行备份、恢复和迁移。")]),a._v(" "),e("h4",{attrs:{id:"备份"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#备份"}},[a._v("#")]),a._v(" 备份")]),a._v(" "),e("p",[a._v("首先使用 --volumes-from 标记来创建一个加载 dbdata 容器卷的容器，并从本地主机挂载当前到容器的 /backup 目录。命令如下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai ~]# docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata\ntar: Removing leading `/' from member names\n/dbdata/\n[root@pdai ~]# ll | grep backup.tar\n-rw-r--r-- 1 root root    10240 Feb 20 12:39 backup.tar\n[root@pdai ~]#\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("容器启动后，使用了 tar 命令来将 dbdata 卷备份为本地的 /backup/backup.tar。")]),a._v(" "),e("h4",{attrs:{id:"恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复"}},[a._v("#")]),a._v(" 恢复")]),a._v(" "),e("p",[a._v("如果要恢复数据到一个容器")]),a._v(" "),e("p",[a._v("首先创建一个带有数据卷的容器 dbdata2")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai ~]# docker run -v /dbdata --name dbdata2 ubuntu /bin/bash\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("然后创建另一个容器，挂载 dbdata2 的容器，并使用 untar 解压备份文件到挂载的容器卷中。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[root@pdai ~]# docker run --volumes-from dbdata2 -v $(pwd):/backup ubuntu tar xvf /backup/backup.tar\ndbdata/\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h1",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),e("hr"),a._v(" "),e("ul",[e("li",[a._v("https://docs.docker.com/storage/)")])])])}),[],!1,null,null,null);e.default=r.exports}}]);