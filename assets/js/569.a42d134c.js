(window.webpackJsonp=window.webpackJsonp||[]).push([[569],{3783:function(n,s,e){"use strict";e.r(s);var a=e(7),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"算法思想-贪心算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-贪心算法"}},[n._v("#")]),n._v(" 算法思想 - 贪心算法")]),n._v(" "),s("p",[n._v("===========================")]),n._v(" "),s("blockquote",[s("p",[n._v("本文主要介绍算法中贪心算法的思想: 保证每次操作都是局部最优的，并且最后得到的结果是全局最优的。@pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[n._v("贪心思想相关题目"),s("OutboundLink")],1),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E5%88%86%E9%85%8D%E9%A5%BC%E5%B9%B2",target:"_blank",rel:"noopener noreferrer"}},[n._v("分配饼干"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E4%B8%8D%E9%87%8D%E5%8F%A0%E7%9A%84%E5%8C%BA%E9%97%B4%E4%B8%AA%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[n._v("不重叠的区间个数"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E6%8A%95%E9%A3%9E%E9%95%96%E5%88%BA%E7%A0%B4%E6%B0%94%E7%90%83",target:"_blank",rel:"noopener noreferrer"}},[n._v("投飞镖刺破气球"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E5%92%8C%E5%BA%8F%E5%8F%B7%E9%87%8D%E7%BB%84%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"}},[n._v("根据身高和序号重组队列"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E5%88%86%E9%9A%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%BF%E5%90%8C%E7%A7%8D%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E5%9C%A8%E4%B8%80%E8%B5%B7",target:"_blank",rel:"noopener noreferrer"}},[n._v("分隔字符串使同种字符出现在一起"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E7%A7%8D%E6%A4%8D%E8%8A%B1%E6%9C%B5",target:"_blank",rel:"noopener noreferrer"}},[n._v("种植花朵"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AD%90%E5%BA%8F%E5%88%97",target:"_blank",rel:"noopener noreferrer"}},[n._v("判断是否为子序列"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E4%BF%AE%E6%94%B9%E4%B8%80%E4%B8%AA%E6%95%B0%E6%88%90%E4%B8%BA%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E7%BB%84",target:"_blank",rel:"noopener noreferrer"}},[n._v("修改一个数成为非递减数组"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-greedy.html#%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E6%94%B6%E7%9B%8A",target:"_blank",rel:"noopener noreferrer"}},[n._v("股票的最大收益"),s("OutboundLink")],1)])])])]),n._v(" "),s("h1",{attrs:{id:"贪心思想相关题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪心思想相关题目"}},[n._v("#")]),n._v(" 贪心思想相关题目")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"分配饼干"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配饼干"}},[n._v("#")]),n._v(" 分配饼干")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/assign-cookies/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("455. Assign Cookies (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: [1,2], [1,2,3]\nOutput: 2\n\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.\nYou have 3 cookies and their sizes are big enough to gratify all of the children,\nYou need to output 2.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("p",[n._v("题目描述: 每个孩子都有一个满足度，每个饼干都有一个大小，只有饼干的大小大于等于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。")]),n._v(" "),s("p",[n._v("给一个孩子的饼干应当尽量小又能满足该孩子，这样大饼干就能拿来给满足度比较大的孩子。因为最小的孩子最容易得到满足，所以先满足最小的孩子。")]),n._v(" "),s("p",[n._v("证明: 假设在某次选择中，贪心策略选择给当前满足度最小的孩子分配第 m 个饼干，第 m 个饼干为可以满足该孩子的最小饼干。假设存在一种最优策略，给该孩子分配第 n 个饼干，并且 m < n。我们可以发现，经过这一轮分配，贪心策略分配后剩下的饼干一定有一个比最优策略来得大。因此在后续的分配中，贪心策略一定能满足更多的孩子。也就是说不存在比贪心策略更优的策略，即贪心策略就是最优策略。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int findContentChildren(int[] g, int[] s) {\n    Arrays.sort(g);\n    Arrays.sort(s);\n    int gi = 0, si = 0;\n    while (gi < g.length && si < s.length) {\n        if (g[gi] <= s[si]) {\n            gi++;\n        }\n        si++;\n    }\n    return gi;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h3",{attrs:{id:"不重叠的区间个数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不重叠的区间个数"}},[n._v("#")]),n._v(" 不重叠的区间个数")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/non-overlapping-intervals/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("435. Non-overlapping Intervals (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: [ [1,2], [1,2], [1,2] ]\n\nOutput: 2\n\nExplanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: [ [1,2], [2,3] ]\n\nOutput: 0\n\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("题目描述: 计算让一组区间不重叠所需要移除的区间个数。")]),n._v(" "),s("p",[n._v("计算最多能组成的不重叠区间个数，然后用区间总个数减去不重叠区间的个数。")]),n._v(" "),s("p",[n._v("在每次选择中，区间的结尾最为重要，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。")]),n._v(" "),s("p",[n._v("按区间的结尾进行排序，每次选择结尾最小，并且和前一个区间不重叠的区间。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int eraseOverlapIntervals(Interval[] intervals) {\n    if (intervals.length == 0) {\n        return 0;\n    }\n    Arrays.sort(intervals, Comparator.comparingInt(o -> o.end));\n    int cnt = 1;\n    int end = intervals[0].end;\n    for (int i = 1; i < intervals.length; i++) {\n        if (intervals[i].start < end) {\n            continue;\n        }\n        end = intervals[i].end;\n        cnt++;\n    }\n    return intervals.length - cnt;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("使用 lambda 表示式创建 Comparator 会导致算法运行时间过长，如果注重运行时间，可以修改为普通创建 Comparator 语句:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Arrays.sort(intervals, new Comparator<Interval>() {\n    @Override\n    public int compare(Interval o1, Interval o2) {\n        return o1.end - o2.end;\n    }\n});\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("h3",{attrs:{id:"投飞镖刺破气球"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#投飞镖刺破气球"}},[n._v("#")]),n._v(" 投飞镖刺破气球")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("452. Minimum Number of Arrows to Burst Balloons (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input:\n[[10,16], [2,8], [1,6], [7,12]]\n\nOutput:\n2\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("题目描述: 气球在一个水平数轴上摆放，可以重叠，飞镖垂直投向坐标轴，使得路径上的气球都会刺破。求解最小的投飞镖次数使所有气球都被刺破。")]),n._v(" "),s("p",[n._v("也是计算不重叠的区间个数，不过和 Non-overlapping Intervals 的区别在于，[1, 2] 和 [2, 3] 在本题中算是重叠区间。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int findMinArrowShots(int[][] points) {\n    if (points.length == 0) {\n        return 0;\n    }\n    Arrays.sort(points, Comparator.comparingInt(o -> o[1]));\n    int cnt = 1, end = points[0][1];\n    for (int i = 1; i < points.length; i++) {\n        if (points[i][0] <= end) {\n            continue;\n        }\n        cnt++;\n        end = points[i][1];\n    }\n    return cnt;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h3",{attrs:{id:"根据身高和序号重组队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据身高和序号重组队列"}},[n._v("#")]),n._v(" 根据身高和序号重组队列")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/queue-reconstruction-by-height/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("406. Queue Reconstruction by Height(Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\nOutput:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("题目描述: 一个学生用两个分量 (h, k) 描述，h 表示身高，k 表示排在前面的有 k 个学生的身高比他高或者和他一样高。")]),n._v(" "),s("p",[n._v("为了在每次插入操作时不影响后续的操作，身高较高的学生应该先做插入操作，否则身高较小的学生原先正确插入第 k 个位置可能会变成第 k+1 个位置。")]),n._v(" "),s("p",[n._v("身高降序、k 值升序，然后按排好序的顺序插入队列的第 k 个位置中。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int[][] reconstructQueue(int[][] people) {\n    if (people == null || people.length == 0 || people[0].length == 0) {\n        return new int[0][0];\n    }\n    Arrays.sort(people, (a, b) -> (a[0] == b[0] ? a[1] - b[1] : b[0] - a[0]));\n    List<int[]> queue = new ArrayList<>();\n    for (int[] p : people) {\n        queue.add(p[1], p);\n    }\n    return queue.toArray(new int[queue.size()][]);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("h3",{attrs:{id:"分隔字符串使同种字符出现在一起"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分隔字符串使同种字符出现在一起"}},[n._v("#")]),n._v(" 分隔字符串使同种字符出现在一起")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/partition-labels/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("763. Partition Labels (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('Input: S = "ababcbacadefegdehijhklij"\nOutput: [9,7,8]\nExplanation:\nThe partition is "ababcbaca", "defegde", "hijhklij".\nThis is a partition so that each letter appears in at most one part.\nA partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public List<Integer> partitionLabels(String S) {\n    int[] lastIndexsOfChar = new int[26];\n    for (int i = 0; i < S.length(); i++) {\n        lastIndexsOfChar[char2Index(S.charAt(i))] = i;\n    }\n    List<Integer> partitions = new ArrayList<>();\n    int firstIndex = 0;\n    while (firstIndex < S.length()) {\n        int lastIndex = firstIndex;\n        for (int i = firstIndex; i < S.length() && i <= lastIndex; i++) {\n            int index = lastIndexsOfChar[char2Index(S.charAt(i))];\n            if (index > lastIndex) {\n                lastIndex = index;\n            }\n        }\n        partitions.add(lastIndex - firstIndex + 1);\n        firstIndex = lastIndex + 1;\n    }\n    return partitions;\n}\n\nprivate int char2Index(char c) {\n    return c - 'a';\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("h3",{attrs:{id:"种植花朵"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#种植花朵"}},[n._v("#")]),n._v(" 种植花朵")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/can-place-flowers/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("605. Can Place Flowers (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: flowerbed = [1,0,0,0,1], n = 1\nOutput: True\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("题目描述: 花朵之间至少需要一个单位的间隔，求解是否能种下 n 朵花。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean canPlaceFlowers(int[] flowerbed, int n) {\n    int len = flowerbed.length;\n    int cnt = 0;\n    for (int i = 0; i < len && cnt < n; i++) {\n        if (flowerbed[i] == 1) {\n            continue;\n        }\n        int pre = i == 0 ? 0 : flowerbed[i - 1];\n        int next = i == len - 1 ? 0 : flowerbed[i + 1];\n        if (pre == 0 && next == 0) {\n            cnt++;\n            flowerbed[i] = 1;\n        }\n    }\n    return cnt >= n;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("h3",{attrs:{id:"判断是否为子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断是否为子序列"}},[n._v("#")]),n._v(" 判断是否为子序列")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/is-subsequence/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("392. Is Subsequence (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('s = "abc", t = "ahbgdc"\nReturn true.\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean isSubsequence(String s, String t) {\n    int index = -1;\n    for (char c : s.toCharArray()) {\n        index = t.indexOf(c, index + 1);\n        if (index == -1) {\n            return false;\n        }\n    }\n    return true;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("h3",{attrs:{id:"修改一个数成为非递减数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改一个数成为非递减数组"}},[n._v("#")]),n._v(" 修改一个数成为非递减数组")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/non-decreasing-array/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("665. Non-decreasing Array (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: [4,2,3]\nOutput: True\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("题目描述: 判断一个数组能不能只修改一个数就成为非递减数组。")]),n._v(" "),s("p",[n._v("在出现 nums[i] < nums[i - 1] 时，需要考虑的是应该修改数组的哪个数，使得本次修改能使 i 之前的数组成为非递减数组，并且 "),s("strong",[n._v("不影响后续的操作")]),n._v(" 。优先考虑令 nums[i - 1] = nums[i]，因为如果修改 nums[i] = nums[i - 1] 的话，那么 nums[i] 这个数会变大，就有可能比 nums[i + 1] 大，从而影响了后续操作。还有一个比较特别的情况就是 nums[i] < nums[i - 2]，只修改 nums[i - 1] = nums[i] 不能使数组成为非递减数组，只能修改 nums[i] = nums[i - 1]。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean checkPossibility(int[] nums) {\n    int cnt = 0;\n    for (int i = 1; i < nums.length && cnt < 2; i++) {\n        if (nums[i] >= nums[i - 1]) {\n            continue;\n        }\n        cnt++;\n        if (i - 2 >= 0 && nums[i - 2] > nums[i]) {\n            nums[i] = nums[i - 1];\n        } else {\n            nums[i - 1] = nums[i];\n        }\n    }\n    return cnt <= 1;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("h3",{attrs:{id:"股票的最大收益"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#股票的最大收益"}},[n._v("#")]),n._v(" 股票的最大收益")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("122. Best Time to Buy and Sell Stock II (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("题目描述: 一次股票交易包含买入和卖出，多个交易之间不能交叉进行。")]),n._v(" "),s("p",[n._v("对于 [a, b, c, d]，如果有 a <= b <= c <= d ，那么最大收益为 d - a。而 d - a = (d - c) + (c - b) + (b - a) ，因此当访问到一个 prices[i] 且 prices[i] - prices[i-1] > 0，那么就把 prices[i] - prices[i-1] 添加到收益中，从而在局部最优的情况下也保证全局最优。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int maxProfit(int[] prices) {\n    int profit = 0;\n    for (int i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            profit += (prices[i] - prices[i - 1]);\n        }\n    }\n    return profit;\n}\n```)")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);