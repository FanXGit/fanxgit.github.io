(window.webpackJsonp=window.webpackJsonp||[]).push([[301],{1482:function(s,n,a){s.exports=a.p+"assets/img/alg-sort-radix-1.6936fb58.jpg"},1483:function(s,n,a){s.exports=a.p+"assets/img/alg-sort-radix-2.8ebec0ec.jpg"},1484:function(s,n,a){s.exports=a.p+"assets/img/alg-sort-radix-3.9a7e8002.jpg"},3785:function(s,n,a){"use strict";a.r(n);var t=a(7),r=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"排序-基数排序-radix-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序-基数排序-radix-sort"}},[s._v("#")]),s._v(" 排序 - 基数排序(Radix Sort)")]),s._v(" "),n("p",[s._v("==============================================")]),s._v(" "),n("blockquote",[n("p",[s._v("基数排序(Radix Sort)是桶排序的扩展. @pdai")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-radix.html#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[s._v("基数排序介绍"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-radix.html#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("基数排序实现"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-radix.html#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[s._v("基数排序复杂度和稳定性"),n("OutboundLink")],1),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-radix.html#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E5%A4%8D%E6%9D%82%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[s._v("基数排序复杂度"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-radix.html#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[s._v("基数排序稳定性"),n("OutboundLink")],1)])])]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-radix.html#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("代码实现"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-radix.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考文章"),n("OutboundLink")],1)])]),s._v(" "),n("h1",{attrs:{id:"基数排序介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基数排序介绍"}},[s._v("#")]),s._v(" 基数排序介绍")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("它的基本思想是: 将整数按位数切割成不同的数字，然后按每个位数分别比较。 具体做法是: 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。")]),s._v(" "),n("h1",{attrs:{id:"基数排序实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基数排序实现"}},[s._v("#")]),s._v(" 基数排序实现")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("通过基数排序对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}，它的示意图如下:")]),s._v(" "),n("p",[n("img",{attrs:{src:a(1482),alt:""}})]),s._v(" "),n("p",[s._v("在上图中，首先将所有待比较树脂统一为统一位数长度，接着从最低位开始，依次进行排序。")]),s._v(" "),n("ol",[n("li",[s._v("按照个位数进行排序。")]),s._v(" "),n("li",[s._v("按照十位数进行排序。")]),s._v(" "),n("li",[s._v("按照百位数进行排序。 排序后，数列就变成了一个有序序列。")])]),s._v(" "),n("p",[s._v("下面简单介绍一下对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}按个位数进行排序的流程。")]),s._v(" "),n("ul",[n("li",[s._v("个位的数值范围是[0,10)。因此，参见桶数组buckets[]，将数组按照个位数值添加到桶中。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1483),alt:""}})]),s._v(" "),n("ul",[n("li",[s._v("接着是根据桶数组buckets[]来进行排序。假设将排序后的数组存在output[]中；找出output[]和buckets[]之间的联系就可以对数据进行排序了。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1484),alt:""}})]),s._v(" "),n("h1",{attrs:{id:"基数排序复杂度和稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基数排序复杂度和稳定性"}},[s._v("#")]),s._v(" 基数排序复杂度和稳定性")]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"基数排序复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基数排序复杂度"}},[s._v("#")]),s._v(" 基数排序复杂度")]),s._v(" "),n("h3",{attrs:{id:"基数排序稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基数排序稳定性"}},[s._v("#")]),s._v(" 基数排序稳定性")]),s._v(" "),n("h1",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),n("hr"),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n * 基数排序: Java\n *\n * @author skywang\n * @date 2014/03/15\n */\n\npublic class RadixSort {\n\n    /*\n     * 获取数组a中最大值\n     *\n     * 参数说明: \n     *     a -- 数组\n     *     n -- 数组长度\n     */\n    private static int getMax(int[] a) {\n        int max;\n\n        max = a[0];\n        for (int i = 1; i < a.length; i++)\n            if (a[i] > max)\n                max = a[i];\n\n        return max;\n    }\n\n    /*\n     * 对数组按照"某个位数"进行排序(桶排序)\n     *\n     * 参数说明: \n     *     a -- 数组\n     *     exp -- 指数。对数组a按照该指数进行排序。\n     *\n     * 例如，对于数组a={50, 3, 542, 745, 2014, 154, 63, 616}；\n     *    (01) 当exp=1表示按照"个位"对数组a进行排序\n     *    (02) 当exp=10表示按照"十位"对数组a进行排序\n     *    (03) 当exp=100表示按照"百位"对数组a进行排序\n     *    ...\n     */\n    private static void countSort(int[] a, int exp) {\n        //int output[a.length];    // 存储"被排序数据"的临时数组\n        int[] output = new int[a.length];    // 存储"被排序数据"的临时数组\n        int[] buckets = new int[10];\n\n        // 将数据出现的次数存储在buckets[]中\n        for (int i = 0; i < a.length; i++)\n            buckets[ (a[i]/exp)%10 ]++;\n\n        // 更改buckets[i]。目的是让更改后的buckets[i]的值，是该数据在output[]中的位置。\n        for (int i = 1; i < 10; i++)\n            buckets[i] += buckets[i - 1];\n\n        // 将数据存储到临时数组output[]中\n        for (int i = a.length - 1; i >= 0; i--) {\n            output[buckets[ (a[i]/exp)%10 ] - 1] = a[i];\n            buckets[ (a[i]/exp)%10 ]--;\n        }\n\n        // 将排序好的数据赋值给a[]\n        for (int i = 0; i < a.length; i++)\n            a[i] = output[i];\n\n        output = null;\n        buckets = null;\n    }\n\n    /*\n     * 基数排序\n     *\n     * 参数说明: \n     *     a -- 数组\n     */\n    public static void radixSort(int[] a) {\n        int exp;    // 指数。当对数组按各位进行排序时，exp=1；按十位进行排序时，exp=10；...\n        int max = getMax(a);    // 数组a中的最大值\n\n        // 从个位开始，对数组a按"指数"进行排序\n        for (exp = 1; max/exp > 0; exp *= 10)\n            countSort(a, exp);\n    }\n\n    public static void main(String[] args) {\n        int i;\n        int a[] = {53, 3, 542, 748, 14, 214, 154, 63, 616};\n\n        System.out.printf("before sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n\n        radixSort(a);    // 基数排序\n\n        System.out.printf("after  sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br")])]),n("h1",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("提示")]),s._v(" "),n("p",[s._v("本文主要参考至 https://www.cnblogs.com/skywang12345/p/3603669.html, 在此基础上做了内容的增改。)")])])}),[],!1,null,null,null);n.default=r.exports}}]);