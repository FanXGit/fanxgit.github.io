(window.webpackJsonp=window.webpackJsonp||[]).push([[572],{3790:function(t,n,s){"use strict";s.r(n);var e=s(7),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"安全算法-加密算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安全算法-加密算法"}},[t._v("#")]),t._v(" 安全算法 - 加密算法")]),t._v(" "),n("p",[t._v("===========================")]),t._v(" "),n("blockquote",[n("p",[t._v("本文主要介绍安全算法之加密算法。 数据加密的基本过程就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码为“密文”，使其只能在输入相应的密钥之后才能显示出原容，通过这样的途径来达到保护数据不被非法人窃取、阅读的目的。 该过程的逆过程为解密，即将该编码信息转化为其原来数据的过程。@pdai")])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("加密算法简介"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"}},[t._v("加密算法分类"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("加密算法应用"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("对称加密"),n("OutboundLink")],1),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#des",target:"_blank",rel:"noopener noreferrer"}},[t._v("DES"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#idea",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDEA"),n("OutboundLink")],1)])])]),t._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("非对称加密"),n("OutboundLink")],1),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-domain-security-secure.html#rsa",target:"_blank",rel:"noopener noreferrer"}},[t._v("RSA"),n("OutboundLink")],1)])])])]),t._v(" "),n("h1",{attrs:{id:"加密算法简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加密算法简介"}},[t._v("#")]),t._v(" 加密算法简介")]),t._v(" "),n("hr"),t._v(" "),n("ul",[n("li",[t._v("加密技术包括两个元素: 加密算法和密钥。")]),t._v(" "),n("li",[t._v("加密算法是将普通的文本(或者可以理解的信息)与一串数字(密钥)的结合，产生不可理解的密文的步骤。")]),t._v(" "),n("li",[t._v("密钥是用来对数据进行编码和解码的一种算法。")]),t._v(" "),n("li",[t._v("在安全保密中，可通过适当的密钥加密技术和管理机制来保证网络的信息通讯安全。")])]),t._v(" "),n("h1",{attrs:{id:"加密算法分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加密算法分类"}},[t._v("#")]),t._v(" 加密算法分类")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("密钥加密技术的密码体制分为对称密钥体制和非对称密钥体制两种。相应地，对数据加密的技术分为两类，即对称加密(私人密钥加密)和非对称加密(公开密钥加密)。")]),t._v(" "),n("p",[t._v("对称加密以数据加密标准(DES，Data Encryption Standard)算法为典型代表，非对称加密通常以RSA(Rivest Shamir Adleman)算法为代表。")]),t._v(" "),n("p",[t._v("对称加密的加密密钥和解密密钥相同。非对称加密的加密密钥和解密密钥不同，加密密钥可以公开而解密密钥需要保密")]),t._v(" "),n("h1",{attrs:{id:"加密算法应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加密算法应用"}},[t._v("#")]),t._v(" 加密算法应用")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("常被用在电子商务或者其他需要保证网络传输安全的范围。")]),t._v(" "),n("h1",{attrs:{id:"对称加密"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对称加密"}},[t._v("#")]),t._v(" 对称加密")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("加密密钥和解密密钥相同的加密算法。")]),t._v(" "),n("p",[t._v("对称加密算法使用起来简单快捷，密钥较短，且破译困难，除了数据加密标准(DES)， 另一个对称密钥加密系统是国际数据加密算法(IDEA)，它比DES的加密性好，而且对计算机功能要求也没有那么高。IDEA加密标准由PGP(Pretty Good Privacy)系统使用。")]),t._v(" "),n("h3",{attrs:{id:"des-在新窗口打开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#des-在新窗口打开"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://baike.baidu.com/item/DES",target:"_blank",rel:"noopener noreferrer"}},[t._v("DES 在新窗口打开"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("DES全称为Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法，现在已经过时。")]),t._v(" "),n("h4",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("p",[t._v("DES算法实现 :")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package com.snailclimb.ks.securityAlgorithm;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.SecureRandom;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.SecretKey;\nimport javax.crypto.Cipher;\n\n/\n * DES加密介绍 DES是一种对称加密算法，所谓对称加密算法即: 加密和解密使用相同密钥的算法。DES加密算法出自IBM的研究，\n * 后来被美国政府正式采用，之后开始广泛流传，但是近些年使用越来越少，因为DES使用56位密钥，以现代计算能力，\n * 24小时内即可被破解。虽然如此，在某些简单应用中，我们还是可以使用DES加密算法，本文简单讲解DES的JAVA实现 。\n * 注意: DES加密和解密过程中，密钥长度都必须是8的倍数\n */\npublic class DesDemo {\n\tpublic DesDemo() {\n\t}\n\n\t// 测试\n\tpublic static void main(String args[]) {\n\t\t// 待加密内容\n\t\tString str = "cryptology";\n\t\t// 密码，长度要是8的倍数\n\t\tString password = "95880288";\n\n\t\tbyte[] result;\n\t\ttry {\n\t\t\tresult = DesDemo.encrypt(str.getBytes(), password);\n\t\t\tSystem.out.println("加密后: " + result);\n\t\t\tbyte[] decryResult = DesDemo.decrypt(result, password);\n\t\t\tSystem.out.println("解密后: " + new String(decryResult));\n\t\t} catch (UnsupportedEncodingException e2) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te2.printStackTrace();\n\t\t} catch (Exception e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t}\n\n\t// 直接将如上内容解密\n\n\t/\n\t * 加密\n\t * \n\t * @param datasource\n\t *            byte[]\n\t * @param password\n\t *            String\n\t * @return byte[]\n\t */\n\tpublic static byte[] encrypt(byte[] datasource, String password) {\n\t\ttry {\n\t\t\tSecureRandom random = new SecureRandom();\n\t\t\tDESKeySpec desKey = new DESKeySpec(password.getBytes());\n\t\t\t// 创建一个密匙工厂，然后用它把DESKeySpec转换成\n\t\t\tSecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");\n\t\t\tSecretKey securekey = keyFactory.generateSecret(desKey);\n\t\t\t// Cipher对象实际完成加密操作\n\t\t\tCipher cipher = Cipher.getInstance("DES");\n\t\t\t// 用密匙初始化Cipher对象,ENCRYPT_MODE用于将 Cipher 初始化为加密模式的常量\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, securekey, random);\n\t\t\t// 现在，获取数据并加密\n\t\t\t// 正式执行加密操作\n\t\t\treturn cipher.doFinal(datasource); // 按单部分操作加密或解密数据，或者结束一个多部分操作\n\t\t} catch (Throwable e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\t/\n\t * 解密\n\t * \n\t * @param src\n\t *            byte[]\n\t * @param password\n\t *            String\n\t * @return byte[]\n\t * @throws Exception\n\t */\n\tpublic static byte[] decrypt(byte[] src, String password) throws Exception {\n\t\t// DES算法要求有一个可信任的随机数源\n\t\tSecureRandom random = new SecureRandom();\n\t\t// 创建一个DESKeySpec对象\n\t\tDESKeySpec desKey = new DESKeySpec(password.getBytes());\n\t\t// 创建一个密匙工厂\n\t\tSecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");// 返回实现指定转换的\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Cipher\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 对象\n\t\t// 将DESKeySpec对象转换成SecretKey对象\n\t\tSecretKey securekey = keyFactory.generateSecret(desKey);\n\t\t// Cipher对象实际完成解密操作\n\t\tCipher cipher = Cipher.getInstance("DES");\n\t\t// 用密匙初始化Cipher对象\n\t\tcipher.init(Cipher.DECRYPT_MODE, securekey, random);\n\t\t// 真正开始解密操作\n\t\treturn cipher.doFinal(src);\n\t}\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br"),n("span",{staticClass:"line-number"},[t._v("71")]),n("br"),n("span",{staticClass:"line-number"},[t._v("72")]),n("br"),n("span",{staticClass:"line-number"},[t._v("73")]),n("br"),n("span",{staticClass:"line-number"},[t._v("74")]),n("br"),n("span",{staticClass:"line-number"},[t._v("75")]),n("br"),n("span",{staticClass:"line-number"},[t._v("76")]),n("br"),n("span",{staticClass:"line-number"},[t._v("77")]),n("br"),n("span",{staticClass:"line-number"},[t._v("78")]),n("br"),n("span",{staticClass:"line-number"},[t._v("79")]),n("br"),n("span",{staticClass:"line-number"},[t._v("80")]),n("br"),n("span",{staticClass:"line-number"},[t._v("81")]),n("br"),n("span",{staticClass:"line-number"},[t._v("82")]),n("br"),n("span",{staticClass:"line-number"},[t._v("83")]),n("br"),n("span",{staticClass:"line-number"},[t._v("84")]),n("br"),n("span",{staticClass:"line-number"},[t._v("85")]),n("br"),n("span",{staticClass:"line-number"},[t._v("86")]),n("br"),n("span",{staticClass:"line-number"},[t._v("87")]),n("br"),n("span",{staticClass:"line-number"},[t._v("88")]),n("br"),n("span",{staticClass:"line-number"},[t._v("89")]),n("br"),n("span",{staticClass:"line-number"},[t._v("90")]),n("br"),n("span",{staticClass:"line-number"},[t._v("91")]),n("br"),n("span",{staticClass:"line-number"},[t._v("92")]),n("br"),n("span",{staticClass:"line-number"},[t._v("93")]),n("br"),n("span",{staticClass:"line-number"},[t._v("94")]),n("br"),n("span",{staticClass:"line-number"},[t._v("95")]),n("br"),n("span",{staticClass:"line-number"},[t._v("96")]),n("br"),n("span",{staticClass:"line-number"},[t._v("97")]),n("br"),n("span",{staticClass:"line-number"},[t._v("98")]),n("br"),n("span",{staticClass:"line-number"},[t._v("99")]),n("br"),n("span",{staticClass:"line-number"},[t._v("100")]),n("br")])]),n("p",[t._v("结果:")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("加密后: [B@50cbc42f\n解密后: cryptology\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("h3",{attrs:{id:"idea-在新窗口打开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#idea-在新窗口打开"}},[t._v("#")]),t._v(" "),n("a",{attrs:{href:"https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/11048972?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[t._v("IDEA 在新窗口打开"),n("OutboundLink")],1)]),t._v(" "),n("ul",[n("li",[t._v("这种算法是在DES算法的基础上发展出来的，类似于三重DES。")]),t._v(" "),n("li",[t._v("发展IDEA也是因为感到DES具有密钥太短等缺点。")]),t._v(" "),n("li",[t._v("DEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。")]),t._v(" "),n("li",[t._v("在实际项目中用到的很少了解即可。")])]),t._v(" "),n("h4",{attrs:{id:"代码实现-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现-2"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("p",[t._v("IDEA算法实现")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package com.snailclimb.ks.securityAlgorithm;\n\nimport java.security.Key;\nimport java.security.Security;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\n\npublic class IDEADemo {\n\tpublic static void main(String args[]) {\n\t\tbcIDEA();\n\t}\n\tpublic static void bcIDEA() {\n\t    String src = "www.xttblog.com security idea";\n\t    try {\n\t        Security.addProvider(new BouncyCastleProvider());\n\t         \n\t        //生成key\n\t        KeyGenerator keyGenerator = KeyGenerator.getInstance("IDEA");\n\t        keyGenerator.init(128);\n\t        SecretKey secretKey = keyGenerator.generateKey();\n\t        byte[] keyBytes = secretKey.getEncoded();\n\t         \n\t        //转换密钥\n\t        Key key = new SecretKeySpec(keyBytes, "IDEA");\n\t         \n\t        //加密\n\t        Cipher cipher = Cipher.getInstance("IDEA/ECB/ISO10126Padding");\n\t        cipher.init(Cipher.ENCRYPT_MODE, key);\n\t        byte[] result = cipher.doFinal(src.getBytes());\n\t        System.out.println("bc idea encrypt : " + Base64.encodeBase64String(result));\n\t         \n\t        //解密\n\t        cipher.init(Cipher.DECRYPT_MODE, key);\n\t        result = cipher.doFinal(result);\n\t        System.out.println("bc idea decrypt : " + new String(result));\n\t    } catch (Exception e) {\n\t        e.printStackTrace();\n\t    }\n\t}\n}\n\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br")])]),n("h1",{attrs:{id:"非对称加密"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密"}},[t._v("#")]),t._v(" 非对称加密")]),t._v(" "),n("hr"),t._v(" "),n("ul",[n("li",[t._v("与对称加密算法不同，非对称加密算法需要两个密钥: 公开密钥(publickey)和私有密钥 (privatekey)。")]),t._v(" "),n("li",[t._v("公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；")]),t._v(" "),n("li",[t._v("如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。")]),t._v(" "),n("li",[t._v("因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。")])]),t._v(" "),n("h3",{attrs:{id:"rsa"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rsa"}},[t._v("#")]),t._v(" RSA")]),t._v(" "),n("p",[t._v("RSA是目前最有影响力和最常用的公钥加密算法。它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。")]),t._v(" "),n("h4",{attrs:{id:"代码实现-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现-3"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("p",[t._v("RAS算法实现:")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package com.snailclimb.ks.securityAlgorithm;\n\nimport org.apache.commons.codec.binary.Base64;\n\nimport java.security.*;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.crypto.Cipher;\n\n/\n * Created by humf.需要依赖 commons-codec 包\n */\npublic class RSADemo {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tMap<String, Key> keyMap = initKey();\n\t\tString publicKey = getPublicKey(keyMap);\n\t\tString privateKey = getPrivateKey(keyMap);\n\n\t\tSystem.out.println(keyMap);\n\t\tSystem.out.println("-----------------------------------");\n\t\tSystem.out.println(publicKey);\n\t\tSystem.out.println("-----------------------------------");\n\t\tSystem.out.println(privateKey);\n\t\tSystem.out.println("-----------------------------------");\n\t\tbyte[] encryptByPrivateKey = encryptByPrivateKey("123456".getBytes(), privateKey);\n\t\tbyte[] encryptByPublicKey = encryptByPublicKey("123456", publicKey);\n\t\tSystem.out.println(encryptByPrivateKey);\n\t\tSystem.out.println("-----------------------------------");\n\t\tSystem.out.println(encryptByPublicKey);\n\t\tSystem.out.println("-----------------------------------");\n\t\tString sign = sign(encryptByPrivateKey, privateKey);\n\t\tSystem.out.println(sign);\n\t\tSystem.out.println("-----------------------------------");\n\t\tboolean verify = verify(encryptByPrivateKey, publicKey, sign);\n\t\tSystem.out.println(verify);\n\t\tSystem.out.println("-----------------------------------");\n\t\tbyte[] decryptByPublicKey = decryptByPublicKey(encryptByPrivateKey, publicKey);\n\t\tbyte[] decryptByPrivateKey = decryptByPrivateKey(encryptByPublicKey, privateKey);\n\t\tSystem.out.println(decryptByPublicKey);\n\t\tSystem.out.println("-----------------------------------");\n\t\tSystem.out.println(decryptByPrivateKey);\n\n\t}\n\n\tpublic static final String KEY_ALGORITHM = "RSA";\n\tpublic static final String SIGNATURE_ALGORITHM = "MD5withRSA";\n\n\tprivate static final String PUBLIC_KEY = "RSAPublicKey";\n\tprivate static final String PRIVATE_KEY = "RSAPrivateKey";\n\n\tpublic static byte[] decryptBASE64(String key) {\n\t\treturn Base64.decodeBase64(key);\n\t}\n\n\tpublic static String encryptBASE64(byte[] bytes) {\n\t\treturn Base64.encodeBase64String(bytes);\n\t}\n\n\t/\n\t * 用私钥对信息生成数字签名\n\t *\n\t * @param data\n\t *            加密数据\n\t * @param privateKey\n\t *            私钥\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static String sign(byte[] data, String privateKey) throws Exception {\n\t\t// 解密由base64编码的私钥\n\t\tbyte[] keyBytes = decryptBASE64(privateKey);\n\t\t// 构造PKCS8EncodedKeySpec对象\n\t\tPKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);\n\t\t// KEY_ALGORITHM 指定的加密算法\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n\t\t// 取私钥匙对象\n\t\tPrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);\n\t\t// 用私钥对信息生成数字签名\n\t\tSignature signature = Signature.getInstance(SIGNATURE_ALGORITHM);\n\t\tsignature.initSign(priKey);\n\t\tsignature.update(data);\n\t\treturn encryptBASE64(signature.sign());\n\t}\n\n\t/\n\t * 校验数字签名\n\t *\n\t * @param data\n\t *            加密数据\n\t * @param publicKey\n\t *            公钥\n\t * @param sign\n\t *            数字签名\n\t * @return 校验成功返回true 失败返回false\n\t * @throws Exception\n\t */\n\tpublic static boolean verify(byte[] data, String publicKey, String sign) throws Exception {\n\t\t// 解密由base64编码的公钥\n\t\tbyte[] keyBytes = decryptBASE64(publicKey);\n\t\t// 构造X509EncodedKeySpec对象\n\t\tX509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);\n\t\t// KEY_ALGORITHM 指定的加密算法\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n\t\t// 取公钥匙对象\n\t\tPublicKey pubKey = keyFactory.generatePublic(keySpec);\n\t\tSignature signature = Signature.getInstance(SIGNATURE_ALGORITHM);\n\t\tsignature.initVerify(pubKey);\n\t\tsignature.update(data);\n\t\t// 验证签名是否正常\n\t\treturn signature.verify(decryptBASE64(sign));\n\t}\n\n\tpublic static byte[] decryptByPrivateKey(byte[] data, String key) throws Exception {\n\t\t// 对密钥解密\n\t\tbyte[] keyBytes = decryptBASE64(key);\n\t\t// 取得私钥\n\t\tPKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n\t\tKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);\n\t\t// 对数据解密\n\t\tCipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());\n\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\treturn cipher.doFinal(data);\n\t}\n\n\t/\n\t * 解密<br>\n\t * 用私钥解密\n\t *\n\t * @param data\n\t * @param key\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static byte[] decryptByPrivateKey(String data, String key) throws Exception {\n\t\treturn decryptByPrivateKey(decryptBASE64(data), key);\n\t}\n\n\t/\n\t * 解密<br>\n\t * 用公钥解密\n\t *\n\t * @param data\n\t * @param key\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static byte[] decryptByPublicKey(byte[] data, String key) throws Exception {\n\t\t// 对密钥解密\n\t\tbyte[] keyBytes = decryptBASE64(key);\n\t\t// 取得公钥\n\t\tX509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n\t\tKey publicKey = keyFactory.generatePublic(x509KeySpec);\n\t\t// 对数据解密\n\t\tCipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());\n\t\tcipher.init(Cipher.DECRYPT_MODE, publicKey);\n\t\treturn cipher.doFinal(data);\n\t}\n\n\t/\n\t * 加密<br>\n\t * 用公钥加密\n\t *\n\t * @param data\n\t * @param key\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static byte[] encryptByPublicKey(String data, String key) throws Exception {\n\t\t// 对公钥解密\n\t\tbyte[] keyBytes = decryptBASE64(key);\n\t\t// 取得公钥\n\t\tX509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n\t\tKey publicKey = keyFactory.generatePublic(x509KeySpec);\n\t\t// 对数据加密\n\t\tCipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());\n\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\treturn cipher.doFinal(data.getBytes());\n\t}\n\n\t/\n\t * 加密<br>\n\t * 用私钥加密\n\t *\n\t * @param data\n\t * @param key\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static byte[] encryptByPrivateKey(byte[] data, String key) throws Exception {\n\t\t// 对密钥解密\n\t\tbyte[] keyBytes = decryptBASE64(key);\n\t\t// 取得私钥\n\t\tPKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);\n\t\tKey privateKey = keyFactory.generatePrivate(pkcs8KeySpec);\n\t\t// 对数据加密\n\t\tCipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());\n\t\tcipher.init(Cipher.ENCRYPT_MODE, privateKey);\n\t\treturn cipher.doFinal(data);\n\t}\n\n\t/\n\t * 取得私钥\n\t *\n\t * @param keyMap\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static String getPrivateKey(Map<String, Key> keyMap) throws Exception {\n\t\tKey key = (Key) keyMap.get(PRIVATE_KEY);\n\t\treturn encryptBASE64(key.getEncoded());\n\t}\n\n\t/\n\t * 取得公钥\n\t *\n\t * @param keyMap\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static String getPublicKey(Map<String, Key> keyMap) throws Exception {\n\t\tKey key = keyMap.get(PUBLIC_KEY);\n\t\treturn encryptBASE64(key.getEncoded());\n\t}\n\n\t/\n\t * 初始化密钥\n\t *\n\t * @return\n\t * @throws Exception\n\t */\n\tpublic static Map<String, Key> initKey() throws Exception {\n\t\tKeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);\n\t\tkeyPairGen.initialize(1024);\n\t\tKeyPair keyPair = keyPairGen.generateKeyPair();\n\t\tMap<String, Key> keyMap = new HashMap(2);\n\t\tkeyMap.put(PUBLIC_KEY, keyPair.getPublic());// 公钥\n\t\tkeyMap.put(PRIVATE_KEY, keyPair.getPrivate());// 私钥\n\t\treturn keyMap;\n\t}\n\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br"),n("span",{staticClass:"line-number"},[t._v("50")]),n("br"),n("span",{staticClass:"line-number"},[t._v("51")]),n("br"),n("span",{staticClass:"line-number"},[t._v("52")]),n("br"),n("span",{staticClass:"line-number"},[t._v("53")]),n("br"),n("span",{staticClass:"line-number"},[t._v("54")]),n("br"),n("span",{staticClass:"line-number"},[t._v("55")]),n("br"),n("span",{staticClass:"line-number"},[t._v("56")]),n("br"),n("span",{staticClass:"line-number"},[t._v("57")]),n("br"),n("span",{staticClass:"line-number"},[t._v("58")]),n("br"),n("span",{staticClass:"line-number"},[t._v("59")]),n("br"),n("span",{staticClass:"line-number"},[t._v("60")]),n("br"),n("span",{staticClass:"line-number"},[t._v("61")]),n("br"),n("span",{staticClass:"line-number"},[t._v("62")]),n("br"),n("span",{staticClass:"line-number"},[t._v("63")]),n("br"),n("span",{staticClass:"line-number"},[t._v("64")]),n("br"),n("span",{staticClass:"line-number"},[t._v("65")]),n("br"),n("span",{staticClass:"line-number"},[t._v("66")]),n("br"),n("span",{staticClass:"line-number"},[t._v("67")]),n("br"),n("span",{staticClass:"line-number"},[t._v("68")]),n("br"),n("span",{staticClass:"line-number"},[t._v("69")]),n("br"),n("span",{staticClass:"line-number"},[t._v("70")]),n("br"),n("span",{staticClass:"line-number"},[t._v("71")]),n("br"),n("span",{staticClass:"line-number"},[t._v("72")]),n("br"),n("span",{staticClass:"line-number"},[t._v("73")]),n("br"),n("span",{staticClass:"line-number"},[t._v("74")]),n("br"),n("span",{staticClass:"line-number"},[t._v("75")]),n("br"),n("span",{staticClass:"line-number"},[t._v("76")]),n("br"),n("span",{staticClass:"line-number"},[t._v("77")]),n("br"),n("span",{staticClass:"line-number"},[t._v("78")]),n("br"),n("span",{staticClass:"line-number"},[t._v("79")]),n("br"),n("span",{staticClass:"line-number"},[t._v("80")]),n("br"),n("span",{staticClass:"line-number"},[t._v("81")]),n("br"),n("span",{staticClass:"line-number"},[t._v("82")]),n("br"),n("span",{staticClass:"line-number"},[t._v("83")]),n("br"),n("span",{staticClass:"line-number"},[t._v("84")]),n("br"),n("span",{staticClass:"line-number"},[t._v("85")]),n("br"),n("span",{staticClass:"line-number"},[t._v("86")]),n("br"),n("span",{staticClass:"line-number"},[t._v("87")]),n("br"),n("span",{staticClass:"line-number"},[t._v("88")]),n("br"),n("span",{staticClass:"line-number"},[t._v("89")]),n("br"),n("span",{staticClass:"line-number"},[t._v("90")]),n("br"),n("span",{staticClass:"line-number"},[t._v("91")]),n("br"),n("span",{staticClass:"line-number"},[t._v("92")]),n("br"),n("span",{staticClass:"line-number"},[t._v("93")]),n("br"),n("span",{staticClass:"line-number"},[t._v("94")]),n("br"),n("span",{staticClass:"line-number"},[t._v("95")]),n("br"),n("span",{staticClass:"line-number"},[t._v("96")]),n("br"),n("span",{staticClass:"line-number"},[t._v("97")]),n("br"),n("span",{staticClass:"line-number"},[t._v("98")]),n("br"),n("span",{staticClass:"line-number"},[t._v("99")]),n("br"),n("span",{staticClass:"line-number"},[t._v("100")]),n("br"),n("span",{staticClass:"line-number"},[t._v("101")]),n("br"),n("span",{staticClass:"line-number"},[t._v("102")]),n("br"),n("span",{staticClass:"line-number"},[t._v("103")]),n("br"),n("span",{staticClass:"line-number"},[t._v("104")]),n("br"),n("span",{staticClass:"line-number"},[t._v("105")]),n("br"),n("span",{staticClass:"line-number"},[t._v("106")]),n("br"),n("span",{staticClass:"line-number"},[t._v("107")]),n("br"),n("span",{staticClass:"line-number"},[t._v("108")]),n("br"),n("span",{staticClass:"line-number"},[t._v("109")]),n("br"),n("span",{staticClass:"line-number"},[t._v("110")]),n("br"),n("span",{staticClass:"line-number"},[t._v("111")]),n("br"),n("span",{staticClass:"line-number"},[t._v("112")]),n("br"),n("span",{staticClass:"line-number"},[t._v("113")]),n("br"),n("span",{staticClass:"line-number"},[t._v("114")]),n("br"),n("span",{staticClass:"line-number"},[t._v("115")]),n("br"),n("span",{staticClass:"line-number"},[t._v("116")]),n("br"),n("span",{staticClass:"line-number"},[t._v("117")]),n("br"),n("span",{staticClass:"line-number"},[t._v("118")]),n("br"),n("span",{staticClass:"line-number"},[t._v("119")]),n("br"),n("span",{staticClass:"line-number"},[t._v("120")]),n("br"),n("span",{staticClass:"line-number"},[t._v("121")]),n("br"),n("span",{staticClass:"line-number"},[t._v("122")]),n("br"),n("span",{staticClass:"line-number"},[t._v("123")]),n("br"),n("span",{staticClass:"line-number"},[t._v("124")]),n("br"),n("span",{staticClass:"line-number"},[t._v("125")]),n("br"),n("span",{staticClass:"line-number"},[t._v("126")]),n("br"),n("span",{staticClass:"line-number"},[t._v("127")]),n("br"),n("span",{staticClass:"line-number"},[t._v("128")]),n("br"),n("span",{staticClass:"line-number"},[t._v("129")]),n("br"),n("span",{staticClass:"line-number"},[t._v("130")]),n("br"),n("span",{staticClass:"line-number"},[t._v("131")]),n("br"),n("span",{staticClass:"line-number"},[t._v("132")]),n("br"),n("span",{staticClass:"line-number"},[t._v("133")]),n("br"),n("span",{staticClass:"line-number"},[t._v("134")]),n("br"),n("span",{staticClass:"line-number"},[t._v("135")]),n("br"),n("span",{staticClass:"line-number"},[t._v("136")]),n("br"),n("span",{staticClass:"line-number"},[t._v("137")]),n("br"),n("span",{staticClass:"line-number"},[t._v("138")]),n("br"),n("span",{staticClass:"line-number"},[t._v("139")]),n("br"),n("span",{staticClass:"line-number"},[t._v("140")]),n("br"),n("span",{staticClass:"line-number"},[t._v("141")]),n("br"),n("span",{staticClass:"line-number"},[t._v("142")]),n("br"),n("span",{staticClass:"line-number"},[t._v("143")]),n("br"),n("span",{staticClass:"line-number"},[t._v("144")]),n("br"),n("span",{staticClass:"line-number"},[t._v("145")]),n("br"),n("span",{staticClass:"line-number"},[t._v("146")]),n("br"),n("span",{staticClass:"line-number"},[t._v("147")]),n("br"),n("span",{staticClass:"line-number"},[t._v("148")]),n("br"),n("span",{staticClass:"line-number"},[t._v("149")]),n("br"),n("span",{staticClass:"line-number"},[t._v("150")]),n("br"),n("span",{staticClass:"line-number"},[t._v("151")]),n("br"),n("span",{staticClass:"line-number"},[t._v("152")]),n("br"),n("span",{staticClass:"line-number"},[t._v("153")]),n("br"),n("span",{staticClass:"line-number"},[t._v("154")]),n("br"),n("span",{staticClass:"line-number"},[t._v("155")]),n("br"),n("span",{staticClass:"line-number"},[t._v("156")]),n("br"),n("span",{staticClass:"line-number"},[t._v("157")]),n("br"),n("span",{staticClass:"line-number"},[t._v("158")]),n("br"),n("span",{staticClass:"line-number"},[t._v("159")]),n("br"),n("span",{staticClass:"line-number"},[t._v("160")]),n("br"),n("span",{staticClass:"line-number"},[t._v("161")]),n("br"),n("span",{staticClass:"line-number"},[t._v("162")]),n("br"),n("span",{staticClass:"line-number"},[t._v("163")]),n("br"),n("span",{staticClass:"line-number"},[t._v("164")]),n("br"),n("span",{staticClass:"line-number"},[t._v("165")]),n("br"),n("span",{staticClass:"line-number"},[t._v("166")]),n("br"),n("span",{staticClass:"line-number"},[t._v("167")]),n("br"),n("span",{staticClass:"line-number"},[t._v("168")]),n("br"),n("span",{staticClass:"line-number"},[t._v("169")]),n("br"),n("span",{staticClass:"line-number"},[t._v("170")]),n("br"),n("span",{staticClass:"line-number"},[t._v("171")]),n("br"),n("span",{staticClass:"line-number"},[t._v("172")]),n("br"),n("span",{staticClass:"line-number"},[t._v("173")]),n("br"),n("span",{staticClass:"line-number"},[t._v("174")]),n("br"),n("span",{staticClass:"line-number"},[t._v("175")]),n("br"),n("span",{staticClass:"line-number"},[t._v("176")]),n("br"),n("span",{staticClass:"line-number"},[t._v("177")]),n("br"),n("span",{staticClass:"line-number"},[t._v("178")]),n("br"),n("span",{staticClass:"line-number"},[t._v("179")]),n("br"),n("span",{staticClass:"line-number"},[t._v("180")]),n("br"),n("span",{staticClass:"line-number"},[t._v("181")]),n("br"),n("span",{staticClass:"line-number"},[t._v("182")]),n("br"),n("span",{staticClass:"line-number"},[t._v("183")]),n("br"),n("span",{staticClass:"line-number"},[t._v("184")]),n("br"),n("span",{staticClass:"line-number"},[t._v("185")]),n("br"),n("span",{staticClass:"line-number"},[t._v("186")]),n("br"),n("span",{staticClass:"line-number"},[t._v("187")]),n("br"),n("span",{staticClass:"line-number"},[t._v("188")]),n("br"),n("span",{staticClass:"line-number"},[t._v("189")]),n("br"),n("span",{staticClass:"line-number"},[t._v("190")]),n("br"),n("span",{staticClass:"line-number"},[t._v("191")]),n("br"),n("span",{staticClass:"line-number"},[t._v("192")]),n("br"),n("span",{staticClass:"line-number"},[t._v("193")]),n("br"),n("span",{staticClass:"line-number"},[t._v("194")]),n("br"),n("span",{staticClass:"line-number"},[t._v("195")]),n("br"),n("span",{staticClass:"line-number"},[t._v("196")]),n("br"),n("span",{staticClass:"line-number"},[t._v("197")]),n("br"),n("span",{staticClass:"line-number"},[t._v("198")]),n("br"),n("span",{staticClass:"line-number"},[t._v("199")]),n("br"),n("span",{staticClass:"line-number"},[t._v("200")]),n("br"),n("span",{staticClass:"line-number"},[t._v("201")]),n("br"),n("span",{staticClass:"line-number"},[t._v("202")]),n("br"),n("span",{staticClass:"line-number"},[t._v("203")]),n("br"),n("span",{staticClass:"line-number"},[t._v("204")]),n("br"),n("span",{staticClass:"line-number"},[t._v("205")]),n("br"),n("span",{staticClass:"line-number"},[t._v("206")]),n("br"),n("span",{staticClass:"line-number"},[t._v("207")]),n("br"),n("span",{staticClass:"line-number"},[t._v("208")]),n("br"),n("span",{staticClass:"line-number"},[t._v("209")]),n("br"),n("span",{staticClass:"line-number"},[t._v("210")]),n("br"),n("span",{staticClass:"line-number"},[t._v("211")]),n("br"),n("span",{staticClass:"line-number"},[t._v("212")]),n("br"),n("span",{staticClass:"line-number"},[t._v("213")]),n("br"),n("span",{staticClass:"line-number"},[t._v("214")]),n("br"),n("span",{staticClass:"line-number"},[t._v("215")]),n("br"),n("span",{staticClass:"line-number"},[t._v("216")]),n("br"),n("span",{staticClass:"line-number"},[t._v("217")]),n("br"),n("span",{staticClass:"line-number"},[t._v("218")]),n("br"),n("span",{staticClass:"line-number"},[t._v("219")]),n("br"),n("span",{staticClass:"line-number"},[t._v("220")]),n("br"),n("span",{staticClass:"line-number"},[t._v("221")]),n("br"),n("span",{staticClass:"line-number"},[t._v("222")]),n("br"),n("span",{staticClass:"line-number"},[t._v("223")]),n("br"),n("span",{staticClass:"line-number"},[t._v("224")]),n("br"),n("span",{staticClass:"line-number"},[t._v("225")]),n("br"),n("span",{staticClass:"line-number"},[t._v("226")]),n("br"),n("span",{staticClass:"line-number"},[t._v("227")]),n("br"),n("span",{staticClass:"line-number"},[t._v("228")]),n("br"),n("span",{staticClass:"line-number"},[t._v("229")]),n("br"),n("span",{staticClass:"line-number"},[t._v("230")]),n("br"),n("span",{staticClass:"line-number"},[t._v("231")]),n("br"),n("span",{staticClass:"line-number"},[t._v("232")]),n("br"),n("span",{staticClass:"line-number"},[t._v("233")]),n("br"),n("span",{staticClass:"line-number"},[t._v("234")]),n("br"),n("span",{staticClass:"line-number"},[t._v("235")]),n("br"),n("span",{staticClass:"line-number"},[t._v("236")]),n("br"),n("span",{staticClass:"line-number"},[t._v("237")]),n("br"),n("span",{staticClass:"line-number"},[t._v("238")]),n("br"),n("span",{staticClass:"line-number"},[t._v("239")]),n("br"),n("span",{staticClass:"line-number"},[t._v("240")]),n("br"),n("span",{staticClass:"line-number"},[t._v("241")]),n("br"),n("span",{staticClass:"line-number"},[t._v("242")]),n("br"),n("span",{staticClass:"line-number"},[t._v("243")]),n("br"),n("span",{staticClass:"line-number"},[t._v("244")]),n("br"),n("span",{staticClass:"line-number"},[t._v("245")]),n("br"),n("span",{staticClass:"line-number"},[t._v("246")]),n("br"),n("span",{staticClass:"line-number"},[t._v("247")]),n("br"),n("span",{staticClass:"line-number"},[t._v("248")]),n("br"),n("span",{staticClass:"line-number"},[t._v("249")]),n("br")])]),n("p",[t._v("结果:")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{RSAPublicKey=Sun RSA public key, 1024 bits\n  modulus: 115328826086047873902606456571034976538836553998745367981848911677968062571831626674499650854318207280419960767020601253071739555161388135589487284843845439403614883967713749605268831336418001722701924537624573180276356615050309809260289965219855862692230362893996010057188170525719351126759886050891484226169\n  public exponent: 65537, RSAPrivateKey=sun.security.rsa.RSAPrivateCrtKeyImpl@93479}\n-----------------------------------\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCkO9PBTOFJQTkzznALN62PU7ixd9YFjXrt2dPOGj3wwhymbOU8HLoCztjwpLXHgbpBUJlGmbURV955M1BkZ1kr5dkZYR5x1gO4xOnu8rEipy4AAMcpFttfiarIZrtzL9pKEvEOxABltVN4yzFDr3IjBqY46aHna7YjwhXI0xHieQIDAQAB\n-----------------------------------\nMIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAKQ708FM4UlBOTPOcAs3rY9TuLF31gWNeu3Z084aPfDCHKZs5TwcugLO2PCktceBukFQmUaZtRFX3nkzUGRnWSvl2RlhHnHWA7jE6e7ysSKnLgAAxykW21+Jqshmu3Mv2koS8Q7EAGW1U3jLMUOvciMGpjjpoedrtiPCFcjTEeJ5AgMBAAECgYAK4sxOa8IjEOexv2U92Rrv/SSo3sCY7Z/QVDft2V9xrewoO9+V9HF/7iYDDWffKYInAiimvVl7JM/iSLxza0ZFv29VMpyDcr4TigYmWwBlk7ZbxSTkqLdNwxxldMmEoTn1py53MUm+1V1K3rzNvJjuZaZFAevU7vUnwQwD+JGQYQJBAM9HBaC+dF3PJ2mkXekHpDS1ZPaSFdrdzd/GvHFi/cJAMM+Uz6PmpkosNXRtOpSYWwlOMRamLZtrHhfQoqSk3S8CQQDK1qL1jGvVdqw5OjqxktR7MmOsWUVZdWiBN+6ojxBgA0yVn0n7vkdAAgEZBj89WG0VHPEu3hd4AgXFZHDfXeDXAkBvSn7nE9t/Et7ihfI2UHgGJO8UxNMfNMB5Skebyb7eMYEDs67ZHdpjMOFypcMyTatzj5wjwQ3zyMvblZX+ONbZAkAX4ysRy9WvL+icXLUo0Gfhkk+WrnSyUldaUGH0y9Rb2kecn0OxN/lgGlxSvB+ac910zRHCOTl+Uo6nbmq0g3PFAkAyqA4eT7G9GXfncakgW1Kdkn72w/ODpozgfhTLNX0SGw1ITML3c4THTtH5h3zLi3AF9zJO2O+K6ajRbV0szHHI\n-----------------------------------\n[B@387c703b\n-----------------------------------\n[B@224aed64\n-----------------------------------\nla4Hc4n/UbeBu0z9iLRuwKVv014SiOJMXkO5qdJvKBsw0MlnsrM+89a3p73yMrb1dAnCU/2kgO0PtFpvmG8pzxTe1u/5nX/25iIyUXALlwVRptJyjzFE83g2IX0XEv/Dxqr1RCRcrMHOLQM0oBoxZCaChmyw1Ub4wsSs6Ndxb9M=\n-----------------------------------\ntrue\n-----------------------------------\n[B@c39f790\n-----------------------------------\n[B@71e7a66b\n\n```)")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);