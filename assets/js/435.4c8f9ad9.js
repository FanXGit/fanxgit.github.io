(window.webpackJsonp=window.webpackJsonp||[]).push([[435],{1458:function(a,s,t){a.exports=t.p+"assets/img/alg-sort-fast-1.be27957a.jpg"},3773:function(a,s,t){"use strict";t.r(s);var n=t(7),r=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"排序-快速排序-quick-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序-快速排序-quick-sort"}},[a._v("#")]),a._v(" 排序 - 快速排序(Quick Sort)")]),a._v(" "),s("p",[a._v("==============================================")]),a._v(" "),s("blockquote",[s("p",[a._v("快速排序(Quick Sort)使用分治法算法思想。@pdai")])]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-fast.html#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[a._v("快速排序介绍"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-fast.html#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[a._v("快速排序实现"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-fast.html#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[a._v("快速排序时间复杂度和稳定性"),s("OutboundLink")],1),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-fast.html#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[a._v("快速排序稳定性"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-fast.html#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[a._v("快速排序时间复杂度"),s("OutboundLink")],1)])])]),a._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-fast.html#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[a._v("代码实现"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-fast.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考文章"),s("OutboundLink")],1)])]),a._v(" "),s("h1",{attrs:{id:"快速排序介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序介绍"}},[a._v("#")]),a._v(" 快速排序介绍")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("它的基本思想是: 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。")]),a._v(" "),s("h1",{attrs:{id:"快速排序实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序实现"}},[a._v("#")]),a._v(" 快速排序实现")]),a._v(" "),s("hr"),a._v(" "),s("ul",[s("li",[a._v("从数列中挑出一个基准值。")]),a._v(" "),s("li",[a._v("将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。")]),a._v(" "),s("li",[a._v('递归地把"基准值前面的子数列"和"基准值后面的子数列"进行排序。')])]),a._v(" "),s("p",[a._v("下面以数列a={30,40,60,10,20,50}为例，演示它的快速排序过程(如下图)。")]),a._v(" "),s("p",[s("img",{attrs:{src:t(1458),alt:""}})]),a._v(" "),s("p",[a._v("上图只是给出了第1趟快速排序的流程。在第1趟中，设置x=a[i]，即x=30。")]),a._v(" "),s("ul",[s("li",[a._v('从"右 --\x3e 左"查找小于x的数: 找到满足条件的数a[j]=20，此时j=4；然后将a[j]赋值a[i]，此时i=0；接着从左往右遍历。')]),a._v(" "),s("li",[a._v('从"左 --\x3e 右"查找大于x的数: 找到满足条件的数a[i]=40，此时i=1；然后将a[i]赋值a[j]，此时j=4；接着从右往左遍历。')]),a._v(" "),s("li",[a._v('从"右 --\x3e 左"查找小于x的数: 找到满足条件的数a[j]=10，此时j=3；然后将a[j]赋值a[i]，此时i=1；接着从左往右遍历。')]),a._v(" "),s("li",[a._v('从"左 --\x3e 右"查找大于x的数: 找到满足条件的数a[i]=60，此时i=2；然后将a[i]赋值a[j]，此时j=3；接着从右往左遍历。')]),a._v(" "),s("li",[a._v('从"右 --\x3e 左"查找小于x的数: 没有找到满足条件的数。当i>=j时，停止查找；然后将x赋值给a[i]。此趟遍历结束！')])]),a._v(" "),s("p",[a._v("按照同样的方法，对子数列进行递归遍历。最后得到有序数组！")]),a._v(" "),s("h1",{attrs:{id:"快速排序时间复杂度和稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序时间复杂度和稳定性"}},[a._v("#")]),a._v(" 快速排序时间复杂度和稳定性")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"快速排序稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序稳定性"}},[a._v("#")]),a._v(" 快速排序稳定性")]),a._v(" "),s("p",[a._v("快速排序是不稳定的算法，它不满足稳定算法的定义。")]),a._v(" "),s("p",[s("code",[a._v("算法稳定性")]),a._v(" -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！")]),a._v(" "),s("h3",{attrs:{id:"快速排序时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序时间复杂度"}},[a._v("#")]),a._v(" 快速排序时间复杂度")]),a._v(" "),s("blockquote",[s("p",[a._v("快速排序的时间复杂度在最坏情况下是O(N2)，平均的时间复杂度是O(N*lgN)。")])]),a._v(" "),s("p",[a._v("这句话很好理解: 假设被排序的数列中有N个数。遍历一次的时间复杂度是O(N)，需要遍历多少次呢? 至少lg(N+1)次，最多N次。")]),a._v(" "),s("ul",[s("li",[a._v("为什么最少是lg(N+1)次? 快速排序是采用的分治法进行遍历的，我们将它看作一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的定义，它的深度至少是lg(N+1)。因此，快速排序的遍历次数最少是lg(N+1)次。")]),a._v(" "),s("li",[a._v("为什么最多是N次? 这个应该非常简单，还是将快速排序看作一棵二叉树，它的深度最大是N。因此，快读排序的遍历次数最多是N次。")])]),a._v(" "),s("h1",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[a._v("#")]),a._v(" 代码实现")]),a._v(" "),s("hr"),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/**\n * 快速排序: Java\n *\n * @author skywang\n * @date 2014/03/11\n */\n\npublic class QuickSort {\n\n    /*\n     * 快速排序\n     *\n     * 参数说明: \n     *     a -- 待排序的数组\n     *     l -- 数组的左边界(例如，从起始位置开始排序，则l=0)\n     *     r -- 数组的右边界(例如，排序截至到数组末尾，则r=a.length-1)\n     */\n    public static void quickSort(int[] a, int l, int r) {\n\n        if (l < r) {\n            int i,j,x;\n\n            i = l;\n            j = r;\n            x = a[i];\n            while (i < j) {\n                while(i < j && a[j] > x)\n                    j--; // 从右向左找第一个小于x的数\n                if(i < j)\n                    a[i++] = a[j];\n                while(i < j && a[i] < x)\n                    i++; // 从左向右找第一个大于x的数\n                if(i < j)\n                    a[j--] = a[i];\n            }\n            a[i] = x;\n            quickSort(a, l, i-1); /* 递归调用 */\n            quickSort(a, i+1, r); /* 递归调用 */\n        }\n    }\n\n    public static void main(String[] args) {\n        int i;\n        int a[] = {30,40,60,10,20,50};\n\n        System.out.printf("before sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n\n        quickSort(a, 0, a.length-1);\n\n        System.out.printf("after  sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br"),s("span",{staticClass:"line-number"},[a._v("58")]),s("br")])]),s("h1",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("提示")]),a._v(" "),s("p",[a._v("本文主要参考至 https://www.cnblogs.com/skywang12345/p/3596746.html, 在此基础上做了内容的增改。)")])])}),[],!1,null,null,null);s.default=r.exports}}]);