(window.webpackJsonp=window.webpackJsonp||[]).push([[513],{3595:function(a,e,t){"use strict";t.r(e);var r=t(7),s=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"调试排错-java-内存分析之堆内存和metaspace内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试排错-java-内存分析之堆内存和metaspace内存"}},[a._v("#")]),a._v(" 调试排错 - Java 内存分析之堆内存和MetaSpace内存")]),a._v(" "),e("p",[a._v("=====================================================================")]),a._v(" "),e("blockquote",[e("p",[a._v("本文以两个简单的例子("),e("code",[a._v("堆内存溢出")]),a._v("和"),e("code",[a._v("MetaSpace (元数据) 内存溢出")]),a._v("）解释Java 内存溢出的分析过程。@pdai")])]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99---java-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8Cmetaspace%E5%86%85%E5%AD%98"}},[a._v("调试排错 - Java 内存分析之堆内存和MetaSpace内存")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E5%86%85%E5%AD%98%E5%92%8Cmetaspace%E5%86%85%E5%AD%98"}},[a._v("常见的内存溢出问题(内存和MetaSpace内存)")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#java-%E5%A0%86%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA"}},[a._v("Java 堆内存溢出")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#outofmemoryerror-java-heap-space"}},[a._v("OutOfMemoryError: Java heap space")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#outofmemoryerror-gc-overhead-limit-exceeded"}},[a._v("OutOfMemoryError: GC overhead limit exceeded")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#metaspace-%E5%85%83%E6%95%B0%E6%8D%AE-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA"}},[a._v("MetaSpace (元数据) 内存溢出")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B"}},[a._v("分析案例")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%A0%86%E5%86%85%E5%AD%98dump"}},[a._v("堆内存dump")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8mat%E5%88%86%E6%9E%90%E5%86%85%E5%AD%98"}},[a._v("使用MAT分析内存")])])])])])])]),a._v(" "),e("h1",{attrs:{id:"常见的内存溢出问题-内存和metaspace内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的内存溢出问题-内存和metaspace内存"}},[a._v("#")]),a._v(" 常见的内存溢出问题(内存和MetaSpace内存)")]),a._v(" "),e("hr"),a._v(" "),e("blockquote",[e("p",[a._v("常见的内存溢出问题(内存和MetaSpace内存)。")])]),a._v(" "),e("h3",{attrs:{id:"java-堆内存溢出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-堆内存溢出"}},[a._v("#")]),a._v(" Java 堆内存溢出")]),a._v(" "),e("p",[a._v("Java 堆内存（Heap Memory)主要有两种形式的错误：")]),a._v(" "),e("ol",[e("li",[a._v("OutOfMemoryError: Java heap space")]),a._v(" "),e("li",[a._v("OutOfMemoryError: GC overhead limit exceeded")])]),a._v(" "),e("h4",{attrs:{id:"outofmemoryerror-java-heap-space"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror-java-heap-space"}},[a._v("#")]),a._v(" OutOfMemoryError: Java heap space")]),a._v(" "),e("p",[a._v("在 Java 堆中只要不断的创建对象，并且 "),e("code",[a._v("GC-Roots")]),a._v(" 到对象之间存在引用链，这样 "),e("code",[a._v("JVM")]),a._v(" 就不会回收对象。")]),a._v(" "),e("p",[a._v("只要将"),e("code",[a._v("-Xms(最小堆)")]),a._v(","),e("code",[a._v("-Xmx(最大堆)")]),a._v(" 设置为一样禁止自动扩展堆内存。")]),a._v(" "),e("p",[a._v("当使用一个 "),e("code",[a._v("while(true)")]),a._v(" 循环来不断创建对象就会发生 "),e("code",[a._v("OutOfMemory")]),a._v("，还可以使用 "),e("code",[a._v("-XX:+HeapDumpOutofMemoryErorr")]),a._v(" 当发生 OOM 时会自动 dump 堆栈到文件中。")]),a._v(" "),e("p",[a._v("伪代码:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('public static void main(String[] args) {\n\tList<String> list = new ArrayList<>(10) ;\n\twhile (true){\n\t\tlist.add("1") ;\n\t}\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("当出现 OOM 时可以通过工具来分析 "),e("code",[a._v("GC-Roots")]),a._v(" "),e("a",{attrs:{href:"https://github.com/crossoverJie/Java-Interview/blob/master/MD/GarbageCollection.md#%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[a._v("引用链 在新窗口打开"),e("OutboundLink")],1),a._v(" ，查看对象和 "),e("code",[a._v("GC-Roots")]),a._v(" 是如何进行关联的，是否存在对象的生命周期过长，或者是这些对象确实改存在的，那就要考虑将堆内存调大了。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('Exception in thread "main" java.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOf(Arrays.java:3210)\n\tat java.util.Arrays.copyOf(Arrays.java:3181)\n\tat java.util.ArrayList.grow(ArrayList.java:261)\n\tat java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)\n\tat java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)\n\tat java.util.ArrayList.add(ArrayList.java:458)\n\tat com.crossoverjie.oom.HeapOOM.main(HeapOOM.java:18)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\n\nProcess finished with exit code 1\n\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br")])]),e("p",[e("code",[a._v("java.lang.OutOfMemoryError: Java heap space")]),a._v("表示堆内存溢出。")]),a._v(" "),e("h4",{attrs:{id:"outofmemoryerror-gc-overhead-limit-exceeded"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#outofmemoryerror-gc-overhead-limit-exceeded"}},[a._v("#")]),a._v(" OutOfMemoryError: GC overhead limit exceeded")]),a._v(" "),e("p",[a._v("GC overhead limt exceed检查是Hotspot VM 1.6定义的一个策略，通过统计GC时间来预测是否要OOM了，提前抛出异常，防止OOM发生。Sun 官方对此的定义是：“并行/并发回收器在GC回收时间过长时会抛出OutOfMemroyError。过长的定义是，超过98%的时间用来做GC并且回收了不到2%的堆内存。用来避免内存过小造成应用不能正常工作。“")]),a._v(" "),e("p",[a._v("PS：-Xmx最大内存配置2GB")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public void testOom1() {\n\tList<Map<String, Object>> mapList = new ArrayList<>();\n\tfor (int i = 0; i < 1000000; i++) {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tmap.put(String.valueOf(j), j);\n\t\t}\n\t\tmapList.add(map);\n\t}\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br")])]),e("p",[a._v("上述的代码执行会：old区占用过多导致频繁Full GC，最终导致GC overhead limit exceed。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("java.lang.OutOfMemoryError: GC overhead limit exceeded\n\tat java.util.HashMap.newNode(HashMap.java:1747) ~[na:1.8.0_181]\n\tat java.util.HashMap.putVal(HashMap.java:642) ~[na:1.8.0_181]\n\tat java.util.HashMap.put(HashMap.java:612) ~[na:1.8.0_181]\n\tat tech.pdai.test.oom.controller.TestOomController.testOom1(TestOomController.java:33) ~[classes/:na]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197) ~[spring-web-5.3.9.jar:5.3.9]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141) ~[spring-web-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1064) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:655) ~[tomcat-embed-core-9.0.50.jar:4.0.FR]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.3.9.jar:5.3.9]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:764) ~[tomcat-embed-core-9.0.50.jar:4.0.FR]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:228) ~[tomcat-embed-core-9.0.50.jar:9.0.50]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163) ~[tomcat-embed-core-9.0.50.jar:9.0.50]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.50.jar:9.0.50]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:190) ~[tomcat-embed-core-9.0.50.jar:9.0.50]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163) ~[tomcat-embed-core-9.0.50.jar:9.0.50]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.3.9.jar:5.3.9]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.9.jar:5.3.9]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:190) ~[tomcat-embed-core-9.0.50.jar:9.0.50]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163) ~[tomcat-embed-core-9.0.50.jar:9.0.50]\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.3.9.jar:5.3.9]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.3.9.jar:5.3.9]\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br")])]),e("p",[a._v("还可以使用 "),e("code",[a._v("-XX:+HeapDumpOutofMemoryErorr")]),a._v(" 当发生 OOM 时会自动 dump 堆栈到文件中。")]),a._v(" "),e("p",[a._v("JVM还有这样一个参数："),e("code",[a._v("-XX:-UseGCOverheadLimit")]),a._v(" 设置为false可以禁用这个检查。其实这个参数解决不了内存问题，只是把错误的信息延后，替换成 java.lang.OutOfMemoryError: Java heap space。")]),a._v(" "),e("h3",{attrs:{id:"metaspace-元数据-内存溢出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#metaspace-元数据-内存溢出"}},[a._v("#")]),a._v(" MetaSpace (元数据) 内存溢出")]),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("JDK8")]),a._v(" 中将永久代移除，使用 "),e("code",[a._v("MetaSpace")]),a._v(" 来保存类加载之后的类信息，字符串常量池也被移动到 Java 堆。")])]),a._v(" "),e("p",[e("code",[a._v("PermSize")]),a._v(" 和 "),e("code",[a._v("MaxPermSize")]),a._v(" 已经不能使用了，在 JDK8 中配置这两个参数将会发出警告。")]),a._v(" "),e("p",[a._v("JDK 8 中将类信息移到到了本地堆内存(Native Heap)中，将原有的永久代移动到了本地堆中成为 "),e("code",[a._v("MetaSpace")]),a._v(" ,如果不指定该区域的大小，JVM 将会动态的调整。")]),a._v(" "),e("p",[a._v("可以使用 "),e("code",[a._v("-XX:MaxMetaspaceSize=10M")]),a._v(" 来限制最大元数据。这样当不停的创建类时将会占满该区域并出现 "),e("code",[a._v("OOM")]),a._v("。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public static void main(String[] args) {\n\twhile (true){\n\t\tEnhancer  enhancer = new Enhancer() ;\n\t\tenhancer.setSuperclass(HeapOOM.class);\n\t\tenhancer.setUseCache(false) ;\n\t\tenhancer.setCallback(new MethodInterceptor() {\n\t\t\t@Override\n\t\t\tpublic Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n\t\t\t\treturn methodProxy.invoke(o,objects) ;\n\t\t\t}\n\t\t});\n\t\tenhancer.create() ;\n\n\t}\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])]),e("p",[a._v("使用 "),e("code",[a._v("cglib")]),a._v(" 不停的创建新类，最终会抛出:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Caused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:459)\n\tat net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:336)\n\t... 11 more\nCaused by: java.lang.OutOfMemoryError: Metaspace\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\n\t... 16 more\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("注意: 这里的 OOM 伴随的是 "),e("code",[a._v("java.lang.OutOfMemoryError: Metaspace")]),a._v(" 也就是元数据溢出。")]),a._v(" "),e("h1",{attrs:{id:"分析案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分析案例"}},[a._v("#")]),a._v(" 分析案例")]),a._v(" "),e("hr"),a._v(" "),e("blockquote",[e("p",[a._v("在实际工作中，如何去定位内存泄漏问题呢？")])]),a._v(" "),e("h3",{attrs:{id:"堆内存dump"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆内存dump"}},[a._v("#")]),a._v(" 堆内存dump")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("通过OOM获取")])])]),a._v(" "),e("p",[a._v("即在OutOfMemoryError后获取一份HPROF二进制Heap Dump文件，在jvm中添加参数：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-XX:+HeapDumpOnOutOfMemoryError\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[a._v("主动获取")])])]),a._v(" "),e("p",[a._v("在虚拟机添加参数如下，然后在Ctrl+Break组合键即可获取一份Heap Dump")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-XX:+HeapDumpOnCtrlBreak\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[a._v("使用HPROF agent")])])]),a._v(" "),e("p",[a._v("使用Agent可以在程序执行结束时或受到SIGOUT信号时生成Dump文件")]),a._v(" "),e("p",[a._v("配置在虚拟机的参数如下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-agentlib:hprof=heap=dump,format=b\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[a._v("jmap获取")]),a._v(" (常用)")])]),a._v(" "),e("p",[a._v("jmap可以在cmd里执行，命令如下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("jmap -dump:format=b file=<文件名XX.hprof> <pid>\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[a._v("使用JConsole")])])]),a._v(" "),e("p",[a._v("Acquire Heap Dump")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("使用JProfile")])])]),a._v(" "),e("p",[a._v("Acquire Heap Dump")]),a._v(" "),e("h3",{attrs:{id:"使用mat分析内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用mat分析内存"}},[a._v("#")]),a._v(" 使用MAT分析内存")]),a._v(" "),e("p",[a._v("MAT 等工具可以看："),e("a",{attrs:{href:"https://pdai.tech/md/java/jvm/java-jvm-oom-tool.html#eclipse-memory-analyzer-mat",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java 问题排查之JVM可视化工具 - MAT"),e("OutboundLink")],1),a._v(")")])])}),[],!1,null,null,null);e.default=s.exports}}]);