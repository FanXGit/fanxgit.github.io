(window.webpackJsonp=window.webpackJsonp||[]).push([[695],{4142:function(e,s,t){"use strict";t.r(s);var a=t(7),n=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"linux-ab压力测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-ab压力测试"}},[e._v("#")]),e._v(" Linux - ab压力测试")]),e._v(" "),s("p",[e._v("=================================")]),e._v(" "),s("blockquote",[s("p",[e._v("ab是apachebench命令的缩写, apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#linux---ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95"}},[e._v("Linux - ab压力测试")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#ab%E7%9A%84%E7%AE%80%E4%BB%8B"}},[e._v("ab的简介")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#ab%E7%9A%84%E5%8E%9F%E7%90%86"}},[e._v("ab的原理")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#ab%E7%9A%84%E5%AE%89%E8%A3%85"}},[e._v("ab的安装")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#ab%E7%9A%84%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E"}},[e._v("ab的参数说明")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87"}},[e._v("性能指标")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%90%9E%E5%90%90%E9%87%8Frequests-per-second"}},[e._v("吞吐量（Requests per second）")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%B9%B6%E5%8F%91%E8%BF%9E%E6%8E%A5%E6%95%B0the-number-of-concurrent-connections"}},[e._v("并发连接数（The number of concurrent connections）")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%B9%B6%E5%8F%91%E7%94%A8%E6%88%B7%E6%95%B0concurrency-level"}},[e._v("并发用户数（Concurrency Level）")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%94%A8%E6%88%B7%E5%B9%B3%E5%9D%87%E8%AF%B7%E6%B1%82%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4time-per-request"}},[e._v("用户平均请求等待时间（Time per request）")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B3%E5%9D%87%E8%AF%B7%E6%B1%82%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4time-per-requestacross-all-concurrent-requests"}},[e._v("服务器平均请求等待时间（Time per request:across all concurrent requests）")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#ab%E7%9A%84%E5%BA%94%E7%94%A8"}},[e._v("ab的应用")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%96%87%E7%AB%A0%E6%9D%A5%E6%BA%90"}},[e._v("文章来源")])])])])]),e._v(" "),s("h1",{attrs:{id:"ab的简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ab的简介"}},[e._v("#")]),e._v(" ab的简介")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("ab是apachebench命令的缩写。")]),e._v(" "),s("p",[e._v("ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等")]),e._v(" "),s("h1",{attrs:{id:"ab的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ab的原理"}},[e._v("#")]),e._v(" ab的原理")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("ab的原理：ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，它既可以用来测试apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。")]),e._v(" "),s("p",[e._v("ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机。")]),e._v(" "),s("h1",{attrs:{id:"ab的安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ab的安装"}},[e._v("#")]),e._v(" ab的安装")]),e._v(" "),s("hr"),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("yum -y install httpd-tools\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("测试安装是否成功：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@vic html]# ab -V\nThis is ApacheBench, Version 2.3 <$Revision: 655654 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"ab的参数说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ab的参数说明"}},[e._v("#")]),e._v(" ab的参数说明")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@vic html]# ab --help\nab: wrong number of arguments\nUsage: ab [options] [http[s]://]hostname[:port]/path\nOptions are:\n    -n requests     Number of requests to perform\n    -c concurrency  Number of multiple requests to make\n    -t timelimit    Seconds to max. wait for responses\n    -b windowsize   Size of TCP send/receive buffer, in bytes\n    -p postfile     File containing data to POST. Remember also to set -T\n    -u putfile      File containing data to PUT. Remember also to set -T\n    -T content-type Content-type header for POSTing, eg.\n                    'application/x-www-form-urlencoded'\n                    Default is 'text/plain'\n    -v verbosity    How much troubleshooting info to print\n    -w              Print out results in HTML tables\n    -i              Use HEAD instead of GET\n    -x attributes   String to insert as table attributes\n    -y attributes   String to insert as tr attributes\n    -z attributes   String to insert as td or th attributes\n    -C attribute    Add cookie, eg. 'Apache=1234. (repeatable)\n    -H attribute    Add Arbitrary header line, eg. 'Accept-Encoding: gzip'\n                    Inserted after all normal header lines. (repeatable)\n    -A attribute    Add Basic WWW Authentication, the attributes\n                    are a colon separated username and password.\n    -P attribute    Add Basic Proxy Authentication, the attributes\n                    are a colon separated username and password.\n    -X proxy:port   Proxyserver and port number to use\n    -V              Print version number and exit\n    -k              Use HTTP KeepAlive feature\n    -d              Do not show percentiles served table.\n    -S              Do not show confidence estimators and warnings.\n    -g filename     Output collected data to gnuplot format file.\n    -e filename     Output CSV file with percentages served\n    -r              Don't exit on socket receive errors.\n    -h              Display usage information (this message)\n    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)\n    -f protocol     Specify SSL/TLS protocol (SSL2, SSL3, TLS1, or ALL)\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br")])]),s("p",[e._v("详情说明：")]),e._v(" "),s("p",[e._v("-n在测试会话中所执行的请求个数。默认时，仅执行一个请求。请求的总数量")]),e._v(" "),s("p",[e._v("-c一次产生的请求个数。默认是一次一个。请求的用户量")]),e._v(" "),s("p",[e._v("-t测试所进行的最大秒数。其内部隐含值是-n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。")]),e._v(" "),s("p",[e._v("-V显示版本号并退出。")]),e._v(" "),s("h1",{attrs:{id:"性能指标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能指标"}},[e._v("#")]),e._v(" 性能指标")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"吞吐量-requests-per-second"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量-requests-per-second"}},[e._v("#")]),e._v(" 吞吐量（Requests per second）")]),e._v(" "),s("p",[e._v("服务器并发处理能力的量化描述，单位是reqs/s，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。 记住：吞吐率是基于并发用户数的。这句话代表了两个含义：")]),e._v(" "),s("ul",[s("li",[e._v("吞吐率和并发用户数相关")]),e._v(" "),s("li",[e._v("不同的并发用户数下，吞吐率一般是不同的")])]),e._v(" "),s("p",[e._v("计算公式：总请求数/处理完成这些请求数所花费的时间，即")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Request per second=Complete requests/Time taken for tests\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("必须要说明的是，这个数值表示当前机器的整体性能，值越大越好。")]),e._v(" "),s("h3",{attrs:{id:"并发连接数-the-number-of-concurrent-connections"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发连接数-the-number-of-concurrent-connections"}},[e._v("#")]),e._v(" 并发连接数（The number of concurrent connections）")]),e._v(" "),s("p",[e._v("并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。")]),e._v(" "),s("h3",{attrs:{id:"并发用户数-concurrency-level"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发用户数-concurrency-level"}},[e._v("#")]),e._v(" 并发用户数（Concurrency Level）")]),e._v(" "),s("p",[e._v("要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。在HTTP/1.1下，IE7支持两个并发连接，IE8支持6个并发连接，FireFox3支持4个并发连接，所以相应的，我们的并发用户数就得除以这个基数。")]),e._v(" "),s("h3",{attrs:{id:"用户平均请求等待时间-time-per-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户平均请求等待时间-time-per-request"}},[e._v("#")]),e._v(" 用户平均请求等待时间（Time per request）")]),e._v(" "),s("p",[e._v("计算公式：处理完成所有请求数所花费的时间/（总请求数/并发用户数），即：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Time per request=Time taken for tests/（Complete requests/Concurrency Level）\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"服务器平均请求等待时间-time-per-request-across-all-concurrent-requests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器平均请求等待时间-time-per-request-across-all-concurrent-requests"}},[e._v("#")]),e._v(" 服务器平均请求等待时间（Time per request:across all concurrent requests）")]),e._v(" "),s("p",[e._v("计算公式：处理完成所有请求数所花费的时间/总请求数，即：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Time taken for/testsComplete requests\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("可以看到，它是吞吐率的倒数。")]),e._v(" "),s("p",[e._v("同时，它也等于用户平均请求等待时间/并发用户数，即Time per request/Concurrency Level")]),e._v(" "),s("h1",{attrs:{id:"ab的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ab的应用"}},[e._v("#")]),e._v(" ab的应用")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("ab的命令参数比较多，我们经常使用的是-c和-n参数。")]),e._v(" "),s("p",[s("code",[e._v("ab -c 10 -n 100 http://www.myvick.cn/index.php")]),e._v("：同时处理100个请求并运行10次index.php")]),e._v(" "),s("ul",[s("li",[e._v("-c10表示并发用户数为10")]),e._v(" "),s("li",[e._v("-n100表示请求总数为100")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@vic html]# ab -c 10 -n 100 http://www.myvick.cn/index.php\nThis is ApacheBench, Version 2.3 <$Revision: 655654 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking www.myvick.cn (be patient).....done\n\n\nServer Software:        nginx/1.13.6   #测试服务器的名字\nServer Hostname:        www.myvick.cn  #请求的URL主机名\nServer Port:            80             #web服务器监听的端口\n\nDocument Path:          /index.php　　  #请求的URL中的根绝对路径，通过该文件的后缀名，我们一般可以了解该请求的类型\nDocument Length:        799 bytes       #HTTP响应数据的正文长度\n\nConcurrency Level:      10　　　　　　　　# 并发用户数，这是我们设置的参数之一\nTime taken for tests:   0.668 seconds   #所有这些请求被处理完成所花费的总时间 单位秒\nComplete requests:      100 　　　　　　  # 总请求数量，这是我们设置的参数之一\nFailed requests:        0　　　　　　　　  # 表示失败的请求数量，这里的失败是指请求在连接服务器、发送数据等环节发生异常，以及无响应后超时的情况\nWrite errors:           0\nTotal transferred:      96200 bytes　　　 #所有请求的响应数据长度总和。包括每个HTTP响应数据的头信息和正文数据的长度\nHTML transferred:       79900 bytes　　　　# 所有请求的响应数据中正文数据的总和，也就是减去了Total transferred中HTTP响应数据中的头信息的长度\nRequests per second:    149.71 [#/sec] (mean) #吞吐率，计算公式：Complete requests/Time taken for tests  总请求数/处理完成这些请求数所花费的时间\nTime per request:       66.797 [ms] (mean)   # 用户平均请求等待时间，计算公式：Time token for tests/（Complete requests/Concurrency Level）。处理完成所有请求数所花费的时间/（总请求数/并发用户数）\nTime per request:       6.680 [ms] (mean, across all concurrent requests) #服务器平均请求等待时间，计算公式：Time taken for tests/Complete requests，正好是吞吐率的倒数。也可以这么统计：Time per request/Concurrency Level\nTransfer rate:          140.64 [Kbytes/sec] received  #表示这些请求在单位时间内从服务器获取的数据长度，计算公式：Total trnasferred/ Time taken for tests，这个统计很好的说明服务器的处理能力达到极限时，其出口宽带的需求量。\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        1    2   0.7      2       5\nProcessing:     2   26  81.3      3     615\nWaiting:        1   26  81.3      3     615\nTotal:          3   28  81.3      6     618\n\nPercentage of the requests served within a certain time (ms)\n  50%      6\n  66%      6\n  75%      7\n  80%      7\n  90%     10\n  95%    209\n  98%    209\n  99%    618\n 100%    618 (longest request)\n\n#Percentage of requests served within a certain time（ms）这部分数据用于描述每个请求处理时间的分布情况，比如以上测试，80%的请求处理时间都不超过7ms，这个处理时间是指前面的Time per request，即对于单个用户而言，平均每个请求的处理时间\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br")])]),s("h1",{attrs:{id:"文章来源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文章来源"}},[e._v("#")]),e._v(" 文章来源")]),e._v(" "),s("hr"),e._v(" "),s("ul",[s("li",[e._v("本文转载自 https://www.cnblogs.com/myvic/p/7703973.html")]),e._v(" "),s("li",[e._v("作者：myvic")])]),e._v(" "),s("p",[e._v("参考资料：")]),e._v(" "),s("p",[e._v("http://www.jb51.net/article/59469.htm")]),e._v(" "),s("p",[e._v("http://blog.csdn.net/caotianyin/article/details/49253055)")])])}),[],!1,null,null,null);s.default=n.exports}}]);