(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{271:function(s,n,a){s.exports=a.p+"assets/img/spring-springframework-aop-4.bef38b52.png"},3649:function(s,n,a){"use strict";a.r(n);var e=a(7),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"spring进阶-spring-aop实现原理详解之aop切面的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring进阶-spring-aop实现原理详解之aop切面的实现"}},[s._v("#")]),s._v(" Spring进阶 - Spring AOP实现原理详解之AOP切面的实现")]),s._v(" "),n("p",[s._v("=============================================================================")]),s._v(" "),n("blockquote",[n("p",[s._v("前文，我们分析了Spring IOC的初始化过程和Bean的生命周期等，而Spring AOP也是基于IOC的Bean加载来实现的。本文主要介绍Spring AOP原理解析的切面实现过程（将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor，为后续交给代理增强实现做准备的过程）。@pdai")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#spring%E8%BF%9B%E9%98%B6---spring-aop%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E4%B9%8Baop%E5%88%87%E9%9D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[s._v("Spring进阶 - Spring AOP实现原理详解之AOP切面的实现")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%BC%95%E5%85%A5"}},[s._v("引入")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#aop%E9%85%8D%E7%BD%AE%E6%A0%87%E7%AD%BE%E7%9A%84%E8%A7%A3%E6%9E%90"}},[s._v("aop配置标签的解析")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#config%E9%85%8D%E7%BD%AE%E6%A0%87%E7%AD%BE%E7%9A%84%E8%A7%A3%E6%9E%90"}},[s._v("config配置标签的解析")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#aspectj-autoproxy%E9%85%8D%E7%BD%AE%E6%A0%87%E7%AD%BE%E7%9A%84%E8%A7%A3%E6%9E%90"}},[s._v("aspectj-autoproxy配置标签的解析")])])])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E6%B3%A8%E8%A7%A3%E5%88%87%E9%9D%A2%E4%BB%A3%E7%90%86%E5%88%9B%E5%BB%BA%E7%B1%BBannotationawareaspectjautoproxycreator"}},[s._v("注解切面代理创建类(AnnotationAwareAspectJAutoProxyCreator)")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#postprocessbeforeinstantiation"}},[s._v("postProcessBeforeInstantiation")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AFaop%E5%9F%BA%E7%A1%80%E7%B1%BB"}},[s._v("判断是否是aop基础类")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E8%B7%B3%E8%BF%87shouldskip"}},[s._v("是否应该跳过shouldSkip")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E5%88%87%E9%9D%A2%E6%96%B9%E6%B3%95%E8%BD%AC%E6%88%90advisor"}},[s._v("切面方法转成Advisor")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E8%8E%B7%E5%8F%96%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%88%87%E7%82%B9"}},[s._v("获取表达式的切点")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E5%B0%81%E8%A3%85%E6%88%90advisor"}},[s._v("封装成Advisor")])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E5%B0%8F%E7%BB%93"}},[s._v("小结")])])])]),s._v(" "),n("li",[n("a",{attrs:{href:"#postprocessafterinitialization"}},[s._v("postProcessAfterInitialization")])])])]),s._v(" "),n("li",[n("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[s._v("总结")])])])])]),s._v(" "),n("h1",{attrs:{id:"引入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[s._v("#")]),s._v(" 引入")]),s._v(" "),n("hr"),s._v(" "),n("blockquote",[n("p",[s._v("我们应该从哪里开始着手看Spring AOP的源码呢？和我们上文分析的IOC源码实现有什么关系呢？")])]),s._v(" "),n("ol",[n("li",[s._v("前文中我们写了AOP的Demo，根据其XML配置我们不难发现"),n("strong",[s._v("AOP是基于IOC的Bean加载来实现的")]),s._v("；这便使我们的主要入口")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(972),alt:""}})]),s._v(" "),n("p",[s._v("所以理解Spring AOP的初始化必须要先理解"),n("a",{attrs:{href:"https://pdai.tech/md/spring/spring-x-framework-ioc-source-2.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring IOC的初始化"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("然后我们就能找到如下"),n("strong",[s._v("初始化的流程和aop对应的handler")]),s._v("类")])]),s._v(" "),n("p",[s._v("即parseCustomElement方法找到parse "),n("code",[s._v("aop:aspectj-autoproxy")]),s._v("的handler(org.springframework.aop.config.AopNamespaceHandler)")]),s._v(" "),n("p",[n("img",{attrs:{src:a(973),alt:""}})]),s._v(" "),n("p",[s._v("（PS：其实你会发现，最重要的是知识点的关联关系，而不是知识点本身，就后续代码而言不就是打个断点慢慢看的事了么。）")]),s._v(" "),n("h1",{attrs:{id:"aop配置标签的解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aop配置标签的解析"}},[s._v("#")]),s._v(" aop配置标签的解析")]),s._v(" "),n("hr"),s._v(" "),n("blockquote",[n("p",[s._v("上文中，我们找到了AopNamespaceHandler，其实就是注册BeanDefinition的解析器BeanDefinitionParser，将"),n("code",[s._v("aop:xxxxxx")]),s._v("配置标签交给指定的parser来处理。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public class AopNamespaceHandler extends NamespaceHandlerSupport {\n\n\t/**\n\t * Register the {@link BeanDefinitionParser BeanDefinitionParsers} for the\n\t * '{@code config}', '{@code spring-configured}', '{@code aspectj-autoproxy}'\n\t * and '{@code scoped-proxy}' tags.\n\t */\n\t@Override\n\tpublic void init() {\n\t\t// In 2.0 XSD as well as in 2.5+ XSDs\n        // 注册解析<aop:config> 配置\n\t\tregisterBeanDefinitionParser(\"config\", new ConfigBeanDefinitionParser());\n        // 注册解析<aop:aspectj-autoproxy> 配置\n\t\tregisterBeanDefinitionParser(\"aspectj-autoproxy\", new AspectJAutoProxyBeanDefinitionParser());\n\t\tregisterBeanDefinitionDecorator(\"scoped-proxy\", new ScopedProxyBeanDefinitionDecorator());\n\n\t\t// Only in 2.0 XSD: moved to context namespace in 2.5+\n\t\tregisterBeanDefinitionParser(\"spring-configured\", new SpringConfiguredBeanDefinitionParser());\n\t}\n\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h3",{attrs:{id:"config配置标签的解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#config配置标签的解析"}},[s._v("#")]),s._v(" config配置标签的解析")]),s._v(" "),n("p",[n("code",[s._v("<aop:config/>")]),s._v("由ConfigBeanDefinitionParser这个类处理，作为parser类最重要的就是parse方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Override\n@Nullable\npublic BeanDefinition parse(Element element, ParserContext parserContext) {\n    CompositeComponentDefinition compositeDef =\n            new CompositeComponentDefinition(element.getTagName(), parserContext.extractSource(element));\n    parserContext.pushContainingComponent(compositeDef);\n\n    configureAutoProxyCreator(parserContext, element);\n\n    List<Element> childElts = DomUtils.getChildElements(element);\n    for (Element elt: childElts) {\n        String localName = parserContext.getDelegate().getLocalName(elt);\n        if (POINTCUT.equals(localName)) {\n            parsePointcut(elt, parserContext);\n        }\n        else if (ADVISOR.equals(localName)) {\n            parseAdvisor(elt, parserContext);\n        }\n        else if (ASPECT.equals(localName)) {\n            parseAspect(elt, parserContext);\n        }\n    }\n\n    parserContext.popAndRegisterContainingComponent();\n    return null;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("打个断点看下")]),s._v(" "),n("p",[n("img",{attrs:{src:a(974),alt:""}})]),s._v(" "),n("p",[s._v("parseAspect的方法如下, 处理方法不难，我这里就不展开了")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private void parseAspect(Element aspectElement, ParserContext parserContext) {\n    String aspectId = aspectElement.getAttribute(ID);\n    String aspectName = aspectElement.getAttribute(REF);\n\n    try {\n        this.parseState.push(new AspectEntry(aspectId, aspectName));\n        List<BeanDefinition> beanDefinitions = new ArrayList<>();\n        List<BeanReference> beanReferences = new ArrayList<>();\n\n        List<Element> declareParents = DomUtils.getChildElementsByTagName(aspectElement, DECLARE_PARENTS);\n        for (int i = METHOD_INDEX; i < declareParents.size(); i++) {\n            Element declareParentsElement = declareParents.get(i);\n            beanDefinitions.add(parseDeclareParents(declareParentsElement, parserContext));\n        }\n\n        // We have to parse "advice" and all the advice kinds in one loop, to get the\n        // ordering semantics right.\n        NodeList nodeList = aspectElement.getChildNodes();\n        boolean adviceFoundAlready = false;\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            Node node = nodeList.item(i);\n            if (isAdviceNode(node, parserContext)) {\n                if (!adviceFoundAlready) {\n                    adviceFoundAlready = true;\n                    if (!StringUtils.hasText(aspectName)) {\n                        parserContext.getReaderContext().error(\n                                "<aspect> tag needs aspect bean reference via \'ref\' attribute when declaring advices.",\n                                aspectElement, this.parseState.snapshot());\n                        return;\n                    }\n                    beanReferences.add(new RuntimeBeanReference(aspectName));\n                }\n                AbstractBeanDefinition advisorDefinition = parseAdvice(\n                        aspectName, i, aspectElement, (Element) node, parserContext, beanDefinitions, beanReferences);\n                beanDefinitions.add(advisorDefinition);\n            }\n        }\n\n        AspectComponentDefinition aspectComponentDefinition = createAspectComponentDefinition(\n                aspectElement, aspectId, beanDefinitions, beanReferences, parserContext);\n        parserContext.pushContainingComponent(aspectComponentDefinition);\n\n        List<Element> pointcuts = DomUtils.getChildElementsByTagName(aspectElement, POINTCUT);\n        for (Element pointcutElement : pointcuts) {\n            parsePointcut(pointcutElement, parserContext);\n        }\n\n        parserContext.popAndRegisterContainingComponent();\n    }\n    finally {\n        this.parseState.pop();\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br")])]),n("h3",{attrs:{id:"aspectj-autoproxy配置标签的解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aspectj-autoproxy配置标签的解析"}},[s._v("#")]),s._v(" aspectj-autoproxy配置标签的解析")]),s._v(" "),n("p",[n("code",[s._v("<aop:aspectj-autoproxy/>")]),s._v("则由AspectJAutoProxyBeanDefinitionParser这个类处理的，我们看下parse 方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Override\n@Nullable\npublic BeanDefinition parse(Element element, ParserContext parserContext) {\n    // 注册AspectJAnnotationAutoProxyCreator\n    AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);\n    // 拓展BeanDefinition\n    extendBeanDefinition(element, parserContext);\n    return null;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary方法对应如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public static void registerAspectJAnnotationAutoProxyCreatorIfNecessary(\n        ParserContext parserContext, Element sourceElement) {\n\n    BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(\n            parserContext.getRegistry(), parserContext.extractSource(sourceElement));\n    useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);\n    registerComponentIfNecessary(beanDefinition, parserContext);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary对应如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Nullable\npublic static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(\n        BeanDefinitionRegistry registry, @Nullable Object source) {\n\n    return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("到这里，我们发现AOP的创建工作是交给AnnotationAwareAspectJAutoProxyCreator来完成的。")]),s._v(" "),n("h1",{attrs:{id:"注解切面代理创建类-annotationawareaspectjautoproxycreator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解切面代理创建类-annotationawareaspectjautoproxycreator"}},[s._v("#")]),s._v(" 注解切面代理创建类(AnnotationAwareAspectJAutoProxyCreator)")]),s._v(" "),n("hr"),s._v(" "),n("blockquote",[n("p",[s._v("AnnotationAwareAspectJAutoProxyCreator是如何工作的呢？这时候我们就要看AnnotationAwareAspectJAutoProxyCreator类结构关系了。")])]),s._v(" "),n("p",[s._v("如下是类结构关系")]),s._v(" "),n("p",[n("img",{attrs:{src:a(975),alt:""}})]),s._v(" "),n("p",[s._v("它实现了两类接口：")]),s._v(" "),n("ul",[n("li",[s._v("BeanFactoryAware属于"),n("strong",[s._v("Bean级生命周期接口方法")])]),s._v(" "),n("li",[s._v("InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”，是"),n("strong",[s._v("容器级生命周期接口方法")]),s._v("；")])]),s._v(" "),n("p",[s._v("结合前文Spring Bean生命周期的流程")]),s._v(" "),n("p",[n("img",{attrs:{src:a(271),alt:""}})]),s._v(" "),n("p",[s._v("我们就可以定位到核心的初始化方法肯定在postProcessBeforeInstantiation和postProcessAfterInitialization中。")]),s._v(" "),n("h3",{attrs:{id:"postprocessbeforeinstantiation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postprocessbeforeinstantiation"}},[s._v("#")]),s._v(" postProcessBeforeInstantiation")]),s._v(" "),n("p",[s._v("如下是上述类结构中postProcessBeforeInstantiation的方法，读者在自己看代码的时候建议打个断点看，可以方便理解")]),s._v(" "),n("p",[n("img",{attrs:{src:a(976),alt:""}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Override\npublic Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) {\n    Object cacheKey = getCacheKey(beanClass, beanName);\n\n    if (!StringUtils.hasLength(beanName) || !this.targetSourcedBeans.contains(beanName)) {\n        // 如果已经在缓存中，则忽略\n        if (this.advisedBeans.containsKey(cacheKey)) {\n            return null;\n        }\n        // 是否是aop基础类？是否跳过？\n        if (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) {\n            this.advisedBeans.put(cacheKey, Boolean.FALSE);\n            return null;\n        }\n    }\n\n    // Create proxy here if we have a custom TargetSource.\n    // Suppresses unnecessary default instantiation of the target bean:\n    // The TargetSource will handle target instances in a custom fashion.\n    TargetSource targetSource = getCustomTargetSource(beanClass, beanName);\n    if (targetSource != null) {\n        if (StringUtils.hasLength(beanName)) {\n            this.targetSourcedBeans.add(beanName);\n        }\n        Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);\n        Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);\n        this.proxyTypes.put(cacheKey, proxy.getClass());\n        return proxy;\n    }\n\n    return null;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h4",{attrs:{id:"判断是否是aop基础类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#判断是否是aop基础类"}},[s._v("#")]),s._v(" 判断是否是aop基础类")]),s._v(" "),n("p",[s._v("是否是aop基础类的判断方法 isInfrastructureClass 如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Override\nprotected boolean isInfrastructureClass(Class<?> beanClass) {\n    // Previously we setProxyTargetClass(true) in the constructor, but that has too\n    // broad an impact. Instead we now override isInfrastructureClass to avoid proxying\n    // aspects. I'm not entirely happy with that as there is no good reason not\n    // to advise aspects, except that it causes advice invocation to go through a\n    // proxy, and if the aspect implements e.g the Ordered interface it will be\n    // proxied by that interface and fail at runtime as the advice method is not\n    // defined on the interface. We could potentially relax the restriction about\n    // not advising aspects in the future.\n    // 父类判断它是aop基础类 or 使用@Aspect注解\n    return (super.isInfrastructureClass(beanClass) ||\n            (this.aspectJAdvisorFactory != null && this.aspectJAdvisorFactory.isAspect(beanClass)));\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("父类判断它是否是aop基础类的方法 super.isInfrastructureClass(beanClass), 本质上就是判断该类是否实现了Advice, Pointcut, Advisor或者AopInfrastructureBean接口。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('protected boolean isInfrastructureClass(Class<?> beanClass) {\n    // 该类是否实现了Advice, Pointcut, Advisor或者AopInfrastructureBean接口\n    boolean retVal = Advice.class.isAssignableFrom(beanClass) ||\n            Pointcut.class.isAssignableFrom(beanClass) ||\n            Advisor.class.isAssignableFrom(beanClass) ||\n            AopInfrastructureBean.class.isAssignableFrom(beanClass);\n    if (retVal && logger.isTraceEnabled()) {\n        logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]");\n    }\n    return retVal;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h4",{attrs:{id:"是否应该跳过shouldskip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#是否应该跳过shouldskip"}},[s._v("#")]),s._v(" 是否应该跳过shouldSkip")]),s._v(" "),n("p",[s._v("通过断点辅助，candidateAdvisors是就是xml配置的通知是对应的")]),s._v(" "),n("p",[n("img",{attrs:{src:a(977),alt:""}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Override\nprotected boolean shouldSkip(Class<?> beanClass, String beanName) {\n    // TODO: Consider optimization by caching the list of the aspect names\n    List<Advisor> candidateAdvisors = findCandidateAdvisors();\n    for (Advisor advisor : candidateAdvisors) {\n        if (advisor instanceof AspectJPointcutAdvisor &&\n                ((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) {\n            return true;\n        }\n    }\n    return super.shouldSkip(beanClass, beanName);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"切面方法转成advisor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#切面方法转成advisor"}},[s._v("#")]),s._v(" 切面方法转成Advisor")]),s._v(" "),n("p",[s._v("findCandidateAdvisors方法如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Override\nprotected List<Advisor> findCandidateAdvisors() {\n    // 在父类中找到所有的advisor：基于xml配置的<aop:before/>生成的\n    List<Advisor> advisors = super.findCandidateAdvisors();\n    // 为bean Factory中AspectJ切面构建advistor：通过AspectJ注解的方式生成Advisor类\n    if (this.aspectJAdvisorsBuilder != null) {\n        advisors.addAll(this.aspectJAdvisorsBuilder.buildAspectJAdvisors());\n    }\n    return advisors;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("在当前的bean Factory中通过AspectJ注解的方式生成Advisor类，buildAspectJAdvisors方法如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n    * Look for AspectJ-annotated aspect beans in the current bean factory,\n    * and return to a list of Spring AOP Advisors representing them.\n    * <p>Creates a Spring Advisor for each AspectJ advice method.\n    * @return the list of {@link org.springframework.aop.Advisor} beans\n    * @see #isEligibleBean\n    */\npublic List<Advisor> buildAspectJAdvisors() {\n    List<String> aspectNames = this.aspectBeanNames;\n\n    if (aspectNames == null) {\n        synchronized (this) {\n            aspectNames = this.aspectBeanNames;\n            if (aspectNames == null) {\n                List<Advisor> advisors = new ArrayList<>();\n                aspectNames = new ArrayList<>();\n                String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n                        this.beanFactory, Object.class, true, false);\n                for (String beanName : beanNames) {\n                    if (!isEligibleBean(beanName)) {\n                        continue;\n                    }\n                    // We must be careful not to instantiate beans eagerly as in this case they\n                    // would be cached by the Spring container but would not have been weaved.\n                    Class<?> beanType = this.beanFactory.getType(beanName, false);\n                    if (beanType == null) {\n                        continue;\n                    }\n                    if (this.advisorFactory.isAspect(beanType)) {\n                        aspectNames.add(beanName);\n                        AspectMetadata amd = new AspectMetadata(beanType, beanName);\n                        if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) {\n                            MetadataAwareAspectInstanceFactory factory =\n                                    new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName);\n                            List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory);\n                            // 单例加到advisorsCache, 非单例加到aspectFactoryCache\n                            if (this.beanFactory.isSingleton(beanName)) {\n                                this.advisorsCache.put(beanName, classAdvisors);\n                            }\n                            else {\n                                this.aspectFactoryCache.put(beanName, factory);\n                            }\n                            advisors.addAll(classAdvisors);\n                        }\n                        else {\n                            // Per target or per this.\n                            if (this.beanFactory.isSingleton(beanName)) {\n                                throw new IllegalArgumentException("Bean with name \'" + beanName +\n                                        "\' is a singleton, but aspect instantiation model is not singleton");\n                            }\n                            MetadataAwareAspectInstanceFactory factory =\n                                    new PrototypeAspectInstanceFactory(this.beanFactory, beanName);\n                            this.aspectFactoryCache.put(beanName, factory);\n                            // advisorFactory工厂获取advisors\n                            advisors.addAll(this.advisorFactory.getAdvisors(factory));\n                        }\n                    }\n                }\n                this.aspectBeanNames = aspectNames;\n                return advisors;\n            }\n        }\n    }\n\n    if (aspectNames.isEmpty()) {\n        return Collections.emptyList();\n    }\n    List<Advisor> advisors = new ArrayList<>();\n    for (String aspectName : aspectNames) {\n        List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName);\n        if (cachedAdvisors != null) {\n            advisors.addAll(cachedAdvisors);\n        }\n        else {\n            MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName);\n            advisors.addAll(this.advisorFactory.getAdvisors(factory));\n        }\n    }\n    return advisors;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br")])]),n("p",[s._v("上述方法本质上的思路是：用DCL双重锁的单例实现方式，拿到切面类里的切面方法，将其转换成advisor（并放入缓存中）。")]),s._v(" "),n("p",[s._v("转换的成advisor的方法是：this.advisorFactory.getAdvisors")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@Override\npublic List<Advisor> getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory) {\n    Class<?> aspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();\n    String aspectName = aspectInstanceFactory.getAspectMetadata().getAspectName();\n    validate(aspectClass);\n\n    // We need to wrap the MetadataAwareAspectInstanceFactory with a decorator\n    // so that it will only instantiate once.\n    MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory =\n            new LazySingletonAspectInstanceFactoryDecorator(aspectInstanceFactory);\n\n    List<Advisor> advisors = new ArrayList<>();\n    for (Method method : getAdvisorMethods(aspectClass)) {\n        // Prior to Spring Framework 5.2.7, advisors.size() was supplied as the declarationOrderInAspect\n        // to getAdvisor(...) to represent the "current position" in the declared methods list.\n        // However, since Java 7 the "current position" is not valid since the JDK no longer\n        // returns declared methods in the order in which they are declared in the source code.\n        // Thus, we now hard code the declarationOrderInAspect to 0 for all advice methods\n        // discovered via reflection in order to support reliable advice ordering across JVM launches.\n        // Specifically, a value of 0 aligns with the default value used in\n        // AspectJPrecedenceComparator.getAspectDeclarationOrder(Advisor).\n        Advisor advisor = getAdvisor(method, lazySingletonAspectInstanceFactory, 0, aspectName);\n        if (advisor != null) {\n            advisors.add(advisor);\n        }\n    }\n\n    // If it\'s a per target aspect, emit the dummy instantiating aspect.\n    if (!advisors.isEmpty() && lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) {\n        Advisor instantiationAdvisor = new SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);\n        advisors.add(0, instantiationAdvisor);\n    }\n\n    // Find introduction fields.\n    for (Field field : aspectClass.getDeclaredFields()) {\n        Advisor advisor = getDeclareParentsAdvisor(field);\n        if (advisor != null) {\n            advisors.add(advisor);\n        }\n    }\n\n    return advisors;\n}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br")])]),n("p",[s._v("getAdvisor方法如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Override\n@Nullable\npublic Advisor getAdvisor(Method candidateAdviceMethod, MetadataAwareAspectInstanceFactory aspectInstanceFactory,\n        int declarationOrderInAspect, String aspectName) {\n\n    validate(aspectInstanceFactory.getAspectMetadata().getAspectClass());\n\n    AspectJExpressionPointcut expressionPointcut = getPointcut(\n            candidateAdviceMethod, aspectInstanceFactory.getAspectMetadata().getAspectClass());\n    if (expressionPointcut == null) {\n        return null;\n    }\n\n    // 封装成advisor\n    return new InstantiationModelAwarePointcutAdvisorImpl(expressionPointcut, candidateAdviceMethod,\n            this, aspectInstanceFactory, declarationOrderInAspect, aspectName);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h4",{attrs:{id:"获取表达式的切点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取表达式的切点"}},[s._v("#")]),s._v(" 获取表达式的切点")]),s._v(" "),n("p",[s._v("获取表达式的切点的方法getPointcut如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Nullable\nprivate AspectJExpressionPointcut getPointcut(Method candidateAdviceMethod, Class<?> candidateAspectClass) {\n    AspectJAnnotation<?> aspectJAnnotation =\n            AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);\n    if (aspectJAnnotation == null) {\n        return null;\n    }\n\n    AspectJExpressionPointcut ajexp =\n            new AspectJExpressionPointcut(candidateAspectClass, new String[0], new Class<?>[0]);\n    ajexp.setExpression(aspectJAnnotation.getPointcutExpression());\n    if (this.beanFactory != null) {\n        ajexp.setBeanFactory(this.beanFactory);\n    }\n    return ajexp;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod的方法如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('private static final Class<?>[] ASPECTJ_ANNOTATION_CLASSES = new Class<?>[] {\n        Pointcut.class, Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class};\n\n/**\n    * Find and return the first AspectJ annotation on the given method\n    * (there <i>should</i> only be one anyway...).\n    */\n@SuppressWarnings("unchecked")\n@Nullable\nprotected static AspectJAnnotation<?> findAspectJAnnotationOnMethod(Method method) {\n    for (Class<?> clazz : ASPECTJ_ANNOTATION_CLASSES) {\n        AspectJAnnotation<?> foundAnnotation = findAnnotation(method, (Class<Annotation>) clazz);\n        if (foundAnnotation != null) {\n            return foundAnnotation;\n        }\n    }\n    return null;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("findAnnotation方法如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@Nullable\nprivate static <A extends Annotation> AspectJAnnotation<A> findAnnotation(Method method, Class<A> toLookFor) {\n    A result = AnnotationUtils.findAnnotation(method, toLookFor);\n    if (result != null) {\n        return new AspectJAnnotation<>(result);\n    }\n    else {\n        return null;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("AnnotationUtils.findAnnotation 获取注解方法如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n    * Find a single {@link Annotation} of {@code annotationType} on the supplied\n    * {@link Method}, traversing its super methods (i.e. from superclasses and\n    * interfaces) if the annotation is not <em>directly present</em> on the given\n    * method itself.\n    * <p>Correctly handles bridge {@link Method Methods} generated by the compiler.\n    * <p>Meta-annotations will be searched if the annotation is not\n    * <em>directly present</em> on the method.\n    * <p>Annotations on methods are not inherited by default, so we need to handle\n    * this explicitly.\n    * @param method the method to look for annotations on\n    * @param annotationType the annotation type to look for\n    * @return the first matching annotation, or {@code null} if not found\n    * @see #getAnnotation(Method, Class)\n    */\n@Nullable\npublic static <A extends Annotation> A findAnnotation(Method method, @Nullable Class<A> annotationType) {\n    if (annotationType == null) {\n        return null;\n    }\n\n    // Shortcut: directly present on the element, with no merging needed?\n    if (AnnotationFilter.PLAIN.matches(annotationType) ||\n            AnnotationsScanner.hasPlainJavaAnnotationsOnly(method)) {\n        return method.getDeclaredAnnotation(annotationType);\n    }\n\n    // Exhaustive retrieval of merged annotations...\n    return MergedAnnotations.from(method, SearchStrategy.TYPE_HIERARCHY, RepeatableContainers.none())\n            .get(annotationType).withNonMergedAttributes()\n            .synthesize(MergedAnnotation::isPresent).orElse(null);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h4",{attrs:{id:"封装成advisor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#封装成advisor"}},[s._v("#")]),s._v(" 封装成Advisor")]),s._v(" "),n("p",[s._v("注：Advisor 是 advice的包装器，包含了advice及其它信息")]),s._v(" "),n("p",[s._v("由InstantiationModelAwarePointcutAdvisorImpl构造完成")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public InstantiationModelAwarePointcutAdvisorImpl(AspectJExpressionPointcut declaredPointcut,\n        Method aspectJAdviceMethod, AspectJAdvisorFactory aspectJAdvisorFactory,\n        MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName) {\n\n    this.declaredPointcut = declaredPointcut;\n    this.declaringClass = aspectJAdviceMethod.getDeclaringClass();\n    this.methodName = aspectJAdviceMethod.getName();\n    this.parameterTypes = aspectJAdviceMethod.getParameterTypes();\n    this.aspectJAdviceMethod = aspectJAdviceMethod;\n    this.aspectJAdvisorFactory = aspectJAdvisorFactory;\n    this.aspectInstanceFactory = aspectInstanceFactory;\n    this.declarationOrder = declarationOrder;\n    this.aspectName = aspectName;\n\n    if (aspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) {\n        // Static part of the pointcut is a lazy type.\n        Pointcut preInstantiationPointcut = Pointcuts.union(\n                aspectInstanceFactory.getAspectMetadata().getPerClausePointcut(), this.declaredPointcut);\n\n        // Make it dynamic: must mutate from pre-instantiation to post-instantiation state.\n        // If it's not a dynamic pointcut, it may be optimized out\n        // by the Spring AOP infrastructure after the first evaluation.\n        this.pointcut = new PerTargetInstantiationModelPointcut(\n                this.declaredPointcut, preInstantiationPointcut, aspectInstanceFactory);\n        this.lazy = true;\n    }\n    else {\n        // A singleton aspect.\n        this.pointcut = this.declaredPointcut;\n        this.lazy = false;\n        this.instantiatedAdvice = instantiateAdvice(this.declaredPointcut);\n    }\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[s._v("通过pointcut获取advice")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("private Advice instantiateAdvice(AspectJExpressionPointcut pointcut) {\n    Advice advice = this.aspectJAdvisorFactory.getAdvice(this.aspectJAdviceMethod, pointcut,\n            this.aspectInstanceFactory, this.declarationOrder, this.aspectName);\n    return (advice != null ? advice : EMPTY_ADVICE);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("交给aspectJAdvisorFactory获取")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@Override\n@Nullable\npublic Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut expressionPointcut,\n        MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName) {\n\n    // 获取切面类\n    Class<?> candidateAspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();\n    validate(candidateAspectClass);\n\n    // 获取切面注解\n    AspectJAnnotation<?> aspectJAnnotation =\n            AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);\n    if (aspectJAnnotation == null) {\n        return null;\n    }\n\n    // If we get here, we know we have an AspectJ method.\n    // Check that it\'s an AspectJ-annotated class\n    if (!isAspect(candidateAspectClass)) {\n        throw new AopConfigException("Advice must be declared inside an aspect type: " +\n                "Offending method \'" + candidateAdviceMethod + "\' in class [" +\n                candidateAspectClass.getName() + "]");\n    }\n\n    if (logger.isDebugEnabled()) {\n        logger.debug("Found AspectJ method: " + candidateAdviceMethod);\n    }\n\n    // 切面注解转换成advice\n    AbstractAspectJAdvice springAdvice;\n\n    switch (aspectJAnnotation.getAnnotationType()) {\n        case AtPointcut: // AtPointcut忽略\n            if (logger.isDebugEnabled()) {\n                logger.debug("Processing pointcut \'" + candidateAdviceMethod.getName() + "\'");\n            }\n            return null;\n        case AtAround:\n            springAdvice = new AspectJAroundAdvice(\n                    candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);\n            break;\n        case AtBefore:\n            springAdvice = new AspectJMethodBeforeAdvice(\n                    candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);\n            break;\n        case AtAfter:\n            springAdvice = new AspectJAfterAdvice(\n                    candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);\n            break;\n        case AtAfterReturning:\n            springAdvice = new AspectJAfterReturningAdvice(\n                    candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);\n            AfterReturning afterReturningAnnotation = (AfterReturning) aspectJAnnotation.getAnnotation();\n            if (StringUtils.hasText(afterReturningAnnotation.returning())) {\n                springAdvice.setReturningName(afterReturningAnnotation.returning());\n            }\n            break;\n        case AtAfterThrowing:\n            springAdvice = new AspectJAfterThrowingAdvice(\n                    candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);\n            AfterThrowing afterThrowingAnnotation = (AfterThrowing) aspectJAnnotation.getAnnotation();\n            if (StringUtils.hasText(afterThrowingAnnotation.throwing())) {\n                springAdvice.setThrowingName(afterThrowingAnnotation.throwing());\n            }\n            break;\n        default:\n            throw new UnsupportedOperationException(\n                    "Unsupported advice type on method: " + candidateAdviceMethod);\n    }\n\n    // 最后将其它切面信息配置到advice\n    springAdvice.setAspectName(aspectName);\n    springAdvice.setDeclarationOrder(declarationOrder);\n    String[] argNames = this.parameterNameDiscoverer.getParameterNames(candidateAdviceMethod);\n    if (argNames != null) {\n        springAdvice.setArgumentNamesFromStringArray(argNames);\n    }\n    springAdvice.calculateArgumentBindings();\n\n    return springAdvice;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br")])]),n("h4",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),n("p",[s._v("回头看，主要是处理使用了@Aspect注解的切面类，然后将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor的过程。")]),s._v(" "),n("h3",{attrs:{id:"postprocessafterinitialization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postprocessafterinitialization"}},[s._v("#")]),s._v(" postProcessAfterInitialization")]),s._v(" "),n("p",[s._v("有了Adisor, 注入到合适的位置并交给代理（cglib和jdk)实现了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n* Create a proxy with the configured interceptors if the bean is\n* identified as one to proxy by the subclass.\n* @see #getAdvicesAndAdvisorsForBean\n*/\n@Override\npublic Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {\n    if (bean != null) {\n        Object cacheKey = getCacheKey(bean.getClass(), beanName);\n        if (this.earlyProxyReferences.remove(cacheKey) != bean) {\n            return wrapIfNecessary(bean, beanName, cacheKey);\n        }\n    }\n    return bean;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("后文中将分别介绍代理的创建和实现：")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/spring/spring-x-framework-aop-source-2.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring进阶 - Spring AOP实现原理详解之AOP代理的创建"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/spring/spring-x-framework-aop-source-3.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring进阶 - Spring AOP实现原理详解之Cglib代理实现"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/spring/spring-x-framework-aop-source-4.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Spring进阶 - Spring AOP实现原理详解之JDK代理实现"),n("OutboundLink")],1)])]),s._v(" "),n("h1",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("通过上文的分析，我们做下小结：")]),s._v(" "),n("ol",[n("li",[s._v("由"),n("strong",[s._v("IOC Bean加载")]),s._v("方法栈中找到parseCustomElement方法，找到parse "),n("code",[s._v("aop:aspectj-autoproxy")]),s._v("的handler(org.springframework.aop.config.AopNamespaceHandler)")]),s._v(" "),n("li",[n("strong",[s._v("AopNamespaceHandler")]),s._v("注册了"),n("code",[s._v("<aop:aspectj-autoproxy/>")]),s._v("的解析类是AspectJAutoProxyBeanDefinitionParser")]),s._v(" "),n("li",[n("strong",[s._v("AspectJAutoProxyBeanDefinitionParser")]),s._v("的parse 方法 通过AspectJAwareAdvisorAutoProxyCreator类去创建")]),s._v(" "),n("li",[n("strong",[s._v("AspectJAwareAdvisorAutoProxyCreator")]),s._v("实现了两类接口，BeanFactoryAware和BeanPostProcessor；根据Bean生命周期方法找到两个核心方法：postProcessBeforeInstantiation和postProcessAfterInitialization\n"),n("ol",[n("li",[n("strong",[s._v("postProcessBeforeInstantiation")]),s._v("：主要是处理使用了@Aspect注解的切面类，然后将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor")]),s._v(" "),n("li",[n("strong",[s._v("postProcessAfterInitialization")]),s._v("：主要负责将Advisor注入到合适的位置，创建代理（cglib或jdk)，为后面给代理进行增强实现做准备。)")])])])])])}),[],!1,null,null,null);n.default=t.exports},972:function(s,n,a){s.exports=a.p+"assets/img/spring-springframework-aop-1.88ed2f07.png"},973:function(s,n,a){s.exports=a.p+"assets/img/spring-springframework-aop-2.ba7944a3.png"},974:function(s,n,a){s.exports=a.p+"assets/img/spring-springframework-aop-7.6fe1114a.png"},975:function(s,n,a){s.exports=a.p+"assets/img/spring-springframework-aop-3.c17a2220.png"},976:function(s,n,a){s.exports=a.p+"assets/img/spring-springframework-aop-5.23afccaf.png"},977:function(s,n,a){s.exports=a.p+"assets/img/spring-springframework-aop-6.00050332.png"}}]);