(window.webpackJsonp=window.webpackJsonp||[]).push([[570],{3784:function(s,n,e){"use strict";e.r(n);var a=e(7),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"算法思想-二分法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法思想-二分法"}},[s._v("#")]),s._v(" 算法思想 - 二分法")]),s._v(" "),n("p",[s._v("=========================")]),s._v(" "),n("blockquote",[n("p",[s._v("本文主要介绍算法思想中分治算法重要的二分法，比如二分查找；二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。@pdai")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-devide-two.html#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE",target:"_blank",rel:"noopener noreferrer"}},[s._v("二分查找"),n("OutboundLink")],1),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-devide-two.html#%E6%AD%A3%E5%B8%B8%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("正常实现"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-devide-two.html#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[s._v("时间复杂度"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-core-devide-two.html#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8F%98%E7%A7%8D",target:"_blank",rel:"noopener noreferrer"}},[s._v("二分查找变种"),n("OutboundLink")],1)])])])]),s._v(" "),n("h1",{attrs:{id:"二分查找"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[s._v("#")]),s._v(" 二分查找")]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"正常实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正常实现"}},[s._v("#")]),s._v(" 正常实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int binarySearch(int[] nums, int key) {\n    int l = 0, h = nums.length - 1;\n    while (l <= h) {\n        int m = l + (h - l) / 2;\n        if (nums[m] == key) {\n            return m;\n        } else if (nums[m] > key) {\n            h = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[s._v("#")]),s._v(" 时间复杂度")]),s._v(" "),n("p",[s._v("二分查找也称为折半查找，每次都能将查找区间减半，这种折半特性的算法时间复杂度都为 O(logN)。")]),s._v(" "),n("p",[n("strong",[s._v("m 计算")])]),s._v(" "),n("p",[s._v("有两种计算中值 m 的方式:")]),s._v(" "),n("ul",[n("li",[s._v("m = (l + h) / 2")]),s._v(" "),n("li",[s._v("m = l + (h - l) / 2")])]),s._v(" "),n("p",[s._v("l + h 可能出现加法溢出，最好使用第二种方式。")]),s._v(" "),n("p",[n("strong",[s._v("返回值")])]),s._v(" "),n("p",[s._v("循环退出时如果仍然没有查找到 key，那么表示查找失败。可以有两种返回值:")]),s._v(" "),n("ul",[n("li",[s._v("-1: 以一个错误码表示没有查找到 key")]),s._v(" "),n("li",[s._v("l: 将 key 插入到 nums 中的正确位置")])]),s._v(" "),n("h3",{attrs:{id:"二分查找变种"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二分查找变种"}},[s._v("#")]),s._v(" 二分查找变种")]),s._v(" "),n("p",[s._v("二分查找可以有很多变种，变种实现要注意边界值的判断。例如在一个有重复元素的数组中查找 key 的最左位置的实现如下:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int binarySearch(int[] nums, int key) {\n    int l = 0, h = nums.length - 1;\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (nums[m] >= key) {\n            h = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    return l;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("该实现和正常实现有以下不同:")]),s._v(" "),n("ul",[n("li",[s._v("循环条件为 l < h")]),s._v(" "),n("li",[s._v("h 的赋值表达式为 h = m")]),s._v(" "),n("li",[s._v("最后返回 l 而不是 -1")])]),s._v(" "),n("p",[s._v("在 nums[m] >= key 的情况下，可以推导出最左 key 位于 [l, m] 区间中，这是一个闭区间。h 的赋值表达式为 h = m，因为 m 位置也可能是解。")]),s._v(" "),n("p",[s._v("在 h 的赋值表达式为 h = mid 的情况下，如果循环条件为 l <= h，那么会出现循环无法退出的情况，因此循环条件只能是 l < h。以下演示了循环条件为 l <= h 时循环无法退出的情况:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("nums = {0, 1, 2}, key = 1\nl   m   h\n0   1   2  nums[m] >= key\n0   0   1  nums[m] < key\n1   1   1  nums[m] >= key\n1   1   1  nums[m] >= key\n...\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("当循环体退出时，不表示没有查找到 key，因此最后返回的结果不应该为 -1。为了验证有没有查找到，需要在调用端判断一下返回位置上的值和 key 是否相等。")]),s._v(" "),n("h4",{attrs:{id:"求开方"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#求开方"}},[s._v("#")]),s._v(" 求开方")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/sqrtx/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("69. Sqrt(x) (Easy) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Input: 4\nOutput: 2\n\nInput: 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we want to return an integer, the decimal part will be truncated.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("一个数 x 的开方 sqrt 一定在 0 ~ x 之间，并且满足 sqrt == x / sqrt。可以利用二分查找在 0 ~ x 之间查找 sqrt。")]),s._v(" "),n("p",[s._v("对于 x = 8，它的开方是 2.82842...，最后应该返回 2 而不是 3。在循环条件为 l <= h 并且循环退出时，h 总是比 l 小 1，也就是说 h = 2，l = 3，因此最后的返回值应该为 h 而不是 l。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int mySqrt(int x) {\n    if (x <= 1) {\n        return x;\n    }\n    int l = 1, h = x;\n    while (l <= h) {\n        int mid = l + (h - l) / 2;\n        int sqrt = x / mid;\n        if (sqrt == mid) {\n            return mid;\n        } else if (mid > sqrt) {\n            h = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return h;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h4",{attrs:{id:"大于给定元素的最小元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#大于给定元素的最小元素"}},[s._v("#")]),s._v(" 大于给定元素的最小元素")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("744. Find Smallest Letter Greater Than Target (Easy) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Input:\nletters = ["c", "f", "j"]\ntarget = "d"\nOutput: "f"\n\nInput:\nletters = ["c", "f", "j"]\ntarget = "k"\nOutput: "c"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("题目描述: 给定一个有序的字符数组 letters 和一个字符 target，要求找出 letters 中大于 target 的最小字符，如果找不到就返回第 1 个字符。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public char nextGreatestLetter(char[] letters, char target) {\n    int n = letters.length;\n    int l = 0, h = n - 1;\n    while (l <= h) {\n        int m = l + (h - l) / 2;\n        if (letters[m] <= target) {\n            l = m + 1;\n        } else {\n            h = m - 1;\n        }\n    }\n    return l < n ? letters[l] : letters[0];\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h4",{attrs:{id:"有序数组的-single-element"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有序数组的-single-element"}},[s._v("#")]),s._v(" 有序数组的 Single Element")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/single-element-in-a-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("540. Single Element in a Sorted Array (Medium) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Input: [1,1,2,3,3,4,4,8,8]\nOutput: 2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("题目描述: 一个有序数组只有一个数不出现两次，找出这个数。要求以 O(logN) 时间复杂度进行求解。")]),s._v(" "),n("p",[s._v("令 index 为 Single Element 在数组中的位置。如果 m 为偶数，并且 m + 1 < index，那么 nums[m] == nums[m + 1]；m + 1 >= index，那么 nums[m] != nums[m + 1]。")]),s._v(" "),n("p",[s._v("从上面的规律可以知道，如果 nums[m] == nums[m + 1]，那么 index 所在的数组位置为 [m + 2, h]，此时令 l = m + 2；如果 nums[m] != nums[m + 1]，那么 index 所在的数组位置为 [l, m]，此时令 h = m。")]),s._v(" "),n("p",[s._v("因为 h 的赋值表达式为 h = m，那么循环条件也就只能使用 l < h 这种形式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int singleNonDuplicate(int[] nums) {\n    int l = 0, h = nums.length - 1;\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (m % 2 == 1) {\n            m--;   // 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数\n        }\n        if (nums[m] == nums[m + 1]) {\n            l = m + 2;\n        } else {\n            h = m;\n        }\n    }\n    return nums[l];\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h4",{attrs:{id:"第一个错误的版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一个错误的版本"}},[s._v("#")]),s._v(" 第一个错误的版本")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/first-bad-version/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("278. First Bad Version (Easy) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("题目描述: 给定一个元素 n 代表有 [1, 2, ..., n] 版本，可以调用 isBadVersion(int x) 知道某个版本是否错误，要求找到第一个错误的版本。")]),s._v(" "),n("p",[s._v("如果第 m 个版本出错，则表示第一个错误的版本在 [l, m] 之间，令 h = m；否则第一个错误的版本在 [m + 1, h] 之间，令 l = m + 1。")]),s._v(" "),n("p",[s._v("因为 h 的赋值表达式为 h = m，因此循环条件为 l < h。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int firstBadVersion(int n) {\n    int l = 1, h = n;\n    while (l < h) {\n        int mid = l + (h - l) / 2;\n        if (isBadVersion(mid)) {\n            h = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"旋转数组的最小数字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#旋转数组的最小数字"}},[s._v("#")]),s._v(" 旋转数组的最小数字")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("153. Find Minimum in Rotated Sorted Array (Medium) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Input: [3,4,5,1,2],\nOutput: 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int findMin(int[] nums) {\n    int l = 0, h = nums.length - 1;\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (nums[m] <= nums[h]) {\n            h = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    return nums[l];\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"查找区间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查找区间"}},[s._v("#")]),s._v(" 查找区间")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://leetcode.com/problems/search-for-a-range/description/",target:"_blank",rel:"noopener noreferrer"}},[s._v("34. Search for a Range (Medium) 在新窗口打开"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public int[] searchRange(int[] nums, int target) {\n    int first = binarySearch(nums, target);\n    int last = binarySearch(nums, target + 1) - 1;\n    if (first == nums.length || nums[first] != target) {\n        return new int[]{-1, -1};\n    } else {\n        return new int[]{first, Math.max(first, last)};\n    }\n}\n\nprivate int binarySearch(int[] nums, int target) {\n    int l = 0, h = nums.length; // 注意 h 的初始值\n    while (l < h) {\n        int m = l + (h - l) / 2;\n        if (nums[m] >= target) {\n            h = m;\n        } else {\n            l = m + 1;\n        }\n    }\n    return l;\n}\n```)")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);