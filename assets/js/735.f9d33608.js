(window.webpackJsonp=window.webpackJsonp||[]).push([[735],{4215:function(e,s,a){"use strict";a.r(s);var n=a(7),t=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis详解-mapper映射文件配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解-mapper映射文件配置"}},[e._v("#")]),e._v(" MyBatis详解 - Mapper映射文件配置")]),e._v(" "),s("p",[e._v("=====================================================")]),e._v(" "),s("blockquote",[s("p",[e._v("在mapper文件中，以mapper作为根节点，其下面可以配置的元素节点有： select, insert, update, delete, cache, cache-ref, resultMap, sql; 本文将Mapper映射文件配置进行详解。@pdai")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---mapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE"}},[e._v("MyBatis详解 - Mapper映射文件配置")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#insert-update-delete-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8"}},[e._v("insert, update, delete 的配置及使用")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#selectresultmap%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8"}},[e._v("select、resultMap的配置及使用")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BB%A3%E5%85%A5%E6%B3%95"}},[e._v("字符串代入法")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B9%8Bcache%E8%A7%A3%E6%9E%90"}},[e._v("子元素之cache解析")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B9%8Bcache-ref%E8%A7%A3%E6%9E%90"}},[e._v("子元素之cache-ref解析")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B9%8Bresultmap%E8%A7%A3%E6%9E%90"}},[e._v("子元素之resultMap解析")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B9%8Bsql%E8%A7%A3%E6%9E%90"}},[e._v("子元素之sql解析")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AD%90%E5%85%83%E7%B4%A0%E4%B9%8Bstatement%E8%A7%A3%E6%9E%90"}},[e._v("子元素之statement解析")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E8%A7%A3%E6%9E%90%E5%AD%90%E5%85%83%E7%B4%A0"}},[e._v("动态解析子元素")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%94%9F%E6%88%90sqlsource"}},[e._v("生成SqlSource")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%94%9F%E6%88%90keygenerator"}},[e._v("生成KeyGenerator")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%88%9B%E5%BB%BAmappedstatement"}},[e._v("创建MappedStatement")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%B3%A8%E5%86%8Cmapper%E7%B1%BB%E5%9E%8B"}},[e._v("注册mapper类型")])])])])]),e._v(" "),s("h1",{attrs:{id:"insert-update-delete-的配置及使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#insert-update-delete-的配置及使用"}},[e._v("#")]),e._v(" insert, update, delete 的配置及使用")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("相信，看到insert, update, delete， 我们就知道其作用了，顾名思义嘛，myabtis 作为持久层框架，必须要对CRUD啊。好啦，咱们就先来看看 insert, update, delete 怎么配置， 能配置哪些元素吧：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>   \n<!DOCTYPE mapper   \nPUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"  \n"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> \n\n\x3c!-- mapper 为根元素节点， 一个namespace对应一个dao --\x3e\n\x3c!-- \nMapper元素只有一个属性namespace，它有两个作用：`一是用于区分不同的mapper`（在不同的mapper文件里，子元素的id可以相同，mybatis通过namespace和子元素的id联合区分），`二是与接口关联`（应用程序通过接口访问mybatis时，mybatis通过接口的完整名称查找对应的mapper配置，因此namespace的命名务必小心一定要某接口同名）。\n--\x3e\n<mapper namespace="com.dy.dao.UserDao">\n    \n    \x3c!-- \n    cache- 配置本定命名空间的缓存。\n        type- cache实现类，默认为PERPETUAL，可以使用自定义的cache实现类（别名或完整类名皆可）\n        eviction- 回收算法，默认为LRU，可选的算法有：\n            LRU– 最近最少使用的：移除最长时间不被使用的对象。\n            FIFO– 先进先出：按对象进入缓存的顺序来移除它们。\n            SOFT– 软引用：移除基于垃圾回收器状态和软引用规则的对象。\n            WEAK– 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。\n        flushInterval- 刷新间隔，默认为1个小时，单位毫秒\n        size- 缓存大小，默认大小1024，单位为引用数\n        readOnly- 只读\n    --\x3e\n    <cache type="PERPETUAL" eviction="LRU" flushInterval="60000"  \n        size="512" readOnly="true" />\n    \n    \x3c!-- \n    cache-ref–从其他命名空间引用缓存配置。\n        如果你不想定义自己的cache，可以使用cache-ref引用别的cache。因为每个cache都以namespace为id，所以cache-ref只需要配置一个namespace属性就可以了。需要注意的是，如果cache-ref和cache都配置了，以cache为准。\n    --\x3e\n    <cache-ref namespace="com.someone.application.data.SomeMapper"/>\n    \n    <insert\n      \x3c!-- 1. id （必须配置）\n        id是命名空间中的唯一标识符，可被用来代表这条语句。 \n        一个命名空间（namespace） 对应一个dao接口, \n        这个id也应该对应dao里面的某个方法（相当于方法的实现），因此id 应该与方法名一致 --\x3e\n      \n      id="insertUser"\n      \n      \x3c!-- 2. parameterType （可选配置, 默认为mybatis自动选择处理）\n        将要传入语句的参数的完全限定类名或别名， 如果不配置，mybatis会通过ParameterHandler 根据参数类型默认选择合适的typeHandler进行处理\n        parameterType 主要指定参数类型，可以是int, short, long, string等类型，也可以是复杂类型（如对象） --\x3e\n      \n      parameterType="com.demo.User"\n      \n      \x3c!-- 3. flushCache （可选配置，默认配置为true）\n        将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句） --\x3e\n      \n      flushCache="true"\n      \n      \x3c!-- 4. statementType （可选配置，默认配置为PREPARED）\n        STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。 --\x3e\n      \n      statementType="PREPARED"\n      \n      \x3c!-- 5. keyProperty (可选配置， 默认为unset)\n        （仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 --\x3e\n      \n      keyProperty=""\n      \n      \x3c!-- 6. keyColumn     (可选配置)\n        （仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 --\x3e\n      \n      keyColumn=""\n      \n      \x3c!-- 7. useGeneratedKeys (可选配置， 默认为false)\n        （仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。  --\x3e\n      \n      useGeneratedKeys="false"\n      \n      \x3c!-- 8. timeout  (可选配置， 默认为unset, 依赖驱动)\n        这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。 --\x3e\n      timeout="20">\n\n    <update\n      id="updateUser"\n      parameterType="com.demo.User"\n      flushCache="true"\n      statementType="PREPARED"\n      timeout="20">\n\n    <delete\n      id="deleteUser"\n      parameterType="com.demo.User"\n      flushCache="true"\n      statementType="PREPARED"\n      timeout="20">\n</mapper>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br"),s("span",{staticClass:"line-number"},[e._v("51")]),s("br"),s("span",{staticClass:"line-number"},[e._v("52")]),s("br"),s("span",{staticClass:"line-number"},[e._v("53")]),s("br"),s("span",{staticClass:"line-number"},[e._v("54")]),s("br"),s("span",{staticClass:"line-number"},[e._v("55")]),s("br"),s("span",{staticClass:"line-number"},[e._v("56")]),s("br"),s("span",{staticClass:"line-number"},[e._v("57")]),s("br"),s("span",{staticClass:"line-number"},[e._v("58")]),s("br"),s("span",{staticClass:"line-number"},[e._v("59")]),s("br"),s("span",{staticClass:"line-number"},[e._v("60")]),s("br"),s("span",{staticClass:"line-number"},[e._v("61")]),s("br"),s("span",{staticClass:"line-number"},[e._v("62")]),s("br"),s("span",{staticClass:"line-number"},[e._v("63")]),s("br"),s("span",{staticClass:"line-number"},[e._v("64")]),s("br"),s("span",{staticClass:"line-number"},[e._v("65")]),s("br"),s("span",{staticClass:"line-number"},[e._v("66")]),s("br"),s("span",{staticClass:"line-number"},[e._v("67")]),s("br"),s("span",{staticClass:"line-number"},[e._v("68")]),s("br"),s("span",{staticClass:"line-number"},[e._v("69")]),s("br"),s("span",{staticClass:"line-number"},[e._v("70")]),s("br"),s("span",{staticClass:"line-number"},[e._v("71")]),s("br"),s("span",{staticClass:"line-number"},[e._v("72")]),s("br"),s("span",{staticClass:"line-number"},[e._v("73")]),s("br"),s("span",{staticClass:"line-number"},[e._v("74")]),s("br"),s("span",{staticClass:"line-number"},[e._v("75")]),s("br"),s("span",{staticClass:"line-number"},[e._v("76")]),s("br"),s("span",{staticClass:"line-number"},[e._v("77")]),s("br"),s("span",{staticClass:"line-number"},[e._v("78")]),s("br"),s("span",{staticClass:"line-number"},[e._v("79")]),s("br"),s("span",{staticClass:"line-number"},[e._v("80")]),s("br"),s("span",{staticClass:"line-number"},[e._v("81")]),s("br"),s("span",{staticClass:"line-number"},[e._v("82")]),s("br"),s("span",{staticClass:"line-number"},[e._v("83")]),s("br"),s("span",{staticClass:"line-number"},[e._v("84")]),s("br"),s("span",{staticClass:"line-number"},[e._v("85")]),s("br"),s("span",{staticClass:"line-number"},[e._v("86")]),s("br"),s("span",{staticClass:"line-number"},[e._v("87")]),s("br"),s("span",{staticClass:"line-number"},[e._v("88")]),s("br"),s("span",{staticClass:"line-number"},[e._v("89")]),s("br")])]),s("p",[e._v("以上就是一个模板配置， 哪些是必要配置，哪些是根据自己实际需求，看一眼就知道了。看一个真实的UserDao-Mapper.xml配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>   \n<!DOCTYPE mapper   \nPUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"  \n"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> \n\n<mapper namespace="com.dy.dao.UserDao">\n   \n   \x3c!-- 对应userDao中的insertUser方法，  --\x3e\n   <insert id="insertUser" parameterType="com.dy.entity.User">\n           insert into user(id, name, password, age, deleteFlag) \n               values(#{id}, #{name}, #{password}, #{age}, #{deleteFlag})\n   </insert>\n   \n   \x3c!-- 对应userDao中的updateUser方法 --\x3e\n   <update id="updateUser" parameterType="com.dy.entity.User">\n           update user set name = #{name}, password = #{password}, age = #{age}, deleteFlag = #{deleteFlag}\n               where id = #{id};\n   </update>\n    \n   \x3c!-- 对应userDao中的deleteUser 方法 --\x3e \n   <delete id="deleteUser" parameterType="com.dy.entity.User">\n           delete from user where id = #{id};\n   </delete>\n</mapper>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])]),s("p",[e._v('这样，一个简单的映射关系就建立了。仔细观察上面parameterType, "com.dy.entity.User"，包名要是再长点呢，每次都这样写，写得蛋疼了。别忘了之前讲的 typeAliases（别名）， 那么这个地方，用上别名，岂不是技能跟蛋疼的长长的包名说拜拜了。好啦，咱们配上别名，在哪儿配？ 当然是在mybatis 的全局配置文件（我这儿名字是mybatis-conf.xml）， 不要认为是在mapper的配置文件里面配置哈。')]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<typeAliases>\n     \x3c!--\n        通过package, 可以直接指定package的名字， mybatis会自动扫描你指定包下面的javabean,\n        并且默认设置一个别名，默认的名字为： javabean 的首字母小写的非限定类名来作为它的别名。\n        也可在javabean 加上注解@Alias 来自定义别名， 例如： @Alias(user) \n        <package name="com.dy.entity"/>\n     --\x3e\n     <typeAlias alias="user" type="com.dy.entity.User"/>\n</typeAliases>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("这样，一个别名就取好了，咱们可以把上面的 com.dy.entity.User 都直接改为user 了。 这多方便呀！")]),e._v(" "),s("p",[e._v("我这儿数据库用的是mysql, 我把user表的主键id 设置了自动增长， 以上代码运行正常， 那么问题来了（当然，我不是要问学挖掘机哪家强），我要是换成oracle数据库怎么办？ oracle 可是不支持id自增长啊？ 怎么办？请看下面：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('   \x3c!-- 对应userDao中的insertUser方法，  --\x3e\n   <insert id="insertUser" parameterType="com.dy.entity.User">\n        \x3c!-- oracle等不支持id自增长的，可根据其id生成策略，先获取id --\x3e  \n        <selectKey resultType="int" order="BEFORE" keyProperty="id">\n              select seq_user_id.nextval as id from dual\n        </selectKey>\n        \n           \n        insert into user(id, name, password, age, deleteFlag) \n        values(#{id}, #{name}, #{password}, #{age}, #{deleteFlag})\n   </insert>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("同理，如果我们在使用mysql的时候，想在数据插入后返回插入的id, 我们也可以使用 selectKey 这个元素：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('   \x3c!-- 对应userDao中的insertUser方法，  --\x3e\n   <insert id="insertUser" parameterType="com.dy.entity.User">\n        \x3c!-- oracle等不支持id自增长的，可根据其id生成策略，先获取id \n        <selectKey resultType="int" order="BEFORE" keyProperty="id">\n              select seq_user_id.nextval as id from dual\n        </selectKey>\n        --\x3e \n        \n        \x3c!-- mysql插入数据后，获取id，该方法LAST_INSERT_ID()与数据库连接绑定，同属统一会话级别。--\x3e\n        <selectKey keyProperty="id" resultType="int" order="AFTER" >\n               SELECT LAST_INSERT_ID() as id\n        </selectKey>\n          \n        insert into user(id, name, password, age, deleteFlag) \n        values(#{id}, #{name}, #{password}, #{age}, #{deleteFlag})\n   </insert>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[s("strong",[e._v("这儿，我们就简单提一下"),s("code",[e._v("<selectKey>")]),e._v("这个元素节点吧")])]),e._v(" "),s("p",[e._v("selectKey给了你一个简单的行为在你的数据库中来处理自动生成的主键，而不需要使你的Java代码变得复杂。在上面的示例中，selectKey元素将会首先运行，userid会被设置，然后插入语句会被调用。另外，selectKey节点生成的KeyGenerator优先级高于statement节点的useGeneratedKeys属性生成的KeyGenerator对象，也就是说配置了SelectKey子节点就不需要再配置useGeneratedKeys属性了。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<selectKey\n        \x3c!-- selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 --\x3e\n        keyProperty="id"\n        \x3c!-- 结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也不会有什么问题。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。 --\x3e\n        resultType="int"\n        \x3c!-- 这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。 --\x3e\n        order="BEFORE"\n        \x3c!-- 与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，分别代表 PreparedStatement 和 CallableStatement 类型。 --\x3e\n        statementType="PREPARED">\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("h1",{attrs:{id:"select、resultmap的配置及使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select、resultmap的配置及使用"}},[e._v("#")]),e._v(" select、resultMap的配置及使用")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("select无疑是我们最常用，也是最复杂的，mybatis通过resultMap能帮助我们很好地进行高级映射。下面就开始看看select 以及 resultMap的用法：")]),e._v(" "),s("p",[e._v("先看select的配置吧：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<select\n     \x3c!--  1. id （必须配置）\n        id是命名空间中的唯一标识符，可被用来代表这条语句。 \n        一个命名空间（namespace） 对应一个dao接口, \n        这个id也应该对应dao里面的某个方法（相当于方法的实现），因此id 应该与方法名一致\n     --\x3e\n     \n     id="selectPerson"\n     \n     \x3c!-- 2. parameterType （可选配置, 默认为mybatis自动选择处理）\n        将要传入语句的参数的完全限定类名或别名， 如果不配置，mybatis会通过ParameterHandler 根据参数类型默认选择合适的typeHandler进行处理\n        parameterType 主要指定参数类型，可以是int, short, long, string等类型，也可以是复杂类型（如对象） --\x3e\n     parameterType="int"\n     \n     \x3c!-- 3. resultType (resultType 与 resultMap 二选一配置)\n         resultType用以指定返回类型，指定的类型可以是基本类型，可以是java容器，也可以是javabean --\x3e\n     resultType="hashmap"\n     \n     \x3c!-- 4. resultMap (resultType 与 resultMap 二选一配置)\n         resultMap用于引用我们通过 resultMap标签定义的映射类型，这也是mybatis组件高级复杂映射的关键 --\x3e\n     resultMap="personResultMap"\n     \n     \x3c!-- 5. flushCache (可选配置)\n         将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false --\x3e\n     flushCache="false"\n     \n     \x3c!-- 6. useCache (可选配置)\n         将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true --\x3e\n     useCache="true"\n     \n     \x3c!-- 7. timeout (可选配置) \n         这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）--\x3e\n     timeout="10000"\n     \n     \x3c!-- 8. fetchSize (可选配置) \n         这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动)--\x3e\n     fetchSize="256"\n     \n     \x3c!-- 9. statementType (可选配置) \n         STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED--\x3e\n     statementType="PREPARED"\n     \n     \x3c!-- 10. resultSetType (可选配置) \n         FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）--\x3e\n     resultSetType="FORWARD_ONLY">\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br")])]),s("p",[e._v("配置看起来总是这么多，不过实际常用的配置也就那么几个， 根据自己的需要吧，上面都已注明是否必须配置。看一个CourseDao-Mapper.xml配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<mapper namespace="com.dy.dao.CourseDao">\n    \n    \x3c!-- \n         1.此处直接将resultType 设置为course, 一看就知道我设置了别名吧，如果没有设置别名，那么resultType = com.dy.entity.Course。\n         2.可能细心的你会发现：Course.java中的属性名与数据库字段名不一致，下面，我就在sql语句中用了as, 使之匹配，当然方法不止一种，在学习了resultMap之后，你能看到一种更直观优雅的方式去将javabean中的属性与数据库字段名保持一致\n         3.findCourseById 与CourseDao中findCourseById方法对应， 那么传入的参数名称以及类型也应该保持对应关系。\n         4.可以看到，在sql语句中，通过#{}表达式可以获取参数。\n         5.下面这条sql语句，实际上的形式是怎么样的？还记得之前说过，mybatis默认为preparedStatement吧，那么，用我们jdbc代码来看，它其实就是：\n             select course_id as id, course_name as name, course_delete_flg as deleteFlag from t_course where course_id=?\n     --\x3e\n    <select id="findCourseById"  resultType="course" >\n        select course_id as id, course_name as name, course_delete_flg as deleteFlag from t_course where course_id=#{courseId}\n    </select>\n</mapper>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[e._v("上面的示例，我们针对course, 简单演示了 select的用法， 不过有个问题值得思考： 一个student可以对应多个course, 那么，在mybatis中如何处理这种一对多， 甚至于多对多，一对一的关系呢？")]),e._v(" "),s("p",[e._v("这儿，就不得不提到 resultMap 这个东西， mybatis的resultMap功能可谓十分强大，能够处理复杂的关系映射， 那么resultMap 该怎么配置呢？ 别急，这就来了：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('    \x3c!-- \n        resultMap –结果映射，用来描述如何从数据库结果集映射到你想要的对象。\n\n        1.type 对应类型，可以是javabean, 也可以是其它\n        2.id 必须唯一， 用于标示这个resultMap的唯一性，在使用resultMap的时候，就是通过id指定\n     --\x3e\n    <resultMap type="" id="">\n    \n        \x3c!-- id, 唯一性，注意啦，这个id用于标示这个javabean对象的唯一性， 不一定会是数据库的主键（不要把它理解为数据库对应表的主键） \n            property属性对应javabean的属性名，column对应数据库表的列名\n            （这样，当javabean的属性与数据库对应表的列名不一致的时候，就能通过指定这个保持正常映射了）\n        --\x3e\n        <id property="" column=""/>\n        \n        \x3c!-- result与id相比， 对应普通属性 --\x3e    \n        <result property="" column=""/>\n        \n        \x3c!-- \n            constructor对应javabean中的构造方法\n         --\x3e\n        <constructor>\n            \x3c!-- idArg 对应构造方法中的id参数；--\x3e\n            <idArg column=""/>\n            \x3c!-- arg 对应构造方法中的普通参数；--\x3e\n            <arg column=""/>\n        </constructor>\n        \n        \x3c!-- \n            聚集元素用来处理“一对多”的关系。需要指定映射的Java实体类的属性，属性的javaType（一般为ArrayList）；列表中对象的类型ofType（Java实体类）；对应的数据库表的列名称；\n\n            collection，对应javabean中容器类型, 是实现一对多的关键 \n            property 为javabean中容器对应字段名\n            column 为体现在数据库中列名\n            ofType 就是指定javabean中容器指定的类型\n\n            不同情况需要告诉MyBatis 如何加载一个聚集。MyBatis 可以用两种方式加载：\n                1. select: 执行一个其它映射的SQL 语句返回一个Java实体类型。较灵活；\n                2. resultMap: 使用一个嵌套的结果映射来处理通过join查询结果集，映射成Java实体类型。\n        --\x3e\n        <collection property="" column="" ofType=""></collection>\n        \n        \x3c!-- \n            联合元素用来处理“一对一”的关系。需要指定映射的Java实体类的属性，属性的javaType（通常MyBatis 自己会识别）。对应的数据库表的列名称。如果想覆写的话返回结果的值，需要指定typeHandler。\n\n            association 为关联关系，是实现N对一的关键。\n            property 为javabean中容器对应字段名\n            column 为体现在数据库中列名\n            javaType 指定关联的类型\n\n            不同情况需要告诉MyBatis 如何加载一个联合。MyBatis可以用两种方式加载：\n                1. select: 执行一个其它映射的SQL 语句返回一个Java实体类型。较灵活；\n                2. resultMap: 使用一个嵌套的结果映射来处理，通过join查询结果集，映射成Java实体类型。\n         --\x3e\n        <association property="" column="" javaType=""></association>\n\n        \x3c!-- \n            有时一个单独的数据库查询也许返回很多不同（但是希望有些关联）数据类型的结果集。鉴别器元素就是被设计来处理这个情况的，还有包括类的继承层次结构。鉴别器非常容易理解，因为它的表现很像Java语言中的switch语句。\n\n            定义鉴别器指定了column和javaType属性。列是MyBatis查找比较值的地方。JavaType是需要被用来保证等价测试的合适类型（尽管字符串在很多情形下都会有用）。\n\n            下面这个例子为，当classId为20000001时，才映射classId属性。\n        --\x3e\n        <discriminator column="CLASS_ID" javaType="String" jdbcType="VARCHAR">  \n            <case value="20000001" resultType="liming.student.manager.data.model.StudentEntity" >  \n                <result property="classId" column="CLASS_ID" javaType="String" jdbcType="VARCHAR"/>  \n            </case> \n        </discriminator>\n    </resultMap>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br"),s("span",{staticClass:"line-number"},[e._v("51")]),s("br"),s("span",{staticClass:"line-number"},[e._v("52")]),s("br"),s("span",{staticClass:"line-number"},[e._v("53")]),s("br"),s("span",{staticClass:"line-number"},[e._v("54")]),s("br"),s("span",{staticClass:"line-number"},[e._v("55")]),s("br"),s("span",{staticClass:"line-number"},[e._v("56")]),s("br"),s("span",{staticClass:"line-number"},[e._v("57")]),s("br"),s("span",{staticClass:"line-number"},[e._v("58")]),s("br"),s("span",{staticClass:"line-number"},[e._v("59")]),s("br"),s("span",{staticClass:"line-number"},[e._v("60")]),s("br"),s("span",{staticClass:"line-number"},[e._v("61")]),s("br"),s("span",{staticClass:"line-number"},[e._v("62")]),s("br"),s("span",{staticClass:"line-number"},[e._v("63")]),s("br"),s("span",{staticClass:"line-number"},[e._v("64")]),s("br"),s("span",{staticClass:"line-number"},[e._v("65")]),s("br"),s("span",{staticClass:"line-number"},[e._v("66")]),s("br"),s("span",{staticClass:"line-number"},[e._v("67")]),s("br"),s("span",{staticClass:"line-number"},[e._v("68")]),s("br")])]),s("p",[e._v("好啦，知道resutMap怎么配置后，咱们立即接着上面的demo来练习一下吧，一个student对应多个course， 典型的一对多，咱们就来看看mybatis怎么配置这种映射吧：StudentDao-Mapper.xml")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<mapper namespace="com.dy.dao.StudentDao">\n\n    \x3c!-- 这儿定义一个resultMap --\x3e\n    <resultMap type="student" id="studentMap">\n    \n        \x3c!-- \n            数据库中主键是id, 但是我这儿却是指定idCard为主键，为什么？ \n            刚刚讲了，id用来表示唯一性， 我们可以认为只要idCard一样，那么他就是同一个学生。\n            如果此处用数据库中id， 那么mybatis将会认为数据库中每条记录都是一个student, 这显然不符合逻辑\n        --\x3e\n        <id property="idCard" column="stu_id_card"/>\n        <result property="id" column="stu_id"/>\n        <result property="name" column="stu_name"/>\n        <result property="deleteFlag" column="stu_delete_flg"/>\n  \n        <constructor>  \n            <idArg javaType="String" column="STUDENT_ID"/>  \n            <arg javaType="String" column="STUDENT_NAME"/>  \n            <arg javaType="String" column="STUDENT_SEX"/>  \n            <arg javaType="Date" column="STUDENT_BIRTHDAY"/>  \n        </constructor>\n        \n        \x3c!-- \n            这儿就是实现一对多的关键。 \n            在Student中，courseList为List<Course>, 因此，ofType也应该与之对应（当然，我用了别名，不然要蛋疼的写全名了）。\n            collection的子标签是在指定Course的映射关系（由于Course的javabean的属性名与数据库的列名不一致）\n        --\x3e\n        <collection property="courseList" column="stu_course_id" ofType="Course">\n            <id property="id" column="course_id"/>\n            <result property="name" column="course_name"/>\n            <result property="deleteFlag" column="course_delete_flg"/>\n        </collection>\n    </resultMap>\n    \n    \x3c!-- 这儿将返回类型设置成了上面指定的studentMap --\x3e\n    <select id="findStudentById" resultMap="studentMap">\n        SELECT s.*, c.* FROM t_student s LEFT JOIN t_course c ON s.stu_course_id=c.course_id WHERE s.stu_id_card=#{idCard}\n    </select>\n\n    \x3c!-- \n        sql –可以重用的SQL块，可以被其他数据库操作语句引用。\n    --\x3e\n    <sql id="userColumns"> userid,username,password</sql>\n    \n    <select id="queryUsers" parameterType="UserDto" resultType="UserDto" useCache="false">\n\tselect <include refid="userColumns"/> from t_user t where t.username = #{username}\n    </select>\n    \n</mapper>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br")])]),s("p",[e._v("当然，我们需要定义StudentEntity实体类的构造方法：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public StudentEntity(String studentID, String studentName, String studentSex, Date studentBirthday){  \n    this.studentID = studentID;  \n    this.studentName = studentName;  \n    this.studentSex = studentSex;  \n    this.studentBirthday = studentBirthday;  \n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("相信通过以上示例， 大家也能够使用mybatis的select 和 resultMap的用法了。上面只演示了一对多的映射，其实多对一、多对多也与它类似，所以我就没演示了，有兴趣的可以自己动手再做做。")]),e._v(" "),s("h1",{attrs:{id:"字符串代入法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串代入法"}},[e._v("#")]),e._v(" 字符串代入法")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("默认的情况下，使用#{}语法会促使MyBatis 生成PreparedStatement 属性并且使用PreparedStatement 的参数（=？）来安全的设置值。尽量这些是快捷安全，也是经常使用的。但有时候你可能想直接未更改的字符串代入到SQL 语句中。比如说，对于ORDER BY，你可能会这样使用：ORDER BY ${columnName}但MyBatis 不会修改和规避掉这个字符串。")]),e._v(" "),s("blockquote",[s("p",[e._v("注意：这样地接收和应用一个用户输入到未更改的语句中，是非常不安全的。这会让用户能植入破坏代码，所以，要么要求字段不要允许客户输入，要么你直接来检测他的合法性 。")])]),e._v(" "),s("h1",{attrs:{id:"子元素之cache解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子元素之cache解析"}},[e._v("#")]),e._v(" 子元素之cache解析")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("Mapper配置文件是由XMLMapperBuilder解析的，其中cacheElement方法负责解析cache元素，它通过调用CacheBuilder的相应方法完成cache的创建。每个cache内部都有一个唯一的ID，这个id的值就是namespace。创建好的cache对象存入configuration的cache缓存中（该缓存以cache的ID属性即namespace为key，这里再次体现了mybatis的namespace的强大用处）。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  private void cacheElement(XNode context) throws Exception {\n    if (context != null) {\n      String type = context.getStringAttribute("type", "PERPETUAL");\n      Class<? extends Cache> typeClass = typeAliasRegistry.resolveAlias(type);\n      String eviction = context.getStringAttribute("eviction", "LRU");\n      Class<? extends Cache> evictionClass = typeAliasRegistry.resolveAlias(eviction);\n      Long flushInterval = context.getLongAttribute("flushInterval");\n      Integer size = context.getIntAttribute("size");\n      boolean readWrite = !context.getBooleanAttribute("readOnly", false);\n      Properties props = context.getChildrenAsProperties();\n      builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, props);\n    }\n  }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("h1",{attrs:{id:"子元素之cache-ref解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子元素之cache-ref解析"}},[e._v("#")]),e._v(" 子元素之cache-ref解析")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("cacheRefElement方法负责解析cache-ref元素，它通过调用CacheRefResolver的相应方法完成cache的引用。创建好的cache-ref引用关系存入configuration的cacheRefMap缓存中。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  private void cacheRefElement(XNode context) {\n    if (context != null) {\n      configuration.addCacheRef(builderAssistant.getCurrentNamespace(), context.getStringAttribute("namespace"));\n      CacheRefResolver cacheRefResolver = new CacheRefResolver(builderAssistant, context.getStringAttribute("namespace"));\n      try {\n    \t  cacheRefResolver.resolveCacheRef();\n      } catch (IncompleteElementException e) {\n    \t  configuration.addIncompleteCacheRef(cacheRefResolver);\n      }\n    }\n  }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("h1",{attrs:{id:"子元素之resultmap解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子元素之resultmap解析"}},[e._v("#")]),e._v(" 子元素之resultMap解析")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("resultMapElement方法负责解析resultMap元素，它通过调用ResultMapResolver的相应方法完成resultMap的解析。创建好的resultMap存入configuration的resultMaps缓存中（该缓存以namespace+resultMap的id为key，这里再次体现了mybatis的namespace的强大用处）。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  private ResultMap resultMapElement(XNode resultMapNode) throws Exception {\n    return resultMapElement(resultMapNode, Collections.<ResultMapping> emptyList());\n  }\n\n  private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> additionalResultMappings) throws Exception {\n    ErrorContext.instance().activity("processing " + resultMapNode.getValueBasedIdentifier());\n    String id = resultMapNode.getStringAttribute("id",\n        resultMapNode.getValueBasedIdentifier());\n    String type = resultMapNode.getStringAttribute("type",\n        resultMapNode.getStringAttribute("ofType",\n            resultMapNode.getStringAttribute("resultType",\n                resultMapNode.getStringAttribute("javaType"))));\n    String extend = resultMapNode.getStringAttribute("extends");\n    Boolean autoMapping = resultMapNode.getBooleanAttribute("autoMapping");\n    Class<?> typeClass = resolveClass(type);\n    Discriminator discriminator = null;\n    List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();\n    resultMappings.addAll(additionalResultMappings);\n    List<XNode> resultChildren = resultMapNode.getChildren();\n    for (XNode resultChild : resultChildren) {\n      if ("constructor".equals(resultChild.getName())) {\n        processConstructorElement(resultChild, typeClass, resultMappings);\n      } else if ("discriminator".equals(resultChild.getName())) {\n        discriminator = processDiscriminatorElement(resultChild, typeClass, resultMappings);\n      } else {\n        ArrayList<ResultFlag> flags = new ArrayList<ResultFlag>();\n        if ("id".equals(resultChild.getName())) {\n          flags.add(ResultFlag.ID);\n        }\n        resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));\n      }\n    }\n    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMapping);\n    try {\n      return resultMapResolver.resolve();\n    } catch (IncompleteElementException  e) {\n      configuration.addIncompleteResultMap(resultMapResolver);\n      throw e;\n    }\n  }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br")])]),s("h1",{attrs:{id:"子元素之sql解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子元素之sql解析"}},[e._v("#")]),e._v(" 子元素之sql解析")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("sqlElement方法负责解析sql元素。id属性用于区分不同的sql元素，在同一个mapper配置文件中可以配置多个sql元素。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  private void sqlElement(List<XNode> list) throws Exception {\n    if (configuration.getDatabaseId() != null) {\n      sqlElement(list, configuration.getDatabaseId());\n    }\n    sqlElement(list, null);\n  }\n\n  private void sqlElement(List<XNode> list, String requiredDatabaseId) throws Exception {\n    for (XNode context : list) {\n      String databaseId = context.getStringAttribute("databaseId");\n      String id = context.getStringAttribute("id");\n      id = builderAssistant.applyCurrentNamespace(id, false);\n      if (databaseIdMatchesCurrent(id, databaseId, requiredDatabaseId)) sqlFragments.put(id, context);\n    }\n  }\n  \n  private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {\n    if (requiredDatabaseId != null) {\n      if (!requiredDatabaseId.equals(databaseId)) {\n        return false;\n      }\n    } else {\n      if (databaseId != null) {\n        return false;\n      }\n      // skip this fragment if there is a previous one with a not null databaseId\n      if (this.sqlFragments.containsKey(id)) {\n        XNode context = this.sqlFragments.get(id);\n        if (context.getStringAttribute("databaseId") != null) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br")])]),s("h1",{attrs:{id:"子元素之statement解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子元素之statement解析"}},[e._v("#")]),e._v(" 子元素之statement解析")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("buildStatementFromContext方法负责解析statement元素。id属性用于区分不同的statement元素，在同一个配置文件中可以配置多个statement元素。通过调用XMLStatementBuilder的parseStatementNode方法完成解析。在这个方法内有几个重要的步骤，理解他们对正确的配置statement元素很有帮助。")]),e._v(" "),s("h3",{attrs:{id:"动态解析子元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态解析子元素"}},[e._v("#")]),e._v(" 动态解析子元素")]),e._v(" "),s("p",[e._v("statement节点可以配置各种子元素，比如前面提到的include子元素和selectKey子元素等（在动态sql里还有更多的子元素，具体参考mybatis的官方文档）。动态解析子元素通过parseDynamicTags方法完成。该方法根据子元素的类型递归的解析成一个个的SqlNode，这些SqlNode对象提供了apply方法，供后续调用时生成sql语句所需。需要注意的是SelectKey没有对应的SqlNode对象，因为它的功能是用来生成KeyGenerator对象的（具体来说是SelectKeyGenerator对象）。另外，SelectKey节点生成的KeyGenerator优先级高于statement节点的useGeneratedKeys属性生成的KeyGenerator对象，也就是说配置了SelectKey子节点就不需要再配置useGeneratedKeys属性了。")]),e._v(" "),s("h3",{attrs:{id:"生成sqlsource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成sqlsource"}},[e._v("#")]),e._v(" 生成SqlSource")]),e._v(" "),s("p",[e._v("SqlSource用于后续调用时根据SqlNode和参数对象生成sql语句。它接收一个叫做rootsqlNode的对象作为构造参数。")]),e._v(" "),s("h3",{attrs:{id:"生成keygenerator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成keygenerator"}},[e._v("#")]),e._v(" 生成KeyGenerator")]),e._v(" "),s("p",[e._v('如果配置了selectKey子元素，KeyGenerator直接使用selectKey子元素里生成的KeyGenerator对象（具体来说是SelectKeyGenerator对象）。若没配置，则如果useGeneratedKeys属性的值为"true"且配置了 keyProperty属性，则生成默认的Jdbc3KeyGenerator对象，该对象调用JDBC驱动的getGeneratedKeys方法返回insert语句执行后生成的自增长主键。')]),e._v(" "),s("h3",{attrs:{id:"创建mappedstatement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建mappedstatement"}},[e._v("#")]),e._v(" 创建MappedStatement")]),e._v(" "),s("p",[e._v("MappedStatement对象封装了statement元素的所有属性以及子节点值，MappedStatement对象有一个id属性用于唯一标记它，这个id由namespace加statement元素的id属性值构成。创建好的MappedStatement对象存入Configuration对象的mappedStatements缓存中，key为MappedStatement对象的id值。")]),e._v(" "),s("p",[e._v("XMLMapperBuilder.java：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  private void buildStatementFromContext(List<XNode> list) {\n    if (configuration.getDatabaseId() != null) {\n      buildStatementFromContext(list, configuration.getDatabaseId());\n    }\n    buildStatementFromContext(list, null);\n  }\n\n  private void buildStatementFromContext(List<XNode> list, String requiredDatabaseId) {\n    for (XNode context : list) {\n      final XMLStatementBuilder statementParser = new XMLStatementBuilder(configuration, builderAssistant, context, requiredDatabaseId);\n      try {\n        statementParser.parseStatementNode();\n      } catch (IncompleteElementException e) {\n        configuration.addIncompleteStatement(statementParser);\n      }\n    }\n  }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[e._v("XMLStatementBuilder.java：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  public void parseStatementNode() {\n    String id = context.getStringAttribute("id");\n    String databaseId = context.getStringAttribute("databaseId");\n\n    if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) return;\n\n    Integer fetchSize = context.getIntAttribute("fetchSize");\n    Integer timeout = context.getIntAttribute("timeout");\n    String parameterMap = context.getStringAttribute("parameterMap");\n    String parameterType = context.getStringAttribute("parameterType");\n    Class<?> parameterTypeClass = resolveClass(parameterType);\n    String resultMap = context.getStringAttribute("resultMap");\n    String resultType = context.getStringAttribute("resultType");\n    String lang = context.getStringAttribute("lang");\n    LanguageDriver langDriver = getLanguageDriver(lang);\n\n    Class<?> resultTypeClass = resolveClass(resultType);\n    String resultSetType = context.getStringAttribute("resultSetType");\n    StatementType statementType = StatementType.valueOf(context.getStringAttribute("statementType", StatementType.PREPARED.toString()));\n    ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);\n\n    String nodeName = context.getNode().getNodeName();\n    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));\n    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;\n    boolean flushCache = context.getBooleanAttribute("flushCache", !isSelect);\n    boolean useCache = context.getBooleanAttribute("useCache", isSelect);\n    boolean resultOrdered = context.getBooleanAttribute("resultOrdered", false);\n\n    // Include Fragments before parsing\n    XMLIncludeTransformer includeParser = new XMLIncludeTransformer(configuration, builderAssistant);\n    includeParser.applyIncludes(context.getNode());\n\n    // Parse selectKey after includes and remove them.\n    processSelectKeyNodes(id, parameterTypeClass, langDriver);\n    \n    // Parse the SQL (pre: <selectKey> and <include> were parsed and removed)\n    SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);\n    String resultSets = context.getStringAttribute("resultSets");\n    String keyProperty = context.getStringAttribute("keyProperty");\n    String keyColumn = context.getStringAttribute("keyColumn");\n    KeyGenerator keyGenerator;\n    String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX;\n    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true);\n    if (configuration.hasKeyGenerator(keyStatementId)) {\n      keyGenerator = configuration.getKeyGenerator(keyStatementId);\n    } else {\n      keyGenerator = context.getBooleanAttribute("useGeneratedKeys",\n          configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))\n          ? new Jdbc3KeyGenerator() : new NoKeyGenerator();\n    }\n\n    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,\n        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,\n        resultSetTypeEnum, flushCache, useCache, resultOrdered, \n        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);\n  }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br"),s("span",{staticClass:"line-number"},[e._v("51")]),s("br"),s("span",{staticClass:"line-number"},[e._v("52")]),s("br"),s("span",{staticClass:"line-number"},[e._v("53")]),s("br"),s("span",{staticClass:"line-number"},[e._v("54")]),s("br"),s("span",{staticClass:"line-number"},[e._v("55")]),s("br"),s("span",{staticClass:"line-number"},[e._v("56")]),s("br")])]),s("h1",{attrs:{id:"注册mapper类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注册mapper类型"}},[e._v("#")]),e._v(" 注册mapper类型")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("我们知道每个mapper配置文件的namespace属性对应于某个接口，应用程序通过接口访问mybatis时，mybatis会为这个接口生成一个代理对象，这个对象就叫mapper对象，在生成代理对象前mybatis会校验接口是否已注册，未注册的接口会产生一个异常。为了避免这种异常，就需要注册mapper类型。这个步骤是在XMLMapperBuilder的bindMapperForNamespace方法中完成的。它通过调用Configuration对象的addMapper方法完成，而Configuration对象的addMapper方法是通过MapperRegistry的addMapper方法完成的，它只是简单的将namespace属性对应的接口类型存入本地缓存中。")]),e._v(" "),s("p",[e._v("Configuration对象提供了一个重载的addMappers(StringpackageName)方法，该方法以包路径名为参数，它的功能是自动扫描包路径下的接口并注册到MapperRegistry的缓存中，同时扫描包路径下的mapper配置文件并解析之。解析配置文件是在MapperAnnotationBuilder类的parse方法里完成的，该方法先解析配置文件，然后再解析接口里的注解配置，且注解里的配置会覆盖配置文件里的配置，也就是说注解的优先级高于配置文件，这点需要注意。采用自动扫描会大大简化配置，只不过需要应用程序自己调用，mybatis默认是不会调用这个方法的（后续将会讲解的spring集成mybatis就用到了自动扫描）。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  private void bindMapperForNamespace() {\n    String namespace = builderAssistant.getCurrentNamespace();\n    if (namespace != null) {\n      Class<?> boundType = null;\n      try {\n        boundType = Resources.classForName(namespace);\n      } catch (ClassNotFoundException e) {\n        //ignore, bound type is not required\n      }\n      if (boundType != null) {\n        if (!configuration.hasMapper(boundType)) {\n          // Spring may not know the real resource name so we set a flag\n          // to prevent loading again this resource from the mapper interface\n          // look at MapperAnnotationBuilder#loadXmlResource\n          configuration.addLoadedResource("namespace:" + namespace);\n          configuration.addMapper(boundType);\n        }\n      }\n    }\n  }\n```)')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);