(window.webpackJsonp=window.webpackJsonp||[]).push([[438],{1480:function(t,s,a){t.exports=a.p+"assets/img/alg-sort-bucket-1.f2dfd943.jpg"},3779:function(t,s,a){"use strict";a.r(s);var n=a(7),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"排序-桶排序-bucket-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序-桶排序-bucket-sort"}},[t._v("#")]),t._v(" 排序 - 桶排序(Bucket Sort)")]),t._v(" "),s("p",[t._v("==============================================")]),t._v(" "),s("blockquote",[s("p",[t._v("桶排序(Bucket Sort)的原理很简单，将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。@pdai")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-bucket.html#%E6%A1%B6%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"}},[t._v("桶排序介绍"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-bucket.html#%E6%A1%B6%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("桶排序实现"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-bucket.html#%E6%A1%B6%E6%8E%92%E5%BA%8F%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("桶排序复杂度和稳定性"),s("OutboundLink")],1),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-bucket.html#%E6%A1%B6%E6%8E%92%E5%BA%8F%E5%A4%8D%E6%9D%82%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("桶排序复杂度"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-bucket.html#%E6%A1%B6%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("桶排序稳定性"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-bucket.html#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码实现"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-sort-x-bucket.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),s("OutboundLink")],1)])]),t._v(" "),s("h1",{attrs:{id:"桶排序介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桶排序介绍"}},[t._v("#")]),t._v(" 桶排序介绍")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v('假设待排序的数组a中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组r，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个"桶"。')]),t._v(" "),s("p",[t._v('在排序时，逐个遍历数组a，将数组a的值，作为"桶数组r"的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组a[3]=5，则将r[5]的值+1。')]),t._v(" "),s("h1",{attrs:{id:"桶排序实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桶排序实现"}},[t._v("#")]),t._v(" 桶排序实现")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("假设a={8,2,3,4,3,6,6,3,9}, max=10。此时，将数组a的所有数据都放到需要为0-9的桶中。如下图:")]),t._v(" "),s("p",[s("img",{attrs:{src:a(1480),alt:""}})]),t._v(" "),s("p",[t._v("在将数据放到桶中之后，再通过一定的算法，将桶中的数据提出出来并转换成有序数组。就得到我们想要的结果了。")]),t._v(" "),s("h1",{attrs:{id:"桶排序复杂度和稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桶排序复杂度和稳定性"}},[t._v("#")]),t._v(" 桶排序复杂度和稳定性")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"桶排序复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桶排序复杂度"}},[t._v("#")]),t._v(" 桶排序复杂度")]),t._v(" "),s("ul",[s("li",[t._v("平均时间复杂度: O(n + k)")]),t._v(" "),s("li",[t._v("最佳时间复杂度: O(n + k)")]),t._v(" "),s("li",[t._v("最差时间复杂度: O(n ^ 2)")]),t._v(" "),s("li",[t._v("空间复杂度: O(n * k)")])]),t._v(" "),s("p",[t._v("桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。")]),t._v(" "),s("h3",{attrs:{id:"桶排序稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桶排序稳定性"}},[t._v("#")]),t._v(" 桶排序稳定性")]),t._v(" "),s("p",[t._v("稳定性: 稳定")]),t._v(" "),s("h1",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('/**\n * 桶排序: Java\n *\n * @author skywang\n * @date 2014/03/13\n */\n\npublic class BucketSort {\n\n    /*\n     * 桶排序\n     *\n     * 参数说明: \n     *     a -- 待排序数组\n     *     max -- 数组a中最大值的范围\n     */\n    public static void bucketSort(int[] a, int max) {\n        int[] buckets;\n\n        if (a==null || max<1)\n            return ;\n\n        // 创建一个容量为max的数组buckets，并且将buckets中的所有数据都初始化为0。\n        buckets = new int[max];\n\n        // 1. 计数\n        for(int i = 0; i < a.length; i++) \n            buckets[a[i]]++; \n\n        // 2. 排序\n        for (int i = 0, j = 0; i < max; i++) {\n            while( (buckets[i]--) >0 ) {\n                a[j++] = i;\n            }\n        }\n\n        buckets = null;\n    }\n\n    public static void main(String[] args) {\n        int i;\n        int a[] = {8,2,3,4,3,6,6,3,9};\n\n        System.out.printf("before sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n\n        bucketSort(a, 10); // 桶排序\n\n        System.out.printf("after  sort:");\n        for (i=0; i<a.length; i++)\n            System.out.printf("%d ", a[i]);\n        System.out.printf("\\n");\n    }\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br")])]),s("h1",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("提示")]),t._v(" "),s("p",[t._v("本文主要参考至 https://www.cnblogs.com/skywang12345/p/3602737.html, 在此基础上做了内容的增改。")]),t._v(" "),s("p",[t._v("其它参考：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("https://www.cnblogs.com/bqwzx/p/11029264.html")])]),t._v(" "),s("li",[s("p",[t._v("https://www.cnblogs.com/hokky/p/8529042.html)")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);