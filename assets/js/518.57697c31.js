(window.webpackJsonp=window.webpackJsonp||[]).push([[518],{3616:function(e,a,t){"use strict";t.r(a);var r=t(7),n=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"better-java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#better-java"}},[e._v("#")]),e._v(" Better Java")]),e._v(" "),a("p",[e._v("=============================")]),e._v(" "),a("blockquote",[a("p",[e._v("这不是一本书，国外一个小哥总结的better java 的工具和实践参考。"),a("a",{attrs:{href:"https://www.seancassidy.me/better-java.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("他的博客 在新窗口打开"),a("OutboundLink")],1),e._v(". @pdai")])]),e._v(" "),a("h1",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[e._v("#")]),e._v(" 目录")]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#better-java"}},[e._v("Better Java")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%e7%9b%ae%e5%bd%95"}},[e._v("目录")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#style"}},[e._v("Style")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#structs"}},[e._v("Structs")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#the-builder-pattern"}},[e._v("The Builder Pattern")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#immutable-object-generation"}},[e._v("Immutable Object Generation")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#exceptions"}},[e._v("Exceptions")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#dependency-injection"}},[e._v("Dependency injection")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#avoid-nulls"}},[e._v("Avoid Nulls")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#immutable-by-default"}},[e._v("Immutable-by-default")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#avoid-lots-of-util-classes"}},[e._v("Avoid lots of Util classes")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#formatting"}},[e._v("Formatting")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#javadoc"}},[e._v("Javadoc")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#streams"}},[e._v("Streams")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#deploying"}},[e._v("Deploying")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#frameworks"}},[e._v("Frameworks")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#maven"}},[e._v("Maven")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#dependency-convergence"}},[e._v("Dependency Convergence")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#continuous-integration"}},[e._v("Continuous Integration")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#maven-repository"}},[e._v("Maven repository")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#configuration-management"}},[e._v("Configuration management")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#libraries"}},[e._v("Libraries")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#missing-features"}},[e._v("Missing Features")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#apache-commons"}},[e._v("Apache Commons")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#guava"}},[e._v("Guava")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#gson"}},[e._v("Gson")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#java-tuples"}},[e._v("Java Tuples")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#javaslang"}},[e._v("Javaslang")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#joda-time"}},[e._v("Joda-Time")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#lombok"}},[e._v("Lombok")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#play-framework"}},[e._v("Play framework")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#slf4j"}},[e._v("SLF4J")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#jooq"}},[e._v("jOOQ")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#testing"}},[e._v("Testing")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#junit-4"}},[e._v("jUnit 4")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#jmock"}},[e._v("jMock")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#assertj"}},[e._v("AssertJ")])])])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#tools"}},[e._v("Tools")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#intellij-idea"}},[e._v("IntelliJ IDEA")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#chronon"}},[e._v("Chronon")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#jrebel"}},[e._v("JRebel")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#the-checker-framework"}},[e._v("The Checker Framework")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#code-quality"}},[e._v("Code Quality")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#eclipse-memory-analyzer"}},[e._v("Eclipse Memory Analyzer")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#resources"}},[e._v("Resources")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#books"}},[e._v("Books")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#podcasts"}},[e._v("Podcasts")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#videos"}},[e._v("Videos")])])])])])])]),e._v(" "),a("h1",{attrs:{id:"style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#style"}},[e._v("#")]),e._v(" Style")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Java 传统的代码风格是被用来编写非常复杂的企业级 JavaBean。新的代码风格看起来会更加整洁，更加正确，并且更加简单。")]),e._v(" "),a("h3",{attrs:{id:"structs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structs"}},[e._v("#")]),e._v(" Structs")]),e._v(" "),a("p",[e._v("对我们程序员来说，包装数据是最简单的事情之一。下面是传统的通过定义一个 JavaBean 的实现方式:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DataHolder {\n    private String data;\n\n    public DataHolder() {\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return this.data;\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("p",[e._v("这种方式既繁琐又浪费代码。即使你的 IDE 可以自动生成这些代码，也是浪费。因此，"),a("a",{attrs:{href:"http://www.javapractices.com/topic/TopicAction.do?Id=84",target:"_blank",rel:"noopener noreferrer"}},[e._v("别这么干 在新窗口打开"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("相反，我更喜欢 C 语言保存数据的风格来写一个类:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class DataHolder {\n    public final String data;\n\n    public DataHolder(String data) {\n        this.data = data;\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("这样不仅减少了近一半的代码行数。并且，这个类里面保存的数据除了你去继承它，否则不会改变，由于它不可变性，我们可以认为这会更加简单。")]),e._v(" "),a("p",[e._v("如果你想保存很容易修改的对象数据，像 Map 或者 List，你应该使用 ImmutableMap 或者 ImmutableList，这些会在不变性那一部分讨论。")]),e._v(" "),a("h4",{attrs:{id:"the-builder-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-builder-pattern"}},[e._v("#")]),e._v(" The Builder Pattern")]),e._v(" "),a("p",[e._v("如果你想用这种构造的方式构造更复杂的对象，请考虑构建器模式。")]),e._v(" "),a("p",[e._v("你可以建一个静态内部类来构建你的对象。构建器构建对象的时候，对象的状态是可变的，但是一旦你调用了 build 方法之后，构建的对象就变成了不可变的了。")]),e._v(" "),a("p",[e._v("想象一下我们有一个更复杂的 "),a("em",[e._v("DataHolder")]),e._v("。那么它的构建器看起来应该是这样的:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class ComplicatedDataHolder {\n    public final String data;\n    public final int num;\n    // lots more fields and a constructor\n\n    public static class Builder {\n        private String data;\n        private int num;\n        \n        public Builder data(String data) {\n            this.data = data;\n            return this;\n        }\n\n        public Builder num(int num) {\n            this.num = num;\n            return this;\n        }\n\n        public ComplicatedDataHolder build() {\n            return new ComplicatedDataHolder(data, num); // etc\n        }  \n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br")])]),a("p",[e._v("然后调用它:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('final ComplicatedDataHolder cdh = new ComplicatedDataHolder.Builder()\n    .data("set this")\n    .num(523)\n    .build();\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("这有"),a("a",{attrs:{href:"http://jlordiales.me/2012/12/13/the-builder-pattern-in-practice/",target:"_blank",rel:"noopener noreferrer"}},[e._v("关于构建器更好的例子 在新窗口打开"),a("OutboundLink")],1),e._v("，他会让你感受到构建器到底是怎么回事。它没有使用许多我们尽力避免使用的样板，并且它会给你不可变的对象和非常好用的接口。")]),e._v(" "),a("p",[e._v("可以考虑下在众多的库中选择一个来帮你生成构建器，取代你亲手去写构建器的方式。")]),e._v(" "),a("h4",{attrs:{id:"immutable-object-generation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immutable-object-generation"}},[e._v("#")]),e._v(" Immutable Object Generation")]),e._v(" "),a("p",[e._v("如果你要手动创建许多不可变对象，请考虑用注解处理器的方式从它们的接口自动生成。它使样板代码减少到最小化，减少产生 bug 的可能性，促进了对象的不可变性。看这 "),a("a",{attrs:{href:"https://docs.google.com/presentation/d/14u_h-lMn7f1rXE1nDiLX0azS3IkgjGl5uxp5jGJ75RE/edit#slide=id.g2a5e9c4a8_00",target:"_blank",rel:"noopener noreferrer"}},[e._v("presentation 在新窗口打开"),a("OutboundLink")],1),e._v(" 有常见的 Java 设计模式中一些问题的有趣的讨论。")]),e._v(" "),a("p",[e._v("一些非常棒的代码生成库如 [immutables] (https://github.com/immutables/immutables), 谷歌的 "),a("a",{attrs:{href:"https://github.com/google/auto/tree/master/value",target:"_blank",rel:"noopener noreferrer"}},[e._v("auto-value 在新窗口打开"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://projectlombok.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lombok 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"exceptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exceptions"}},[e._v("#")]),e._v(" Exceptions")]),e._v(" "),a("p",[e._v("使用"),a("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("检查 在新窗口打开"),a("OutboundLink")],1),e._v("异常的时候一定要注意，或者干脆别用。它会强制你去用 try/catch 代码块包裹住可能抛出异常的部分。比较好的方式就是使你自定义的异常继承自运行时异常来取而代之。这样，可以让你的用户使用他们喜欢的方式去处理异常，而不是每次抛出异常的时候都强制它们去处理/声明，这样会污染代码。")]),e._v(" "),a("p",[e._v("一个比较漂亮的绝招是在你的方法异常声明中声明 RuntimeExceptions。这对编译器没有影响，但是可以通过文档告诉你的用户在这里可能会有异常抛出。")]),e._v(" "),a("h3",{attrs:{id:"dependency-injection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependency-injection"}},[e._v("#")]),e._v(" Dependency injection")]),e._v(" "),a("p",[e._v("在软件工程领域，而不仅是在 Java 领域，使用"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dependency_injection",target:"_blank",rel:"noopener noreferrer"}},[e._v("依赖注入 在新窗口打开"),a("OutboundLink")],1),e._v("是编写可测试软件最好的方法之一。 由于 Java 强烈鼓励使用面向对象的设计，所以在 Java 中为了开发可测试软件，你不得不使用依赖注入。")]),e._v(" "),a("p",[e._v("在 Java 中，通常使用"),a("a",{attrs:{href:"http://projects.spring.io/spring-framework/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring 框架 在新窗口打开"),a("OutboundLink")],1),e._v("来完成依赖注入。Spring 有基于代码的和基于 XML 配置文件的两种连接方式。如果你使用基于 XML 配置文件的方式，注意不要"),a("a",{attrs:{href:"http://programmers.stackexchange.com/questions/92393/what-does-the-spring-framework-do-should-i-use-it-why-or-why-not",target:"_blank",rel:"noopener noreferrer"}},[e._v("过度使用 Spring 在新窗口打开"),a("OutboundLink")],1),e._v("，正是由于它使用的基于 XML 配置文件的格式。在 XML 配置文件中绝对不应该有逻辑或者控制结构。它应该仅仅被用来做依赖注入。")]),e._v(" "),a("p",[e._v("使用 Google 和 Square 的 "),a("a",{attrs:{href:"http://square.github.io/dagger/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dagger 在新窗口打开"),a("OutboundLink")],1),e._v(" 或者 Google 的 "),a("a",{attrs:{href:"https://github.com/google/guice",target:"_blank",rel:"noopener noreferrer"}},[e._v("Guice 在新窗口打开"),a("OutboundLink")],1),e._v(" 库是 Spring 比较好的替代品。它们不使用像 Spring 那样的 XML 配置文件的格式，相反它们把注入逻辑以注解的方式写到代码中。")]),e._v(" "),a("h3",{attrs:{id:"avoid-nulls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avoid-nulls"}},[e._v("#")]),e._v(" Avoid Nulls")]),e._v(" "),a("p",[e._v("尽量避免使用空值。不要返回 null 的集合，你应该返回一个 empty 的集合。如果你确实准备使用 null 请考虑使用 "),a("a",{attrs:{href:"https://github.com/google/guice/wiki/UseNullable",target:"_blank",rel:"noopener noreferrer"}},[e._v("@Nullable 在新窗口打开"),a("OutboundLink")],1),e._v(" 注解。"),a("a",{attrs:{href:"http://www.jetbrains.com/idea/",target:"_blank",rel:"noopener noreferrer"}},[e._v("IntelliJ IDEA 在新窗口打开"),a("OutboundLink")],1),e._v(" 内置支持 @Nullable 注解。")]),e._v(" "),a("p",[e._v("阅读"),a("a",{attrs:{href:"https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/",target:"_blank",rel:"noopener noreferrer"}},[e._v("计算机科学领域最糟糕的错误 在新窗口打开"),a("OutboundLink")],1),e._v("了解更多为何不使用 null。")]),e._v(" "),a("p",[e._v("如果你使用的是 Java 8，你可以用新出的优秀的 "),a("a",{attrs:{href:"http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Optional 在新窗口打开"),a("OutboundLink")],1),e._v(" 类型。如果有一个值你不确定是否存在，你可以像这样在类中用 "),a("em",[e._v("Optional")]),e._v(" 包裹住它们:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class FooWidget {\n    private final String data;\n    private final Optional<Bar> bar;\n\n    public FooWidget(String data) {\n        this(data, Optional.empty());\n    }\n\n    public FooWidget(String data, Optional<Bar> bar) {\n        this.data = data;\n        this.bar = bar;\n    }\n\n    public Optional<Bar> getBar() {\n        return bar;\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br")])]),a("p",[e._v("这样，现在你可以清晰地知道 "),a("em",[e._v("data")]),e._v(" 肯定不为 null，但是 "),a("em",[e._v("bar")]),e._v(" 不清楚是不是存在。"),a("em",[e._v("Optional")]),e._v(" 有如 "),a("em",[e._v("isPresent")]),e._v(" 这样的方法，可以用来检查是否为 "),a("em",[e._v("null")]),e._v("，感觉和原来的方式并没有太大区别。但是它允许你可以这样写:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("final Optional<FooWidget> fooWidget = maybeGetFooWidget();\nfinal Baz baz = fooWidget.flatMap(FooWidget::getBar)\n                         .flatMap(BarWidget::getBaz)\n                         .orElse(defaultBaz);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("这样比写一连串的判断是否为空的检查代码更好。使用 Optional 唯一不好的是标准库对 Optional 的支持并不是很好，所以对 null 的处理仍然是必要的。")]),e._v(" "),a("h3",{attrs:{id:"immutable-by-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immutable-by-default"}},[e._v("#")]),e._v(" Immutable-by-default")]),e._v(" "),a("p",[e._v("变量，类和集合应该设置为不可变的，除非你有很好的理由去修改他们。")]),e._v(" "),a("p",[e._v("变量可以用 "),a("em",[e._v("final")]),e._v(" 关键字使起不可变:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('final FooWidget fooWidget;\nif (condition()) {\n    fooWidget = getWidget();\n} else {\n    try {\n        fooWidget = cachedFooWidget.get();\n    } catch (CachingException e) {\n        log.error("Couldn\'t get cached value", e);\n        throw e;\n    }\n}\n// fooWidget is guaranteed to be set here\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("p",[e._v("现在你可以确定 fooWidget 对象不会意外地被重新赋值了。"),a("em",[e._v("final")]),e._v(" 关键词也可以在 if/else 和 try/catch 代码块中使用。当然，如果 "),a("em",[e._v("fooWidget")]),e._v(" 对象本身不是不可变的，你可以很容易去修改它。")]),e._v(" "),a("p",[e._v("使用集合的时候，任何可能的情况下尽量使用 Guava 的 "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ImmutableMap.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ImmutableMap 在新窗口打开"),a("OutboundLink")],1),e._v(", "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ImmutableList.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ImmutableList 在新窗口打开"),a("OutboundLink")],1),e._v(", 或者 "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ImmutableSet.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ImmutableSet 在新窗口打开"),a("OutboundLink")],1),e._v(" 类。这些类都有构建器，你可以很容易地动态构建集合，一旦你执行了 build 方法，集合就变成了不可变的。")]),e._v(" "),a("p",[e._v("类应该声明不可变的字段(通过 "),a("em",[e._v("final")]),e._v(" 实现)和不可变的集合使该类不可变。或者，可以对类本身使用 "),a("em",[e._v("final")]),e._v(" 关键词，这样这个类就不会被继承也不会被修改了。")]),e._v(" "),a("h3",{attrs:{id:"avoid-lots-of-util-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avoid-lots-of-util-classes"}},[e._v("#")]),e._v(" Avoid lots of Util classes")]),e._v(" "),a("p",[e._v("如果你发现在你正在往工具类中添加很多方法，就要注意了。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class MiscUtil {\n    public static String frobnicateString(String base, int times) {\n        // ... etc\n    }\n\n    public static void throwIfCondition(boolean condition, String msg) {\n        // ... etc\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("乍一看这些工具类似乎很不错，因为里面的那些方法放在别处确实都不太合适。因此，你以可重用代码的名义全放这了。")]),e._v(" "),a("p",[e._v('这个想法比本身这么做还要糟糕。请把这些类放到它应该在的地方去并积极重构。不要命名一些像 "MiscUtils" 或者 "ExtrasLibrary" 这样的很普通的类，包或者库。这会鼓励产生无关代码。')]),e._v(" "),a("h3",{attrs:{id:"formatting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#formatting"}},[e._v("#")]),e._v(" Formatting")]),e._v(" "),a("p",[e._v("格式化代码对大多数程序员来说并没有它应有的那么重要。统一化你的代码格式对阅读你的代码的人有帮助吗? 当然了。但是别在为了 if 代码块匹配添加空格上耗一天。")]),e._v(" "),a("p",[e._v("如果你确实需要一个代码格式风格的教程，我高度推荐 "),a("a",{attrs:{href:"http://google.github.io/styleguide/javaguide.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google's Java Style 在新窗口打开"),a("OutboundLink")],1),e._v(" 这个教程。写的最好的部分是 "),a("a",{attrs:{href:"http://google.github.io/styleguide/javaguide.html#s6-programming-practices",target:"_blank",rel:"noopener noreferrer"}},[e._v("Programming Practices 在新窗口打开"),a("OutboundLink")],1),e._v("。绝对值得一读。")]),e._v(" "),a("h4",{attrs:{id:"javadoc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javadoc"}},[e._v("#")]),e._v(" Javadoc")]),e._v(" "),a("p",[e._v("文档对对你代码的阅读着来说也很重要。这意味着你要给出"),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableMap.Builder.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用示例 在新窗口打开"),a("OutboundLink")],1),e._v("，并且给出你的变量，方法和类清晰地描述。")]),e._v(" "),a("p",[e._v("这样做的必然结果是不要对不需要写文档的地方填写文档。如果你对一个参数的含义没什么可说的，或者它本身已经很明显是什么意思了，就不要为其写文档了。统一样板的文档比没有文档更加糟糕，这样会让读你代码的人误以为那就是文档。")]),e._v(" "),a("h3",{attrs:{id:"streams"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#streams"}},[e._v("#")]),e._v(" Streams")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.java8.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java 8 在新窗口打开"),a("OutboundLink")],1),e._v(" 有很棒的 "),a("a",{attrs:{href:"http://blog.hartveld.com/2013/03/jdk-8-33-stream-api.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("stream 在新窗口打开"),a("OutboundLink")],1),e._v(" and lambda 语法。你可以像这样来写代码:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('final List<String> filtered = list.stream()\n    .filter(s -> s.startsWith("s"))\n    .map(s -> s.toUpperCase())\n    .collect(Collectors.toList());\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("取代这样的写法:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('final List<String> filtered = new ArrayList<>();\nfor (String str : list) {\n    if (str.startsWith("s") {\n        filtered.add(str.toUpperCase());\n    }\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("它让你可以写更多的流畅的代码，并且可读性更高。")]),e._v(" "),a("h1",{attrs:{id:"deploying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploying"}},[e._v("#")]),e._v(" Deploying")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Java 的部署问题确实有点棘手。现如今有两种主流的方式: 使用框架或者灵活性更高的内部研发的解决方案。")]),e._v(" "),a("h3",{attrs:{id:"frameworks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frameworks"}},[e._v("#")]),e._v(" Frameworks")]),e._v(" "),a("p",[e._v("由于 Java 的部署并不容易，所以使用框架还是很有帮助的。最好的两个框架是 "),a("a",{attrs:{href:"https://dropwizard.github.io/dropwizard/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dropwizard 在新窗口打开"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"http://projects.spring.io/spring-boot/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Boot 在新窗口打开"),a("OutboundLink")],1),e._v("。"),a("a",{attrs:{href:"https://www.playframework.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Play 框架 在新窗口打开"),a("OutboundLink")],1),e._v(" 也可以被看作为一种部署框架。")]),e._v(" "),a("p",[e._v("这些框架都是尽力地降低你部署代码的壁垒。它们对 Java 新手或者想提高效率的人尤有帮助。单独的 JAR 包部署会比复杂的 WAR 包或者 EAR 包部署更简单一点。")]),e._v(" "),a("p",[e._v("然而，这些框架并没有你想象的那么灵活，如果你的项目的开发者选择的框架并不合适，你不得不迁移到手动配置更多的部署方案上来。")]),e._v(" "),a("h3",{attrs:{id:"maven"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maven"}},[e._v("#")]),e._v(" Maven")]),e._v(" "),a("p",[a("strong",[e._v("不错的替代工具")]),e._v(": "),a("a",{attrs:{href:"http://gradle.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gradle 在新窗口打开"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Maven 仍然是构建，打包和测试的标准。有很多不错的替代工具，如 Gradle，但是他们同样都没有像 Maven 那样的适应性。如果你是 Maven 新手，你应该从"),a("a",{attrs:{href:"http://books.sonatype.com/mvnex-book/reference/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maven 实例 在新窗口打开"),a("OutboundLink")],1),e._v("这里开始。")]),e._v(" "),a("p",[e._v("我喜欢用一个根 POM(Project Object Model，项目对象模型)来管理所有用到的外部依赖。它会像"),a("a",{attrs:{href:"https://gist.github.com/cxxr/10787344",target:"_blank",rel:"noopener noreferrer"}},[e._v("这个样子 在新窗口打开"),a("OutboundLink")],1),e._v("。这个根 POM 仅仅包含一个外部依赖，但是如果你的产品足够大，你将会有几十个外部依赖了。你的根 POM 应该像其他 Java 项目一样采用版本控制和发布的方式，有一个自己的项目。")]),e._v(" "),a("p",[e._v("如果你认为你的根 POM 每添加一个外部依赖都打上一个标签很麻烦，那你肯定没有遇到过为了排查依赖错误引起的问题，浪费一周的时间翻遍整个项目的情况。")]),e._v(" "),a("p",[e._v("你所有的 Maven 项目都应该包含你的根 POM，以及这些项目的所有版本信息。这样你会清除地了解到你们公司选择的每一个外部依赖的版本，以及所有正确的 Maven 插件。如果你要引入很多的外部依赖，它将会是这样子的:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependencies>\n    <dependency>\n        <groupId>org.third.party</groupId>\n        <artifactId>some-artifact</artifactId>\n    </dependency>\n</dependencies>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("如果你想使用内部依赖，它应该被每一个单独项目的 "),a("code",[e._v("<dependencyManagement>")]),e._v(" 部分来管理。否则那将会很难保持根 POM 的版本号是正常的。")]),e._v(" "),a("h4",{attrs:{id:"dependency-convergence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependency-convergence"}},[e._v("#")]),e._v(" Dependency Convergence")]),e._v(" "),a("p",[e._v("Java 最好的一方面就是拥有大量的第三方库可以做任何事。基本上每一个 API 或者工具包都有一个 Java SDK，可以很方便的用 Maven 引入。")]),e._v(" "),a("p",[e._v("并且这些第三方 Java 库本身依赖特定版本的其他的库。如果你引入足够多的库，你会发现有些库的版本是冲突的，像这样:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Foo library depends on Bar library v1.0\nWidget library depends on Bar library v0.9\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("你的项目到底要引入哪一个版本呢?")]),e._v(" "),a("p",[e._v("如果你的项目依赖于不同版本的同一个库，使用 "),a("a",{attrs:{href:"https://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maven 依赖趋同插件 在新窗口打开"),a("OutboundLink")],1),e._v("构建时将会报错。然后你有两个方案来解决这个冲突:")]),e._v(" "),a("ol",[a("li",[e._v("在你的 "),a("em",[e._v("dependencyManagement")]),e._v(" 部分明确地支出你所使用的 Bar 的版本号")]),e._v(" "),a("li",[e._v("在 FOO 或者 Widget 中排除对 Bar 的依赖。")])]),e._v(" "),a("p",[e._v("这两个方案到底选哪一个要看你面对的是什么情况: 如果你想跟踪一个项目的版本，那么选择排除的方案是不错的。另一方面，如果你想明确地指出它，你可以选择一个版本，尽管你在需要更新其他依赖的时候也需要更新它。")]),e._v(" "),a("h3",{attrs:{id:"continuous-integration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#continuous-integration"}},[e._v("#")]),e._v(" Continuous Integration")]),e._v(" "),a("p",[e._v("很明显，你需要某种形式的持续集成服务器来帮你不断构建你的快照版本和基于 git 标签构建。")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://jenkins-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jenkins 在新窗口打开"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Travis-CI 在新窗口打开"),a("OutboundLink")],1),e._v(" 就成了很自然的选择.")]),e._v(" "),a("p",[e._v("代码覆盖率非常有用，"),a("a",{attrs:{href:"http://cobertura.github.io/cobertura/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cobertura 在新窗口打开"),a("OutboundLink")],1),e._v(" 就有 "),a("a",{attrs:{href:"http://mojo.codehaus.org/cobertura-maven-plugin/usage.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("一个很好的 Maven 插件 在新窗口打开"),a("OutboundLink")],1),a("a",{attrs:{href:"http://mojo.codehaus.org/cobertura-maven-plugin/usage.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("a good Maven plugin 在新窗口打开"),a("OutboundLink")],1),e._v(" 并且支持 CI。还有一些其他的支持 Java 的代码覆盖率工具，但是我只用过 Cobertura。")]),e._v(" "),a("h3",{attrs:{id:"maven-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maven-repository"}},[e._v("#")]),e._v(" Maven repository")]),e._v(" "),a("p",[e._v("你需要一个地方存储你生成的 JAR 包，WAR 包或者 EAR 包，因此，你需要一个仓库。")]),e._v(" "),a("p",[e._v("一般选择有 "),a("a",{attrs:{href:"http://www.jfrog.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Artifactory 在新窗口打开"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"http://www.sonatype.com/nexus",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexus 在新窗口打开"),a("OutboundLink")],1),e._v(" 这两个。它们都可以用，但是它们都有着各自的优缺点。")]),e._v(" "),a("p",[e._v("你应该有自己的 Artifactory/Nexus 设备和"),a("a",{attrs:{href:"http://www.jfrog.com/confluence/display/RTF/Configuring+Artifacts+Resolution",target:"_blank",rel:"noopener noreferrer"}},[e._v("镜像 在新窗口打开"),a("OutboundLink")],1),e._v(" 使你的依赖基于此。这样就不会由于上游的 Maven 库宕机而使你的构建崩溃了。")]),e._v(" "),a("h3",{attrs:{id:"configuration-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-management"}},[e._v("#")]),e._v(" Configuration management")]),e._v(" "),a("p",[e._v("现在，你的代码已经编译完了，你的仓库也跑起来了，最终你需要把你的代码从开发环境部署到生产环境了。到了这里，千万不要吝啬，因为将来很长一段时间，你会从这些自动化方式中尝到很多的甜头。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.chef.io/chef/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chef 在新窗口打开"),a("OutboundLink")],1),e._v("，"),a("a",{attrs:{href:"https://puppetlabs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Puppet 在新窗口打开"),a("OutboundLink")],1),e._v("，和 "),a("a",{attrs:{href:"http://www.ansible.com/home",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ansible 在新窗口打开"),a("OutboundLink")],1),e._v(" 是很典型的选择。我曾经也写了一个叫 "),a("a",{attrs:{href:"http://www.gosquadron.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Squadron 在新窗口打开"),a("OutboundLink")],1),e._v(" 的也可供选择，当然，我认为你应该仔细看看这个，因为它使用起来比其他的更为简单方便。")]),e._v(" "),a("p",[e._v("无论你选择了什么工具，不要忘了使你的部署实现自动化。")]),e._v(" "),a("h1",{attrs:{id:"libraries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libraries"}},[e._v("#")]),e._v(" Libraries")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("对 Java 来说，拥有大量的扩展库也许是最大的特点了。下面这些一小部分的扩展库对大部分人来说很适用的。")]),e._v(" "),a("h3",{attrs:{id:"missing-features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#missing-features"}},[e._v("#")]),e._v(" Missing Features")]),e._v(" "),a("p",[e._v("Java 标准库曾经作出过惊人的改进，但是现在来看，它仍然缺少一些关键的特性。")]),e._v(" "),a("h4",{attrs:{id:"apache-commons"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apache-commons"}},[e._v("#")]),e._v(" Apache Commons")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://commons.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apache Commons 项目 在新窗口打开"),a("OutboundLink")],1),e._v(" 拥有大量的有用的扩展库。")]),e._v(" "),a("p",[a("strong",[e._v("Commons Codec")]),e._v(" 对 Base64 和 16 进制字符串来说有很多有用的编/解码方法。不要再浪费时间重写这些东西了。")]),e._v(" "),a("p",[a("strong",[e._v("Commons Lang")]),e._v(" 有许多关于字符串的操作和创建，字符集和许多各种各样的实用的方法。")]),e._v(" "),a("p",[a("strong",[e._v("Commons IO")]),e._v(" 拥有所有你能想到的关于文件操作的方法。有 "),a("a",{attrs:{href:"http://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/FileUtils.html#copyDirectory(java.io.File,%20java.io.File)",target:"_blank",rel:"noopener noreferrer"}},[e._v("FileUtils.copyDirectory 在新窗口打开"),a("OutboundLink")],1),e._v("，"),a("a",{attrs:{href:"http://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/FileUtils.html#writeStringToFile(java.io.File,%20java.lang.String)",target:"_blank",rel:"noopener noreferrer"}},[e._v("FileUtils.writeStringToFile 在新窗口打开"),a("OutboundLink")],1),e._v("，"),a("a",{attrs:{href:"http://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html#readLines(java.io.InputStream)",target:"_blank",rel:"noopener noreferrer"}},[e._v("IOUtils.readLines 在新窗口打开"),a("OutboundLink")],1),e._v(" 和更多实用的方法。")]),e._v(" "),a("h4",{attrs:{id:"guava"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guava"}},[e._v("#")]),e._v(" Guava")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/google/guava",target:"_blank",rel:"noopener noreferrer"}},[e._v("Guava 在新窗口打开"),a("OutboundLink")],1),e._v(" 是谷歌优秀的对 Java 标准库缺少的特性进行补充的扩展库。虽然这很难提炼总结出我有多喜欢这个库，但是我会尽力的。")]),e._v(" "),a("p",[a("strong",[e._v("Cache")]),e._v(" 让你可以用很简单的方法，实现把网络访问，磁盘访问，缓存函数或者其他任何你想要缓存的内容，缓存到内存当中。你仅仅只需要实现 "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/cache/CacheBuilder.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("CacheBuilder 在新窗口打开"),a("OutboundLink")],1),e._v(" 类并且告诉 Guava 怎么样构建你的缓存，一切就搞定了！")]),e._v(" "),a("p",[a("strong",[e._v("Immutable")]),e._v(" 集合。它有许多如: "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ImmutableMap.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ImmutableMap 在新窗口打开"),a("OutboundLink")],1),e._v("，"),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ImmutableList.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ImmutableList 在新窗口打开"),a("OutboundLink")],1),e._v("，或者甚至 "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableSortedMultiset.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ImmutableSortedMultiSet 在新窗口打开"),a("OutboundLink")],1),e._v(" 等不可变集合可以使用，如果你喜欢用这种风格的话。")]),e._v(" "),a("p",[e._v("我也喜欢用 Guava 的方式来写一些可变的集合:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Instead of\nfinal Map<String, Widget> map = new HashMap<>();\n\n// You can use\nfinal Map<String, Widget> map = Maps.newHashMap();\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("它还有一些静态类如 "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Lists.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lists 在新窗口打开"),a("OutboundLink")],1),e._v("，"),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Maps.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maps 在新窗口打开"),a("OutboundLink")],1),e._v("和"),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Sets.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sets 在新窗口打开"),a("OutboundLink")],1),e._v(" 等。使用起来它们显得更整洁，并且可读性更强。")]),e._v(" "),a("p",[e._v("如果你坚持使用 Java 6 或者 7 的话，你可以使用 "),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Collections2.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Collections2 在新窗口打开"),a("OutboundLink")],1),e._v(" 这个类，它有一些像 filter 和 transform 这样的方法。能够让你没有 Java 8 的 Stream 的支持也能写出流畅的代码。")]),e._v(" "),a("p",[e._v("Guava 也可以做一些很简单的事情，比如 "),a("strong",[e._v("Joiner")]),e._v(" 类可以用来用分隔符把字符串拼接起来，并且可以用忽略的方式"),a("a",{attrs:{href:"http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/util/concurrent/Uninterruptibles.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("来处理打断程序 在新窗口打开"),a("OutboundLink")],1),e._v("的数据。")]),e._v(" "),a("h4",{attrs:{id:"gson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gson"}},[e._v("#")]),e._v(" Gson")]),e._v(" "),a("p",[e._v("谷歌的 "),a("a",{attrs:{href:"https://github.com/google/gson",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gson 在新窗口打开"),a("OutboundLink")],1),e._v(" 库是一个简单快速的 JSON 解析库。可以这样用:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("final Gson gson = new Gson();\nfinal String json = gson.toJson(fooWidget);\n\nfinal FooWidget newFooWidget = gson.fromJson(json, FooWidget.class);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("这用起来真的很简单，很愉悦。"),a("a",{attrs:{href:"https://sites.google.com/site/gson/gson-user-guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gson 用户手册 在新窗口打开"),a("OutboundLink")],1),e._v(" 有很多的使用示例。")]),e._v(" "),a("h4",{attrs:{id:"java-tuples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-tuples"}},[e._v("#")]),e._v(" Java Tuples")]),e._v(" "),a("p",[e._v("Java 令我比较烦恼的问题之一 Java 标准库中没有内置对元组的支持。幸运的是，"),a("a",{attrs:{href:"http://www.javatuples.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java tuples 在新窗口打开"),a("OutboundLink")],1),e._v(" 项目解决了这个问题。")]),e._v(" "),a("p",[e._v("它使用用起来很简单，很棒:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Pair<String, Integer> func(String input) {\n    // something...\n    return Pair.with(stringResult, intResult);\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h4",{attrs:{id:"javaslang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javaslang"}},[e._v("#")]),e._v(" Javaslang")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://javaslang.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Javaslang 在新窗口打开"),a("OutboundLink")],1),e._v(" 是一个函数式编程库，它被设计用来弥补本应该出现在 Java 8 中但缺失的一些特性。它有这样的一些特点:")]),e._v(" "),a("ul",[a("li",[e._v("一个全新函数式集合库")]),e._v(" "),a("li",[e._v("紧密集成的元组功能")]),e._v(" "),a("li",[e._v("模式匹配")]),e._v(" "),a("li",[e._v("通过不可变性保证线程安全")]),e._v(" "),a("li",[e._v("饥汉式和懒汉式的数据类型")]),e._v(" "),a("li",[e._v("通过 Option 实现了 null 的安全性")]),e._v(" "),a("li",[e._v("通过 Try 更好的实现异常处理")])]),e._v(" "),a("p",[e._v("有一些 Java 库依赖于原始的 Java 集合类。它们通过以面向对象和被设计为可变的方式来保证和其他的类的兼容性。而 Javaslang 的集合的设计灵感来源于 Haskell, Clojure 和 Scala，是一个全新的飞跃。它们被设计为函数式风格并且遵循不可变性的设计风格。")]),e._v(" "),a("p",[e._v("像下面这样的代码就可以自动实现线程安全，并且不用 try-catch 语句处理异常:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Success/Failure containing the result/exception\npublic static Try<User> getUser(int userId) {\n    return Try.of(() -> DB.findUser(userId))\n        .recover(x -> Match.of(x)\n            .whenType(RemoteException.class).then(e -> ...)\n            .whenType(SQLException.class).then(e -> ...));\n}\n\n// Thread-safe, reusable collections\npublic static List<String> sayByeBye() {\n    return List.of("bye, "bye", "collect", "mania")\n               .map(String::toUpperCase)\n               .intersperse(" ");\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("h4",{attrs:{id:"joda-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#joda-time"}},[e._v("#")]),e._v(" Joda-Time")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.joda.org/joda-time/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Joda-Time 在新窗口打开"),a("OutboundLink")],1),e._v(" 是我用过的最简单的时间处理库。简单，直接，并且很容易测试。夫复何求?")]),e._v(" "),a("p",[e._v("因为 Java 8 已经有了自己的新的 "),a("a",{attrs:{href:"http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("时间处理 在新窗口打开"),a("OutboundLink")],1),e._v("库， 所以如果你还没有用 Java 8，你需要这一个库足矣。")]),e._v(" "),a("h4",{attrs:{id:"lombok"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lombok"}},[e._v("#")]),e._v(" Lombok")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://projectlombok.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lombok 在新窗口打开"),a("OutboundLink")],1),e._v(" 是一个很有意思的库。它可以让你以注解的方式减少 Java 中糟糕的样板代码。")]),e._v(" "),a("p",[e._v("想为你的类的变量添加 setter 和 getter 方法吗? 像这样:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Foo {\n    @Getter @Setter private int var;\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("现在你就可以这么用了:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("final Foo foo = new Foo();\nfoo.setVar(5);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("这还有"),a("a",{attrs:{href:"http://jnb.ociweb.com/jnb/jnbJan2010.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("很多 在新窗口打开"),a("OutboundLink")],1),e._v("例子。我在之前的产品中还没有用过 Lombok，但是现在我等不急了。")]),e._v(" "),a("h4",{attrs:{id:"play-framework"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#play-framework"}},[e._v("#")]),e._v(" Play framework")]),e._v(" "),a("p",[a("strong",[e._v("好的替代品")]),e._v(": "),a("a",{attrs:{href:"https://jersey.java.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jersey 在新窗口打开"),a("OutboundLink")],1),e._v(" 或者 "),a("a",{attrs:{href:"http://sparkjava.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spark 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("在 Java 实现 RESTful web services 有两大主要阵营: "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services",target:"_blank",rel:"noopener noreferrer"}},[e._v("JAX-RS 在新窗口打开"),a("OutboundLink")],1),e._v(" 和其他。")]),e._v(" "),a("p",[e._v("JAX-RS 是传统的实现方式。你可以用像 "),a("a",{attrs:{href:"https://jersey.java.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Jersey 在新窗口打开"),a("OutboundLink")],1),e._v(" 这样的框架，以注解的方式来实现接口及其实现的结合。这样你就可以很容易的根据接口类来开发客户端。")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.playframework.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Play 框架 在新窗口打开"),a("OutboundLink")],1),e._v(" 基于 JVM 的 web services 实现和其他根本框架不同: 它有一个路由文件，你写的类要和路由文件中的路由信息关联起来。Play 框架其实是一个"),a("a",{attrs:{href:"https://www.playframework.com/documentation/2.3.x/Anatomy",target:"_blank",rel:"noopener noreferrer"}},[e._v("完整的 MVC 框架 在新窗口打开"),a("OutboundLink")],1),e._v("，但是你可以很简单地仅仅使用它的 REST web services 部分的功能。")]),e._v(" "),a("p",[e._v("它同时支持 Java 和 Scala。虽然对重点支持的 Scala 稍有不足，但是对 Java 的支持还是很好用的。")]),e._v(" "),a("p",[e._v("如果你在 Python 中用过像 Flask 这样的微框架，你对 "),a("a",{attrs:{href:"http://sparkjava.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spark 在新窗口打开"),a("OutboundLink")],1),e._v(" 肯定会很熟悉。它对 Java 8 的支持尤其的好。")]),e._v(" "),a("h4",{attrs:{id:"slf4j"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slf4j"}},[e._v("#")]),e._v(" SLF4J")]),e._v(" "),a("p",[e._v("有很多 Java 日志解决方案。我最喜欢的是 "),a("a",{attrs:{href:"http://www.slf4j.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SLF4J 在新窗口打开"),a("OutboundLink")],1),e._v("，因为它拥有非常棒的可插拔性，同时能够和很多的日志框架想结合。有没有做过同时使用 java.util.logging，JCL，和 log4j 的奇葩项目? SLF4J 就是为你而生。")]),e._v(" "),a("p",[e._v("这"),a("a",{attrs:{href:"http://www.slf4j.org/manual.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("两页手册 在新窗口打开"),a("OutboundLink")],1),e._v("足够你可以开始入门使用 SLF4J 了。")]),e._v(" "),a("h4",{attrs:{id:"jooq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jooq"}},[e._v("#")]),e._v(" jOOQ")]),e._v(" "),a("p",[e._v("我不喜欢重量级的 ORM 框架，因为我喜欢 SQL。所以我写了很多 "),a("a",{attrs:{href:"http://docs.spring.io/spring/docs/4.0.3.RELEASE/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JDBC 模板 在新窗口打开"),a("OutboundLink")],1),e._v("，但是很难去维护它。"),a("a",{attrs:{href:"http://www.jooq.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jOOQ 在新窗口打开"),a("OutboundLink")],1),e._v(" 是一个更好的解决方案。")]),e._v(" "),a("p",[e._v("它让你在 Java 中用类型安全的方式编写 SQL:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Typesafely execute the SQL statement directly with jOOQ\nResult<Record3<String, String, String>> result = \ncreate.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME)\n    .from(BOOK)\n    .join(AUTHOR)\n    .on(BOOK.AUTHOR_ID.equal(AUTHOR.ID))\n    .where(BOOK.PUBLISHED_IN.equal(1948))\n    .fetch();\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[e._v("使用 jOOQ 和 "),a("a",{attrs:{href:"http://www.javapractices.com/topic/TopicAction.do?Id=66",target:"_blank",rel:"noopener noreferrer"}},[e._v("DAO 在新窗口打开"),a("OutboundLink")],1),e._v(" 的模式让你的数据库访问变得轻而易举。")]),e._v(" "),a("h3",{attrs:{id:"testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[e._v("#")]),e._v(" Testing")]),e._v(" "),a("p",[e._v("测试是软件的关键环节。下面这些软件包能够让你更容易地测试。")]),e._v(" "),a("h4",{attrs:{id:"junit-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#junit-4"}},[e._v("#")]),e._v(" jUnit 4")]),e._v(" "),a("p",[a("strong",[e._v("好的替代品")]),e._v(": "),a("a",{attrs:{href:"http://testng.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("TestNG 在新窗口打开"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://junit.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jUnit 在新窗口打开"),a("OutboundLink")],1),e._v(" 就无需多言了。它是 Java 单元测试中的标准工具。")]),e._v(" "),a("p",[e._v("但是很可能你使用的 jUnit 并没有发挥它的全部潜力。jUnit 支持"),a("a",{attrs:{href:"https://github.com/junit-team/junit/wiki/Parameterized-tests",target:"_blank",rel:"noopener noreferrer"}},[e._v("参数化测试 在新窗口打开"),a("OutboundLink")],1),e._v("，"),a("a",{attrs:{href:"https://github.com/junit-team/junit/wiki/Rules",target:"_blank",rel:"noopener noreferrer"}},[e._v("规则化 在新窗口打开"),a("OutboundLink")],1),e._v("测试，"),a("a",{attrs:{href:"https://github.com/junit-team/junit/wiki/Theories",target:"_blank",rel:"noopener noreferrer"}},[e._v("theories 在新窗口打开"),a("OutboundLink")],1),e._v(" 可以随机测试特定代码，还有 "),a("a",{attrs:{href:"https://github.com/junit-team/junit/wiki/Assumptions-with-assume",target:"_blank",rel:"noopener noreferrer"}},[e._v("assumptions 在新窗口打开"),a("OutboundLink")],1),e._v("，可以让你少写很多样板代码。")]),e._v(" "),a("h4",{attrs:{id:"jmock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmock"}},[e._v("#")]),e._v(" jMock")]),e._v(" "),a("p",[e._v("如果你完成了依赖注入，这是它的回报: 可以 mock 出有副作用(比如和 REST 服务器交互)的代码，并且可以断言调用这段代码的行为。")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.jmock.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("jMock 在新窗口打开"),a("OutboundLink")],1),e._v(" 是标准的 Java mock 工具。像这样使用:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class FooWidgetTest {\n    private Mockery context = new Mockery();\n\n    @Test\n    public void basicTest() {\n        final FooWidgetDependency dep = context.mock(FooWidgetDependency.class);\n        \n        context.checking(new Expectations() {{\n            oneOf(dep).call(with(any(String.class)));\n            atLeast(0).of(dep).optionalCall();\n        }});\n\n        final FooWidget foo = new FooWidget(dep);\n\n        Assert.assertTrue(foo.doThing());\n        context.assertIsSatisfied();\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br")])]),a("p",[e._v("这段代码通过 jMock 建立了一个 "),a("em",[e._v("FooWidgetDependency")]),e._v("，然后添加你所期望结果的条件。我们期望 "),a("em",[e._v("dep")]),e._v(" 的 "),a("em",[e._v("call")]),e._v(" 方法会被以一个字符串为参数的形式调用，并且会被调用 0 次或者多次。")]),e._v(" "),a("p",[e._v("如果你想一遍又一遍地设置相同的依赖，你应该把它放到 "),a("a",{attrs:{href:"https://github.com/junit-team/junit/wiki/Test-fixtures",target:"_blank",rel:"noopener noreferrer"}},[e._v("test fixture 在新窗口打开"),a("OutboundLink")],1),e._v(" 中，并且把_assertIsSatisfied_ 放在以 "),a("em",[e._v("@After")]),e._v(" 注解的 fixture 中。")]),e._v(" "),a("h4",{attrs:{id:"assertj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assertj"}},[e._v("#")]),e._v(" AssertJ")]),e._v(" "),a("p",[e._v("你曾经用 jUnit 干过这个吗?")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('final List<String> result = some.testMethod();\nassertEquals(4, result.size());\nassertTrue(result.contains("some result"));\nassertTrue(result.contains("some other result"));\nassertFalse(result.contains("shouldn\'t be here"));\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("这是很恶心的样板代码。"),a("a",{attrs:{href:"http://joel-costigliola.github.io/assertj/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("AssertJ 在新窗口打开"),a("OutboundLink")],1),e._v(" 可以解决这个问题。你可以把相同的代码转换成这个样子:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('assertThat(some.testMethod()).hasSize(4)\n                             .contains("some result", "some other result")\n                             .doesNotContain("shouldn\'t be here");\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("这样的流畅接口让你的测试更具有可读性。你还想咋地?")]),e._v(" "),a("h1",{attrs:{id:"tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[e._v("#")]),e._v(" Tools")]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"intellij-idea"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intellij-idea"}},[e._v("#")]),e._v(" IntelliJ IDEA")]),e._v(" "),a("p",[a("strong",[e._v("好的替代品")]),e._v(": "),a("a",{attrs:{href:"https://www.eclipse.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eclipse 在新窗口打开"),a("OutboundLink")],1),e._v(" 和 "),a("a",{attrs:{href:"https://netbeans.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Netbeans 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Java 最好的 IDE 是 "),a("a",{attrs:{href:"http://www.jetbrains.com/idea/",target:"_blank",rel:"noopener noreferrer"}},[e._v("IntelliJ IDEA 在新窗口打开"),a("OutboundLink")],1),e._v("。它有大量的牛逼的特性，它是真正的能让 Java 用来像不戴套做爱那么爽的工具。自动完成功能超棒，"),a("a",{attrs:{href:"http://i.imgur.com/92ztcCd.png",target:"_blank",rel:"noopener noreferrer"}},[e._v("代码检查功能也是顶尖的 在新窗口打开"),a("OutboundLink")],1),e._v("，重构工具那是相当有帮助。")]),e._v(" "),a("p",[e._v("免费的社区版对我来说已经足够好了，但是它的旗舰版加载了更多的牛逼的特性，如数据库工具，Spring 框架的支持和对 Chronon 的支持。")]),e._v(" "),a("h4",{attrs:{id:"chronon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chronon"}},[e._v("#")]),e._v(" Chronon")]),e._v(" "),a("p",[e._v("我最喜欢 GDB 7 的特性之一就是调试的时候能够按照时间跟踪回来。当你拥有了旗舰版的 IntelliJ，你可以通过安装 "),a("a",{attrs:{href:"http://blog.jetbrains.com/idea/2014/03/try-chronon-debugger-with-intellij-idea-13-1-eap/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Chronon IntelliJ 插件 在新窗口打开"),a("OutboundLink")],1),e._v("实现。")]),e._v(" "),a("p",[e._v("你可以获取到变量的变化历史，后退，方法的历史以及更多的信息。如果你是第一次用会觉得有点怪，但是它真的能够帮你解决很复杂的 bug，诸如海森堡类的 bug。")]),e._v(" "),a("h3",{attrs:{id:"jrebel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jrebel"}},[e._v("#")]),e._v(" JRebel")]),e._v(" "),a("p",[a("strong",[e._v("好的替代品")]),e._v(": "),a("a",{attrs:{href:"https://github.com/dcevm/dcevm",target:"_blank",rel:"noopener noreferrer"}},[e._v("DCEVM 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("持续集成往往以软件即服务为产品目标。想象一下如果你不用等待代码构建完成而能实时看到代码的变化会是怎样?")]),e._v(" "),a("p",[e._v("这就是 "),a("a",{attrs:{href:"http://zeroturnaround.com/software/jrebel/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JRebel 在新窗口打开"),a("OutboundLink")],1),e._v(" 所做的。一旦你将你的服务器和你的 JReble 以 hook 方式连接，你就可以从服务器看到实时变化。当你想快速试验的时候它能为你节省大量的时间。")]),e._v(" "),a("h3",{attrs:{id:"the-checker-framework"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-checker-framework"}},[e._v("#")]),e._v(" The Checker Framework")]),e._v(" "),a("p",[e._v("Java 的类型系统很差劲。它不能够区分正常的字符串和正则表达式字符串，更不用说"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Taint_checking",target:"_blank",rel:"noopener noreferrer"}},[e._v("坏点检查 在新窗口打开"),a("OutboundLink")],1),e._v("了。不过 "),a("a",{attrs:{href:"http://types.cs.washington.edu/checker-framework/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Checker Framework 在新窗口打开"),a("OutboundLink")],1),e._v(" 可以完成这个功能并且能够实现更多的东西。")]),e._v(" "),a("p",[e._v("它使用像 "),a("em",[e._v("@Nullable")]),e._v(" 这样的注解来检查类型。你甚至可以使用"),a("a",{attrs:{href:"http://types.cs.washington.edu/checker-framework/tutorial/webpages/encryption-checker-cmd.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("自定义注解 在新窗口打开"),a("OutboundLink")],1),e._v("来实现静态分析，甚至更强大的功能。")]),e._v(" "),a("h3",{attrs:{id:"code-quality"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-quality"}},[e._v("#")]),e._v(" Code Quality")]),e._v(" "),a("p",[e._v("即使遵循着最佳实践的原则，即使是最好的开发者，也都会犯错误。这有很多工具，你可以使用它们验证你的代码从而检查代码是否有问题。下面是选出的最流行的一部分工具。很多这些工具都可以和流行的 IDE 如 Eclipse 或者 IntelliJ 集成，可以让你更快地发现代码中的错误。")]),e._v(" "),a("ul",[a("li",[a("strong",[a("a",{attrs:{href:"http://checkstyle.sourceforge.net/",title:"Checkstyle",target:"_blank",rel:"noopener noreferrer"}},[e._v("Checkstyle 在新窗口打开"),a("OutboundLink")],1)]),e._v(": 一个静态代码分析工具，它主要着力于保证你的代码符合代码标准。检查规则在一个 XML 文件中定义，你可以把它检入你的版本控制工具，和你的代码放在一起。")]),e._v(" "),a("li",[a("strong",[a("a",{attrs:{href:"http://findbugs.sourceforge.net/",title:"FindBugs",target:"_blank",rel:"noopener noreferrer"}},[e._v("FindBugs 在新窗口打开"),a("OutboundLink")],1)]),e._v(": 主要集中于发现你的代码中可能导致产生 bug 或者错误的部分。虽然作为独立的进程运行，但是对流行的 IDE 和构建工具的支持也很好。")]),e._v(" "),a("li",[a("strong",[a("a",{attrs:{href:"https://pmd.github.io/",title:"PMD",target:"_blank",rel:"noopener noreferrer"}},[e._v("PMD 在新窗口打开"),a("OutboundLink")],1)]),e._v(": 和 FindBugs 很相似，PMD 着力于发现你代码中的错误和整理的你的代码。你可以把针对你的代码的检查规则控制在 XML 文件中，和你的代码放在一块儿提交。")]),e._v(" "),a("li",[a("strong",[a("a",{attrs:{href:"http://www.sonarqube.org/",title:"SonarQube",target:"_blank",rel:"noopener noreferrer"}},[e._v("SonarQube 在新窗口打开"),a("OutboundLink")],1)]),e._v(": 和前面所述的工具不同，它是在本地运行的，SonarQube 启动一个服务器，你把你代码提交到这个服务器来进行分析。它提供了 web 界面，你可以看到你的代码的健康状况信息，如不好的做法，潜在的 bug，测试覆盖率百分比，和你写代码的"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Technical_debt",title:"Technical Debt on Wikipedia",target:"_blank",rel:"noopener noreferrer"}},[e._v("技术水平 在新窗口打开"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("除了在开发工程中使用这些工具，把它们用在你的构建阶段往往也是一个不错的想法。它可以和想 Maven 或者 Gradle 这样的构建工具绑定到一起，也可以和持续集成工具绑定使用。")]),e._v(" "),a("h3",{attrs:{id:"eclipse-memory-analyzer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eclipse-memory-analyzer"}},[e._v("#")]),e._v(" Eclipse Memory Analyzer")]),e._v(" "),a("p",[e._v("即使在 Java 中内存泄露也时有发生。幸运的是，我们有一些工具就是为此而生。"),a("a",{attrs:{href:"http://www.eclipse.org/mat/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eclipse Memory Analyzer 在新窗口打开"),a("OutboundLink")],1),e._v(" 是我用过的最好用的解决内存泄露问题的工具。它能够获取到堆栈信息让你查阅，去发现问题所在。")]),e._v(" "),a("p",[e._v("有几种方法可以获取到 JVM 进程的堆栈信息，但是我用 "),a("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/technotes/tools/share/jmap.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("jmap 在新窗口打开"),a("OutboundLink")],1),e._v(" 工具实现:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ jmap -dump:live,format=b,file=heapdump.hprof -F 8152\nAttaching to process ID 8152, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 23.25-b01\nDumping heap to heapdump.hprof ...\n... snip ...\nHeap dump file created\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[e._v("然后你可以用内存分析器打开 "),a("em",[e._v("heapdump.hprof")]),e._v(" 文件，快看看到底是怎么回事。")]),e._v(" "),a("h1",{attrs:{id:"resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resources"}},[e._v("#")]),e._v(" Resources")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("这些资源能够帮你成为 Java 大牛。")]),e._v(" "),a("h3",{attrs:{id:"books"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#books"}},[e._v("#")]),e._v(" Books")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683",target:"_blank",rel:"noopener noreferrer"}},[e._v("Effective Java 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java Concurrency in Practice 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Clean Code 在新窗口打开"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"podcasts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#podcasts"}},[e._v("#")]),e._v(" Podcasts")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.javaposse.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Java Posse 在新窗口打开"),a("OutboundLink")],1),e._v(" ("),a("em",[e._v("discontinued")]),e._v(")")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://virtualjug.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vJUG 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://lescastcodeurs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Les Cast Codeurs 在新窗口打开"),a("OutboundLink")],1),e._v(" ("),a("em",[e._v("French")]),e._v(")")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.javapubhouse.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java Pub House 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.javaoffheap.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java Off Heap 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.enterprisejavanews.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Enterprise Java Newscast 在新窗口打开"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"videos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#videos"}},[e._v("#")]),e._v(" Videos")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=V1vQf4qyMXg",target:"_blank",rel:"noopener noreferrer"}},[e._v("Effective Java - Still Effective After All These Years 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"http://www.infoq.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("InfoQ 在新窗口打开"),a("OutboundLink")],1),e._v(" - see especially "),a("a",{attrs:{href:"http://www.infoq.com/java/presentations/",target:"_blank",rel:"noopener noreferrer"}},[e._v("presentations 在新窗口打开"),a("OutboundLink")],1),e._v(" and "),a("a",{attrs:{href:"http://www.infoq.com/java/interviews/",target:"_blank",rel:"noopener noreferrer"}},[e._v("interviews 在新窗口打开"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.parleys.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Parleys 在新窗口打开"),a("OutboundLink")],1),e._v(")")])])])}),[],!1,null,null,null);a.default=n.exports}}]);