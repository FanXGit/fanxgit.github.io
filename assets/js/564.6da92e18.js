(window.webpackJsonp=window.webpackJsonp||[]).push([[564],{3753:function(n,s,a){"use strict";a.r(s);var e=a(7),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"线性表-数组和矩阵"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性表-数组和矩阵"}},[n._v("#")]),n._v(" 线性表 - 数组和矩阵")]),n._v(" "),s("p",[n._v("===========================")]),n._v(" "),s("blockquote",[s("p",[n._v("数组是一种连续存储线性结构，元素类型相同，大小相等，数组是多维的，通过使用整型索引值来访问他们的元素，数组尺寸不能改变。@pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-array.html#%E7%9F%A5%E8%AF%86%E7%82%B9",target:"_blank",rel:"noopener noreferrer"}},[n._v("知识点"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://pdai.tech/md/algorithm/alg-basic-array.html#%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE",target:"_blank",rel:"noopener noreferrer"}},[n._v("数组与矩阵相关题目"),s("OutboundLink")],1)])]),n._v(" "),s("h1",{attrs:{id:"知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[n._v("#")]),n._v(" 知识点")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("数组的优点:")]),n._v(" "),s("ul",[s("li",[n._v("存取速度快")])]),n._v(" "),s("p",[n._v("数组的缺点:")]),n._v(" "),s("ul",[s("li",[n._v("事先必须知道数组的长度")]),n._v(" "),s("li",[n._v("插入删除元素很慢")]),n._v(" "),s("li",[n._v("空间通常是有限制的")]),n._v(" "),s("li",[n._v("需要大块连续的内存块")]),n._v(" "),s("li",[n._v("插入删除元素的效率很低")])]),n._v(" "),s("p",[n._v("JDK中关于ArrayList的实现，请参考:")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://pdai.tech/md/java/collection/java-collection-ArrayList.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("《Java - ArrayList 源码解析》"),s("OutboundLink")],1)]),n._v(" "),s("h1",{attrs:{id:"数组与矩阵相关题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组与矩阵相关题目"}},[n._v("#")]),n._v(" 数组与矩阵相关题目")]),n._v(" "),s("hr"),n._v(" "),s("p",[s("strong",[n._v("把数组中的 0 移到末尾")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/move-zeroes/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("283. Move Zeroes (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void moveZeroes(int[] nums) {\n    int idx = 0;\n    for (int num : nums) {\n        if (num != 0) {\n            nums[idx++] = num;\n        }\n    }\n    while (idx < nums.length) {\n        nums[idx++] = 0;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[s("strong",[n._v("改变矩阵维度")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/reshape-the-matrix/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("566. Reshape the Matrix (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input:\nnums =\n[[1,2],\n [3,4]]\nr = 1, c = 4\n\nOutput:\n[[1,2,3,4]]\n\nExplanation:\nThe row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int[][] matrixReshape(int[][] nums, int r, int c) {\n    int m = nums.length, n = nums[0].length;\n    if (m * n != r * c) {\n        return nums;\n    }\n    int[][] reshapedNums = new int[r][c];\n    int index = 0;\n    for (int i = 0; i < r; i++) {\n        for (int j = 0; j < c; j++) {\n            reshapedNums[i][j] = nums[index / n][index % n];\n            index++;\n        }\n    }\n    return reshapedNums;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("p",[s("strong",[n._v("找出数组中最长的连续 1")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/max-consecutive-ones/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("485. Max Consecutive Ones (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int findMaxConsecutiveOnes(int[] nums) {\n    int max = 0, cur = 0;\n    for (int x : nums) {\n        cur = x == 0 ? 0 : cur + 1;\n        max = Math.max(max, cur);\n    }\n    return max;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[s("strong",[n._v("有序矩阵查找")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/search-a-2d-matrix-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("240. Search a 2D Matrix II (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("[\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n]\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean searchMatrix(int[][] matrix, int target) {\n    if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return false;\n    int m = matrix.length, n = matrix[0].length;\n    int row = 0, col = n - 1;\n    while (row < m && col >= 0) {\n        if (target == matrix[row][col]) return true;\n        else if (target < matrix[row][col]) col--;\n        else row++;\n    }\n    return false;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[s("strong",[n._v("有序矩阵的 Kth Element")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("378. Kth Smallest Element in a Sorted Matrix ((Medium)) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("matrix = [\n  [ 1,  5,  9],\n  [10, 11, 13],\n  [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("解题参考: "),s("a",{attrs:{href:"https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/discuss/85173",target:"_blank",rel:"noopener noreferrer"}},[n._v("Share my thoughts and Clean Java Code 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("二分查找解法:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int kthSmallest(int[][] matrix, int k) {\n    int m = matrix.length, n = matrix[0].length;\n    int lo = matrix[0][0], hi = matrix[m - 1][n - 1];\n    while (lo <= hi) {\n        int mid = lo + (hi - lo) / 2;\n        int cnt = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n && matrix[i][j] <= mid; j++) {\n                cnt++;\n            }\n        }\n        if (cnt < k) lo = mid + 1;\n        else hi = mid - 1;\n    }\n    return lo;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("p",[n._v("堆解法:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int kthSmallest(int[][] matrix, int k) {\n    int m = matrix.length, n = matrix[0].length;\n    PriorityQueue<Tuple> pq = new PriorityQueue<Tuple>();\n    for(int j = 0; j < n; j++) pq.offer(new Tuple(0, j, matrix[0][j]));\n    for(int i = 0; i < k - 1; i++) { // 小根堆，去掉 k - 1 个堆顶元素，此时堆顶元素就是第 k 的数\n        Tuple t = pq.poll();\n        if(t.x == m - 1) continue;\n        pq.offer(new Tuple(t.x + 1, t.y, matrix[t.x + 1][t.y]));\n    }\n    return pq.poll().val;\n}\n\nclass Tuple implements Comparable<Tuple> {\n    int x, y, val;\n    public Tuple(int x, int y, int val) {\n        this.x = x; this.y = y; this.val = val;\n    }\n\n    @Override\n    public int compareTo(Tuple that) {\n        return this.val - that.val;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("p",[s("strong",[n._v("一个数组元素在 [1, n] 之间，其中一个数被替换为另一个数，找出重复的数和丢失的数")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/set-mismatch/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("645. Set Mismatch (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: nums = [1,2,2,4]\nOutput: [2,3]\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: nums = [1,2,2,4]\nOutput: [2,3]\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("最直接的方法是先对数组进行排序，这种方法时间复杂度为 O(NlogN)。本题可以以 O(N) 的时间复杂度、O(1) 空间复杂度来求解。")]),n._v(" "),s("p",[n._v("主要思想是通过交换数组元素，使得数组上的元素在正确的位置上。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int[] findErrorNums(int[] nums) {\n    for (int i = 0; i < nums.length; i++) {\n        while (nums[i] != i + 1 && nums[nums[i] - 1] != nums[i]) {\n            swap(nums, i, nums[i] - 1);\n        }\n    }\n    for (int i = 0; i < nums.length; i++) {\n        if (nums[i] != i + 1) {\n            return new int[]{nums[i], i + 1};\n        }\n    }\n    return null;\n}\n\nprivate void swap(int[] nums, int i, int j) {\n    int tmp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = tmp;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br")])]),s("p",[n._v("类似题目:")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("448. Find All Numbers Disappeared in an Array (Easy) 在新窗口打开"),s("OutboundLink")],1),n._v("，寻找所有丢失的元素")]),n._v(" "),s("li",[s("a",{attrs:{href:"https://leetcode.com/problems/find-all-duplicates-in-an-array/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("442. Find All Duplicates in an Array (Medium) 在新窗口打开"),s("OutboundLink")],1),n._v("，寻找所有重复的元素。")])]),n._v(" "),s("p",[s("strong",[n._v("找出数组中重复的数，数组值在 [1, n] 之间")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/find-the-duplicate-number/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("287. Find the Duplicate Number (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("要求不能修改数组，也不能使用额外的空间。")]),n._v(" "),s("p",[n._v("二分查找解法:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int findDuplicate(int[] nums) {\n     int l = 1, h = nums.length - 1;\n     while (l <= h) {\n         int mid = l + (h - l) / 2;\n         int cnt = 0;\n         for (int i = 0; i < nums.length; i++) {\n             if (nums[i] <= mid) cnt++;\n         }\n         if (cnt > mid) h = mid - 1;\n         else l = mid + 1;\n     }\n     return l;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[n._v("双指针解法，类似于有环链表中找出环的入口:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int findDuplicate(int[] nums) {\n    int slow = nums[0], fast = nums[nums[0]];\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[nums[fast]];\n    }\n    fast = 0;\n    while (slow != fast) {\n        slow = nums[slow];\n        fast = nums[fast];\n    }\n    return slow;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("p",[s("strong",[n._v("数组相邻差值的个数")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/beautiful-arrangement-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("667. Beautiful Arrangement II (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: n = 3, k = 2\nOutput: [1, 3, 2]\nExplanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("题目描述: 数组元素为 1~n 的整数，要求构建数组，使得相邻元素的差值不相同的个数为 k。")]),n._v(" "),s("p",[n._v("让前 k+1 个元素构建出 k 个不相同的差值，序列为: 1 k+1 2 k 3 k-1 ... k/2 k/2+1.")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int[] constructArray(int n, int k) {\n    int[] ret = new int[n];\n    ret[0] = 1;\n    for (int i = 1, interval = k; i <= k; i++, interval--) {\n        ret[i] = i % 2 == 1 ? ret[i - 1] + interval : ret[i - 1] - interval;\n    }\n    for (int i = k + 1; i < n; i++) {\n        ret[i] = i + 1;\n    }\n    return ret;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[s("strong",[n._v("数组的度")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/degree-of-an-array/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("697. Degree of an Array (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: [1,2,2,3,1,4,2]\nOutput: 6\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("题目描述: 数组的度定义为元素出现的最高频率，例如上面的数组度为 3。要求找到一个最小的子数组，这个子数组的度和原数组一样。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int findShortestSubArray(int[] nums) {\n    Map<Integer, Integer> numsCnt = new HashMap<>();\n    Map<Integer, Integer> numsLastIndex = new HashMap<>();\n    Map<Integer, Integer> numsFirstIndex = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int num = nums[i];\n        numsCnt.put(num, numsCnt.getOrDefault(num, 0) + 1);\n        numsLastIndex.put(num, i);\n        if (!numsFirstIndex.containsKey(num)) {\n            numsFirstIndex.put(num, i);\n        }\n    }\n    int maxCnt = 0;\n    for (int num : nums) {\n        maxCnt = Math.max(maxCnt, numsCnt.get(num));\n    }\n    int ret = nums.length;\n    for (int i = 0; i < nums.length; i++) {\n        int num = nums[i];\n        int cnt = numsCnt.get(num);\n        if (cnt != maxCnt) continue;\n        ret = Math.min(ret, numsLastIndex.get(num) - numsFirstIndex.get(num) + 1);\n    }\n    return ret;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("p",[s("strong",[n._v("对角元素相等的矩阵")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/toeplitz-matrix/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("766. Toeplitz Matrix (Easy) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('1234\n5123\n9512\n\nIn the above grid, the diagonals are "[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]", and in each diagonal all elements are the same, so the answer is True.\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public boolean isToeplitzMatrix(int[][] matrix) {\n    for (int i = 0; i < matrix[0].length; i++) {\n        if (!check(matrix, matrix[0][i], 0, i)) {\n            return false;\n        }\n    }\n    for (int i = 0; i < matrix.length; i++) {\n        if (!check(matrix, matrix[i][0], i, 0)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean check(int[][] matrix, int expectValue, int row, int col) {\n    if (row >= matrix.length || col >= matrix[0].length) {\n        return true;\n    }\n    if (matrix[row][col] != expectValue) {\n        return false;\n    }\n    return check(matrix, expectValue, row + 1, col + 1);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("p",[s("strong",[n._v("嵌套数组")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/array-nesting/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("565. Array Nesting (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: A = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation:\nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\nOne of the longest S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("题目描述: S[i] 表示一个集合，集合的第一个元素是 A[i]，第二个元素是 A[A[i]]，如此嵌套下去。求最大的 S[i]。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int arrayNesting(int[] nums) {\n    int max = 0;\n    for (int i = 0; i < nums.length; i++) {\n        int cnt = 0;\n        for (int j = i; nums[j] != -1; ) {\n            cnt++;\n            int t = nums[j];\n            nums[j] = -1; // 标记该位置已经被访问\n            j = t;\n\n        }\n        max = Math.max(max, cnt);\n    }\n    return max;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("p",[s("strong",[n._v("分隔数组")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.com/problems/max-chunks-to-make-sorted/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("769. Max Chunks To Make Sorted (Medium) 在新窗口打开"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Input: arr = [1,0,2,3,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("题目描述: 分隔数组，使得对每部分排序后数组就为有序。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public int maxChunksToSorted(int[] arr) {\n    if (arr == null) return 0;\n    int ret = 0;\n    int right = arr[0];\n    for (int i = 0; i < arr.length; i++) {\n        right = Math.max(right, arr[i]);\n        if (right == i) ret++;\n    }\n    return ret;\n}\n```)")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);