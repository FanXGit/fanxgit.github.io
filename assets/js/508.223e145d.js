(window.webpackJsonp=window.webpackJsonp||[]).push([[508],{3573:function(a,t,n){"use strict";n.r(t);var s=n(7),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"java-8-localdate-localdatetime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-8-localdate-localdatetime"}},[a._v("#")]),a._v(" Java 8 - LocalDate/LocalDateTime")]),a._v(" "),t("p",[a._v("=====================================================================")]),a._v(" "),t("blockquote",[t("p",[a._v("理解时间和日期库需要理解如下问题: @pdai")]),a._v(" "),t("ul",[t("li",[a._v("Java8之前的Date有哪些槽点?")]),a._v(" "),t("li",[a._v("Java8之前使用哪些常用的第三方时间库?")]),a._v(" "),t("li",[a._v("Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?")]),a._v(" "),t("li",[a._v("其它语言时间库?")])])]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java-8---localdatelocaldatetime"}},[a._v("Java 8 - LocalDate/LocalDateTime")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#java8%e4%b9%8b%e5%89%8d%e7%9a%84date%e6%9c%89%e5%93%aa%e4%ba%9b%e6%a7%bd%e7%82%b9"}},[a._v("Java8之前的Date有哪些槽点")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%e6%a7%bd%e7%82%b9%e4%b8%80"}},[a._v("槽点一")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%e6%a7%bd%e7%82%b9%e4%ba%8c"}},[a._v("槽点二")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%e6%a7%bd%e7%82%b9%e4%b8%89"}},[a._v("槽点三")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%e6%a7%bd%e7%82%b9%e5%9b%9b"}},[a._v("槽点四")])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#java8%e6%97%b6%e9%97%b4%e5%92%8c%e6%97%a5%e6%9c%9f"}},[a._v("Java8时间和日期")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%e7%b1%bb%e6%a6%82%e8%a7%88"}},[a._v("类概览")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%e6%96%b9%e6%b3%95%e6%a6%82%e8%a7%88"}},[a._v("方法概览")])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%e4%b8%80%e4%ba%9b%e4%be%8b%e5%ad%90"}},[a._v("一些例子")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%e5%85%b6%e5%ae%83%e8%af%ad%e8%a8%80%e6%97%b6%e9%97%b4"}},[a._v("其它语言时间")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#%e6%80%bb%e7%bb%93"}},[a._v("总结")])])])])]),a._v(" "),t("h2",{attrs:{id:"java8之前的date有哪些槽点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java8之前的date有哪些槽点"}},[a._v("#")]),a._v(" Java8之前的Date有哪些槽点")]),a._v(" "),t("hr"),a._v(" "),t("blockquote",[t("p",[a._v("Tiago Fernandez做过一次投票，选举最烂的JAVA API，排第一的EJB2.X，第二的就是日期API。")])]),a._v(" "),t("h4",{attrs:{id:"槽点一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#槽点一"}},[a._v("#")]),a._v(" 槽点一")]),a._v(" "),t("p",[a._v("最开始的时候，Date既要承载日期信息，又要做日期之间的转换，还要做不同日期格式的显示，职责较繁杂(不懂单一职责，你妈妈知道吗? 纯属恶搞~哈哈)")]),a._v(" "),t("p",[a._v("后来从JDK 1.1 开始，这三项职责分开了:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("使用Calendar类实现日期和时间字段之间转换；\n使用DateFormat类来格式化和分析日期字符串；\n而Date只用来承载日期和时间信息。 \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("原有Date中的相应方法已废弃。不过，无论是Date，还是Calendar，都用着太不方便了，这是API没有设计好的地方。")]),a._v(" "),t("h4",{attrs:{id:"槽点二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#槽点二"}},[a._v("#")]),a._v(" 槽点二")]),a._v(" "),t("p",[a._v("坑爹的year和month")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Date date = new Date(2012,1,1);\nSystem.out.println(date);\n输出Thu Feb 01 00:00:00 CST 3912 \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("观察输出结果，year是2012+1900，而month，月份参数我不是给了1吗? 怎么输出二月(Feb)了?")]),a._v(" "),t("p",[a._v("应该曾有人告诉你，如果你要设置日期，应该使用 java.util.Calendar，像这样…")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Calendar calendar = Calendar.getInstance();\ncalendar.set(2013, 8, 2); \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("这样写又不对了，calendar的month也是从0开始的，表达8月份应该用7这个数字，要么就干脆用枚举")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("calendar.set(2013, Calendar.AUGUST, 2); \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("注意上面的代码，Calendar年份的传值不需要减去1900(当然月份的定义和Date还是一样)，这种不一致真是让人抓狂！")]),a._v(" "),t("p",[a._v("有些人可能知道，Calendar相关的API是IBM捐出去的，所以才导致不一致。")]),a._v(" "),t("h4",{attrs:{id:"槽点三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#槽点三"}},[a._v("#")]),a._v(" 槽点三")]),a._v(" "),t("p",[a._v("java.util.Date与java.util.Calendar中的所有属性都是可变的")]),a._v(" "),t("p",[a._v("下面的代码，计算两个日期之间的天数….")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("public static void main(String[] args) {\n    Calendar birth = Calendar.getInstance();\n    birth.set(1975, Calendar.MAY, 26);\n    Calendar now = Calendar.getInstance();\n    System.out.println(daysBetween(birth, now));\n    System.out.println(daysBetween(birth, now)); // 显示 0? \n }  \n\npublic static long daysBetween(Calendar begin, Calendar end) {\n    long daysBetween = 0;\n    while(begin.before(end)) {\n        begin.add(Calendar.DAY_OF_MONTH, 1);\n        daysBetween++;\n    }\n    return daysBetween;\n} \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("p",[a._v("daysBetween有点问题，如果连续计算两个Date实例的话，第二次会取得0，因为Calendar状态是可变的，考虑到重复计算的场合，最好复制一个新的Calendar")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("public static long daysBetween(Calendar begin, Calendar end) {\n    Calendar calendar = (Calendar) begin.clone(); // 复制\n    long daysBetween = 0;\n    while(calendar.before(end)) {\n        calendar.add(Calendar.DAY_OF_MONTH, 1);\n        daysBetween++;\n    }\n    return daysBetween;\n} \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("h4",{attrs:{id:"槽点四"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#槽点四"}},[a._v("#")]),a._v(" 槽点四")]),a._v(" "),t("p",[a._v("SimpleDateTimeFormat是非线程安全的。")]),a._v(" "),t("h2",{attrs:{id:"java8时间和日期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java8时间和日期"}},[a._v("#")]),a._v(" Java8时间和日期")]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"类概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类概览"}},[a._v("#")]),a._v(" 类概览")]),a._v(" "),t("p",[a._v("Java 8仍然延用了ISO的日历体系，并且与它的前辈们不同，java.time包中的类是不可变且线程安全的。新的时间及日期API位于java.time包中，下面是里面的一些关键的类:")]),a._v(" "),t("ul",[t("li",[a._v("Instant——它代表的是时间戳")]),a._v(" "),t("li",[a._v("LocalDate——不包含具体时间的日期，比如2014-01-14。它可以用来存储生日，周年纪念日，入职日期等。")]),a._v(" "),t("li",[a._v("LocalTime——它代表的是不含日期的时间")]),a._v(" "),t("li",[a._v("LocalDateTime——它包含了日期及时间，不过还是没有偏移信息或者说时区。")]),a._v(" "),t("li",[a._v("ZonedDateTime——这是一个包含时区的完整的日期时间，偏移量是以UTC/格林威治时间为基准的。")])]),a._v(" "),t("p",[a._v("新的库还增加了ZoneOffset及Zoned，可以为时区提供更好的支持。有了新的DateTimeFormatter之后日期的解析及格式化也变得焕然一新了。")]),a._v(" "),t("h3",{attrs:{id:"方法概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法概览"}},[a._v("#")]),a._v(" 方法概览")]),a._v(" "),t("p",[a._v("该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀:")]),a._v(" "),t("ul",[t("li",[a._v("of: 静态工厂方法。")]),a._v(" "),t("li",[a._v("parse: 静态工厂方法，关注于解析。")]),a._v(" "),t("li",[a._v("get: 获取某些东西的值。")]),a._v(" "),t("li",[a._v("is: 检查某些东西的是否是true。")]),a._v(" "),t("li",[a._v("with: 不可变的setter等价物。")]),a._v(" "),t("li",[a._v("plus: 加一些量到某个对象。")]),a._v(" "),t("li",[a._v("minus: 从某个对象减去一些量。")]),a._v(" "),t("li",[a._v("to: 转换到另一个类型。")]),a._v(" "),t("li",[a._v("at: 把这个对象与另一个对象组合起来，例如: date.atTime(time)。")])]),a._v(" "),t("h2",{attrs:{id:"一些例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些例子"}},[a._v("#")]),a._v(" 一些例子")]),a._v(" "),t("hr"),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('public class TimeIntroduction {\n    public static void testClock() throws InterruptedException {\n        //时钟提供给我们用于访问某个特定 时区的 瞬时时间、日期 和 时间的。 \n        Clock c1 = Clock.systemUTC(); //系统默认UTC时钟(当前瞬时时间 System.currentTimeMillis()) \n        System.out.println(c1.millis()); //每次调用将返回当前瞬时时间(UTC) \n        Clock c2 = Clock.systemDefaultZone(); //系统默认时区时钟(当前瞬时时间) \n        Clock c31 = Clock.system(ZoneId.of("Europe/Paris")); //巴黎时区 \n        System.out.println(c31.millis()); //每次调用将返回当前瞬时时间(UTC) \n        Clock c32 = Clock.system(ZoneId.of("Asia/Shanghai"));//上海时区 \n        System.out.println(c32.millis());//每次调用将返回当前瞬时时间(UTC) \n        Clock c4 = Clock.fixed(Instant.now(), ZoneId.of("Asia/Shanghai"));//固定上海时区时钟 \n        System.out.println(c4.millis());\n        Thread.sleep(1000);\n        System.out.println(c4.millis()); //不变 即时钟时钟在那一个点不动 \n        Clock c5 = Clock.offset(c1, Duration.ofSeconds(2)); //相对于系统默认时钟两秒的时钟 \n        System.out.println(c1.millis());\n        System.out.println(c5.millis());\n    }\n    public static void testInstant() {\n        //瞬时时间 相当于以前的System.currentTimeMillis() \n        Instant instant1 = Instant.now();\n        System.out.println(instant1.getEpochSecond());//精确到秒 得到相对于1970-01-01 00:00:00 UTC的一个时间 \n        System.out.println(instant1.toEpochMilli()); //精确到毫秒 \n        Clock clock1 = Clock.systemUTC(); //获取系统UTC默认时钟 \n        Instant instant2 = Instant.now(clock1);//得到时钟的瞬时时间 \n        System.out.println(instant2.toEpochMilli());\n        Clock clock2 = Clock.fixed(instant1, ZoneId.systemDefault()); //固定瞬时时间时钟 \n        Instant instant3 = Instant.now(clock2);//得到时钟的瞬时时间 \n        System.out.println(instant3.toEpochMilli());//equals instant1 \n    }\n    public static void testLocalDateTime() {\n        //使用默认时区时钟瞬时时间创建 Clock.systemDefaultZone() --\x3e即相对于 ZoneId.systemDefault()默认时区 \n        LocalDateTime now = LocalDateTime.now();\n        System.out.println(now);\n\t\t//自定义时区 \n        LocalDateTime now2 = LocalDateTime.now(ZoneId.of("Europe/Paris"));\n        System.out.println(now2);//会以相应的时区显示日期 \n\t\t//自定义时钟 \n        Clock clock = Clock.system(ZoneId.of("Asia/Dhaka"));\n        LocalDateTime now3 = LocalDateTime.now(clock);\n        System.out.println(now3);//会以相应的时区显示日期 \n\t\t//不需要写什么相对时间 如java.util.Date 年是相对于1900 月是从0开始 \n\t\t//2013-12-31 23:59 \n\t\t\n        LocalDateTime d1 = LocalDateTime.of(2013, 12, 31, 23, 59);\n\t\t//年月日 时分秒 纳秒 \n        LocalDateTime d2 = LocalDateTime.of(2013, 12, 31, 23, 59, 59, 11);\n\t\t//使用瞬时时间 + 时区 \n        Instant instant = Instant.now();\n        LocalDateTime d3 = LocalDateTime.ofInstant(Instant.now(), ZoneId.systemDefault());\n        System.out.println(d3);\n        \n\t\t//解析String---\x3eLocalDateTime \n        LocalDateTime d4 = LocalDateTime.parse("2013-12-31T23:59");\n        System.out.println(d4);\n        LocalDateTime d5 = LocalDateTime.parse("2013-12-31T23:59:59.999");//999毫秒 等价于999000000纳秒 \n        System.out.println(d5);\n        \n\t\t//使用DateTimeFormatter API 解析 和 格式化 \n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");\n        LocalDateTime d6 = LocalDateTime.parse("2013/12/31 23:59:59", formatter);\n        System.out.println(formatter.format(d6));\n        \n\t\t//时间获取 \n        System.out.println(d6.getYear());\n        System.out.println(d6.getMonth());\n        System.out.println(d6.getDayOfYear());\n        System.out.println(d6.getDayOfMonth());\n        System.out.println(d6.getDayOfWeek());\n        System.out.println(d6.getHour());\n        System.out.println(d6.getMinute());\n        System.out.println(d6.getSecond());\n        System.out.println(d6.getNano());\n        \n\t\t//时间增减 \n        LocalDateTime d7 = d6.minusDays(1);\n        LocalDateTime d8 = d7.plus(1, IsoFields.QUARTER_YEARS);\n\t\t//LocalDate 即年月日 无时分秒 \n\t\t//LocalTime即时分秒 无年月日 \n\t\t//API和LocalDateTime类似就不演示了 \n\t\t\n\t\t// 两个日期是否相等\n\t\tSystem.out.println(d1.equals(d2));\n\t\t\n\t\t// MonthDay - 用来检查生日\n\t\tLocalDate dateOfBirth = LocalDate.of(2010, 01, 14); \n\t\tMonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth()); \n\t\tMonthDay currentMonthDay = MonthDay.from(today); \n\t\tSystem.out.println(currentMonthDay.equals(birthday));\n\t\t\n\t\t// YearMonth - 用来检查信用卡过期\n\t\tYearMonth currentYearMonth = YearMonth.now(); System.out.printf("Days in month year %s: %d%n", currentYearMonth, currentYearMonth.lengthOfMonth()); \n\t\tYearMonth creditCardExpiry = YearMonth.of(2018, Month.FEBRUARY); \n\t\tSystem.out.printf("Your credit card expires on %s %n", creditCardExpiry); \n\t\t\n\t\t// 判断闰年 - LocalDate类有一个isLeapYear()的方法\n\t\tSystem.out.println(dateOfBirth.isLeapYear());\n    }\n    public static void testZonedDateTime() {\n        //即带有时区的date-time 存储纳秒、时区和时差(避免与本地date-time歧义)。 \n\t\t//API和LocalDateTime类似，只是多了时差(如2013-12-20T10:35:50.711+08:00[Asia/Shanghai]) \n        ZonedDateTime now = ZonedDateTime.now();\n        System.out.println(now);\n        ZonedDateTime now2 = ZonedDateTime.now(ZoneId.of("Europe/Paris"));\n        System.out.println(now2);\n\t\t//其他的用法也是类似的 就不介绍了 \n        ZonedDateTime z1 = ZonedDateTime.parse("2013-12-31T23:59:59Z[Europe/Paris]");\n        System.out.println(z1);\n    }\n    public static void testDuration() {\n        //表示两个瞬时时间的时间段 \n        Duration d1 = Duration.between(Instant.ofEpochMilli(System.currentTimeMillis() - 12323123), Instant.now());\n\t\t//得到相应的时差 \n        System.out.println(d1.toDays());\n        System.out.println(d1.toHours());\n        System.out.println(d1.toMinutes());\n        System.out.println(d1.toMillis());\n        System.out.println(d1.toNanos());\n\t\t//1天时差 类似的还有如ofHours() \n        Duration d2 = Duration.ofDays(1);\n        System.out.println(d2.toDays());\n    }\n    public static void testChronology() {\n        //提供对java.util.Calendar的替换，提供对年历系统的支持 \n        Chronology c = HijrahChronology.INSTANCE;\n        ChronoLocalDateTime d = c.localDateTime(LocalDateTime.now());\n        System.out.println(d);\n    }\n    /**\n     * 新旧日期转换\n     */\n    public static void testNewOldDateConversion(){\n        Instant instant=new Date().toInstant();\n        Date date=Date.from(instant);\n        System.out.println(instant);\n        System.out.println(date);\n    }\n    public static void main(String[] args) throws InterruptedException {\n        testClock();\n        testInstant();\n        testLocalDateTime();\n        testZonedDateTime();\n        testDuration();\n        testChronology();\n        testNewOldDateConversion();\n    }\n} \n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br"),t("span",{staticClass:"line-number"},[a._v("36")]),t("br"),t("span",{staticClass:"line-number"},[a._v("37")]),t("br"),t("span",{staticClass:"line-number"},[a._v("38")]),t("br"),t("span",{staticClass:"line-number"},[a._v("39")]),t("br"),t("span",{staticClass:"line-number"},[a._v("40")]),t("br"),t("span",{staticClass:"line-number"},[a._v("41")]),t("br"),t("span",{staticClass:"line-number"},[a._v("42")]),t("br"),t("span",{staticClass:"line-number"},[a._v("43")]),t("br"),t("span",{staticClass:"line-number"},[a._v("44")]),t("br"),t("span",{staticClass:"line-number"},[a._v("45")]),t("br"),t("span",{staticClass:"line-number"},[a._v("46")]),t("br"),t("span",{staticClass:"line-number"},[a._v("47")]),t("br"),t("span",{staticClass:"line-number"},[a._v("48")]),t("br"),t("span",{staticClass:"line-number"},[a._v("49")]),t("br"),t("span",{staticClass:"line-number"},[a._v("50")]),t("br"),t("span",{staticClass:"line-number"},[a._v("51")]),t("br"),t("span",{staticClass:"line-number"},[a._v("52")]),t("br"),t("span",{staticClass:"line-number"},[a._v("53")]),t("br"),t("span",{staticClass:"line-number"},[a._v("54")]),t("br"),t("span",{staticClass:"line-number"},[a._v("55")]),t("br"),t("span",{staticClass:"line-number"},[a._v("56")]),t("br"),t("span",{staticClass:"line-number"},[a._v("57")]),t("br"),t("span",{staticClass:"line-number"},[a._v("58")]),t("br"),t("span",{staticClass:"line-number"},[a._v("59")]),t("br"),t("span",{staticClass:"line-number"},[a._v("60")]),t("br"),t("span",{staticClass:"line-number"},[a._v("61")]),t("br"),t("span",{staticClass:"line-number"},[a._v("62")]),t("br"),t("span",{staticClass:"line-number"},[a._v("63")]),t("br"),t("span",{staticClass:"line-number"},[a._v("64")]),t("br"),t("span",{staticClass:"line-number"},[a._v("65")]),t("br"),t("span",{staticClass:"line-number"},[a._v("66")]),t("br"),t("span",{staticClass:"line-number"},[a._v("67")]),t("br"),t("span",{staticClass:"line-number"},[a._v("68")]),t("br"),t("span",{staticClass:"line-number"},[a._v("69")]),t("br"),t("span",{staticClass:"line-number"},[a._v("70")]),t("br"),t("span",{staticClass:"line-number"},[a._v("71")]),t("br"),t("span",{staticClass:"line-number"},[a._v("72")]),t("br"),t("span",{staticClass:"line-number"},[a._v("73")]),t("br"),t("span",{staticClass:"line-number"},[a._v("74")]),t("br"),t("span",{staticClass:"line-number"},[a._v("75")]),t("br"),t("span",{staticClass:"line-number"},[a._v("76")]),t("br"),t("span",{staticClass:"line-number"},[a._v("77")]),t("br"),t("span",{staticClass:"line-number"},[a._v("78")]),t("br"),t("span",{staticClass:"line-number"},[a._v("79")]),t("br"),t("span",{staticClass:"line-number"},[a._v("80")]),t("br"),t("span",{staticClass:"line-number"},[a._v("81")]),t("br"),t("span",{staticClass:"line-number"},[a._v("82")]),t("br"),t("span",{staticClass:"line-number"},[a._v("83")]),t("br"),t("span",{staticClass:"line-number"},[a._v("84")]),t("br"),t("span",{staticClass:"line-number"},[a._v("85")]),t("br"),t("span",{staticClass:"line-number"},[a._v("86")]),t("br"),t("span",{staticClass:"line-number"},[a._v("87")]),t("br"),t("span",{staticClass:"line-number"},[a._v("88")]),t("br"),t("span",{staticClass:"line-number"},[a._v("89")]),t("br"),t("span",{staticClass:"line-number"},[a._v("90")]),t("br"),t("span",{staticClass:"line-number"},[a._v("91")]),t("br"),t("span",{staticClass:"line-number"},[a._v("92")]),t("br"),t("span",{staticClass:"line-number"},[a._v("93")]),t("br"),t("span",{staticClass:"line-number"},[a._v("94")]),t("br"),t("span",{staticClass:"line-number"},[a._v("95")]),t("br"),t("span",{staticClass:"line-number"},[a._v("96")]),t("br"),t("span",{staticClass:"line-number"},[a._v("97")]),t("br"),t("span",{staticClass:"line-number"},[a._v("98")]),t("br"),t("span",{staticClass:"line-number"},[a._v("99")]),t("br"),t("span",{staticClass:"line-number"},[a._v("100")]),t("br"),t("span",{staticClass:"line-number"},[a._v("101")]),t("br"),t("span",{staticClass:"line-number"},[a._v("102")]),t("br"),t("span",{staticClass:"line-number"},[a._v("103")]),t("br"),t("span",{staticClass:"line-number"},[a._v("104")]),t("br"),t("span",{staticClass:"line-number"},[a._v("105")]),t("br"),t("span",{staticClass:"line-number"},[a._v("106")]),t("br"),t("span",{staticClass:"line-number"},[a._v("107")]),t("br"),t("span",{staticClass:"line-number"},[a._v("108")]),t("br"),t("span",{staticClass:"line-number"},[a._v("109")]),t("br"),t("span",{staticClass:"line-number"},[a._v("110")]),t("br"),t("span",{staticClass:"line-number"},[a._v("111")]),t("br"),t("span",{staticClass:"line-number"},[a._v("112")]),t("br"),t("span",{staticClass:"line-number"},[a._v("113")]),t("br"),t("span",{staticClass:"line-number"},[a._v("114")]),t("br"),t("span",{staticClass:"line-number"},[a._v("115")]),t("br"),t("span",{staticClass:"line-number"},[a._v("116")]),t("br"),t("span",{staticClass:"line-number"},[a._v("117")]),t("br"),t("span",{staticClass:"line-number"},[a._v("118")]),t("br"),t("span",{staticClass:"line-number"},[a._v("119")]),t("br"),t("span",{staticClass:"line-number"},[a._v("120")]),t("br"),t("span",{staticClass:"line-number"},[a._v("121")]),t("br"),t("span",{staticClass:"line-number"},[a._v("122")]),t("br"),t("span",{staticClass:"line-number"},[a._v("123")]),t("br"),t("span",{staticClass:"line-number"},[a._v("124")]),t("br"),t("span",{staticClass:"line-number"},[a._v("125")]),t("br"),t("span",{staticClass:"line-number"},[a._v("126")]),t("br"),t("span",{staticClass:"line-number"},[a._v("127")]),t("br"),t("span",{staticClass:"line-number"},[a._v("128")]),t("br"),t("span",{staticClass:"line-number"},[a._v("129")]),t("br"),t("span",{staticClass:"line-number"},[a._v("130")]),t("br"),t("span",{staticClass:"line-number"},[a._v("131")]),t("br"),t("span",{staticClass:"line-number"},[a._v("132")]),t("br"),t("span",{staticClass:"line-number"},[a._v("133")]),t("br"),t("span",{staticClass:"line-number"},[a._v("134")]),t("br"),t("span",{staticClass:"line-number"},[a._v("135")]),t("br"),t("span",{staticClass:"line-number"},[a._v("136")]),t("br"),t("span",{staticClass:"line-number"},[a._v("137")]),t("br"),t("span",{staticClass:"line-number"},[a._v("138")]),t("br"),t("span",{staticClass:"line-number"},[a._v("139")]),t("br"),t("span",{staticClass:"line-number"},[a._v("140")]),t("br"),t("span",{staticClass:"line-number"},[a._v("141")]),t("br"),t("span",{staticClass:"line-number"},[a._v("142")]),t("br"),t("span",{staticClass:"line-number"},[a._v("143")]),t("br"),t("span",{staticClass:"line-number"},[a._v("144")]),t("br"),t("span",{staticClass:"line-number"},[a._v("145")]),t("br"),t("span",{staticClass:"line-number"},[a._v("146")]),t("br"),t("span",{staticClass:"line-number"},[a._v("147")]),t("br")])]),t("h2",{attrs:{id:"其它语言时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其它语言时间"}},[a._v("#")]),a._v(" 其它语言时间")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("日期与时间处理API，在各种语言中，可能都只是个不起眼的API，如果你没有较复杂的时间处理需求，可能只是利用日期与时间处理API取得系统时间，简单做些显示罢了，然而如果认真看待日期与时间，其复杂程度可能会远超过你的想象，天文、地理、历史、政治、文化等因素，都会影响到你对时间的处理。所以在处理时间上，最好选用JSR310(如果你用java8的话就实现310了)，或者Joda-Time。")]),a._v(" "),t("p",[a._v("不止是java面临时间处理的尴尬，其他语言同样也遇到过类似的问题，比如")]),a._v(" "),t("p",[a._v("Arrow: Python 中更好的日期与时间处理库")]),a._v(" "),t("p",[a._v("Moment.js: JavaScript 中的日期库")]),a._v(" "),t("p",[a._v("Noda-Time: .NET 阵营的 Joda-Time 的复制")]),a._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("看完了这些例子后，我相信你已经对Java 8这套新的时间日期API有了一定的了解了。现在我们来回顾下关于这个新的API的一些关键的要素。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("它提供了javax.time.ZoneId用来处理时区。")])]),a._v(" "),t("li",[t("p",[a._v("它提供了LocalDate与LocalTime类 Java 8中新的时间与日期API中的所有类都是不可变且线程安全的，这与之前的Date与Calendar API中的恰好相反，那里面像java.util.Date以及SimpleDateFormat这些关键的类都不是线程安全的。")])]),a._v(" "),t("li",[t("p",[a._v("新的时间与日期API中很重要的一点是它定义清楚了基本的时间与日期的概念，比方说，瞬时时间，持续时间，日期，时间，时区以及时间段。它们都是基于ISO日历体系的。")])]),a._v(" "),t("li",[t("p",[a._v("每个Java开发人员都应该至少了解这套新的API中的这五个类: Instant 它代表的是时间戳，比如2014-01-14T02:20:13.592Z，这可以从java.time.Clock类中获取，像这样: Instant current = Clock.system(ZoneId.of(“Asia/Tokyo”)).instant(); LocalDate 它表示的是不带时间的日期，比如2014-01-14。它可以用来存储生日，周年纪念日，入职日期等。 LocalTime – 它表示的是不带日期的时间 LocalDateTime – 它包含了时间与日期，不过没有带时区的偏移量 ZonedDateTime – 这是一个带时区的完整时间，它根据UTC/格林威治时间来进行时区调整")])]),a._v(" "),t("li",[t("p",[a._v("这个库的主包是java.time，里面包含了代表日期，时间，瞬时以及持续时间的类。它有两个子package，一个是java.time.foramt，这个是什么用途就很明显了，还有一个是java.time.temporal，它能从更低层面对各个字段进行访问。")])]),a._v(" "),t("li",[t("p",[a._v("时区指的是地球上共享同一标准时间的地区。每个时区都有一个唯一标识符，同时还有一个地区/城市(Asia/Tokyo)的格式以及从格林威治时间开始的一个偏移时间。比如说，东京的偏移时间就是+09:00。 OffsetDateTime类实际上包含了LocalDateTime与ZoneOffset。它用来表示一个包含格林威治时间偏移量(+/-小时: 分，比如+06:00或者 -08: 00)的完整的日期(年月日)及时间(时分秒，纳秒)。 DateTimeFormatter类用于在Java中进行日期的格式化与解析。与SimpleDateFormat不同，它是不可变且线程安全的，如果需要的话，可以赋值给一个静态变量。DateTimeFormatter类提供了许多预定义的格式器，你也可以自定义自己想要的格式。当然了，根据约定，它还有一个parse()方法是用于将字符串转换成日期的，如果转换期间出现任何错误，它会抛出DateTimeParseException异常。类似的，DateFormatter类也有一个用于格式化日期的format()方法，它出错的话则会抛出DateTimeException异常。")])]),a._v(" "),t("li",[t("p",[a._v("再说一句，“MMM d yyyy”与“MMm dd yyyy”这两个日期格式也略有不同，前者能识别出”Jan 2 2014″与”Jan 14 2014″这两个串，而后者如果传进来的是”Jan 2 2014″则会报错，因为它期望月份处传进来的是两个字符。为了解决这个问题，在天为个位数的情况下，你得在前面补0，比如”Jan 2 2014″应该改为”Jan 02 2014″。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);