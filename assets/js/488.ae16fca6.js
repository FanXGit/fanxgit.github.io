(window.webpackJsonp=window.webpackJsonp||[]).push([[488],{3404:function(n,s,e){n.exports=e.p+"assets/img/tomcat-x-connector-1.62b5c609.jpg"},4210:function(n,s,e){"use strict";e.r(s);var t=e(7),a=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"tomcat-request请求处理过程-connector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-request请求处理过程-connector"}},[n._v("#")]),n._v(" Tomcat - Request请求处理过程：Connector")]),n._v(" "),s("p",[n._v("=====================================================================")]),n._v(" "),s("blockquote",[s("p",[n._v("本文主要介绍request请求的处理过程。")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#tomcat---request%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8Bconnector"}},[n._v("Tomcat - Request请求处理过程：Connector")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%BC%95%E5%85%A5"}},[n._v("引入")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#connector"}},[n._v("Connector")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#connector%E6%9E%84%E9%80%A0"}},[n._v("Connector构造")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#connector%E5%88%9D%E5%A7%8B%E5%8C%96"}},[n._v("Connector初始化")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#connector%E7%9A%84%E5%90%AF%E5%8A%A8"}},[n._v("Connector的启动")])])])])])])]),n._v(" "),s("h1",{attrs:{id:"引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[n._v("#")]),n._v(" 引入")]),n._v(" "),s("hr"),n._v(" "),s("ul",[s("li",[s("p",[n._v("线程池Executor是在哪里启动的？")])]),n._v(" "),s("li",[s("p",[n._v("Request是如何处理并交个Container处理的？")])]),n._v(" "),s("li",[s("p",[n._v("Tomcat支持哪些协议？这些协议是处理的？协议层次结构如何设计的？")])])]),n._v(" "),s("h1",{attrs:{id:"connector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connector"}},[n._v("#")]),n._v(" Connector")]),n._v(" "),s("hr"),n._v(" "),s("h3",{attrs:{id:"connector构造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connector构造"}},[n._v("#")]),n._v(" Connector构造")]),n._v(" "),s("p",[n._v("本质是初始化了ProtocolHandler，默认是HTTP/1.1 NIO实现。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n  * Defaults to using HTTP/1.1 NIO implementation.\n  */\npublic Connector() {\n    this("HTTP/1.1");\n}\n\npublic Connector(String protocol) {\n    boolean apr = AprStatus.isAprAvailable() &&\n        AprStatus.getUseAprConnector();\n    ProtocolHandler p = null;\n    try {\n        p = ProtocolHandler.create(protocol, apr);\n    } catch (Exception e) {\n        log.error(sm.getString(\n                "coyoteConnector.protocolHandlerInstantiationFailed"), e);\n    }\n    if (p != null) {\n        protocolHandler = p;\n        protocolHandlerClassName = protocolHandler.getClass().getName();\n    } else {\n        protocolHandler = null;\n        protocolHandlerClassName = protocol;\n    }\n    // Default for Connector depends on this system property\n    setThrowOnFailure(Boolean.getBoolean("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"));\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br")])]),s("p",[n._v("ProtocolHandler是怎么通过protocol初始化实现的呢？我们看下"),s("code",[n._v("ProtocolHandler.create(protocol, apr)")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public static ProtocolHandler create(String protocol, boolean apr)\n        throws ClassNotFoundException, InstantiationException, IllegalAccessException,\n        IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {\n    if (protocol == null || "HTTP/1.1".equals(protocol)\n            || (!apr && org.apache.coyote.http11.Http11NioProtocol.class.getName().equals(protocol))\n            || (apr && org.apache.coyote.http11.Http11AprProtocol.class.getName().equals(protocol))) {\n        if (apr) {\n            return new org.apache.coyote.http11.Http11AprProtocol();\n        } else {\n            return new org.apache.coyote.http11.Http11NioProtocol();\n        }\n    } else if ("AJP/1.3".equals(protocol)\n            || (!apr && org.apache.coyote.ajp.AjpNioProtocol.class.getName().equals(protocol))\n            || (apr && org.apache.coyote.ajp.AjpAprProtocol.class.getName().equals(protocol))) {\n        if (apr) {\n            return new org.apache.coyote.ajp.AjpAprProtocol();\n        } else {\n            return new org.apache.coyote.ajp.AjpNioProtocol();\n        }\n    } else {\n        // Instantiate protocol handler\n        Class<?> clazz = Class.forName(protocol);\n        return (ProtocolHandler) clazz.getConstructor().newInstance();\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("p",[n._v("我们看到上述方法实际通过Protocol初始化了ProtocolHandler, 我们看下它所支持的HTTP1.1，Ajp协议的处理，我们通过它的类层次结构来看协议支持处理类")]),n._v(" "),s("p",[s("img",{attrs:{src:e(3404),alt:""}})]),n._v(" "),s("h3",{attrs:{id:"connector初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connector初始化"}},[n._v("#")]),n._v(" Connector初始化")]),n._v(" "),s("p",[n._v("在JMX的初始化模板方法"),s("code",[n._v("initInternal")]),n._v("中，进行了Connector的初始化，它做了哪些事呢？")]),n._v(" "),s("ul",[s("li",[n._v("给protocolHandler初始化了adapter //这adapter是真正衔接Container处理的适配器，后文我们会有详解。")]),n._v(" "),s("li",[n._v("设置parseBody的方法，默认为POST方法")]),n._v(" "),s("li",[n._v("一些校验")]),n._v(" "),s("li",[n._v("调用protocolHandler的init")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Override\nprotected void initInternal() throws LifecycleException {\n\n    super.initInternal();\n\n    if (protocolHandler == null) {\n        throw new LifecycleException(\n                sm.getString("coyoteConnector.protocolHandlerInstantiationFailed"));\n    }\n\n    // 初始化 adapter\n    adapter = new CoyoteAdapter(this);\n    protocolHandler.setAdapter(adapter); // 交给protocolHandler\n    if (service != null) {\n        protocolHandler.setUtilityExecutor(service.getServer().getUtilityExecutor());\n    }\n\n    // 设置parseBody的方法，默认为POST\n    if (null == parseBodyMethodsSet) {\n        setParseBodyMethods(getParseBodyMethods());\n    }\n\n    // 校验\n    if (protocolHandler.isAprRequired() && !AprStatus.isInstanceCreated()) {\n        throw new LifecycleException(sm.getString("coyoteConnector.protocolHandlerNoAprListener",\n                getProtocolHandlerClassName()));\n    }\n    if (protocolHandler.isAprRequired() && !AprStatus.isAprAvailable()) {\n        throw new LifecycleException(sm.getString("coyoteConnector.protocolHandlerNoAprLibrary",\n                getProtocolHandlerClassName()));\n    }\n    if (AprStatus.isAprAvailable() && AprStatus.getUseOpenSSL() &&\n            protocolHandler instanceof AbstractHttp11JsseProtocol) {\n        AbstractHttp11JsseProtocol<?> jsseProtocolHandler =\n                (AbstractHttp11JsseProtocol<?>) protocolHandler;\n        if (jsseProtocolHandler.isSSLEnabled() &&\n                jsseProtocolHandler.getSslImplementationName() == null) {\n            // OpenSSL is compatible with the JSSE configuration, so use it if APR is available\n            jsseProtocolHandler.setSslImplementationName(OpenSSLImplementation.class.getName());\n        }\n    }\n\n    try {\n        // 调用protocolHandler的init\n        protocolHandler.init(); \n    } catch (Exception e) {\n        throw new LifecycleException(\n                sm.getString("coyoteConnector.protocolHandlerInitializationFailed"), e);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br")])]),s("p",[n._v("protocolHandler的init做了什么？本质上调用了AbstractEndpoint的init方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n  * Endpoint that provides low-level network I/O - must be matched to the\n  * ProtocolHandler implementation (ProtocolHandler using NIO, requires NIO\n  * Endpoint etc.).\n  */\nprivate final AbstractEndpoint<S,?> endpoint;\n\n@Override\npublic void init() throws Exception {\n    if (getLog().isInfoEnabled()) {\n        getLog().info(sm.getString("abstractProtocolHandler.init", getName()));\n        logPortOffset();\n    }\n\n    if (oname == null) {\n        // Component not pre-registered so register it\n        oname = createObjectName();\n        if (oname != null) {\n            Registry.getRegistry(null, null).registerComponent(this, oname, null);\n        }\n    }\n\n    if (this.domain != null) {\n        rgOname = new ObjectName(domain + ":type=GlobalRequestProcessor,name=" + getName());\n        Registry.getRegistry(null, null).registerComponent(\n                getHandler().getGlobal(), rgOname, null);\n    }\n\n    String endpointName = getName();\n    endpoint.setName(endpointName.substring(1, endpointName.length()-1));\n    endpoint.setDomain(domain);\n\n    endpoint.init();\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br")])]),s("p",[s("code",[n._v("endpoint.init()")]),n._v("做了什么呢？之前的版本中是直接调用bind方法，这里改成了bindWithCleanup, 变化点在于失败后的清理操作。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public final void init() throws Exception {\n    if (bindOnInit) {\n        bindWithCleanup(); // 看这里\n        bindState = BindState.BOUND_ON_INIT;\n    }\n\n    // 下面就是注册JMX，前文我们有讲\n    if (this.domain != null) {\n        // Register endpoint (as ThreadPool - historical name)\n        oname = new ObjectName(domain + ":type=ThreadPool,name=\\"" + getName() + "\\"");\n        Registry.getRegistry(null, null).registerComponent(this, oname, null);\n\n        ObjectName socketPropertiesOname = new ObjectName(domain +\n                ":type=SocketProperties,name=\\"" + getName() + "\\"");\n        socketProperties.setObjectName(socketPropertiesOname);\n        Registry.getRegistry(null, null).registerComponent(socketProperties, socketPropertiesOname, null);\n\n        for (SSLHostConfig sslHostConfig : findSslHostConfigs()) {\n            registerJmx(sslHostConfig);\n        }\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("p",[s("code",[n._v("bindWithCleanup()")]),n._v("做了bind方法，如果绑定失败就回调unbind方法。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private void bindWithCleanup() throws Exception {\n    try {\n        bind();\n    } catch (Throwable t) {\n        // Ensure open sockets etc. are cleaned up if something goes\n        // wrong during bind\n        ExceptionUtils.handleThrowable(t);\n        unbind();\n        throw t;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("p",[s("code",[n._v("bind()")]),n._v("方法做了初始化ServerSocket和初始化ssl")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n  * Initialize the endpoint.\n  */\n@Override\npublic void bind() throws Exception {\n    initServerSocket();\n\n    setStopLatch(new CountDownLatch(1));\n\n    // Initialize SSL if needed\n    initialiseSsl();\n\n    selectorPool.open(getName());\n}\n\n// Separated out to make it easier for folks that extend NioEndpoint to\n// implement custom [server]sockets\nprotected void initServerSocket() throws Exception {\n    if (!getUseInheritedChannel()) {\n        serverSock = ServerSocketChannel.open(); // 打开ServerSocket通道\n        socketProperties.setProperties(serverSock.socket());\n        InetSocketAddress addr = new InetSocketAddress(getAddress(), getPortWithOffset());\n        serverSock.socket().bind(addr,getAcceptCount()); // 绑定到指定服务地址和端口，这样你才可以通过这个访问服务（处理请求）\n    } else {\n        // Retrieve the channel provided by the OS\n        Channel ic = System.inheritedChannel();\n        if (ic instanceof ServerSocketChannel) {\n            serverSock = (ServerSocketChannel) ic;\n        }\n        if (serverSock == null) {\n            throw new IllegalArgumentException(sm.getString("endpoint.init.bind.inherited"));\n        }\n    }\n    serverSock.configureBlocking(true); //mimic APR behavior\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br")])]),s("h3",{attrs:{id:"connector的启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connector的启动"}},[n._v("#")]),n._v(" Connector的启动")]),n._v(" "),s("p",[n._v("这里依然是调用JMX的模板方法startInternal方法, start方法本质就是委托给"),s("code",[n._v("protocolHandler")]),n._v("处理，调用它的start方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n  * Begin processing requests via this Connector.\n  *\n  * @exception LifecycleException if a fatal startup error occurs\n  */\n@Override\nprotected void startInternal() throws LifecycleException {\n\n    // Validate settings before starting\n    if (getPortWithOffset() < 0) {\n        throw new LifecycleException(sm.getString(\n                "coyoteConnector.invalidPort", Integer.valueOf(getPortWithOffset())));\n    }\n\n    setState(LifecycleState.STARTING);\n\n    try {\n        protocolHandler.start();\n    } catch (Exception e) {\n        throw new LifecycleException(\n                sm.getString("coyoteConnector.protocolHandlerStartFailed"), e);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("p",[s("code",[n._v("protocolHandler.start()")]),n._v("方法如下，它又交给endpoint进行start处理")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('@Override\npublic void start() throws Exception {\n    if (getLog().isInfoEnabled()) {\n        getLog().info(sm.getString("abstractProtocolHandler.start", getName()));\n        logPortOffset();\n    }\n\n    // 本质是调用endpoint的start方法\n    endpoint.start();\n\n    // 启动一个异步的线程，处理startAsyncTimeout方法，每隔60秒执行一次\n    monitorFuture = getUtilityExecutor().scheduleWithFixedDelay(\n            new Runnable() {\n                @Override\n                public void run() {\n                    if (!isPaused()) {\n                        startAsyncTimeout();\n                    }\n                }\n            }, 0, 60, TimeUnit.SECONDS);\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("p",[s("code",[n._v("endpoint.start()")]),n._v("就是调用startInternal方法。当然它会先检查是否绑定端口，没有绑定便执行bindWithCleanup方法")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public final void start() throws Exception {\n    if (bindState == BindState.UNBOUND) {\n        bindWithCleanup();\n        bindState = BindState.BOUND_ON_START;\n    }\n    startInternal();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("我们看下NIOEndPoint的"),s("code",[n._v("startInternal")]),n._v("方法做了啥")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('/**\n  * Start the NIO endpoint, creating acceptor, poller threads.\n  */\n@Override\npublic void startInternal() throws Exception {\n\n    if (!running) {\n        running = true;\n        paused = false;\n\n        if (socketProperties.getProcessorCache() != 0) {\n            processorCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                    socketProperties.getProcessorCache());\n        }\n        if (socketProperties.getEventCache() != 0) {\n            eventCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                    socketProperties.getEventCache());\n        }\n        if (socketProperties.getBufferPool() != 0) {\n            nioChannels = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,\n                    socketProperties.getBufferPool());\n        }\n\n        // 重点：创建了Executor\n        if (getExecutor() == null) {\n            createExecutor();\n        }\n\n        initializeConnectionLatch();\n\n        // Start poller thread\n        poller = new Poller();\n        Thread pollerThread = new Thread(poller, getName() + "-ClientPoller");\n        pollerThread.setPriority(threadPriority);\n        pollerThread.setDaemon(true);\n        pollerThread.start();\n\n        startAcceptorThread();\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])]),s("p",[s("code",[n._v("createExecutor()")]),n._v("方法如下，本质是创建一个ThreadPoolExecutor")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public void createExecutor() {\n    internalExecutor = true;\n    TaskQueue taskqueue = new TaskQueue();\n    TaskThreadFactory tf = new TaskThreadFactory(getName() + "-exec-", daemon, getThreadPriority());\n    executor = new ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), 60, TimeUnit.SECONDS,taskqueue, tf);\n    taskqueue.setParent( (ThreadPoolExecutor) executor);\n}\n```)')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);