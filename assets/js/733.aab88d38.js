(window.webpackJsonp=window.webpackJsonp||[]).push([[733],{4214:function(s,e,n){"use strict";n.r(e);var a=n(7),r=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"mybatis详解-配置解析过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis详解-配置解析过程"}},[s._v("#")]),s._v(" MyBatis详解 - 配置解析过程")]),s._v(" "),e("p",[s._v("=========================================")]),s._v(" "),e("blockquote",[e("p",[s._v("【本文为中优先级】通过上文我们知道MyBatis初始化过程中会解析配置，那具体是如何解析的呢？@pdai")])]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#mybatis%E8%AF%A6%E8%A7%A3---%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B"}},[s._v("MyBatis详解 - 配置解析过程")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%9B%9E%E9%A1%BE%E4%B8%8A%E6%96%87%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95"}},[s._v("回顾上文配置解析方法")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%85%83%E7%B4%A0"}},[s._v("配置文件元素")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A01properties"}},[s._v("元素1：properties")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A02envirements"}},[s._v("元素2：envirements")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95propertieselementenvironmentselement"}},[s._v("解析方法：propertiesElement、environmentsElement")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A03typealiases"}},[s._v("元素3：typeAliases")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95typealiaseselement"}},[s._v("解析方法：typeAliasesElement")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A04typehandler"}},[s._v("元素4：TypeHandler")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95typehandlerelement"}},[s._v("解析方法：typeHandlerElement")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A05objectfactory"}},[s._v("元素5：objectFactory")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A06plugins"}},[s._v("元素6：plugins")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A07mappers"}},[s._v("元素7：mappers")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95objectfactoryelementpluginelementmapperelement"}},[s._v("解析方法：objectFactoryElement、pluginElement、mapperElement")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%83%E7%B4%A08settings"}},[s._v("元素8：settings")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95settingselement"}},[s._v("解析方法：settingsElement")])])])])])])]),s._v(" "),e("h1",{attrs:{id:"回顾上文配置解析方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回顾上文配置解析方法"}},[s._v("#")]),s._v(" 回顾上文配置解析方法")]),s._v(" "),e("hr"),s._v(" "),e("p",[s._v("上文配置解析中，我们看到如下的主体方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public Configuration parse() {  \n    if (parsed) {  \n        throw new BuilderException("Each XMLConfigBuilder can only be used once.");  \n    }  \n    parsed = true;  \n    //源码中没有这一句，只有 parseConfiguration(parser.evalNode("/configuration"));  \n    //为了让读者看得更明晰，源码拆分为以下两句  \n    XNode configurationNode = parser.evalNode("/configuration");  \n    parseConfiguration(configurationNode);  \n    return configuration;  \n}  \n/** \n * 解析 "/configuration"节点下的子节点信息，然后将解析的结果设置到Configuration对象中 \n */  \nprivate void parseConfiguration(XNode root) {  \n    try {  \n        //1.首先处理properties 节点     \n        propertiesElement(root.evalNode("properties")); //issue #117 read properties first  \n        //2.处理typeAliases  \n        typeAliasesElement(root.evalNode("typeAliases"));  \n        //3.处理插件  \n        pluginElement(root.evalNode("plugins"));  \n        //4.处理objectFactory  \n        objectFactoryElement(root.evalNode("objectFactory"));  \n        //5.objectWrapperFactory  \n        objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));  \n        //6.settings  \n        settingsElement(root.evalNode("settings"));  \n        //7.处理environments  \n        environmentsElement(root.evalNode("environments")); // read it after objectFactory and objectWrapperFactory issue #631  \n        //8.database  \n        databaseIdProviderElement(root.evalNode("databaseIdProvider"));  \n        //9.typeHandlers  \n        typeHandlerElement(root.evalNode("typeHandlers"));  \n        //10.mappers  \n        mapperElement(root.evalNode("mappers"));  \n    } catch (Exception e) {  \n        throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);  \n    }  \n} \n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br")])]),e("p",[s._v("通过以上源码，我们就能看出，在mybatis的配置文件中：")]),s._v(" "),e("ul",[e("li",[s._v("configuration节点为根节点。")]),s._v(" "),e("li",[s._v("在configuration节点之下，我们可以配置10个子节点， 分别为：properties、typeAliases、plugins、objectFactory、objectWrapperFactory、settings、environments、databaseIdProvider、typeHandlers、mappers。")])]),s._v(" "),e("h1",{attrs:{id:"配置文件元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件元素"}},[s._v("#")]),s._v(" 配置文件元素")]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"元素1-properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素1-properties"}},[s._v("#")]),s._v(" 元素1：properties")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<configuration>\n    \x3c!-- 方法一： 从外部指定properties配置文件, 除了使用resource属性指定外，还可通过url属性指定url  \n        <properties resource="dbConfig.properties"></properties> \n    --\x3e\n    \x3c!-- 方法二： 直接配置为xml --\x3e\n    <properties>\n        <property name="driver" value="com.mysql.jdbc.Driver"/>\n        <property name="url" value="jdbc:mysql://localhost:3306/test1"/>\n        <property name="username" value="root"/>\n        <property name="password" value="root"/>\n    </properties>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("那么，我要是两种方法都同时配置了，那么最终会采用什么样的配置呢？")]),s._v(" "),e("p",[s._v("首先会加载文件中的xml配置，其次是加载外部指定的properties，最后加载Java Configuration的配置。因为配置存放在Properties，它继承自HashTable类，当依次将上述几种配置源put进去时，后加载的配置会覆盖先加载的配置。所以，最终应用配置时Configuration配置优先级最高，其次是外部的properties配置文件，最后是当前xml中的配置。具体可以参考接下来的源码分析。")]),s._v(" "),e("h3",{attrs:{id:"元素2-envirements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素2-envirements"}},[s._v("#")]),s._v(" 元素2：envirements")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<environments default="development">\n    <environment id="development">\n        \x3c!-- \n        JDBC–这个配置直接简单使用了JDBC的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。\n        MANAGED–这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期（比如Spring或JEE应用服务器的上下文）。\n        --\x3e\n        <transactionManager type="JDBC"/>\n        \x3c!--\n        UNPOOLED–这个数据源的实现是每次被请求时简单打开和关闭连接\n        POOLED–mybatis实现的简单的数据库连接池类型，它使得数据库连接可被复用，不必在每次请求时都去创建一个物理的连接。\n        JNDI – 通过jndi从tomcat之类的容器里获取数据源。\n        --\x3e\n        <dataSource type="POOLED">\n            \x3c!--\n            如果上面没有指定数据库配置的properties文件，那么此处可以这样直接配置 \n            <property name="driver" value="com.mysql.jdbc.Driver"/>\n            <property name="url" value="jdbc:mysql://localhost:3306/test1"/>\n            <property name="username" value="root"/>\n            <property name="password" value="root"/>\n            --\x3e\n         \n            \x3c!-- 上面指定了数据库配置文件， 配置文件里面也是对应的这四个属性 --\x3e\n            <property name="driver" value="${driver}"/>\n            <property name="url" value="${url}"/>\n            <property name="username" value="${username}"/>\n            <property name="password" value="${password}"/>  \n        </dataSource>\n    </environment>\n    \n    \x3c!-- 我再指定一个environment --\x3e\n    <environment id="test">\n        <transactionManager type="JDBC"/>\n        <dataSource type="POOLED">\n            <property name="driver" value="com.mysql.jdbc.Driver"/>\n            \x3c!-- 与上面的url不一样 --\x3e\n            <property name="url" value="jdbc:mysql://localhost:3306/demo"/>\n            <property name="username" value="root"/>\n            <property name="password" value="root"/>\n        </dataSource>\n    </environment>\n</environments>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br")])]),e("p",[s._v("environments元素节点可以配置多个environment子节点， 怎么理解呢？")]),s._v(" "),e("p",[s._v("假如我们系统的开发环境和正式环境所用的数据库不一样（这是肯定的）， 那么可以设置两个environment, 两个id分别对应开发环境（dev）和正式环境（final），那么通过配置environments的default属性就能选择对应的environment了， 例如，我将environments的deault属性的值配置为dev, 那么就会选择dev的environment。 至于这个是怎么实现的，下面源码就会讲。")]),s._v(" "),e("h3",{attrs:{id:"解析方法-propertieselement、environmentselement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析方法-propertieselement、environmentselement"}},[s._v("#")]),s._v(" 解析方法：propertiesElement、environmentsElement")]),s._v(" "),e("p",[s._v("好啦，上面简单给大家介绍了一下properties 和 environments 的配置， 接下来就正式开始看源码了： 上次我们说过mybatis 是通过XMLConfigBuilder这个类在解析mybatis配置文件的，那么本次就接着看看XMLConfigBuilder对于properties和environments的解析：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class XMLConfigBuilder extends BaseBuilder {\n\n    private boolean parsed;\n    // xml解析器\n    private XPathParser parser;\n    private String environment;\n  \n    // 上次说到这个方法是在解析mybatis配置文件中能配置的元素节点\n    // 今天首先要看的就是properties节点和environments节点\n    private void parseConfiguration(XNode root) {\n        try {\n            // 解析properties元素\n            propertiesElement(root.evalNode("properties")); //issue #117 read properties first\n            typeAliasesElement(root.evalNode("typeAliases"));\n            pluginElement(root.evalNode("plugins"));\n            objectFactoryElement(root.evalNode("objectFactory"));\n            objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));\n            settingsElement(root.evalNode("settings"));\n            // 解析environments元素\n            environmentsElement(root.evalNode("environments")); // read it after objectFactory and objectWrapperFactory issue #631\n            databaseIdProviderElement(root.evalNode("databaseIdProvider"));\n            typeHandlerElement(root.evalNode("typeHandlers"));\n            mapperElement(root.evalNode("mappers"));\n        } catch (Exception e) {\n            throw new BuilderException("Error parsing SQL Mapper Configuration. Cause: " + e, e);\n        }\n    }\n  \n    \n    //下面就看看解析properties的具体方法\n    private void propertiesElement(XNode context) throws Exception {\n        if (context != null) {\n            // 将子节点的 name 以及value属性set进properties对象\n            Properties defaults = context.getChildrenAsProperties();\n            // 获取properties节点上 resource属性的值\n            String resource = context.getStringAttribute("resource");\n            // 获取properties节点上 url属性的值, resource和url不能同时配置\n            String url = context.getStringAttribute("url");\n            if (resource != null && url != null) {\n                throw new BuilderException("The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.");\n            }\n            // 把解析出的properties文件set进Properties对象\n            if (resource != null) {\n                defaults.putAll(Resources.getResourceAsProperties(resource));\n            } else if (url != null) {\n                defaults.putAll(Resources.getUrlAsProperties(url));\n            }\n            // 将configuration对象中已配置的Properties属性与刚刚解析的融合\n            // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，以后也会频频提到这个对象\n            // 既然configuration对象用有一系列的get/set方法， 那是否就标志着我们可以使用java代码直接配置？ \n            // 答案是肯定的， 不过使用配置文件进行配置，优势不言而喻\n            Properties vars = configuration.getVariables();\n            if (vars != null) {\n                defaults.putAll(vars);\n            }\n            // 把装有解析配置propertis对象set进解析器， 因为后面可能会用到\n            parser.setVariables(defaults);\n            // set进configuration对象\n            configuration.setVariables(defaults);\n        }\n    }\n    \n    //下面再看看解析enviroments元素节点的方法\n    private void environmentsElement(XNode context) throws Exception {\n        if (context != null) {\n            if (environment == null) {\n                //解析environments节点的default属性的值\n                //例如: <environments default="development">\n                environment = context.getStringAttribute("default");\n            }\n            //递归解析environments子节点\n            for (XNode child : context.getChildren()) {\n                //<environment id="development">, 只有enviroment节点有id属性，那么这个属性有何作用？\n                //environments 节点下可以拥有多个 environment子节点\n                //类似于这样： <environments default="development"><environment id="development">...</environment><environment id="test">...</environments>\n                //意思就是我们可以对应多个环境，比如开发环境，测试环境等， 由environments的default属性去选择对应的enviroment\n                String id = child.getStringAttribute("id");\n                //isSpecial就是根据由environments的default属性去选择对应的enviroment\n                if (isSpecifiedEnvironment(id)) {\n                    //事务， mybatis有两种：JDBC 和 MANAGED, 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器， \n                    TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));\n                    //enviroment节点下面就是dataSource节点了，解析dataSource节点（下面会贴出解析dataSource的具体方法）\n                    DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));\n                    DataSource dataSource = dsFactory.getDataSource();\n                    Environment.Builder environmentBuilder = new Environment.Builder(id)\n                          .transactionFactory(txFactory)\n                          .dataSource(dataSource);\n                    //老规矩，会将dataSource设置进configuration对象\n                    configuration.setEnvironment(environmentBuilder.build());\n                }\n            }\n        }\n    }\n    \n    //下面看看dataSource的解析方法\n    private DataSourceFactory dataSourceElement(XNode context) throws Exception {\n        if (context != null) {\n            //dataSource的连接池\n            String type = context.getStringAttribute("type");\n            //子节点 name, value属性set进一个properties对象\n            Properties props = context.getChildrenAsProperties();\n            //创建dataSourceFactory\n            DataSourceFactory factory = (DataSourceFactory) resolveClass(type).newInstance();\n            factory.setProperties(props);\n            return factory;\n        }\n        throw new BuilderException("Environment declaration requires a DataSourceFactory.");\n    } \n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br")])]),e("p",[s._v("通过以上对mybatis源码的解读，相信大家对mybatis的配置又有了一个深入的认识。还有一个问题， 上面我们看到，在配置dataSource的时候使用了 ${driver} 这种表达式， 这种形式是怎么解析的？其实，是通过PropertyParser这个类解析：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * 这个类解析${}这种形式的表达式\n */\npublic class PropertyParser {\n\n    public static String parse(String string, Properties variables) {\n        VariableTokenHandler handler = new VariableTokenHandler(variables);\n        GenericTokenParser parser = new GenericTokenParser("${", "}", handler);\n        return parser.parse(string);\n    }\n\n    private static class VariableTokenHandler implements TokenHandler {\n        private Properties variables;\n\n        public VariableTokenHandler(Properties variables) {\n            this.variables = variables;\n        }\n\n        public String handleToken(String content) {\n            if (variables != null && variables.containsKey(content)) {\n                return variables.getProperty(content);\n            }\n            return "${" + content + "}";\n        }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("p",[s._v("以上就是对于properties 和 environments元素节点的分析，比较重要的都在对于源码的注释中标出。")]),s._v(" "),e("h3",{attrs:{id:"元素3-typealiases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素3-typealiases"}},[s._v("#")]),s._v(" 元素3：typeAliases")]),s._v(" "),e("p",[s._v("typeAliases节点主要用来设置别名，其实这是挺好用的一个功能， 通过配置别名，我们不用再指定完整的包名，并且还能取别名。")]),s._v(" "),e("p",[s._v("例如： 我们在使用 com.demo.entity. UserEntity 的时候，我们可以直接配置一个别名user, 这样以后在配置文件中要使用到com.demo.entity.UserEntity的时候，直接使用User即可。")]),s._v(" "),e("p",[s._v("就以上例为例，我们来实现一下，看看typeAliases的配置方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<configuration>\n    <typeAliases>\n        \x3c!--\n        通过package, 可以直接指定package的名字， mybatis会自动扫描你指定包下面的javabean,\n        并且默认设置一个别名，默认的名字为： javabean 的首字母小写的非限定类名来作为它的别名。\n        也可在javabean 加上注解@Alias 来自定义别名， 例如： @Alias(user) \n        <package name="com.dy.entity"/>\n        --\x3e\n        <typeAlias alias="UserEntity" type="com.dy.entity.User"/>\n    </typeAliases>\n  \n    ......\n  \n</configuration>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("再写一段测试代码，看看有没生效：（我只写一段伪代码）")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Configuration con = sqlSessionFactory.getConfiguration();\nMap<String, Class<?>> typeMap = con.getTypeAliasRegistry().getTypeAliases();\nfor(Entry<String, Class<?>> entry: typeMap.entrySet()) {\n    System.out.println(entry.getKey() + " ================> " + entry.getValue().getSimpleName());\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"解析方法-typealiaseselement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析方法-typealiaseselement"}},[s._v("#")]),s._v(" 解析方法：typeAliasesElement")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * 解析typeAliases节点\n */\nprivate void typeAliasesElement(XNode parent) {\n    if (parent != null) {\n        for (XNode child : parent.getChildren()) {\n            //如果子节点是package, 那么就获取package节点的name属性， mybatis会扫描指定的package\n            if ("package".equals(child.getName())) {\n                String typeAliasPackage = child.getStringAttribute("name");\n                //TypeAliasRegistry 负责管理别名， 这儿就是通过TypeAliasRegistry 进行别名注册， 下面就会看看TypeAliasRegistry源码\n                configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);\n            } else {\n                //如果子节点是typeAlias节点，那么就获取alias属性和type的属性值\n                String alias = child.getStringAttribute("alias");\n                String type = child.getStringAttribute("type");\n                try {\n                    Class<?> clazz = Resources.classForName(type);\n                    if (alias == null) {\n                        typeAliasRegistry.registerAlias(clazz);\n                    } else {\n                        typeAliasRegistry.registerAlias(alias, clazz);\n                    }\n                } catch (ClassNotFoundException e) {\n                    throw new BuilderException("Error registering typeAlias for \'" + alias + "\'. Cause: " + e, e);\n                }\n            }\n        }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[s._v("重要的源码在这儿：TypeAliasRegistry.java")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class TypeAliasRegistry {\n  \n  //这就是核心所在啊， 原来别名就仅仅通过一个HashMap来实现， key为别名， value就是别名对应的类型（class对象）\n  private final Map<String, Class<?>> TYPE_ALIASES = new HashMap<String, Class<?>>();\n\n  /**\n   * 以下就是mybatis默认为我们注册的别名\n   */\n  public TypeAliasRegistry() {\n    registerAlias("string", String.class);\n\n    registerAlias("byte", Byte.class);\n    registerAlias("long", Long.class);\n    registerAlias("short", Short.class);\n    registerAlias("int", Integer.class);\n    registerAlias("integer", Integer.class);\n    registerAlias("double", Double.class);\n    registerAlias("float", Float.class);\n    registerAlias("boolean", Boolean.class);\n\n    registerAlias("byte[]", Byte[].class);\n    registerAlias("long[]", Long[].class);\n    registerAlias("short[]", Short[].class);\n    registerAlias("int[]", Integer[].class);\n    registerAlias("integer[]", Integer[].class);\n    registerAlias("double[]", Double[].class);\n    registerAlias("float[]", Float[].class);\n    registerAlias("boolean[]", Boolean[].class);\n\n    registerAlias("_byte", byte.class);\n    registerAlias("_long", long.class);\n    registerAlias("_short", short.class);\n    registerAlias("_int", int.class);\n    registerAlias("_integer", int.class);\n    registerAlias("_double", double.class);\n    registerAlias("_float", float.class);\n    registerAlias("_boolean", boolean.class);\n\n    registerAlias("_byte[]", byte[].class);\n    registerAlias("_long[]", long[].class);\n    registerAlias("_short[]", short[].class);\n    registerAlias("_int[]", int[].class);\n    registerAlias("_integer[]", int[].class);\n    registerAlias("_double[]", double[].class);\n    registerAlias("_float[]", float[].class);\n    registerAlias("_boolean[]", boolean[].class);\n\n    registerAlias("date", Date.class);\n    registerAlias("decimal", BigDecimal.class);\n    registerAlias("bigdecimal", BigDecimal.class);\n    registerAlias("biginteger", BigInteger.class);\n    registerAlias("object", Object.class);\n\n    registerAlias("date[]", Date[].class);\n    registerAlias("decimal[]", BigDecimal[].class);\n    registerAlias("bigdecimal[]", BigDecimal[].class);\n    registerAlias("biginteger[]", BigInteger[].class);\n    registerAlias("object[]", Object[].class);\n\n    registerAlias("map", Map.class);\n    registerAlias("hashmap", HashMap.class);\n    registerAlias("list", List.class);\n    registerAlias("arraylist", ArrayList.class);\n    registerAlias("collection", Collection.class);\n    registerAlias("iterator", Iterator.class);\n\n    registerAlias("ResultSet", ResultSet.class);\n  }\n\n  \n  /**\n   * 处理别名， 直接从保存有别名的hashMap中取出即可\n   */\n  @SuppressWarnings("unchecked")\n  public <T> Class<T> resolveAlias(String string) {\n    try {\n      if (string == null) return null;\n      String key = string.toLowerCase(Locale.ENGLISH); // issue #748\n      Class<T> value;\n      if (TYPE_ALIASES.containsKey(key)) {\n        value = (Class<T>) TYPE_ALIASES.get(key);\n      } else {\n        value = (Class<T>) Resources.classForName(string);\n      }\n      return value;\n    } catch (ClassNotFoundException e) {\n      throw new TypeException("Could not resolve type alias \'" + string + "\'.  Cause: " + e, e);\n    }\n  }\n  \n  /**\n   * 配置文件中配置为package的时候， 会调用此方法，根据配置的报名去扫描javabean ，然后自动注册别名\n   * 默认会使用 Bean 的首字母小写的非限定类名来作为它的别名\n   * 也可在javabean 加上注解@Alias 来自定义别名， 例如： @Alias(user)\n   */\n  public void registerAliases(String packageName){\n    registerAliases(packageName, Object.class);\n  }\n\n  public void registerAliases(String packageName, Class<?> superType){\n    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();\n    resolverUtil.find(new ResolverUtil.IsA(superType), packageName);\n    Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();\n    for(Class<?> type : typeSet){\n      // Ignore inner classes and interfaces (including package-info.java)\n      // Skip also inner classes. See issue #6\n      if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {\n        registerAlias(type);\n      }\n    }\n  }\n\n  public void registerAlias(Class<?> type) {\n    String alias = type.getSimpleName();\n    Alias aliasAnnotation = type.getAnnotation(Alias.class);\n    if (aliasAnnotation != null) {\n      alias = aliasAnnotation.value();\n    } \n    registerAlias(alias, type);\n  }\n\n  //这就是注册别名的本质方法， 其实就是向保存别名的hashMap新增值而已， 呵呵， 别名的实现太简单了，对吧\n  public void registerAlias(String alias, Class<?> value) {\n    if (alias == null) throw new TypeException("The parameter alias cannot be null");\n    String key = alias.toLowerCase(Locale.ENGLISH); // issue #748\n    if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {\n      throw new TypeException("The alias \'" + alias + "\' is already mapped to the value \'" + TYPE_ALIASES.get(key).getName() + "\'.");\n    }\n    TYPE_ALIASES.put(key, value);\n  }\n\n  public void registerAlias(String alias, String value) {\n    try {\n      registerAlias(alias, Resources.classForName(value));\n    } catch (ClassNotFoundException e) {\n      throw new TypeException("Error registering type alias "+alias+" for "+value+". Cause: " + e, e);\n    }\n  }\n  \n  /**\n   * 获取保存别名的HashMap, Configuration对象持有对TypeAliasRegistry的引用，因此，如果需要，我们可以通过Configuration对象获取\n   */\n  public Map<String, Class<?>> getTypeAliases() {\n    return Collections.unmodifiableMap(TYPE_ALIASES);\n  }\n\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br"),e("span",{staticClass:"line-number"},[s._v("110")]),e("br"),e("span",{staticClass:"line-number"},[s._v("111")]),e("br"),e("span",{staticClass:"line-number"},[s._v("112")]),e("br"),e("span",{staticClass:"line-number"},[s._v("113")]),e("br"),e("span",{staticClass:"line-number"},[s._v("114")]),e("br"),e("span",{staticClass:"line-number"},[s._v("115")]),e("br"),e("span",{staticClass:"line-number"},[s._v("116")]),e("br"),e("span",{staticClass:"line-number"},[s._v("117")]),e("br"),e("span",{staticClass:"line-number"},[s._v("118")]),e("br"),e("span",{staticClass:"line-number"},[s._v("119")]),e("br"),e("span",{staticClass:"line-number"},[s._v("120")]),e("br"),e("span",{staticClass:"line-number"},[s._v("121")]),e("br"),e("span",{staticClass:"line-number"},[s._v("122")]),e("br"),e("span",{staticClass:"line-number"},[s._v("123")]),e("br"),e("span",{staticClass:"line-number"},[s._v("124")]),e("br"),e("span",{staticClass:"line-number"},[s._v("125")]),e("br"),e("span",{staticClass:"line-number"},[s._v("126")]),e("br"),e("span",{staticClass:"line-number"},[s._v("127")]),e("br"),e("span",{staticClass:"line-number"},[s._v("128")]),e("br"),e("span",{staticClass:"line-number"},[s._v("129")]),e("br"),e("span",{staticClass:"line-number"},[s._v("130")]),e("br"),e("span",{staticClass:"line-number"},[s._v("131")]),e("br"),e("span",{staticClass:"line-number"},[s._v("132")]),e("br"),e("span",{staticClass:"line-number"},[s._v("133")]),e("br"),e("span",{staticClass:"line-number"},[s._v("134")]),e("br"),e("span",{staticClass:"line-number"},[s._v("135")]),e("br"),e("span",{staticClass:"line-number"},[s._v("136")]),e("br"),e("span",{staticClass:"line-number"},[s._v("137")]),e("br"),e("span",{staticClass:"line-number"},[s._v("138")]),e("br"),e("span",{staticClass:"line-number"},[s._v("139")]),e("br"),e("span",{staticClass:"line-number"},[s._v("140")]),e("br"),e("span",{staticClass:"line-number"},[s._v("141")]),e("br"),e("span",{staticClass:"line-number"},[s._v("142")]),e("br"),e("span",{staticClass:"line-number"},[s._v("143")]),e("br"),e("span",{staticClass:"line-number"},[s._v("144")]),e("br"),e("span",{staticClass:"line-number"},[s._v("145")]),e("br"),e("span",{staticClass:"line-number"},[s._v("146")]),e("br"),e("span",{staticClass:"line-number"},[s._v("147")]),e("br")])]),e("p",[s._v("由源码可见，设置别名的原理就这么简单，Mybatis默认给我们设置了不少别名，在上面代码中都可以见到。")]),s._v(" "),e("h3",{attrs:{id:"元素4-typehandler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素4-typehandler"}},[s._v("#")]),s._v(" 元素4：TypeHandler")]),s._v(" "),e("blockquote",[e("p",[s._v("Mybatis中的TypeHandler是什么？")])]),s._v(" "),e("p",[s._v("无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成 Java 类型。Mybatis默认为我们实现了许多TypeHandler, 当我们没有配置指定TypeHandler时，Mybatis会根据参数或者返回结果的不同，默认为我们选择合适的TypeHandler处理。")]),s._v(" "),e("p",[s._v("那么，Mybatis为我们实现了哪些TypeHandler呢? 我们怎么自定义实现一个TypeHandler ? 这些都会在接下来的mybatis的源码中看到。在看源码之前，还是像之前一样，先看看怎么配置吧？")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<configuration>\n    <typeHandlers>\n      \x3c!-- \n          当配置package的时候，mybatis会去配置的package扫描TypeHandler\n          <package name="com.dy.demo"/>\n       --\x3e\n      \n      \x3c!-- handler属性直接配置我们要指定的TypeHandler --\x3e\n      <typeHandler handler=""/>\n      \n      \x3c!-- javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 --\x3e\n      <typeHandler javaType="" handler=""/>\n      \n      \x3c!-- jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型  --\x3e\n      <typeHandler jdbcType="" handler=""/>\n      \n      \x3c!-- 也可两者都配置 --\x3e\n      <typeHandler javaType="" jdbcType="" handler=""/>\n      \n  </typeHandlers>\n  \n  ......\n  \n</configuration>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("h3",{attrs:{id:"解析方法-typehandlerelement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析方法-typehandlerelement"}},[s._v("#")]),s._v(" 解析方法：typeHandlerElement")]),s._v(" "),e("p",[s._v("上面简单介绍了一下TypeHandler, 下面就看看mybatis中TypeHandler的源码了。老规矩，先从对xml的解析讲起：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * 解析typeHandlers节点\n */\nprivate void typeHandlerElement(XNode parent) throws Exception {\n    if (parent != null) {\n      for (XNode child : parent.getChildren()) {\n        //子节点为package时，获取其name属性的值，然后自动扫描package下的自定义typeHandler\n        if ("package".equals(child.getName())) {\n          String typeHandlerPackage = child.getStringAttribute("name");\n          typeHandlerRegistry.register(typeHandlerPackage);\n        } else {\n          //子节点为typeHandler时， 可以指定javaType属性， 也可以指定jdbcType, 也可两者都指定\n          //javaType 是指定java类型\n          //jdbcType 是指定jdbc类型（数据库类型： 如varchar）\n          String javaTypeName = child.getStringAttribute("javaType");\n          String jdbcTypeName = child.getStringAttribute("jdbcType");\n          //handler就是我们配置的typeHandler\n          String handlerTypeName = child.getStringAttribute("handler");\n          //resolveClass方法就是我们上篇文章所讲的TypeAliasRegistry里面处理别名的方法\n          Class<?> javaTypeClass = resolveClass(javaTypeName);\n          //JdbcType是一个枚举类型，resolveJdbcType方法是在获取枚举类型的值\n          JdbcType jdbcType = resolveJdbcType(jdbcTypeName);\n          Class<?> typeHandlerClass = resolveClass(handlerTypeName);\n          //注册typeHandler, typeHandler通过TypeHandlerRegistry这个类管理\n          if (javaTypeClass != null) {\n            if (jdbcType == null) {\n              typeHandlerRegistry.register(javaTypeClass, typeHandlerClass);\n            } else {\n              typeHandlerRegistry.register(javaTypeClass, jdbcType, typeHandlerClass);\n            }\n          } else {\n            typeHandlerRegistry.register(typeHandlerClass);\n          }\n        }\n      }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])]),e("p",[s._v("接下来看看TypeHandler的管理注册类：TypeHandlerRegistry.java")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * typeHandler注册管理类\n */\npublic final class TypeHandlerRegistry {\n\n  //源码一上来，二话不说，几个大大的HashMap就出现，这不又跟上次讲的typeAliases的注册类似么\n\n  //基本数据类型与其包装类\n  private static final Map<Class<?>, Class<?>> reversePrimitiveMap = new HashMap<Class<?>, Class<?>>() {\n    private static final long serialVersionUID = 1L;\n    {\n      put(Byte.class, byte.class);\n      put(Short.class, short.class);\n      put(Integer.class, int.class);\n      put(Long.class, long.class);\n      put(Float.class, float.class);\n      put(Double.class, double.class);\n      put(Boolean.class, boolean.class);\n      put(Character.class, char.class);\n    }\n  };\n\n  //这几个MAP不用说就知道存的是什么东西吧，命名的好处\n  private final Map<JdbcType, TypeHandler<?>> JDBC_TYPE_HANDLER_MAP = new EnumMap<JdbcType, TypeHandler<?>>(JdbcType.class);\n  private final Map<Type, Map<JdbcType, TypeHandler<?>>> TYPE_HANDLER_MAP = new HashMap<Type, Map<JdbcType, TypeHandler<?>>>();\n  private final TypeHandler<Object> UNKNOWN_TYPE_HANDLER = new UnknownTypeHandler(this);\n  private final Map<Class<?>, TypeHandler<?>> ALL_TYPE_HANDLERS_MAP = new HashMap<Class<?>, TypeHandler<?>>();\n\n  //就像上篇文章讲的typeAliases一样，mybatis也默认给我们注册了不少的typeHandler\n  //具体如下\n  public TypeHandlerRegistry() {\n    register(Boolean.class, new BooleanTypeHandler());\n    register(boolean.class, new BooleanTypeHandler());\n    register(JdbcType.BOOLEAN, new BooleanTypeHandler());\n    register(JdbcType.BIT, new BooleanTypeHandler());\n\n    register(Byte.class, new ByteTypeHandler());\n    register(byte.class, new ByteTypeHandler());\n    register(JdbcType.TINYINT, new ByteTypeHandler());\n\n    register(Short.class, new ShortTypeHandler());\n    register(short.class, new ShortTypeHandler());\n    register(JdbcType.SMALLINT, new ShortTypeHandler());\n\n    register(Integer.class, new IntegerTypeHandler());\n    register(int.class, new IntegerTypeHandler());\n    register(JdbcType.INTEGER, new IntegerTypeHandler());\n\n    register(Long.class, new LongTypeHandler());\n    register(long.class, new LongTypeHandler());\n\n    register(Float.class, new FloatTypeHandler());\n    register(float.class, new FloatTypeHandler());\n    register(JdbcType.FLOAT, new FloatTypeHandler());\n\n    register(Double.class, new DoubleTypeHandler());\n    register(double.class, new DoubleTypeHandler());\n    register(JdbcType.DOUBLE, new DoubleTypeHandler());\n\n    register(String.class, new StringTypeHandler());\n    register(String.class, JdbcType.CHAR, new StringTypeHandler());\n    register(String.class, JdbcType.CLOB, new ClobTypeHandler());\n    register(String.class, JdbcType.VARCHAR, new StringTypeHandler());\n    register(String.class, JdbcType.LONGVARCHAR, new ClobTypeHandler());\n    register(String.class, JdbcType.NVARCHAR, new NStringTypeHandler());\n    register(String.class, JdbcType.NCHAR, new NStringTypeHandler());\n    register(String.class, JdbcType.NCLOB, new NClobTypeHandler());\n    register(JdbcType.CHAR, new StringTypeHandler());\n    register(JdbcType.VARCHAR, new StringTypeHandler());\n    register(JdbcType.CLOB, new ClobTypeHandler());\n    register(JdbcType.LONGVARCHAR, new ClobTypeHandler());\n    register(JdbcType.NVARCHAR, new NStringTypeHandler());\n    register(JdbcType.NCHAR, new NStringTypeHandler());\n    register(JdbcType.NCLOB, new NClobTypeHandler());\n\n    register(Object.class, JdbcType.ARRAY, new ArrayTypeHandler());\n    register(JdbcType.ARRAY, new ArrayTypeHandler());\n\n    register(BigInteger.class, new BigIntegerTypeHandler());\n    register(JdbcType.BIGINT, new LongTypeHandler());\n\n    register(BigDecimal.class, new BigDecimalTypeHandler());\n    register(JdbcType.REAL, new BigDecimalTypeHandler());\n    register(JdbcType.DECIMAL, new BigDecimalTypeHandler());\n    register(JdbcType.NUMERIC, new BigDecimalTypeHandler());\n\n    register(Byte[].class, new ByteObjectArrayTypeHandler());\n    register(Byte[].class, JdbcType.BLOB, new BlobByteObjectArrayTypeHandler());\n    register(Byte[].class, JdbcType.LONGVARBINARY, new BlobByteObjectArrayTypeHandler());\n    register(byte[].class, new ByteArrayTypeHandler());\n    register(byte[].class, JdbcType.BLOB, new BlobTypeHandler());\n    register(byte[].class, JdbcType.LONGVARBINARY, new BlobTypeHandler());\n    register(JdbcType.LONGVARBINARY, new BlobTypeHandler());\n    register(JdbcType.BLOB, new BlobTypeHandler());\n\n    register(Object.class, UNKNOWN_TYPE_HANDLER);\n    register(Object.class, JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);\n    register(JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);\n\n    register(Date.class, new DateTypeHandler());\n    register(Date.class, JdbcType.DATE, new DateOnlyTypeHandler());\n    register(Date.class, JdbcType.TIME, new TimeOnlyTypeHandler());\n    register(JdbcType.TIMESTAMP, new DateTypeHandler());\n    register(JdbcType.DATE, new DateOnlyTypeHandler());\n    register(JdbcType.TIME, new TimeOnlyTypeHandler());\n\n    register(java.sql.Date.class, new SqlDateTypeHandler());\n    register(java.sql.Time.class, new SqlTimeTypeHandler());\n    register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());\n\n    // issue #273\n    register(Character.class, new CharacterTypeHandler());\n    register(char.class, new CharacterTypeHandler());\n  }\n\n  public boolean hasTypeHandler(Class<?> javaType) {\n    return hasTypeHandler(javaType, null);\n  }\n\n  public boolean hasTypeHandler(TypeReference<?> javaTypeReference) {\n    return hasTypeHandler(javaTypeReference, null);\n  }\n\n  public boolean hasTypeHandler(Class<?> javaType, JdbcType jdbcType) {\n    return javaType != null && getTypeHandler((Type) javaType, jdbcType) != null;\n  }\n\n  public boolean hasTypeHandler(TypeReference<?> javaTypeReference, JdbcType jdbcType) {\n    return javaTypeReference != null && getTypeHandler(javaTypeReference, jdbcType) != null;\n  }\n\n  public TypeHandler<?> getMappingTypeHandler(Class<? extends TypeHandler<?>> handlerType) {\n    return ALL_TYPE_HANDLERS_MAP.get(handlerType);\n  }\n\n  public <T> TypeHandler<T> getTypeHandler(Class<T> type) {\n    return getTypeHandler((Type) type, null);\n  }\n\n  public <T> TypeHandler<T> getTypeHandler(TypeReference<T> javaTypeReference) {\n    return getTypeHandler(javaTypeReference, null);\n  }\n\n  public TypeHandler<?> getTypeHandler(JdbcType jdbcType) {\n    return JDBC_TYPE_HANDLER_MAP.get(jdbcType);\n  }\n\n  public <T> TypeHandler<T> getTypeHandler(Class<T> type, JdbcType jdbcType) {\n    return getTypeHandler((Type) type, jdbcType);\n  }\n\n  public <T> TypeHandler<T> getTypeHandler(TypeReference<T> javaTypeReference, JdbcType jdbcType) {\n    return getTypeHandler(javaTypeReference.getRawType(), jdbcType);\n  }\n\n  private <T> TypeHandler<T> getTypeHandler(Type type, JdbcType jdbcType) {\n    Map<JdbcType, TypeHandler<?>> jdbcHandlerMap = TYPE_HANDLER_MAP.get(type);\n    TypeHandler<?> handler = null;\n    if (jdbcHandlerMap != null) {\n      handler = jdbcHandlerMap.get(jdbcType);\n      if (handler == null) {\n        handler = jdbcHandlerMap.get(null);\n      }\n    }\n    if (handler == null && type != null && type instanceof Class && Enum.class.isAssignableFrom((Class<?>) type)) {\n      handler = new EnumTypeHandler((Class<?>) type);\n    }\n    @SuppressWarnings("unchecked")\n    // type drives generics here\n    TypeHandler<T> returned = (TypeHandler<T>) handler;\n    return returned;\n  }\n\n  public TypeHandler<Object> getUnknownTypeHandler() {\n    return UNKNOWN_TYPE_HANDLER;\n  }\n\n  public void register(JdbcType jdbcType, TypeHandler<?> handler) {\n    JDBC_TYPE_HANDLER_MAP.put(jdbcType, handler);\n  }\n\n  //\n  // REGISTER INSTANCE\n  //\n\n  /**\n   * 只配置了typeHandler, 没有配置jdbcType 或者javaType\n   */\n  @SuppressWarnings("unchecked")\n  public <T> void register(TypeHandler<T> typeHandler) {\n    boolean mappedTypeFound = false;\n    //在自定义typeHandler的时候，可以加上注解MappedTypes 去指定关联的javaType\n    //因此，此处需要扫描MappedTypes注解\n    MappedTypes mappedTypes = typeHandler.getClass().getAnnotation(MappedTypes.class);\n    if (mappedTypes != null) {\n      for (Class<?> handledType : mappedTypes.value()) {\n        register(handledType, typeHandler);\n        mappedTypeFound = true;\n      }\n    }\n    // @since 3.1.0 - try to auto-discover the mapped type\n    if (!mappedTypeFound && typeHandler instanceof TypeReference) {\n      try {\n        TypeReference<T> typeReference = (TypeReference<T>) typeHandler;\n        register(typeReference.getRawType(), typeHandler);\n        mappedTypeFound = true;\n      } catch (Throwable t) {\n        // maybe users define the TypeReference with a different type and are not assignable, so just ignore it\n      }\n    }\n    if (!mappedTypeFound) {\n      register((Class<T>) null, typeHandler);\n    }\n  }\n\n  /**\n   * 配置了typeHandlerhe和javaType\n   */\n  public <T> void register(Class<T> javaType, TypeHandler<? extends T> typeHandler) {\n    register((Type) javaType, typeHandler);\n  }\n\n  private <T> void register(Type javaType, TypeHandler<? extends T> typeHandler) {\n    //扫描注解MappedJdbcTypes\n    MappedJdbcTypes mappedJdbcTypes = typeHandler.getClass().getAnnotation(MappedJdbcTypes.class);\n    if (mappedJdbcTypes != null) {\n      for (JdbcType handledJdbcType : mappedJdbcTypes.value()) {\n        register(javaType, handledJdbcType, typeHandler);\n      }\n      if (mappedJdbcTypes.includeNullJdbcType()) {\n        register(javaType, null, typeHandler);\n      }\n    } else {\n      register(javaType, null, typeHandler);\n    }\n  }\n\n  public <T> void register(TypeReference<T> javaTypeReference, TypeHandler<? extends T> handler) {\n    register(javaTypeReference.getRawType(), handler);\n  }\n\n  /**\n   * typeHandlerhe、javaType、jdbcType都配置了\n   */\n  public <T> void register(Class<T> type, JdbcType jdbcType, TypeHandler<? extends T> handler) {\n    register((Type) type, jdbcType, handler);\n  }\n\n  /**\n   * 注册typeHandler的核心方法\n   * 就是向Map新增数据而已\n   */\n  private void register(Type javaType, JdbcType jdbcType, TypeHandler<?> handler) {\n    if (javaType != null) {\n      Map<JdbcType, TypeHandler<?>> map = TYPE_HANDLER_MAP.get(javaType);\n      if (map == null) {\n        map = new HashMap<JdbcType, TypeHandler<?>>();\n        TYPE_HANDLER_MAP.put(javaType, map);\n      }\n      map.put(jdbcType, handler);\n      if (reversePrimitiveMap.containsKey(javaType)) {\n        register(reversePrimitiveMap.get(javaType), jdbcType, handler);\n      }\n    }\n    ALL_TYPE_HANDLERS_MAP.put(handler.getClass(), handler);\n  }\n\n  //\n  // REGISTER CLASS\n  //\n\n  // Only handler type\n\n  public void register(Class<?> typeHandlerClass) {\n    boolean mappedTypeFound = false;\n    MappedTypes mappedTypes = typeHandlerClass.getAnnotation(MappedTypes.class);\n    if (mappedTypes != null) {\n      for (Class<?> javaTypeClass : mappedTypes.value()) {\n        register(javaTypeClass, typeHandlerClass);\n        mappedTypeFound = true;\n      }\n    }\n    if (!mappedTypeFound) {\n      register(getInstance(null, typeHandlerClass));\n    }\n  }\n\n  // java type + handler type\n\n  public void register(Class<?> javaTypeClass, Class<?> typeHandlerClass) {\n    register(javaTypeClass, getInstance(javaTypeClass, typeHandlerClass));\n  }\n\n  // java type + jdbc type + handler type\n\n  public void register(Class<?> javaTypeClass, JdbcType jdbcType, Class<?> typeHandlerClass) {\n    register(javaTypeClass, jdbcType, getInstance(javaTypeClass, typeHandlerClass));\n  }\n\n  // Construct a handler (used also from Builders)\n\n  @SuppressWarnings("unchecked")\n  public <T> TypeHandler<T> getInstance(Class<?> javaTypeClass, Class<?> typeHandlerClass) {\n    if (javaTypeClass != null) {\n      try {\n        Constructor<?> c = typeHandlerClass.getConstructor(Class.class);\n        return (TypeHandler<T>) c.newInstance(javaTypeClass);\n      } catch (NoSuchMethodException ignored) {\n        // ignored\n      } catch (Exception e) {\n        throw new TypeException("Failed invoking constructor for handler " + typeHandlerClass, e);\n      }\n    }\n    try {\n      Constructor<?> c = typeHandlerClass.getConstructor();\n      return (TypeHandler<T>) c.newInstance();\n    } catch (Exception e) {\n      throw new TypeException("Unable to find a usable constructor for " + typeHandlerClass, e);\n    }\n  }\n\n \n  /**\n   * 根据指定的pacakge去扫描自定义的typeHander，然后注册\n   */\n  public void register(String packageName) {\n    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();\n    resolverUtil.find(new ResolverUtil.IsA(TypeHandler.class), packageName);\n    Set<Class<? extends Class<?>>> handlerSet = resolverUtil.getClasses();\n    for (Class<?> type : handlerSet) {\n      //Ignore inner classes and interfaces (including package-info.java) and abstract classes\n      if (!type.isAnonymousClass() && !type.isInterface() && !Modifier.isAbstract(type.getModifiers())) {\n        register(type);\n      }\n    }\n  }\n  \n  // get information\n  \n  /**\n   * 通过configuration对象可以获取已注册的所有typeHandler\n   */\n  public Collection<TypeHandler<?>> getTypeHandlers() {\n    return Collections.unmodifiableCollection(ALL_TYPE_HANDLERS_MAP.values());\n  }\n  \n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br"),e("span",{staticClass:"line-number"},[s._v("110")]),e("br"),e("span",{staticClass:"line-number"},[s._v("111")]),e("br"),e("span",{staticClass:"line-number"},[s._v("112")]),e("br"),e("span",{staticClass:"line-number"},[s._v("113")]),e("br"),e("span",{staticClass:"line-number"},[s._v("114")]),e("br"),e("span",{staticClass:"line-number"},[s._v("115")]),e("br"),e("span",{staticClass:"line-number"},[s._v("116")]),e("br"),e("span",{staticClass:"line-number"},[s._v("117")]),e("br"),e("span",{staticClass:"line-number"},[s._v("118")]),e("br"),e("span",{staticClass:"line-number"},[s._v("119")]),e("br"),e("span",{staticClass:"line-number"},[s._v("120")]),e("br"),e("span",{staticClass:"line-number"},[s._v("121")]),e("br"),e("span",{staticClass:"line-number"},[s._v("122")]),e("br"),e("span",{staticClass:"line-number"},[s._v("123")]),e("br"),e("span",{staticClass:"line-number"},[s._v("124")]),e("br"),e("span",{staticClass:"line-number"},[s._v("125")]),e("br"),e("span",{staticClass:"line-number"},[s._v("126")]),e("br"),e("span",{staticClass:"line-number"},[s._v("127")]),e("br"),e("span",{staticClass:"line-number"},[s._v("128")]),e("br"),e("span",{staticClass:"line-number"},[s._v("129")]),e("br"),e("span",{staticClass:"line-number"},[s._v("130")]),e("br"),e("span",{staticClass:"line-number"},[s._v("131")]),e("br"),e("span",{staticClass:"line-number"},[s._v("132")]),e("br"),e("span",{staticClass:"line-number"},[s._v("133")]),e("br"),e("span",{staticClass:"line-number"},[s._v("134")]),e("br"),e("span",{staticClass:"line-number"},[s._v("135")]),e("br"),e("span",{staticClass:"line-number"},[s._v("136")]),e("br"),e("span",{staticClass:"line-number"},[s._v("137")]),e("br"),e("span",{staticClass:"line-number"},[s._v("138")]),e("br"),e("span",{staticClass:"line-number"},[s._v("139")]),e("br"),e("span",{staticClass:"line-number"},[s._v("140")]),e("br"),e("span",{staticClass:"line-number"},[s._v("141")]),e("br"),e("span",{staticClass:"line-number"},[s._v("142")]),e("br"),e("span",{staticClass:"line-number"},[s._v("143")]),e("br"),e("span",{staticClass:"line-number"},[s._v("144")]),e("br"),e("span",{staticClass:"line-number"},[s._v("145")]),e("br"),e("span",{staticClass:"line-number"},[s._v("146")]),e("br"),e("span",{staticClass:"line-number"},[s._v("147")]),e("br"),e("span",{staticClass:"line-number"},[s._v("148")]),e("br"),e("span",{staticClass:"line-number"},[s._v("149")]),e("br"),e("span",{staticClass:"line-number"},[s._v("150")]),e("br"),e("span",{staticClass:"line-number"},[s._v("151")]),e("br"),e("span",{staticClass:"line-number"},[s._v("152")]),e("br"),e("span",{staticClass:"line-number"},[s._v("153")]),e("br"),e("span",{staticClass:"line-number"},[s._v("154")]),e("br"),e("span",{staticClass:"line-number"},[s._v("155")]),e("br"),e("span",{staticClass:"line-number"},[s._v("156")]),e("br"),e("span",{staticClass:"line-number"},[s._v("157")]),e("br"),e("span",{staticClass:"line-number"},[s._v("158")]),e("br"),e("span",{staticClass:"line-number"},[s._v("159")]),e("br"),e("span",{staticClass:"line-number"},[s._v("160")]),e("br"),e("span",{staticClass:"line-number"},[s._v("161")]),e("br"),e("span",{staticClass:"line-number"},[s._v("162")]),e("br"),e("span",{staticClass:"line-number"},[s._v("163")]),e("br"),e("span",{staticClass:"line-number"},[s._v("164")]),e("br"),e("span",{staticClass:"line-number"},[s._v("165")]),e("br"),e("span",{staticClass:"line-number"},[s._v("166")]),e("br"),e("span",{staticClass:"line-number"},[s._v("167")]),e("br"),e("span",{staticClass:"line-number"},[s._v("168")]),e("br"),e("span",{staticClass:"line-number"},[s._v("169")]),e("br"),e("span",{staticClass:"line-number"},[s._v("170")]),e("br"),e("span",{staticClass:"line-number"},[s._v("171")]),e("br"),e("span",{staticClass:"line-number"},[s._v("172")]),e("br"),e("span",{staticClass:"line-number"},[s._v("173")]),e("br"),e("span",{staticClass:"line-number"},[s._v("174")]),e("br"),e("span",{staticClass:"line-number"},[s._v("175")]),e("br"),e("span",{staticClass:"line-number"},[s._v("176")]),e("br"),e("span",{staticClass:"line-number"},[s._v("177")]),e("br"),e("span",{staticClass:"line-number"},[s._v("178")]),e("br"),e("span",{staticClass:"line-number"},[s._v("179")]),e("br"),e("span",{staticClass:"line-number"},[s._v("180")]),e("br"),e("span",{staticClass:"line-number"},[s._v("181")]),e("br"),e("span",{staticClass:"line-number"},[s._v("182")]),e("br"),e("span",{staticClass:"line-number"},[s._v("183")]),e("br"),e("span",{staticClass:"line-number"},[s._v("184")]),e("br"),e("span",{staticClass:"line-number"},[s._v("185")]),e("br"),e("span",{staticClass:"line-number"},[s._v("186")]),e("br"),e("span",{staticClass:"line-number"},[s._v("187")]),e("br"),e("span",{staticClass:"line-number"},[s._v("188")]),e("br"),e("span",{staticClass:"line-number"},[s._v("189")]),e("br"),e("span",{staticClass:"line-number"},[s._v("190")]),e("br"),e("span",{staticClass:"line-number"},[s._v("191")]),e("br"),e("span",{staticClass:"line-number"},[s._v("192")]),e("br"),e("span",{staticClass:"line-number"},[s._v("193")]),e("br"),e("span",{staticClass:"line-number"},[s._v("194")]),e("br"),e("span",{staticClass:"line-number"},[s._v("195")]),e("br"),e("span",{staticClass:"line-number"},[s._v("196")]),e("br"),e("span",{staticClass:"line-number"},[s._v("197")]),e("br"),e("span",{staticClass:"line-number"},[s._v("198")]),e("br"),e("span",{staticClass:"line-number"},[s._v("199")]),e("br"),e("span",{staticClass:"line-number"},[s._v("200")]),e("br"),e("span",{staticClass:"line-number"},[s._v("201")]),e("br"),e("span",{staticClass:"line-number"},[s._v("202")]),e("br"),e("span",{staticClass:"line-number"},[s._v("203")]),e("br"),e("span",{staticClass:"line-number"},[s._v("204")]),e("br"),e("span",{staticClass:"line-number"},[s._v("205")]),e("br"),e("span",{staticClass:"line-number"},[s._v("206")]),e("br"),e("span",{staticClass:"line-number"},[s._v("207")]),e("br"),e("span",{staticClass:"line-number"},[s._v("208")]),e("br"),e("span",{staticClass:"line-number"},[s._v("209")]),e("br"),e("span",{staticClass:"line-number"},[s._v("210")]),e("br"),e("span",{staticClass:"line-number"},[s._v("211")]),e("br"),e("span",{staticClass:"line-number"},[s._v("212")]),e("br"),e("span",{staticClass:"line-number"},[s._v("213")]),e("br"),e("span",{staticClass:"line-number"},[s._v("214")]),e("br"),e("span",{staticClass:"line-number"},[s._v("215")]),e("br"),e("span",{staticClass:"line-number"},[s._v("216")]),e("br"),e("span",{staticClass:"line-number"},[s._v("217")]),e("br"),e("span",{staticClass:"line-number"},[s._v("218")]),e("br"),e("span",{staticClass:"line-number"},[s._v("219")]),e("br"),e("span",{staticClass:"line-number"},[s._v("220")]),e("br"),e("span",{staticClass:"line-number"},[s._v("221")]),e("br"),e("span",{staticClass:"line-number"},[s._v("222")]),e("br"),e("span",{staticClass:"line-number"},[s._v("223")]),e("br"),e("span",{staticClass:"line-number"},[s._v("224")]),e("br"),e("span",{staticClass:"line-number"},[s._v("225")]),e("br"),e("span",{staticClass:"line-number"},[s._v("226")]),e("br"),e("span",{staticClass:"line-number"},[s._v("227")]),e("br"),e("span",{staticClass:"line-number"},[s._v("228")]),e("br"),e("span",{staticClass:"line-number"},[s._v("229")]),e("br"),e("span",{staticClass:"line-number"},[s._v("230")]),e("br"),e("span",{staticClass:"line-number"},[s._v("231")]),e("br"),e("span",{staticClass:"line-number"},[s._v("232")]),e("br"),e("span",{staticClass:"line-number"},[s._v("233")]),e("br"),e("span",{staticClass:"line-number"},[s._v("234")]),e("br"),e("span",{staticClass:"line-number"},[s._v("235")]),e("br"),e("span",{staticClass:"line-number"},[s._v("236")]),e("br"),e("span",{staticClass:"line-number"},[s._v("237")]),e("br"),e("span",{staticClass:"line-number"},[s._v("238")]),e("br"),e("span",{staticClass:"line-number"},[s._v("239")]),e("br"),e("span",{staticClass:"line-number"},[s._v("240")]),e("br"),e("span",{staticClass:"line-number"},[s._v("241")]),e("br"),e("span",{staticClass:"line-number"},[s._v("242")]),e("br"),e("span",{staticClass:"line-number"},[s._v("243")]),e("br"),e("span",{staticClass:"line-number"},[s._v("244")]),e("br"),e("span",{staticClass:"line-number"},[s._v("245")]),e("br"),e("span",{staticClass:"line-number"},[s._v("246")]),e("br"),e("span",{staticClass:"line-number"},[s._v("247")]),e("br"),e("span",{staticClass:"line-number"},[s._v("248")]),e("br"),e("span",{staticClass:"line-number"},[s._v("249")]),e("br"),e("span",{staticClass:"line-number"},[s._v("250")]),e("br"),e("span",{staticClass:"line-number"},[s._v("251")]),e("br"),e("span",{staticClass:"line-number"},[s._v("252")]),e("br"),e("span",{staticClass:"line-number"},[s._v("253")]),e("br"),e("span",{staticClass:"line-number"},[s._v("254")]),e("br"),e("span",{staticClass:"line-number"},[s._v("255")]),e("br"),e("span",{staticClass:"line-number"},[s._v("256")]),e("br"),e("span",{staticClass:"line-number"},[s._v("257")]),e("br"),e("span",{staticClass:"line-number"},[s._v("258")]),e("br"),e("span",{staticClass:"line-number"},[s._v("259")]),e("br"),e("span",{staticClass:"line-number"},[s._v("260")]),e("br"),e("span",{staticClass:"line-number"},[s._v("261")]),e("br"),e("span",{staticClass:"line-number"},[s._v("262")]),e("br"),e("span",{staticClass:"line-number"},[s._v("263")]),e("br"),e("span",{staticClass:"line-number"},[s._v("264")]),e("br"),e("span",{staticClass:"line-number"},[s._v("265")]),e("br"),e("span",{staticClass:"line-number"},[s._v("266")]),e("br"),e("span",{staticClass:"line-number"},[s._v("267")]),e("br"),e("span",{staticClass:"line-number"},[s._v("268")]),e("br"),e("span",{staticClass:"line-number"},[s._v("269")]),e("br"),e("span",{staticClass:"line-number"},[s._v("270")]),e("br"),e("span",{staticClass:"line-number"},[s._v("271")]),e("br"),e("span",{staticClass:"line-number"},[s._v("272")]),e("br"),e("span",{staticClass:"line-number"},[s._v("273")]),e("br"),e("span",{staticClass:"line-number"},[s._v("274")]),e("br"),e("span",{staticClass:"line-number"},[s._v("275")]),e("br"),e("span",{staticClass:"line-number"},[s._v("276")]),e("br"),e("span",{staticClass:"line-number"},[s._v("277")]),e("br"),e("span",{staticClass:"line-number"},[s._v("278")]),e("br"),e("span",{staticClass:"line-number"},[s._v("279")]),e("br"),e("span",{staticClass:"line-number"},[s._v("280")]),e("br"),e("span",{staticClass:"line-number"},[s._v("281")]),e("br"),e("span",{staticClass:"line-number"},[s._v("282")]),e("br"),e("span",{staticClass:"line-number"},[s._v("283")]),e("br"),e("span",{staticClass:"line-number"},[s._v("284")]),e("br"),e("span",{staticClass:"line-number"},[s._v("285")]),e("br"),e("span",{staticClass:"line-number"},[s._v("286")]),e("br"),e("span",{staticClass:"line-number"},[s._v("287")]),e("br"),e("span",{staticClass:"line-number"},[s._v("288")]),e("br"),e("span",{staticClass:"line-number"},[s._v("289")]),e("br"),e("span",{staticClass:"line-number"},[s._v("290")]),e("br"),e("span",{staticClass:"line-number"},[s._v("291")]),e("br"),e("span",{staticClass:"line-number"},[s._v("292")]),e("br"),e("span",{staticClass:"line-number"},[s._v("293")]),e("br"),e("span",{staticClass:"line-number"},[s._v("294")]),e("br"),e("span",{staticClass:"line-number"},[s._v("295")]),e("br"),e("span",{staticClass:"line-number"},[s._v("296")]),e("br"),e("span",{staticClass:"line-number"},[s._v("297")]),e("br"),e("span",{staticClass:"line-number"},[s._v("298")]),e("br"),e("span",{staticClass:"line-number"},[s._v("299")]),e("br"),e("span",{staticClass:"line-number"},[s._v("300")]),e("br"),e("span",{staticClass:"line-number"},[s._v("301")]),e("br"),e("span",{staticClass:"line-number"},[s._v("302")]),e("br"),e("span",{staticClass:"line-number"},[s._v("303")]),e("br"),e("span",{staticClass:"line-number"},[s._v("304")]),e("br"),e("span",{staticClass:"line-number"},[s._v("305")]),e("br"),e("span",{staticClass:"line-number"},[s._v("306")]),e("br"),e("span",{staticClass:"line-number"},[s._v("307")]),e("br"),e("span",{staticClass:"line-number"},[s._v("308")]),e("br"),e("span",{staticClass:"line-number"},[s._v("309")]),e("br"),e("span",{staticClass:"line-number"},[s._v("310")]),e("br"),e("span",{staticClass:"line-number"},[s._v("311")]),e("br"),e("span",{staticClass:"line-number"},[s._v("312")]),e("br"),e("span",{staticClass:"line-number"},[s._v("313")]),e("br"),e("span",{staticClass:"line-number"},[s._v("314")]),e("br"),e("span",{staticClass:"line-number"},[s._v("315")]),e("br"),e("span",{staticClass:"line-number"},[s._v("316")]),e("br"),e("span",{staticClass:"line-number"},[s._v("317")]),e("br"),e("span",{staticClass:"line-number"},[s._v("318")]),e("br"),e("span",{staticClass:"line-number"},[s._v("319")]),e("br"),e("span",{staticClass:"line-number"},[s._v("320")]),e("br"),e("span",{staticClass:"line-number"},[s._v("321")]),e("br"),e("span",{staticClass:"line-number"},[s._v("322")]),e("br"),e("span",{staticClass:"line-number"},[s._v("323")]),e("br"),e("span",{staticClass:"line-number"},[s._v("324")]),e("br"),e("span",{staticClass:"line-number"},[s._v("325")]),e("br"),e("span",{staticClass:"line-number"},[s._v("326")]),e("br"),e("span",{staticClass:"line-number"},[s._v("327")]),e("br"),e("span",{staticClass:"line-number"},[s._v("328")]),e("br"),e("span",{staticClass:"line-number"},[s._v("329")]),e("br"),e("span",{staticClass:"line-number"},[s._v("330")]),e("br"),e("span",{staticClass:"line-number"},[s._v("331")]),e("br"),e("span",{staticClass:"line-number"},[s._v("332")]),e("br"),e("span",{staticClass:"line-number"},[s._v("333")]),e("br"),e("span",{staticClass:"line-number"},[s._v("334")]),e("br"),e("span",{staticClass:"line-number"},[s._v("335")]),e("br"),e("span",{staticClass:"line-number"},[s._v("336")]),e("br"),e("span",{staticClass:"line-number"},[s._v("337")]),e("br"),e("span",{staticClass:"line-number"},[s._v("338")]),e("br"),e("span",{staticClass:"line-number"},[s._v("339")]),e("br"),e("span",{staticClass:"line-number"},[s._v("340")]),e("br"),e("span",{staticClass:"line-number"},[s._v("341")]),e("br"),e("span",{staticClass:"line-number"},[s._v("342")]),e("br"),e("span",{staticClass:"line-number"},[s._v("343")]),e("br"),e("span",{staticClass:"line-number"},[s._v("344")]),e("br"),e("span",{staticClass:"line-number"},[s._v("345")]),e("br"),e("span",{staticClass:"line-number"},[s._v("346")]),e("br"),e("span",{staticClass:"line-number"},[s._v("347")]),e("br")])]),e("p",[s._v("由源码可以看到， mybatis为我们实现了那么多TypeHandler, 随便打开一个TypeHandler，看其源码，都可以看到，它继承自一个抽象类：BaseTypeHandler， 那么我们是不是也能通过继承BaseTypeHandler，从而实现自定义的TypeHandler ? 答案是肯定的， 那么现在下面就为大家演示一下自定义TypeHandler。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('@MappedJdbcTypes(JdbcType.VARCHAR)  \n//此处如果不用注解指定jdbcType, 那么，就可以在配置文件中通过"jdbcType"属性指定， 同理， javaType 也可通过 @MappedTypes指定\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n    ps.setString(i, parameter);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n    return rs.getString(columnName);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n    return rs.getString(columnIndex);\n  }\n\n  @Override\n  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n    return cs.getString(columnIndex);\n  }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[s._v("然后，就该配置我们的自定义TypeHandler了：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<configuration>\n  <typeHandlers>\n      \x3c!-- 由于自定义的TypeHandler在定义时已经通过注解指定了jdbcType, 所以此处不用再配置jdbcType --\x3e\n      <typeHandler handler="ExampleTypeHandler"/>\n  </typeHandlers>\n  \n  ......\n  \n</configuration>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("也就是说，我们在自定义TypeHandler的时候，可以在TypeHandler通过@MappedJdbcTypes指定jdbcType, 通过 @MappedTypes 指定javaType, 如果没有使用注解指定，那么我们就需要在配置文件中配置。详细使用，请参见Mybatis类型转换介绍。")]),s._v(" "),e("h3",{attrs:{id:"元素5-objectfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素5-objectfactory"}},[s._v("#")]),s._v(" 元素5：objectFactory")]),s._v(" "),e("blockquote",[e("p",[s._v("objectFactory是干什么的？ 需要配置吗？")])]),s._v(" "),e("p",[s._v("MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。默认情况下，我们不需要配置，mybatis会调用默认实现的objectFactory。 除非我们要自定义ObjectFactory的实现， 那么我们才需要去手动配置。")]),s._v(" "),e("p",[s._v("那么怎么自定义实现ObjectFactory？ 怎么配置呢？自定义ObjectFactory只需要去继承DefaultObjectFactory（是ObjectFactory接口的实现类），并重写其方法即可。具体的，本处不多说，后面再具体讲解。")]),s._v(" "),e("p",[s._v("写好了ObjectFactory, 仅需做如下配置：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<configuration>\n    ......\n    <objectFactory type="org.mybatis.example.ExampleObjectFactory">\n        <property name="someProperty" value="100"/>\n    </objectFactory>\n    ......\n</configuration>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"元素6-plugins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素6-plugins"}},[s._v("#")]),s._v(" 元素6：plugins")]),s._v(" "),e("blockquote",[e("p",[s._v("plugin有何作用？ 需要配置吗？")])]),s._v(" "),e("p",[s._v("plugins 是一个可选配置。mybatis中的plugin其实就是个interceptor， 它可以拦截Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler 的部分方法，处理我们自己的逻辑。Executor就是真正执行sql语句的东西， ParameterHandler 是处理我们传入参数的，还记得前面讲TypeHandler的时候提到过，mybatis默认帮我们实现了不少的typeHandler, 当我们不显示配置typeHandler的时候，mybatis会根据参数类型自动选择合适的typeHandler执行，其实就是ParameterHandler 在选择。ResultSetHandler 就是处理返回结果的。")]),s._v(" "),e("p",[s._v("怎么自定义plugin ? 怎么配置？要自定义一个plugin, 需要去实现Interceptor接口，这儿不细说，后面实战部分会详细讲解。定义好之后，配置如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<configuration>\n    ......\n    <plugins>\n      <plugin interceptor="org.mybatis.example.ExamplePlugin">\n        <property name="someProperty" value="100"/>\n      </plugin>\n    </plugins>\n    ......\n</configuration>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"元素7-mappers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素7-mappers"}},[s._v("#")]),s._v(" 元素7：mappers")]),s._v(" "),e("blockquote",[e("p",[s._v("mappers, 这下引出mybatis的核心之一了，mappers作用 ? 需要配置吗？")])]),s._v(" "),e("p",[s._v("mappers 节点下，配置我们的mapper映射文件， 所谓的mapper映射文件，就是让mybatis 用来建立数据表和javabean映射的一个桥梁。在我们实际开发中，通常一个mapper文件对应一个dao接口， 这个mapper可以看做是dao的实现。所以,mappers必须配置。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<configuration>\n    ......\n    <mappers>\n        \x3c!-- 第一种方式：通过resource指定 --\x3e\n        <mapper resource="com/dy/dao/userDao.xml"/>\n    \n        \x3c!-- 第二种方式， 通过class指定接口，进而将接口与对应的xml文件形成映射关系\n             不过，使用这种方式必须保证 接口与mapper文件同名(不区分大小写)， \n             我这儿接口是UserDao,那么意味着mapper文件为UserDao.xml \n        <mapper class="com.dy.dao.UserDao"/>\n        --\x3e\n      \n        \x3c!-- 第三种方式，直接指定包，自动扫描，与方法二同理 \n        <package name="com.dy.dao"/>\n        --\x3e\n        \x3c!-- 第四种方式：通过url指定mapper文件位置\n        <mapper url="file://........"/>\n        --\x3e\n    </mappers>\n    ......\n</configuration>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("本篇仅作简单介绍，更高级的使用以及其实现原理，会在后面的实战部分进行详细讲解。")]),s._v(" "),e("h3",{attrs:{id:"解析方法-objectfactoryelement、pluginelement、mapperelement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析方法-objectfactoryelement、pluginelement、mapperelement"}},[s._v("#")]),s._v(" 解析方法：objectFactoryElement、pluginElement、mapperElement")]),s._v(" "),e("p",[s._v("以上几个节点的解析源码，与之前提到的那些节点的解析类似，故此处不再讲。 我将源码折叠， 需要的可以打开看看。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/**\n * objectFactory 节点解析\n */\nprivate void objectFactoryElement(XNode context) throws Exception {\n    if (context != null) {\n      //读取type属性的值， 接下来进行实例化ObjectFactory, 并set进 configuration\n      //到此，简单讲一下configuration这个对象，其实它里面主要保存的都是mybatis的配置\n      String type = context.getStringAttribute("type");\n      //读取propertie的值， 根据需要可以配置， mybatis默认实现的objectFactory没有使用properties\n      Properties properties = context.getChildrenAsProperties();\n      \n      ObjectFactory factory = (ObjectFactory) resolveClass(type).newInstance();\n      factory.setProperties(properties);\n      configuration.setObjectFactory(factory);\n    }\n }\n \n  \n  /**\n   * plugins 节点解析\n   */\n  private void pluginElement(XNode parent) throws Exception {\n    if (parent != null) {\n      for (XNode child : parent.getChildren()) {\n        String interceptor = child.getStringAttribute("interceptor");\n        Properties properties = child.getChildrenAsProperties();\n        //由此可见，我们在定义一个interceptor的时候，需要去实现Interceptor, 这儿先不具体讲，以后会详细讲解\n        Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).newInstance();\n        interceptorInstance.setProperties(properties);\n        configuration.addInterceptor(interceptorInstance);\n      }\n    }\n  }\n  \n  /**\n   * mappers 节点解析\n   * 这是mybatis的核心之一，这儿先简单介绍，在接下来的文章会对它进行分析\n   */\n  private void mapperElement(XNode parent) throws Exception {\n    if (parent != null) {\n      for (XNode child : parent.getChildren()) {\n        if ("package".equals(child.getName())) {\n          //如果mappers节点的子节点是package, 那么就扫描package下的文件, 注入进configuration\n          String mapperPackage = child.getStringAttribute("name");\n          configuration.addMappers(mapperPackage);\n        } else {\n          String resource = child.getStringAttribute("resource");\n          String url = child.getStringAttribute("url");\n          String mapperClass = child.getStringAttribute("class");\n          //resource, url, class 三选一\n          \n          if (resource != null && url == null && mapperClass == null) {\n            ErrorContext.instance().resource(resource);\n            InputStream inputStream = Resources.getResourceAsStream(resource);\n            //mapper映射文件都是通过XMLMapperBuilder解析\n            XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());\n            mapperParser.parse();\n          } else if (resource == null && url != null && mapperClass == null) {\n            ErrorContext.instance().resource(url);\n            InputStream inputStream = Resources.getUrlAsStream(url);\n            XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments());\n            mapperParser.parse();\n          } else if (resource == null && url == null && mapperClass != null) {\n            Class<?> mapperInterface = Resources.classForName(mapperClass);\n            configuration.addMapper(mapperInterface);\n          } else {\n            throw new BuilderException("A mapper element may only specify a url, resource or class, but not more than one.");\n          }\n        }\n      }\n    }\n  }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br")])]),e("h3",{attrs:{id:"元素8-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素8-settings"}},[s._v("#")]),s._v(" 元素8：settings")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<settings> \n    <setting name="cacheEnabled" value="true"/> \n    <setting name="lazyLoadingEnabled" value="true"/> \n    <setting name="multipleResultSetsEnabled" value="true"/> \n    <setting name="useColumnLabel" value="true"/> \n    <setting name="useGeneratedKeys" value="false"/> \n    <setting name="enhancementEnabled" value="false"/> \n    <setting name="defaultExecutorType" value="SIMPLE"/> \n    <setting name="defaultStatementTimeout" value="25000"/> \n</settings>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[s._v("setting节点里配置的值会直接改写Configuration对应的变量值，这些变量描述的是Mybatis的全局运行方式，如果对这些属性的含义不熟悉的话建议不要配置，使用默认值即可。")]),s._v(" "),e("p",[s._v("具体可以参考【官网的配置清单】，详解后文。")]),s._v(" "),e("h3",{attrs:{id:"解析方法-settingselement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解析方法-settingselement"}},[s._v("#")]),s._v(" 解析方法：settingsElement")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('private void settingsElement(XNode context) throws Exception {\n    if (context != null) {\n      Properties props = context.getChildrenAsProperties();\n      // Check that all settings are known to the configuration class\n      MetaClass metaConfig = MetaClass.forClass(Configuration.class);\n      for (Object key : props.keySet()) {\n        if (!metaConfig.hasSetter(String.valueOf(key))) {\n          throw new BuilderException("The setting " + key + " is not known.  Make sure you spelled it correctly (case sensitive).");\n        }\n      }\n      configuration.setAutoMappingBehavior(AutoMappingBehavior.valueOf(props.getProperty("autoMappingBehavior", "PARTIAL")));\n      configuration.setCacheEnabled(booleanValueOf(props.getProperty("cacheEnabled"), true));\n      configuration.setProxyFactory((ProxyFactory) createInstance(props.getProperty("proxyFactory")));\n      configuration.setLazyLoadingEnabled(booleanValueOf(props.getProperty("lazyLoadingEnabled"), false));\n      configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty("aggressiveLazyLoading"), true));\n      configuration.setMultipleResultSetsEnabled(booleanValueOf(props.getProperty("multipleResultSetsEnabled"), true));\n      configuration.setUseColumnLabel(booleanValueOf(props.getProperty("useColumnLabel"), true));\n      configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty("useGeneratedKeys"), false));\n      configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty("defaultExecutorType", "SIMPLE")));\n      configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));\n      configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));\n      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), false));\n      configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope", "SESSION")));\n      configuration.setJdbcTypeForNull(JdbcType.valueOf(props.getProperty("jdbcTypeForNull", "OTHER")));\n      configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));\n      configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));\n      configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));\n      configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));\n      configuration.setLogPrefix(props.getProperty("logPrefix"));\n      configuration.setLogImpl(resolveClass(props.getProperty("logImpl")));\n      configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));\n    }\n}\n```)')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);