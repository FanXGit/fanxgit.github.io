(window.webpackJsonp=window.webpackJsonp||[]).push([[405],{3556:function(n,s,t){"use strict";t.r(s);var a=t(7),e=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"java-io-源码-outputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-io-源码-outputstream"}},[n._v("#")]),n._v(" Java IO - 源码: OutputStream")]),n._v(" "),s("p",[n._v("========================================================")]),n._v(" "),s("blockquote",[s("p",[n._v("本文主要从JDK 11源码角度分析 OutputStream。 @pdai")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#java-io---%E6%BA%90%E7%A0%81-outputstream"}},[n._v("Java IO - 源码: OutputStream")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB"}},[n._v("OutputStream 类实现关系")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB"}},[n._v("OutputStream 抽象类")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0"}},[n._v("源码实现")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#outputstream"}},[n._v("OutputStream")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#filteroutputstream"}},[n._v("FilterOutputStream")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#bytearrayoutputstream"}},[n._v("ByteArrayOutputStream")])]),n._v(" "),s("li",[s("a",{attrs:{href:"#bufferedoutputstream"}},[n._v("BufferedOutputStream")])])])]),n._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"}},[n._v("参考文章")])])])])]),n._v(" "),s("h2",{attrs:{id:"outputstream-类实现关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#outputstream-类实现关系"}},[n._v("#")]),n._v(" OutputStream 类实现关系")]),n._v(" "),s("hr"),n._v(" "),s("blockquote",[s("p",[n._v("OutputStream是输出字节流，具体的实现类层次结构如下：")])]),n._v(" "),s("p",[s("img",{attrs:{src:t(581),alt:""}})]),n._v(" "),s("h2",{attrs:{id:"outputstream-抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#outputstream-抽象类"}},[n._v("#")]),n._v(" OutputStream 抽象类")]),n._v(" "),s("hr"),n._v(" "),s("p",[n._v("OutputStream 类重要方法设计如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。\npublic abstract void write(int b)\n\n// 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法。\npublic void write(byte b[])\n\n// 将 byte 数组从 off 位置开始，len 长度的字节写入\npublic void write(byte b[], int off, int len)\n\n// 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖\npublic void flush()\n\n// 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖\npublic void close() \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("h2",{attrs:{id:"源码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码实现"}},[n._v("#")]),n._v(" 源码实现")]),n._v(" "),s("hr"),n._v(" "),s("blockquote",[s("p",[n._v("梳理部分OutputStream及其实现类的源码分析。")])]),n._v(" "),s("h3",{attrs:{id:"outputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#outputstream"}},[n._v("#")]),n._v(" OutputStream")]),n._v(" "),s("p",[n._v("OutputStream抽象类源码如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public abstract class OutputStream implements Closeable, Flushable {\n    \n    // JDK11中增加了一个nullOutputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）\n    public static OutputStream nullOutputStream() {\n        return new OutputStream() {\n            private volatile boolean closed;\n\n            private void ensureOpen() throws IOException {\n                if (closed) {\n                    throw new IOException("Stream closed");\n                }\n            }\n\n            @Override\n            public void write(int b) throws IOException {\n                ensureOpen();\n            }\n\n            @Override\n            public void write(byte b[], int off, int len) throws IOException {\n                Objects.checkFromIndexSize(off, len, b.length);\n                ensureOpen();\n            }\n\n            @Override\n            public void close() {\n                closed = true;\n            }\n        };\n    }\n\n    // 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。\n    public abstract void write(int b) throws IOException;\n\n    // 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法\n    public void write(byte b[]) throws IOException {\n        write(b, 0, b.length);\n    }\n\n    // 将 byte 数组从 off 位置开始，len 长度的字节写入\n    public void write(byte b[], int off, int len) throws IOException {\n        // 检查边界合理性\n        Objects.checkFromIndexSize(off, len, b.length);\n        // len == 0 的情况已经在如下的for循环中隐式处理了\n        for (int i = 0 ; i < len ; i++) {\n            write(b[off + i]);\n        }\n    }\n\n    // 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖\n    public void flush() throws IOException {\n    }\n\n    // 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖\n    public void close() throws IOException {\n    }\n\n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br")])]),s("blockquote",[s("p",[n._v("补充下JDK11为什么会增加nullOutputStream方法的设计？即空对象模式")])]),n._v(" "),s("ul",[s("li",[s("strong",[n._v("空对象模式")])])]),n._v(" "),s("p",[n._v("举个例子：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class MyParser implements Parser {\n  private static Action NO_ACTION = new Action() {\n    public void doSomething() { /* do nothing */ }\n  };\n\n  public Action findAction(String userInput) {\n    // ...\n    if ( /* we can't find any actions */ ) {\n      return NO_ACTION;\n    }\n  }\n} \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p",[n._v("然后便"),s("strong",[n._v("可以始终可以这么调用，而不用再判断空了")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("ParserFactory.getParser().findAction(someInput).doSomething(); \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("h3",{attrs:{id:"filteroutputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filteroutputstream"}},[n._v("#")]),n._v(" FilterOutputStream")]),n._v(" "),s("p",[n._v("FilterOutputStream 源码如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class FilterOutputStream extends OutputStream {\n    \n    // 被装饰的实际outputStream\n    protected OutputStream out;\n\n    // 当前stream是否已经被close\n    private volatile boolean closed;\n\n    // close stream时加锁，防止其它线程同时close\n    private final Object closeLock = new Object();\n\n    // 初始化构造函数，传入被装饰的实际outputStream\n    public FilterOutputStream(OutputStream out) {\n        this.out = out;\n    }\n\n    // 写入数据，本质调用被装饰outputStream的方法\n    @Override\n    public void write(int b) throws IOException {\n        out.write(b);\n    }\n\n    // 将数组中的所有字节写入\n    @Override\n    public void write(byte b[]) throws IOException {\n        write(b, 0, b.length);\n    }\n\n    // 一个个写入\n    @Override\n    public void write(byte b[], int off, int len) throws IOException {\n        if ((off | len | (b.length - (len + off)) | (off + len)) < 0)\n            throw new IndexOutOfBoundsException();\n\n        for (int i = 0 ; i < len ; i++) {\n            write(b[off + i]);\n        }\n    }\n\n     // 强制刷新，将缓冲中的数据写入; 本质调用被装饰outputStream的方法\n    @Override\n    public void flush() throws IOException {\n        out.flush();\n    }\n\n    // 关闭Stream\n    @Override\n    public void close() throws IOException {\n        // 如果已经close, 直接退出\n        if (closed) {\n            return;\n        }\n        // 加锁处理，如果已经有线程正在closing则退出；\n        synchronized (closeLock) {\n            if (closed) {\n                return;\n            }\n            closed = true;\n        }\n\n        // close前调用flush\n        Throwable flushException = null;\n        try {\n            flush();\n        } catch (Throwable e) {\n            flushException = e;\n            throw e;\n        } finally {\n            if (flushException == null) {\n                out.close();\n            } else {\n                try {\n                    out.close();\n                } catch (Throwable closeException) {\n                   // evaluate possible precedence of flushException over closeException\n                   if ((flushException instanceof ThreadDeath) &&\n                       !(closeException instanceof ThreadDeath)) {\n                       flushException.addSuppressed(closeException);\n                       throw (ThreadDeath) flushException;\n                   }\n\n                    if (flushException != closeException) {\n                        closeException.addSuppressed(flushException);\n                    }\n\n                    throw closeException;\n                }\n            }\n        }\n    }\n} \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br")])]),s("p",[n._v("@pdai: 对比下JDK8中，close方法是没有加锁处理的。这种情况下你可以看JDK8源码中，直接利用java7的try with resources方式，优雅的调用flush方法后对out进行关闭。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public void close() throws IOException {\n    try (OutputStream ostream = out) {\n        flush();\n    }\n} \n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("h3",{attrs:{id:"bytearrayoutputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bytearrayoutputstream"}},[n._v("#")]),n._v(" ByteArrayOutputStream")]),n._v(" "),s("p",[n._v("ByteArrayOutputStream 源码如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class ByteArrayOutputStream extends OutputStream {\n\n    // 实际的byte数组\n    protected byte buf[];\n\n    // 数组中实际有效的byte的个数\n    protected int count;\n\n    // 初始化默认构造，初始化byte数组大小为32\n    public ByteArrayOutputStream() {\n        this(32);\n    }\n\n    // 初始化byte的大小\n    public ByteArrayOutputStream(int size) {\n        if (size < 0) {\n            throw new IllegalArgumentException("Negative initial size: "\n                                               + size);\n        }\n        buf = new byte[size];\n    }\n\n    // 扩容，确保它至少可以容纳由最小容量参数指定的元素数\n    private void ensureCapacity(int minCapacity) {\n        // overflow-conscious code\n        if (minCapacity - buf.length > 0)\n            grow(minCapacity);\n    }\n\n    // 分配的最大数组大小。\n    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    // 扩容的实质方法，确保它至少可以容纳由最小容量参数指定的元素数\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = buf.length;\n        int newCapacity = oldCapacity << 1;\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        buf = Arrays.copyOf(buf, newCapacity);\n    }\n\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n\n    // 写入，写入前确保byte数据长度\n    public synchronized void write(int b) {\n        ensureCapacity(count + 1);\n        buf[count] = (byte) b;\n        count += 1;\n    }\n\n    \n    public synchronized void write(byte b[], int off, int len) {\n        Objects.checkFromIndexSize(off, len, b.length);\n        ensureCapacity(count + len);\n        System.arraycopy(b, off, buf, count, len);\n        count += len;\n    }\n\n    public void writeBytes(byte b[]) {\n        write(b, 0, b.length);\n    }\n\n    public synchronized void writeTo(OutputStream out) throws IOException {\n        out.write(buf, 0, count);\n    }\n\n    // 重置，显然将实际有效的byte数量置为0\n    public synchronized void reset() {\n        count = 0;\n    }\n\n    \n    public synchronized byte[] toByteArray() {\n        return Arrays.copyOf(buf, count);\n    }\n\n    // 长度，即count\n    public synchronized int size() {\n        return count;\n    }\n\n    // 转成string\n    public synchronized String toString() {\n        return new String(buf, 0, count);\n    }\n\n    // 转成string，指定的字符集\n    public synchronized String toString(String charsetName)\n        throws UnsupportedEncodingException\n    {\n        return new String(buf, 0, count, charsetName);\n    }\n\n    public synchronized String toString(Charset charset) {\n        return new String(buf, 0, count, charset);\n    }\n\n    // 弃用\n    @Deprecated\n    public synchronized String toString(int hibyte) {\n        return new String(buf, hibyte, 0, count);\n    }\n\n    // 对byte 数组而言，close没啥实质意义，所以空实现\n    public void close() throws IOException {\n    }\n\n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br"),s("span",{staticClass:"line-number"},[n._v("108")]),s("br"),s("span",{staticClass:"line-number"},[n._v("109")]),s("br"),s("span",{staticClass:"line-number"},[n._v("110")]),s("br"),s("span",{staticClass:"line-number"},[n._v("111")]),s("br"),s("span",{staticClass:"line-number"},[n._v("112")]),s("br"),s("span",{staticClass:"line-number"},[n._v("113")]),s("br"),s("span",{staticClass:"line-number"},[n._v("114")]),s("br"),s("span",{staticClass:"line-number"},[n._v("115")]),s("br"),s("span",{staticClass:"line-number"},[n._v("116")]),s("br"),s("span",{staticClass:"line-number"},[n._v("117")]),s("br"),s("span",{staticClass:"line-number"},[n._v("118")]),s("br")])]),s("h3",{attrs:{id:"bufferedoutputstream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bufferedoutputstream"}},[n._v("#")]),n._v(" BufferedOutputStream")]),n._v(" "),s("p",[n._v("BufferedOutputStream 源码如下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class BufferedOutputStream extends FilterOutputStream {\n    \n    // Buffered outputStream底层也是byte数组\n    protected byte buf[];\n\n    // 大小，buf[0]到buf[count-1]是实际存储的bytes\n    protected int count;\n\n    // 构造函数，被装饰的outputStream，以及默认buf大小是8192\n    public BufferedOutputStream(OutputStream out) {\n        this(out, 8192);\n    }\n\n    public BufferedOutputStream(OutputStream out, int size) {\n        super(out);\n        if (size <= 0) {\n            throw new IllegalArgumentException("Buffer size <= 0");\n        }\n        buf = new byte[size];\n    }\n\n    /** Flush the internal buffer */\n    // 内部的flush方法，将buffer中的有效bytes(count是有效的bytes大小)通过被装饰的outputStream写入\n    private void flushBuffer() throws IOException {\n        if (count > 0) {\n            out.write(buf, 0, count);\n            count = 0;\n        }\n    }\n\n    // 写入byte\n    @Override\n    public synchronized void write(int b) throws IOException {\n        // 当buffer满了以后，flush buffer\n        if (count >= buf.length) {\n            flushBuffer();\n        }\n        buf[count++] = (byte)b;\n    }\n\n    // 将 byte 数组从 off 位置开始，len 长度的字节写入\n    @Override\n    public synchronized void write(byte b[], int off, int len) throws IOException {\n        if (len >= buf.length) {\n            // 如果请求长度已经超过输出缓冲区的大小，直接刷新输出缓冲区，然后直接写入数据。\n            flushBuffer();\n            out.write(b, off, len);\n            return;\n        }\n        if (len > buf.length - count) {\n            flushBuffer();\n        }\n        System.arraycopy(b, off, buf, count, len);\n        count += len;\n    }\n\n    // flush方法，需要先将buffer中写入，最后在调用被装饰outputStream的flush方法\n    @Override\n    public synchronized void flush() throws IOException {\n        flushBuffer();\n        out.flush();\n    }\n} \n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br")])]),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" 参考文章")]),n._v(" "),s("hr"),n._v(" "),s("ul",[s("li",[n._v("JDK 11")])])])}),[],!1,null,null,null);s.default=e.exports},581:function(n,s,t){n.exports=t.p+"assets/img/io-outputstream-1.8439da5e.png"}}]);